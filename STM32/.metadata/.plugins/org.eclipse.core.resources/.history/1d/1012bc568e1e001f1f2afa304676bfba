/*
 * unitree_go.cpp
 *
 *  Created on: May 21, 2024
 *      Author: 23877
 */

#include "unitree_go.h"
#include "bsp.h"
#include "usbd_cdc_if.h"

#define GO_REDUCTION_RATIO 6.33f

GO_motor* GO_Motor_Create(GO_config config) {
	GO_motor *obj = (GO_motor*) malloc(sizeof(GO_motor));
	memset(obj, 0, sizeof(GO_motor));

	obj->config = config;
	GO_Motor_SetCmd(obj, GO_MODE_POS, 0, 0, 0);

	return obj;
}

void GO_Motor_SetCmd(GO_motor *obj, GO_ctrl_mode mode, float T, float W, float Pos) {
	switch (mode) {
		case GO_MODE_STOP:
			obj->cmd.mode = BRAKE;
			obj->cmd.K_P = 0;
			obj->cmd.K_W = 0;
			obj->cmd.T = 0;
			obj->cmd.W = 0;
			obj->cmd.Pos = 0;
			break;
		case GO_MODE_T:
			obj->cmd.mode = FOC;
			obj->cmd.K_P = 0;
			obj->cmd.K_W = 0;
			obj->cmd.T = T;
			obj->cmd.W = 0;
			obj->cmd.Pos = 0;
			break;
		case GO_MODE_W:
			obj->cmd.mode = FOC;
			obj->cmd.K_P = 0;
			obj->cmd.K_W = 0.02;
			obj->cmd.T = 0;
			obj->cmd.W = W * GO_REDUCTION_RATIO * obj->config.dir;
			obj->cmd.Pos = 0;
			break;
		case GO_MODE_POS:
			obj->cmd.mode = FOC;
			obj->cmd.K_P = 0.6;
			obj->cmd.K_W = 0.1;
			obj->cmd.T = 0;
			obj->cmd.W = 0;
			obj->cmd.Pos = obj->zero_pos + Pos * GO_REDUCTION_RATIO * obj->config.dir;
			break;
		case GO_MODE_HB:
			obj->cmd.mode = FOC;
			obj->cmd.K_P = 1.5;
			obj->cmd.K_W = 0.05;
			obj->cmd.T = T;
			obj->cmd.W = W * GO_REDUCTION_RATIO * obj->config.dir;
			obj->cmd.Pos = obj->zero_pos + Pos * GO_REDUCTION_RATIO * obj->config.dir;
		default:
			break;
	}
}

void GO_Motor_RecvData_Process(GO_motor *obj, uint8_t *data, uint8_t len) {
	if (len != sizeof(obj->rx_data))
		return;

	obj->last_rx_data = obj->rx_data;
	// header
	obj->rx_data.head[0] = data[0];
	obj->rx_data.head[1] = data[1];
	// mode
	obj->rx_data.mode.id = data[3] & 0x0F;	// 取低4位
	obj->rx_data.mode.status = (data[3] >> 4) & 0x07; // 取接下来的3位
	obj->rx_data.mode.none = (data[3] >> 7) & 0x01;  // 取最高位
	// feedback data
	obj->rx_data.fbk.torque = ((int16_t) data[4] | (uint16_t) data[5] << 8) / 256;
	obj->rx_data.fbk.speed = ((int16_t) data[6] | (uint16_t) data[7] << 8) * 2 * M_PI / 256;
	obj->rx_data.fbk.pos = ((int32_t) (data[8] | (((uint32_t) data[9]) << 8) | (((uint32_t) data[10]) << 16)
	        | (((uint32_t) data[11]) << 24))) * 2 * M_PI / 32768;
	obj->rx_data.fbk.temp = data[12];
	uint16_t combined = (uint16_t) data[13] | ((uint16_t) data[14] << 8);
	obj->rx_data.fbk.MError = combined & 0x07;	// 取最低的3位
	obj->rx_data.fbk.force = (combined >> 3) & 0xFFF; // 取接下来的12位
	obj->rx_data.fbk.none = (combined >> 15) & 0x01; // 取最高的1位
	// CRC data
	obj->rx_data.CRC16 = (uint16_t) data[15] | ((uint16_t) data[16] << 8);
	obj->update = true;
	bool crc_result = false;
	if (obj->rx_data.CRC16 == crc_ccitt(0, (uint8_t*) &obj->rx_data, 14))
		crc_result = true;
	else
		crc_result = false;
	if (crc_result && obj->update)
		obj->correct = true;
	else
		obj->correct = false;

	if ((obj->rx_data.fbk.pos - obj->last_rx_data.fbk.pos) > 512 * M_PI)
		--obj->round_cnt;
	if ((obj->rx_data.fbk.pos - obj->last_rx_data.fbk.pos) < -512 * M_PI)
		++obj->round_cnt;

	obj->cur_angle = obj->rx_data.fbk.pos + obj->round_cnt * 1024 * M_PI;
	obj->cur_speed = obj->rx_data.fbk.speed;
}

void GO_Motor_Send(GO_motor *obj) {
	// Header
	obj->tx_data.head[0] = 0XFE;
	obj->tx_data.head[1] = 0xEE;
	// Mode
	obj->tx_data.mode.id = obj->config.id;
	obj->tx_data.mode.status = obj->cmd.mode;
	obj->tx_data.mode.none = 0;
	// Command
	obj->tx_data.comd.tor_des = (int16_t) (obj->cmd.T * 256);
	obj->tx_data.comd.spd_des = (int16_t) (obj->cmd.W * 128 / M_PI);
	obj->tx_data.comd.pos_des = (int32_t) (obj->cmd.Pos * 16384 / M_PI);
	obj->tx_data.comd.k_pos = (uint16_t) (obj->cmd.K_P * 1280);
	obj->tx_data.comd.k_spd = (uint16_t) (obj->cmd.K_W * 1280);
	// CRC Data
	obj->tx_data.CRC16 = crc_ccitt(0, (uint8_t*) &obj->tx_data, 15);

	uint8_t tx_buf[17];
	memcpy(tx_buf, &obj->tx_data, sizeof(tx_buf));

	obj->update = false;
//	RS485_Send_DMA(obj->config.rs485_ind, tx_buf, sizeof(tx_buf));
	RS485_Send(obj->config.rs485_ind, tx_buf, sizeof(tx_buf), 100);
	CDC_Transmit_FS((uint8_t*) tx_buf, sizeof(tx_buf));
}

/*
 * This mysterious table is just the CRC of each possible byte. It can be
 * computed using the standard bit-at-a-time methods. The polynomial can
 * be seen in entry 128, 0x8408. This corresponds to x^0 + x^5 + x^12.
 * Add the implicit x^16, and you have the standard CRC-CCITT.
 * https://github.com/torvalds/linux/blob/5bfc75d92efd494db37f5c4c173d3639d4772966/lib/crc-ccitt.c
 */
const uint16_t crc_ccitt_table[256] = { 0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf, 0x8c48, 0x9dc1,
        0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7, 0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
        0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876, 0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af,
        0x4434, 0x55bd, 0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5, 0x3183, 0x200a, 0x1291, 0x0318,
        0x77a7, 0x662e, 0x54b5, 0x453c, 0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974, 0x4204, 0x538d,
        0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb, 0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
        0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a, 0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960,
        0xbbfb, 0xaa72, 0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9, 0xef4e, 0xfec7, 0xcc5c, 0xddd5,
        0xa96a, 0xb8e3, 0x8a78, 0x9bf1, 0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738, 0xffcf, 0xee46,
        0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70, 0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
        0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff, 0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324,
        0xf1bf, 0xe036, 0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e, 0xa50a, 0xb483, 0x8618, 0x9791,
        0xe32e, 0xf2a7, 0xc03c, 0xd1b5, 0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd, 0xb58b, 0xa402,
        0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134, 0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
        0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3, 0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9,
        0x2f72, 0x3efb, 0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232, 0x5ac5, 0x4b4c, 0x79d7, 0x685e,
        0x1ce1, 0x0d68, 0x3ff3, 0x2e7a, 0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1, 0x6b46, 0x7acf,
        0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9, 0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
        0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78 };

static uint16_t crc_ccitt_byte(uint16_t crc, const uint8_t c) {
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
}

/**
 *	crc_ccitt - recompute the CRC (CRC-CCITT variant) for the data
 *	buffer
 *	@crc: previous CRC value
 *	@buffer: data pointer
 *	@len: number of bytes in the buffer
 */
uint16_t crc_ccitt(uint16_t crc, uint8_t const *buffer, size_t len) {
	while (len--)
		crc = crc_ccitt_byte(crc, *buffer++);
	return crc;
}

