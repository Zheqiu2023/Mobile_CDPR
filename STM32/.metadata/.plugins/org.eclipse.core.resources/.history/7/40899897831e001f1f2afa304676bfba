/*
 * unitree_go.cpp
 *
 *  Created on: May 21, 2024
 *      Author: 23877
 */

#include "unitree_go.h"
#include "bsp.h"

#define GO_REDUCTION_RATIO 6.33f

GO_motor* GO_Motor_Create(GO_config config) {
	GO_motor *obj = (GO_motor*) malloc(sizeof(GO_motor));
	memset(obj, 0, sizeof(GO_motor));

	obj->config = config;
	GO_Motor_SetCmd(obj, GO_MODE_POS, 0, 0, 0);

	return obj;
}

void GO_Motor_SetCmd(GO_motor *obj, GO_ctrl_mode mode, float T, float W, float Pos) {
	switch (mode) {
		case GO_MODE_STOP:
			obj->cmd.mode = BRAKE;
			obj->cmd.K_P = 0;
			obj->cmd.K_W = 0;
			obj->cmd.T = 0;
			obj->cmd.W = 0;
			obj->cmd.Pos = 0;
			break;
		case GO_MODE_T:
			obj->cmd.mode = FOC;
			obj->cmd.K_P = 0;
			obj->cmd.K_W = 0;
			obj->cmd.T = T;
			obj->cmd.W = 0;
			obj->cmd.Pos = 0;
			break;
		case GO_MODE_W:
			obj->cmd.mode = FOC;
			obj->cmd.K_P = 0;
			obj->cmd.K_W = 0.02;
			obj->cmd.T = 0;
			obj->cmd.W = W * GO_REDUCTION_RATIO * obj->config.dir;
			obj->cmd.Pos = 0;
			break;
		case GO_MODE_POS:
			obj->cmd.mode = FOC;
			obj->cmd.K_P = 0.6;
			obj->cmd.K_W = 0.1;
			obj->cmd.T = 0;
			obj->cmd.W = 0;
			obj->cmd.Pos = obj->zero_pos + Pos * GO_REDUCTION_RATIO * obj->config.dir;
			break;
		case GO_MODE_HB:
			obj->cmd.mode = FOC;
			obj->cmd.K_P = 1.5;
			obj->cmd.K_W = 0.05;
			obj->cmd.T = T;
			obj->cmd.W = W * GO_REDUCTION_RATIO * obj->config.dir;
			obj->cmd.Pos = obj->zero_pos + Pos * GO_REDUCTION_RATIO * obj->config.dir;
		default:
			break;
	}
}

void GO_Motor_RecvData_Process(GO_motor *obj, uint8_t *data, uint8_t len) {
	if (len != sizeof(obj->rx_data))
		return;

	obj->last_rx_data = obj->rx_data;
	// header
	obj->rx_data.head[0] = data[0];
	obj->rx_data.head[1] = data[1];
	// mode
	obj->rx_data.mode.id = data[3] & 0x0F;	// 取低4位
	obj->rx_data.mode.status = (data[3] >> 4) & 0x07; // 取接下来的3位
	obj->rx_data.mode.none = (data[3] >> 7) & 0x01;  // 取最高位
	// feedback data
	obj->rx_data.fbk.torque = ((int16_t) data[4] | (uint16_t) data[5] << 8) / 256;
	obj->rx_data.fbk.speed = ((int16_t) data[6] | (uint16_t) data[7] << 8) * 2 * M_PI / 256;
	obj->rx_data.fbk.pos = ((int32_t) (data[8] | (((uint32_t) data[9]) << 8) | (((uint32_t) data[10]) << 16)
	        | (((uint32_t) data[11]) << 24))) * 2 * M_PI / 32768;
	obj->rx_data.fbk.temp = data[12];
	uint16_t combined = (uint16_t) data[13] | ((uint16_t) data[14] << 8);
	obj->rx_data.fbk.MError = combined & 0x07;	// 取最低的3位
	obj->rx_data.fbk.force = (combined >> 3) & 0xFFF; // 取接下来的12位
	obj->rx_data.fbk.none = (combined >> 15) & 0x01; // 取最高的1位
	// CRC data
	obj->rx_data.CRC16 = (uint16_t) data[15] | ((uint16_t) data[16] << 8);
	obj->update = true;
	bool crc_result = false;
	if (obj->rx_data.CRC16 == crc_ccitt(0, (uint8_t*) &obj->rx_data, 14))
		crc_result = true;
	else
		crc_result = false;
	if (crc_result && obj->update)
		obj->correct = true;
	else
		obj->correct = false;

	if ((obj->rx_data.fbk.pos - obj->last_rx_data.fbk.pos) > 512 * M_PI)
		--obj->round_cnt;
	if ((obj->rx_data.fbk.pos - obj->last_rx_data.fbk.pos) < -512 * M_PI)
		++obj->round_cnt;

	obj->cur_angle = obj->rx_data.fbk.pos + obj->round_cnt * 1024 * M_PI;
	obj->cur_speed = obj->rx_data.fbk.speed;
}

void GO_Motor_Send(GO_motor *obj) {
	// Header
	obj->tx_data.head[0] = 0XFE;
	obj->tx_data.head[1] = 0xEE;
	// Mode
	obj->tx_data.mode.id = obj->config.id;
	obj->tx_data.mode.status = obj->cmd.mode;
	obj->tx_data.mode.none = 0;
	// Command
	obj->tx_data.comd.tor_des = (int16_t) (obj->cmd.T * 256);
	obj->tx_data.comd.spd_des = (int16_t) (obj->cmd.W * 128 / M_PI);
	obj->tx_data.comd.pos_des = (int32_t) (obj->cmd.Pos * 16384 / M_PI);
	obj->tx_data.comd.k_pos = (uint16_t) (obj->cmd.K_P * 1280);
	obj->tx_data.comd.k_spd = (uint16_t) (obj->cmd.K_W * 1280);
	// CRC Data
	obj->tx_data.CRC16 = crc_ccitt(0, (uint8_t*) &obj->tx_data, 15);

	uint8_t tx_buf[17];
	memcpy(tx_buf, &obj->tx_data, sizeof(tx_buf));

	obj->update = false;
	RS485_Send_DMA(obj->config.rs485_ind, tx_buf, sizeof(tx_buf));
	CDC_Transmit_FS((uint8_t*) tx_buf, sizeof(tx_buf));
}

static uint16_t crc_ccitt_byte(uint16_t crc, const uint8_t c) {
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
}

/**
 *	crc_ccitt - recompute the CRC (CRC-CCITT variant) for the data
 *	buffer
 *	@crc: previous CRC value
 *	@buffer: data pointer
 *	@len: number of bytes in the buffer
 */
uint16_t crc_ccitt(uint16_t crc, uint8_t const *buffer, size_t len) {
	while (len--)
		crc = crc_ccitt_byte(crc, *buffer++);
	return crc;
}
