/*
 * CDC_msg.h
 *
 *  Created on: May 30, 2024
 *      Author: 23877
 */

#ifndef CDC_MSG_H_
#define CDC_MSG_H_

#include <string.h>

enum CmdMode {
	M,  // 电机模式选择指令
	J,  // 点动指令
	T   // 轨迹指令
};

#pragma pack(1)
typedef struct {
	bool start;
	unsigned char motor_mode;
	float vel;
	float pos;

	// 将结构体转换为char数组
	void MotorCmd_toCharArray(char *buffer, size_t size) {
		if (size < sizeof(*this)) {
			return;
		}
		memcpy(buffer, this, sizeof(*this));
	}

	// 从char数组转换回结构体
	static MotorCmd MotorCmd_fromCharArray(const char *data) {
		MotorCmd cmd;
		memcpy(&cmd, data.data(), sizeof(MotorCmd));
		return cmd;
	}
} MotorCmd;
#pragma pack()

enum NewCmd {
	CABLE, ARCHOR, GO, A1
};

#pragma pack(1)
typedef struct {
	unsigned char cmd_mode;
	unsigned char new_cmd;
	MotorCmd cable_cmd;
	MotorCmd archor_cmd;
	MotorCmd go_cmd;
	MotorCmd a1_cmd;

	// 将结构体转换为char数组
	void CmdMsg_toCharArray(const struct CmdMsg *msg, char *buffer, size_t size) {
	    if (size < sizeof(*msg))
			return;

	    memcpy(buffer, msg, sizeof(*msg));
	}

	// 从char数组转换回结构体
	static CmdMsg CmdMsg_fromCharArray(const char *data) {
		CmdMsg msg;
		memcpy(&msg, data.data(), sizeof(CmdMsg));
		return msg;
	}
} CmdMsg;
#pragma pack()

enum LocalTrajType {
	EMPTY1, UPDOWN, LINE, CIRCLE
};

enum GlobalTrajType {
	EMPTY2, NO_OBS, OBS
};

#pragma pack(1)
typedef struct {
	unsigned char cmd_mode;
	bool start;
	unsigned char cdpr_traj;
	unsigned char chassis_traj;
	float period;

	// 将结构体转换为char数组
	void TrajMsg_toCharArray(char *buffer, size_t size) {
		if (size < sizeof(*this)) {
			return;
		}
		memcpy(buffer, this, sizeof(*this));
	}

	// 从char数组转换回结构体
	static TrajMsg_TrajMsg fromCharArray(const char *data) {
		TrajMsg msg;
		memcpy(&msg, data, sizeof(TrajMsg));
		return msg;
	}
} TrajMsg;
#pragma pack()

#endif /* CDC_MSG_H_ */
