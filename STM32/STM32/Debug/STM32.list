
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ff0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  080121c0  080121c0  000131c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012874  08012874  000142e0  2**0
                  CONTENTS
  4 .ARM          00000008  08012874  08012874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801287c  0801287c  000142e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801287c  0801287c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012880  08012880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e0  20000000  08012884  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023a0  200002e0  08012b64  000142e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002680  08012b64  00014680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a68  00000000  00000000  00014310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000628f  00000000  00000000  0003bd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e50  00000000  00000000  00042008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001742  00000000  00000000  00043e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a458  00000000  00000000  0004559a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b6f9  00000000  00000000  0006f9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3c19  00000000  00000000  0009b0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017ed04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009160  00000000  00000000  0017ed48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00187ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002e0 	.word	0x200002e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080121a8 	.word	0x080121a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002e4 	.word	0x200002e4
 800020c:	080121a8 	.word	0x080121a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <MX_CAN1_Init+0x64>)
 800102a:	4a18      	ldr	r2, [pc, #96]	@ (800108c <MX_CAN1_Init+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800102e:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001030:	2206      	movs	r2, #6
 8001032:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800103a:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <MX_CAN1_Init+0x64>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001042:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001046:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_CAN1_Init+0x64>)
 800104a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800104e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001050:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <MX_CAN1_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <MX_CAN1_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001076:	f000 fe5d 	bl	8001d34 <HAL_CAN_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001080:	f000 fa15 	bl	80014ae <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200002fc 	.word	0x200002fc
 800108c:	40006400 	.word	0x40006400

08001090 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	@ 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001124 <HAL_CAN_MspInit+0x94>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d134      	bne.n	800111c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <HAL_CAN_MspInit+0x98>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001128 <HAL_CAN_MspInit+0x98>)
 80010bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c2:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <HAL_CAN_MspInit+0x98>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_CAN_MspInit+0x98>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a14      	ldr	r2, [pc, #80]	@ (8001128 <HAL_CAN_MspInit+0x98>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <HAL_CAN_MspInit+0x98>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010fc:	2309      	movs	r3, #9
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	4809      	ldr	r0, [pc, #36]	@ (800112c <HAL_CAN_MspInit+0x9c>)
 8001108:	f002 f960 	bl	80033cc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2105      	movs	r1, #5
 8001110:	2014      	movs	r0, #20
 8001112:	f001 fd2f 	bl	8002b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001116:	2014      	movs	r0, #20
 8001118:	f001 fd48 	bl	8002bac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	@ 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40006400 	.word	0x40006400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020400 	.word	0x40020400

08001130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_DMA_Init+0x88>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a1e      	ldr	r2, [pc, #120]	@ (80011b8 <MX_DMA_Init+0x88>)
 8001140:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_DMA_Init+0x88>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <MX_DMA_Init+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <MX_DMA_Init+0x88>)
 800115c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <MX_DMA_Init+0x88>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2105      	movs	r1, #5
 8001172:	2010      	movs	r0, #16
 8001174:	f001 fcfe 	bl	8002b74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001178:	2010      	movs	r0, #16
 800117a:	f001 fd17 	bl	8002bac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2105      	movs	r1, #5
 8001182:	2011      	movs	r0, #17
 8001184:	f001 fcf6 	bl	8002b74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001188:	2011      	movs	r0, #17
 800118a:	f001 fd0f 	bl	8002bac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2105      	movs	r1, #5
 8001192:	203a      	movs	r0, #58	@ 0x3a
 8001194:	f001 fcee 	bl	8002b74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001198:	203a      	movs	r0, #58	@ 0x3a
 800119a:	f001 fd07 	bl	8002bac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2105      	movs	r1, #5
 80011a2:	2046      	movs	r0, #70	@ 0x46
 80011a4:	f001 fce6 	bl	8002b74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80011a8:	2046      	movs	r0, #70	@ 0x46
 80011aa:	f001 fcff 	bl	8002bac <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <CDC_Process_Recv_Data>:
osMessageQId JogCmdQueueHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
/* 虚拟串口接收数据处理函数 */
void CDC_Process_Recv_Data(uint8_t *data, uint32_t Len) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b090      	sub	sp, #64	@ 0x40
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
 80011c6:	2301      	movs	r3, #1
 80011c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	switch (data[0]) {
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	dc02      	bgt.n	80011d8 <CDC_Process_Recv_Data+0x1c>
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	da03      	bge.n	80011de <CDC_Process_Recv_Data+0x22>
		case T:	// 轨迹
			TrajMsg temp2 = TrajMsg_fromCharArray(data, Len);
			osMessagePut(TrajCmdQueueHandle, (uint32_t)&temp2, 0);
			break;
		default:
			break;
 80011d6:	e02e      	b.n	8001236 <CDC_Process_Recv_Data+0x7a>
	switch (data[0]) {
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d01b      	beq.n	8001214 <CDC_Process_Recv_Data+0x58>
			break;
 80011dc:	e02b      	b.n	8001236 <CDC_Process_Recv_Data+0x7a>
			CmdMsg temp1 = CmdMsg_fromCharArray(data, Len);
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00b fc88 	bl	800cafc <CmdMsg_fromCharArray>
			osMessagePut(JogCmdQueueHandle, (uint32_t)&temp1, 0);
 80011ec:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <CDC_Process_Recv_Data+0x84>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f107 0108 	add.w	r1, r7, #8
 80011f4:	2200      	movs	r2, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f009 fe4c 	bl	800ae94 <osMessagePut>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80011fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d018      	beq.n	8001234 <CDC_Process_Recv_Data+0x78>
 8001202:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <CDC_Process_Recv_Data+0x88>)
 8001204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	f3bf 8f4f 	dsb	sy
 800120e:	f3bf 8f6f 	isb	sy
			break;
 8001212:	e00f      	b.n	8001234 <CDC_Process_Recv_Data+0x78>
			TrajMsg temp2 = TrajMsg_fromCharArray(data, Len);
 8001214:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	f00b fccc 	bl	800cbba <TrajMsg_fromCharArray>
			osMessagePut(TrajCmdQueueHandle, (uint32_t)&temp2, 0);
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <CDC_Process_Recv_Data+0x8c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800122a:	2200      	movs	r2, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f009 fe31 	bl	800ae94 <osMessagePut>
			break;
 8001232:	e000      	b.n	8001236 <CDC_Process_Recv_Data+0x7a>
			break;
 8001234:	bf00      	nop
	}
}
 8001236:	bf00      	nop
 8001238:	3740      	adds	r7, #64	@ 0x40
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000328 	.word	0x20000328
 8001244:	e000ed04 	.word	0xe000ed04
 8001248:	20000324 	.word	0x20000324

0800124c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	@ 0x28
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <MX_GPIO_Init+0xec>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a33      	ldr	r2, [pc, #204]	@ (8001338 <MX_GPIO_Init+0xec>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b31      	ldr	r3, [pc, #196]	@ (8001338 <MX_GPIO_Init+0xec>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <MX_GPIO_Init+0xec>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a2c      	ldr	r2, [pc, #176]	@ (8001338 <MX_GPIO_Init+0xec>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b2a      	ldr	r3, [pc, #168]	@ (8001338 <MX_GPIO_Init+0xec>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <MX_GPIO_Init+0xec>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a25      	ldr	r2, [pc, #148]	@ (8001338 <MX_GPIO_Init+0xec>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <MX_GPIO_Init+0xec>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <MX_GPIO_Init+0xec>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a1e      	ldr	r2, [pc, #120]	@ (8001338 <MX_GPIO_Init+0xec>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <MX_GPIO_Init+0xec>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER1_Pin|POWER2_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f242 0110 	movw	r1, #8208	@ 0x2010
 80012d8:	4818      	ldr	r0, [pc, #96]	@ (800133c <MX_GPIO_Init+0xf0>)
 80012da:	f002 fa0b 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS485_DIR1_Pin|LED_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80012e4:	4815      	ldr	r0, [pc, #84]	@ (800133c <MX_GPIO_Init+0xf0>)
 80012e6:	f002 fa05 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DIR2_GPIO_Port, RS485_DIR2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2108      	movs	r1, #8
 80012ee:	4814      	ldr	r0, [pc, #80]	@ (8001340 <MX_GPIO_Init+0xf4>)
 80012f0:	f002 fa00 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = POWER1_Pin|RS485_DIR1_Pin|LED_Pin|POWER2_Pin;
 80012f4:	f24a 0311 	movw	r3, #40977	@ 0xa011
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	480b      	ldr	r0, [pc, #44]	@ (800133c <MX_GPIO_Init+0xf0>)
 800130e:	f002 f85d 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_DIR2_Pin;
 8001312:	2308      	movs	r3, #8
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_DIR2_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_GPIO_Init+0xf4>)
 800132a:	f002 f84f 	bl	80033cc <HAL_GPIO_Init>

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	@ 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	40020800 	.word	0x40020800
 8001340:	40020400 	.word	0x40020400

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001348:	f000 fc8e 	bl	8001c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134c:	f000 f834 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001350:	f7ff ff7c 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 8001354:	f7ff feec 	bl	8001130 <MX_DMA_Init>
  MX_CAN1_Init();
 8001358:	f7ff fe64 	bl	8001024 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800135c:	f000 faa8 	bl	80018b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001360:	f000 fad2 	bl	8001908 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8001364:	f00a fde4 	bl	800bf30 <MX_USB_DEVICE_Init>
	CAN_Filter_Init();
 8001368:	f00b fdaa 	bl	800cec0 <CAN_Filter_Init>
	BSP_Init();
 800136c:	f00b fc96 	bl	800cc9c <BSP_Init>
	Board_Init();
 8001370:	f00b fc4c 	bl	800cc0c <Board_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		GO_Motor_SetCmd(board.steer_motor, GO_MODE_W, 0, -2, 0);
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <main+0x68>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 80013b0 <main+0x6c>
 800137c:	eef8 0a00 	vmov.f32	s1, #128	@ 0xc0000000 -2.0
 8001380:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80013b0 <main+0x6c>
 8001384:	2102      	movs	r1, #2
 8001386:	4618      	mov	r0, r3
 8001388:	f00c f8bc 	bl	800d504 <GO_Motor_SetCmd>
		GO_Motor_Send(board.steer_motor);
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <main+0x68>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	4618      	mov	r0, r3
 8001392:	f00c fa65 	bl	800d860 <GO_Motor_Send>
//		A1_Motor_SetCmd(board.roll_motor, A1_MODE_W, 0, 1, 0);
//		A1_Motor_Send(board.roll_motor);

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001396:	2101      	movs	r1, #1
 8001398:	4806      	ldr	r0, [pc, #24]	@ (80013b4 <main+0x70>)
 800139a:	f002 f9c4 	bl	8003726 <HAL_GPIO_TogglePin>

		HAL_Delay(500);
 800139e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013a2:	f000 fca3 	bl	8001cec <HAL_Delay>
		GO_Motor_SetCmd(board.steer_motor, GO_MODE_W, 0, -2, 0);
 80013a6:	bf00      	nop
 80013a8:	e7e4      	b.n	8001374 <main+0x30>
 80013aa:	bf00      	nop
 80013ac:	2000225c 	.word	0x2000225c
 80013b0:	00000000 	.word	0x00000000
 80013b4:	40020800 	.word	0x40020800

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	@ 0x50
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	2234      	movs	r2, #52	@ 0x34
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00e fab1 	bl	800f92e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	4b29      	ldr	r3, [pc, #164]	@ (8001488 <SystemClock_Config+0xd0>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	4a28      	ldr	r2, [pc, #160]	@ (8001488 <SystemClock_Config+0xd0>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ec:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <SystemClock_Config+0xd0>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f8:	2300      	movs	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	4b23      	ldr	r3, [pc, #140]	@ (800148c <SystemClock_Config+0xd4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a22      	ldr	r2, [pc, #136]	@ (800148c <SystemClock_Config+0xd4>)
 8001402:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b20      	ldr	r3, [pc, #128]	@ (800148c <SystemClock_Config+0xd4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001414:	2301      	movs	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001418:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800141c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141e:	2302      	movs	r3, #2
 8001420:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001422:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001426:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001428:	230c      	movs	r3, #12
 800142a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800142c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001430:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001432:	2302      	movs	r3, #2
 8001434:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001436:	2307      	movs	r3, #7
 8001438:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800143a:	2302      	movs	r3, #2
 800143c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4618      	mov	r0, r3
 8001444:	f004 fa46 	bl	80058d4 <HAL_RCC_OscConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800144e:	f000 f82e 	bl	80014ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001452:	230f      	movs	r3, #15
 8001454:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001456:	2302      	movs	r3, #2
 8001458:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800145e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001462:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001468:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	2105      	movs	r1, #5
 8001470:	4618      	mov	r0, r3
 8001472:	f003 fc0f 	bl	8004c94 <HAL_RCC_ClockConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800147c:	f000 f817 	bl	80014ae <Error_Handler>
  }
}
 8001480:	bf00      	nop
 8001482:	3750      	adds	r7, #80	@ 0x50
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	40007000 	.word	0x40007000

08001490 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014a0:	d101      	bne.n	80014a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014a2:	f000 fc03 	bl	8001cac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b2:	b672      	cpsid	i
}
 80014b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014b6:	bf00      	nop
 80014b8:	e7fd      	b.n	80014b6 <Error_Handler+0x8>
	...

080014bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_MspInit+0x54>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a11      	ldr	r2, [pc, #68]	@ (8001510 <HAL_MspInit+0x54>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <HAL_MspInit+0x54>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <HAL_MspInit+0x54>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <HAL_MspInit+0x54>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <HAL_MspInit+0x54>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	210f      	movs	r1, #15
 80014fe:	f06f 0001 	mvn.w	r0, #1
 8001502:	f001 fb37 	bl	8002b74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800

08001514 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	@ 0x38
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4b34      	ldr	r3, [pc, #208]	@ (80015fc <HAL_InitTick+0xe8>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	4a33      	ldr	r2, [pc, #204]	@ (80015fc <HAL_InitTick+0xe8>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6413      	str	r3, [r2, #64]	@ 0x40
 8001534:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <HAL_InitTick+0xe8>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001540:	f107 0210 	add.w	r2, r7, #16
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fcbc 	bl	8004ec8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001556:	2b00      	cmp	r3, #0
 8001558:	d103      	bne.n	8001562 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800155a:	f003 fc8d 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 800155e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001560:	e004      	b.n	800156c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001562:	f003 fc89 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 8001566:	4603      	mov	r3, r0
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800156c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800156e:	4a24      	ldr	r2, [pc, #144]	@ (8001600 <HAL_InitTick+0xec>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	0c9b      	lsrs	r3, r3, #18
 8001576:	3b01      	subs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800157a:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <HAL_InitTick+0xf0>)
 800157c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001580:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_InitTick+0xf0>)
 8001584:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001588:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800158a:	4a1e      	ldr	r2, [pc, #120]	@ (8001604 <HAL_InitTick+0xf0>)
 800158c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001590:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <HAL_InitTick+0xf0>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_InitTick+0xf0>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_InitTick+0xf0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80015a2:	4818      	ldr	r0, [pc, #96]	@ (8001604 <HAL_InitTick+0xf0>)
 80015a4:	f004 fc34 	bl	8005e10 <HAL_TIM_Base_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d11b      	bne.n	80015ee <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80015b6:	4813      	ldr	r0, [pc, #76]	@ (8001604 <HAL_InitTick+0xf0>)
 80015b8:	f004 fc84 	bl	8005ec4 <HAL_TIM_Base_Start_IT>
 80015bc:	4603      	mov	r3, r0
 80015be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d111      	bne.n	80015ee <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ca:	201c      	movs	r0, #28
 80015cc:	f001 faee 	bl	8002bac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	d808      	bhi.n	80015e8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80015d6:	2200      	movs	r2, #0
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	201c      	movs	r0, #28
 80015dc:	f001 faca 	bl	8002b74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015e0:	4a09      	ldr	r2, [pc, #36]	@ (8001608 <HAL_InitTick+0xf4>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e002      	b.n	80015ee <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3738      	adds	r7, #56	@ 0x38
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	431bde83 	.word	0x431bde83
 8001604:	2000032c 	.word	0x2000032c
 8001608:	20000004 	.word	0x20000004

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <NMI_Handler+0x4>

08001614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <MemManage_Handler+0x4>

08001624 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <UsageFault_Handler+0x4>

08001634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <DMA1_Stream5_IRQHandler+0x10>)
 800164a:	f001 fc55 	bl	8002ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200004c8 	.word	0x200004c8

08001658 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <DMA1_Stream6_IRQHandler+0x10>)
 800165e:	f001 fc4b 	bl	8002ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000528 	.word	0x20000528

0800166c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <CAN1_RX0_IRQHandler+0x10>)
 8001672:	f000 ff97 	bl	80025a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200002fc 	.word	0x200002fc

08001680 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <TIM2_IRQHandler+0x10>)
 8001686:	f004 fc8d 	bl	8005fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000032c 	.word	0x2000032c

08001694 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001698:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <USART1_IRQHandler+0x14>)
 800169a:	f004 ffbf 	bl	800661c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	USER_UART_IRQHandler(&huart1);
 800169e:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <USART1_IRQHandler+0x14>)
 80016a0:	f00b fbbe 	bl	800ce20 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000378 	.word	0x20000378

080016ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016b0:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <USART2_IRQHandler+0x14>)
 80016b2:	f004 ffb3 	bl	800661c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	USER_UART_IRQHandler(&huart2);
 80016b6:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <USART2_IRQHandler+0x14>)
 80016b8:	f00b fbb2 	bl	800ce20 <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200003c0 	.word	0x200003c0

080016c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <DMA2_Stream2_IRQHandler+0x10>)
 80016ca:	f001 fc15 	bl	8002ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000408 	.word	0x20000408

080016d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <OTG_FS_IRQHandler+0x10>)
 80016de:	f002 f987 	bl	80039f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20001b58 	.word	0x20001b58

080016ec <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <DMA2_Stream7_IRQHandler+0x10>)
 80016f2:	f001 fc01 	bl	8002ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000468 	.word	0x20000468

08001700 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	return 1;
 8001704:	2301      	movs	r3, #1
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_kill>:

int _kill(int pid, int sig) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 800171a:	f00e f97d 	bl	800fa18 <__errno>
 800171e:	4603      	mov	r3, r0
 8001720:	2216      	movs	r2, #22
 8001722:	601a      	str	r2, [r3, #0]
	return -1;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_exit>:

void _exit(int status) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ffe7 	bl	8001710 <_kill>
	while (1) {
 8001742:	bf00      	nop
 8001744:	e7fd      	b.n	8001742 <_exit+0x12>

08001746 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e00a      	b.n	800176e <_read+0x28>
		*ptr++ = __io_getchar();
 8001758:	f3af 8000 	nop.w
 800175c:	4601      	mov	r1, r0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	60ba      	str	r2, [r7, #8]
 8001764:	b2ca      	uxtb	r2, r1
 8001766:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3301      	adds	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	dbf0      	blt.n	8001758 <_read+0x12>
	}

	return len;
 8001776:	687b      	ldr	r3, [r7, #4]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e009      	b.n	80017a6 <_write+0x26>
		__io_putchar(*ptr++);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	60ba      	str	r2, [r7, #8]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3301      	adds	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dbf1      	blt.n	8001792 <_write+0x12>
	}
	return len;
 80017ae:	687b      	ldr	r3, [r7, #4]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_close>:

int _close(int file) {
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_fstat>:

int _fstat(int file, struct stat *st) {
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e0:	605a      	str	r2, [r3, #4]
	return 0;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_isatty>:

int _isatty(int file) {
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80017f8:	2301      	movs	r3, #1
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001806:	b480      	push	{r7}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	@ (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001834:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
		errno = ENOMEM;
 8001850:	f00e f8e2 	bl	800fa18 <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20020000 	.word	0x20020000
 8001880:	00000800 	.word	0x00000800
 8001884:	20000374 	.word	0x20000374
 8001888:	20002680 	.word	0x20002680

0800188c <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <MX_USART1_UART_Init+0x50>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800000;
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018bc:	4a11      	ldr	r2, [pc, #68]	@ (8001904 <MX_USART1_UART_Init+0x54>)
 80018be:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c6:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018d4:	220c      	movs	r2, #12
 80018d6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80018de:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	@ (80018fc <MX_USART1_UART_Init+0x4c>)
 80018e8:	f004 fd34 	bl	8006354 <HAL_UART_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018f2:	f7ff fddc 	bl	80014ae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000378 	.word	0x20000378
 8001900:	40011000 	.word	0x40011000
 8001904:	00493e00 	.word	0x00493e00

08001908 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 800190e:	4a12      	ldr	r2, [pc, #72]	@ (8001958 <MX_USART2_UART_Init+0x50>)
 8001910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 3818181;
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001914:	4a11      	ldr	r2, [pc, #68]	@ (800195c <MX_USART2_UART_Init+0x54>)
 8001916:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001918:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800191e:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 800192c:	220c      	movs	r2, #12
 800192e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001936:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001938:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800193c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001940:	f004 fd08 	bl	8006354 <HAL_UART_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800194a:	f7ff fdb0 	bl	80014ae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200003c0 	.word	0x200003c0
 8001958:	40004400 	.word	0x40004400
 800195c:	003a42c5 	.word	0x003a42c5

08001960 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08c      	sub	sp, #48	@ 0x30
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a99      	ldr	r2, [pc, #612]	@ (8001be4 <HAL_UART_MspInit+0x284>)
 800197e:	4293      	cmp	r3, r2
 8001980:	f040 8094 	bne.w	8001aac <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	4b97      	ldr	r3, [pc, #604]	@ (8001be8 <HAL_UART_MspInit+0x288>)
 800198a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198c:	4a96      	ldr	r2, [pc, #600]	@ (8001be8 <HAL_UART_MspInit+0x288>)
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	6453      	str	r3, [r2, #68]	@ 0x44
 8001994:	4b94      	ldr	r3, [pc, #592]	@ (8001be8 <HAL_UART_MspInit+0x288>)
 8001996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	4b90      	ldr	r3, [pc, #576]	@ (8001be8 <HAL_UART_MspInit+0x288>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a8:	4a8f      	ldr	r2, [pc, #572]	@ (8001be8 <HAL_UART_MspInit+0x288>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b0:	4b8d      	ldr	r3, [pc, #564]	@ (8001be8 <HAL_UART_MspInit+0x288>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ca:	2303      	movs	r3, #3
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019ce:	2307      	movs	r3, #7
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	4884      	ldr	r0, [pc, #528]	@ (8001bec <HAL_UART_MspInit+0x28c>)
 80019da:	f001 fcf7 	bl	80033cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80019de:	4b84      	ldr	r3, [pc, #528]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 80019e0:	4a84      	ldr	r2, [pc, #528]	@ (8001bf4 <HAL_UART_MspInit+0x294>)
 80019e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80019e4:	4b82      	ldr	r3, [pc, #520]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 80019e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ec:	4b80      	ldr	r3, [pc, #512]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019f8:	4b7d      	ldr	r3, [pc, #500]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 80019fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a00:	4b7b      	ldr	r3, [pc, #492]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a06:	4b7a      	ldr	r3, [pc, #488]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a0c:	4b78      	ldr	r3, [pc, #480]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a12:	4b77      	ldr	r3, [pc, #476]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 8001a14:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a18:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a1a:	4b75      	ldr	r3, [pc, #468]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a20:	4873      	ldr	r0, [pc, #460]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 8001a22:	f001 f8d1 	bl	8002bc8 <HAL_DMA_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001a2c:	f7ff fd3f 	bl	80014ae <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a6f      	ldr	r2, [pc, #444]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 8001a34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a36:	4a6e      	ldr	r2, [pc, #440]	@ (8001bf0 <HAL_UART_MspInit+0x290>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001a3c:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a3e:	4a6f      	ldr	r2, [pc, #444]	@ (8001bfc <HAL_UART_MspInit+0x29c>)
 8001a40:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001a42:	4b6d      	ldr	r3, [pc, #436]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a48:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a4c:	2240      	movs	r2, #64	@ 0x40
 8001a4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a50:	4b69      	ldr	r3, [pc, #420]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a56:	4b68      	ldr	r3, [pc, #416]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a5e:	4b66      	ldr	r3, [pc, #408]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a64:	4b64      	ldr	r3, [pc, #400]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a6a:	4b63      	ldr	r3, [pc, #396]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a70:	4b61      	ldr	r3, [pc, #388]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a72:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a76:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a78:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a7e:	485e      	ldr	r0, [pc, #376]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a80:	f001 f8a2 	bl	8002bc8 <HAL_DMA_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001a8a:	f7ff fd10 	bl	80014ae <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a59      	ldr	r2, [pc, #356]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a92:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a94:	4a58      	ldr	r2, [pc, #352]	@ (8001bf8 <HAL_UART_MspInit+0x298>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2105      	movs	r1, #5
 8001a9e:	2025      	movs	r0, #37	@ 0x25
 8001aa0:	f001 f868 	bl	8002b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aa4:	2025      	movs	r0, #37	@ 0x25
 8001aa6:	f001 f881 	bl	8002bac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001aaa:	e097      	b.n	8001bdc <HAL_UART_MspInit+0x27c>
  else if(uartHandle->Instance==USART2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a53      	ldr	r2, [pc, #332]	@ (8001c00 <HAL_UART_MspInit+0x2a0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	f040 8092 	bne.w	8001bdc <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	4b4a      	ldr	r3, [pc, #296]	@ (8001be8 <HAL_UART_MspInit+0x288>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	4a49      	ldr	r2, [pc, #292]	@ (8001be8 <HAL_UART_MspInit+0x288>)
 8001ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac8:	4b47      	ldr	r3, [pc, #284]	@ (8001be8 <HAL_UART_MspInit+0x288>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	4b43      	ldr	r3, [pc, #268]	@ (8001be8 <HAL_UART_MspInit+0x288>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001adc:	4a42      	ldr	r2, [pc, #264]	@ (8001be8 <HAL_UART_MspInit+0x288>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae4:	4b40      	ldr	r3, [pc, #256]	@ (8001be8 <HAL_UART_MspInit+0x288>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001af0:	230c      	movs	r3, #12
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b00:	2307      	movs	r3, #7
 8001b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4838      	ldr	r0, [pc, #224]	@ (8001bec <HAL_UART_MspInit+0x28c>)
 8001b0c:	f001 fc5e 	bl	80033cc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b10:	4b3c      	ldr	r3, [pc, #240]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b12:	4a3d      	ldr	r2, [pc, #244]	@ (8001c08 <HAL_UART_MspInit+0x2a8>)
 8001b14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b16:	4b3b      	ldr	r3, [pc, #236]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b18:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b1e:	4b39      	ldr	r3, [pc, #228]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b24:	4b37      	ldr	r3, [pc, #220]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2a:	4b36      	ldr	r3, [pc, #216]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b30:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b32:	4b34      	ldr	r3, [pc, #208]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b38:	4b32      	ldr	r3, [pc, #200]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b3e:	4b31      	ldr	r3, [pc, #196]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b44:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b46:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b4a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b52:	482c      	ldr	r0, [pc, #176]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b54:	f001 f838 	bl	8002bc8 <HAL_DMA_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8001b5e:	f7ff fca6 	bl	80014ae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a27      	ldr	r2, [pc, #156]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b68:	4a26      	ldr	r2, [pc, #152]	@ (8001c04 <HAL_UART_MspInit+0x2a4>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001b6e:	4b27      	ldr	r3, [pc, #156]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001b70:	4a27      	ldr	r2, [pc, #156]	@ (8001c10 <HAL_UART_MspInit+0x2b0>)
 8001b72:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001b74:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001b76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b7c:	4b23      	ldr	r3, [pc, #140]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001b7e:	2240      	movs	r2, #64	@ 0x40
 8001b80:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b82:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b88:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b90:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b96:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001ba4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ba8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001baa:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001bb0:	4816      	ldr	r0, [pc, #88]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001bb2:	f001 f809 	bl	8002bc8 <HAL_DMA_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8001bbc:	f7ff fc77 	bl	80014ae <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001bc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bc6:	4a11      	ldr	r2, [pc, #68]	@ (8001c0c <HAL_UART_MspInit+0x2ac>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2105      	movs	r1, #5
 8001bd0:	2026      	movs	r0, #38	@ 0x26
 8001bd2:	f000 ffcf 	bl	8002b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bd6:	2026      	movs	r0, #38	@ 0x26
 8001bd8:	f000 ffe8 	bl	8002bac <HAL_NVIC_EnableIRQ>
}
 8001bdc:	bf00      	nop
 8001bde:	3730      	adds	r7, #48	@ 0x30
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40011000 	.word	0x40011000
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	20000408 	.word	0x20000408
 8001bf4:	40026440 	.word	0x40026440
 8001bf8:	20000468 	.word	0x20000468
 8001bfc:	400264b8 	.word	0x400264b8
 8001c00:	40004400 	.word	0x40004400
 8001c04:	200004c8 	.word	0x200004c8
 8001c08:	40026088 	.word	0x40026088
 8001c0c:	20000528 	.word	0x20000528
 8001c10:	400260a0 	.word	0x400260a0

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c18:	480d      	ldr	r0, [pc, #52]	@ (8001c50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c1a:	490e      	ldr	r1, [pc, #56]	@ (8001c54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001c58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c30:	4c0b      	ldr	r4, [pc, #44]	@ (8001c60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c3e:	f7ff fe25 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f00d feef 	bl	800fa24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7ff fb7d 	bl	8001344 <main>
  bx  lr    
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8001c58:	08012884 	.word	0x08012884
  ldr r2, =_sbss
 8001c5c:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8001c60:	20002680 	.word	0x20002680

08001c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>
	...

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca8 <HAL_Init+0x40>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <HAL_Init+0x40>)
 8001c7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <HAL_Init+0x40>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 ff64 	bl	8002b5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	200f      	movs	r0, #15
 8001c98:	f7ff fc3c 	bl	8001514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9c:	f7ff fc0e 	bl	80014bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_IncTick+0x20>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_IncTick+0x24>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a04      	ldr	r2, [pc, #16]	@ (8001cd0 <HAL_IncTick+0x24>)
 8001cbe:	6013      	str	r3, [r2, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	20000588 	.word	0x20000588

08001cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <HAL_GetTick+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000588 	.word	0x20000588

08001cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff ffee 	bl	8001cd4 <HAL_GetTick>
 8001cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d005      	beq.n	8001d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_Delay+0x44>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d12:	bf00      	nop
 8001d14:	f7ff ffde 	bl	8001cd4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d8f7      	bhi.n	8001d14 <HAL_Delay+0x28>
  {
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000008 	.word	0x20000008

08001d34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0ed      	b.n	8001f22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff f99c 	bl	8001090 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d68:	f7ff ffb4 	bl	8001cd4 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d6e:	e012      	b.n	8001d96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d70:	f7ff ffb0 	bl	8001cd4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b0a      	cmp	r3, #10
 8001d7c:	d90b      	bls.n	8001d96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0c5      	b.n	8001f22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0e5      	beq.n	8001d70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0202 	bic.w	r2, r2, #2
 8001db2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001db4:	f7ff ff8e 	bl	8001cd4 <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dba:	e012      	b.n	8001de2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dbc:	f7ff ff8a 	bl	8001cd4 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b0a      	cmp	r3, #10
 8001dc8:	d90b      	bls.n	8001de2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2205      	movs	r2, #5
 8001dda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e09f      	b.n	8001f22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1e5      	bne.n	8001dbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7e1b      	ldrb	r3, [r3, #24]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d108      	bne.n	8001e0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e007      	b.n	8001e1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7e5b      	ldrb	r3, [r3, #25]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d108      	bne.n	8001e34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7e9b      	ldrb	r3, [r3, #26]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d108      	bne.n	8001e5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0220 	orr.w	r2, r2, #32
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e007      	b.n	8001e6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0220 	bic.w	r2, r2, #32
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7edb      	ldrb	r3, [r3, #27]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d108      	bne.n	8001e88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0210 	bic.w	r2, r2, #16
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	e007      	b.n	8001e98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0210 	orr.w	r2, r2, #16
 8001e96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7f1b      	ldrb	r3, [r3, #28]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d108      	bne.n	8001eb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0208 	orr.w	r2, r2, #8
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e007      	b.n	8001ec2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0208 	bic.w	r2, r2, #8
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7f5b      	ldrb	r3, [r3, #29]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d108      	bne.n	8001edc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0204 	orr.w	r2, r2, #4
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e007      	b.n	8001eec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0204 	bic.w	r2, r2, #4
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	ea42 0103 	orr.w	r1, r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	1e5a      	subs	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f42:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d003      	beq.n	8001f52 <HAL_CAN_ConfigFilter+0x26>
 8001f4a:	7cfb      	ldrb	r3, [r7, #19]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	f040 80be 	bne.w	80020ce <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f52:	4b65      	ldr	r3, [pc, #404]	@ (80020e8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f54:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f6c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	431a      	orrs	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	2201      	movs	r2, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d123      	bne.n	8001ffc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fd6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3248      	adds	r2, #72	@ 0x48
 8001fdc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ff0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ff2:	6979      	ldr	r1, [r7, #20]
 8001ff4:	3348      	adds	r3, #72	@ 0x48
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d122      	bne.n	800204a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	431a      	orrs	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002024:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3248      	adds	r2, #72	@ 0x48
 800202a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800203e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002040:	6979      	ldr	r1, [r7, #20]
 8002042:	3348      	adds	r3, #72	@ 0x48
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43db      	mvns	r3, r3
 800205c:	401a      	ands	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002064:	e007      	b.n	8002076 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	431a      	orrs	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	43db      	mvns	r3, r3
 8002088:	401a      	ands	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002090:	e007      	b.n	80020a2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	431a      	orrs	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020c0:	f023 0201 	bic.w	r2, r3, #1
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e006      	b.n	80020dc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
  }
}
 80020dc:	4618      	mov	r0, r3
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40006400 	.word	0x40006400

080020ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d12e      	bne.n	800215e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002118:	f7ff fddc 	bl	8001cd4 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800211e:	e012      	b.n	8002146 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002120:	f7ff fdd8 	bl	8001cd4 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b0a      	cmp	r3, #10
 800212c:	d90b      	bls.n	8002146 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2205      	movs	r2, #5
 800213e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e012      	b.n	800216c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e5      	bne.n	8002120 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e006      	b.n	800216c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002162:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
  }
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	@ 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002188:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002192:	7ffb      	ldrb	r3, [r7, #31]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d003      	beq.n	80021a0 <HAL_CAN_AddTxMessage+0x2c>
 8002198:	7ffb      	ldrb	r3, [r7, #31]
 800219a:	2b02      	cmp	r3, #2
 800219c:	f040 80ad 	bne.w	80022fa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8095 	beq.w	80022ea <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	0e1b      	lsrs	r3, r3, #24
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021ca:	2201      	movs	r2, #1
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10d      	bne.n	80021f8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	6809      	ldr	r1, [r1, #0]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3318      	adds	r3, #24
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	440b      	add	r3, r1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e00f      	b.n	8002218 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002202:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002208:	68f9      	ldr	r1, [r7, #12]
 800220a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800220c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3318      	adds	r3, #24
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	440b      	add	r3, r1
 8002216:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6819      	ldr	r1, [r3, #0]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3318      	adds	r3, #24
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	440b      	add	r3, r1
 8002228:	3304      	adds	r3, #4
 800222a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	7d1b      	ldrb	r3, [r3, #20]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d111      	bne.n	8002258 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3318      	adds	r3, #24
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	4413      	add	r3, r2
 8002240:	3304      	adds	r3, #4
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	6811      	ldr	r1, [r2, #0]
 8002248:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3318      	adds	r3, #24
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	440b      	add	r3, r1
 8002254:	3304      	adds	r3, #4
 8002256:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3307      	adds	r3, #7
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	061a      	lsls	r2, r3, #24
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3306      	adds	r3, #6
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	041b      	lsls	r3, r3, #16
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3305      	adds	r3, #5
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	4313      	orrs	r3, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	3204      	adds	r2, #4
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	4610      	mov	r0, r2
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	6811      	ldr	r1, [r2, #0]
 8002280:	ea43 0200 	orr.w	r2, r3, r0
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	440b      	add	r3, r1
 800228a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800228e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3303      	adds	r3, #3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	061a      	lsls	r2, r3, #24
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3302      	adds	r3, #2
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	041b      	lsls	r3, r3, #16
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3301      	adds	r3, #1
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	4313      	orrs	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	7812      	ldrb	r2, [r2, #0]
 80022b0:	4610      	mov	r0, r2
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	6811      	ldr	r1, [r2, #0]
 80022b6:	ea43 0200 	orr.w	r2, r3, r0
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	440b      	add	r3, r1
 80022c0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80022c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3318      	adds	r3, #24
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	4413      	add	r3, r2
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	6811      	ldr	r1, [r2, #0]
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	3318      	adds	r3, #24
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	440b      	add	r3, r1
 80022e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e00e      	b.n	8002308 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e006      	b.n	8002308 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
  }
}
 8002308:	4618      	mov	r0, r3
 800230a:	3724      	adds	r7, #36	@ 0x24
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002328:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800232a:	7dfb      	ldrb	r3, [r7, #23]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d003      	beq.n	8002338 <HAL_CAN_GetRxMessage+0x24>
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	2b02      	cmp	r3, #2
 8002334:	f040 8103 	bne.w	800253e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10e      	bne.n	800235c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d116      	bne.n	800237a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0f7      	b.n	800254c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d107      	bne.n	800237a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0e8      	b.n	800254c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	331b      	adds	r3, #27
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	4413      	add	r3, r2
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0204 	and.w	r2, r3, #4
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10c      	bne.n	80023b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	331b      	adds	r3, #27
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	4413      	add	r3, r2
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0d5b      	lsrs	r3, r3, #21
 80023a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e00b      	b.n	80023ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	331b      	adds	r3, #27
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	4413      	add	r3, r2
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	08db      	lsrs	r3, r3, #3
 80023c2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	331b      	adds	r3, #27
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4413      	add	r3, r2
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0202 	and.w	r2, r3, #2
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	331b      	adds	r3, #27
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	4413      	add	r3, r2
 80023ec:	3304      	adds	r3, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2208      	movs	r2, #8
 80023fc:	611a      	str	r2, [r3, #16]
 80023fe:	e00b      	b.n	8002418 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	331b      	adds	r3, #27
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	4413      	add	r3, r2
 800240c:	3304      	adds	r3, #4
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 020f 	and.w	r2, r3, #15
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	331b      	adds	r3, #27
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	4413      	add	r3, r2
 8002424:	3304      	adds	r3, #4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	b2da      	uxtb	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	331b      	adds	r3, #27
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	4413      	add	r3, r2
 800243c:	3304      	adds	r3, #4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	b29a      	uxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	4413      	add	r3, r2
 8002452:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	4413      	add	r3, r2
 8002468:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	0a1a      	lsrs	r2, r3, #8
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	4413      	add	r3, r2
 8002482:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0c1a      	lsrs	r2, r3, #16
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	3302      	adds	r3, #2
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	4413      	add	r3, r2
 800249c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	0e1a      	lsrs	r2, r3, #24
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	3303      	adds	r3, #3
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	3304      	adds	r3, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0a1a      	lsrs	r2, r3, #8
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	3305      	adds	r3, #5
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0c1a      	lsrs	r2, r3, #16
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	3306      	adds	r3, #6
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	4413      	add	r3, r2
 8002502:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0e1a      	lsrs	r2, r3, #24
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	3307      	adds	r3, #7
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d108      	bne.n	800252a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0220 	orr.w	r2, r2, #32
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	e007      	b.n	800253a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0220 	orr.w	r2, r2, #32
 8002538:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e006      	b.n	800254c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
  }
}
 800254c:	4618      	mov	r0, r3
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002568:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d002      	beq.n	8002576 <HAL_CAN_ActivateNotification+0x1e>
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d109      	bne.n	800258a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6959      	ldr	r1, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e006      	b.n	8002598 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	@ 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d07c      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d023      	beq.n	800263c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2201      	movs	r2, #1
 80025fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f983 	bl	8002912 <HAL_CAN_TxMailbox0CompleteCallback>
 800260c:	e016      	b.n	800263c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002620:	e00c      	b.n	800263c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d004      	beq.n	8002636 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
 8002634:	e002      	b.n	800263c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f989 	bl	800294e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d024      	beq.n	8002690 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800264e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f963 	bl	8002926 <HAL_CAN_TxMailbox1CompleteCallback>
 8002660:	e016      	b.n	8002690 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d004      	beq.n	8002676 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
 8002674:	e00c      	b.n	8002690 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
 8002688:	e002      	b.n	8002690 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f969 	bl	8002962 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d024      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f943 	bl	800293a <HAL_CAN_TxMailbox2CompleteCallback>
 80026b4:	e016      	b.n	80026e4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d004      	beq.n	80026ca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c8:	e00c      	b.n	80026e4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d004      	beq.n	80026de <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
 80026dc:	e002      	b.n	80026e4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f949 	bl	8002976 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00c      	beq.n	8002708 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2210      	movs	r2, #16
 8002706:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d006      	beq.n	800272a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2208      	movs	r2, #8
 8002722:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f930 	bl	800298a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f00a fc52 	bl	800cfec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00c      	beq.n	800276c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2210      	movs	r2, #16
 800276a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2208      	movs	r2, #8
 8002786:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f912 	bl	80029b2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	d009      	beq.n	80027ac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f8f9 	bl	800299e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2210      	movs	r2, #16
 80027c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f8fc 	bl	80029c6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2208      	movs	r2, #8
 80027e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f8f5 	bl	80029da <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d07b      	beq.n	80028f2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d072      	beq.n	80028ea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	f043 0302 	orr.w	r3, r3, #2
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800285e:	2b00      	cmp	r3, #0
 8002860:	d043      	beq.n	80028ea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002868:	2b00      	cmp	r3, #0
 800286a:	d03e      	beq.n	80028ea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002872:	2b60      	cmp	r3, #96	@ 0x60
 8002874:	d02b      	beq.n	80028ce <HAL_CAN_IRQHandler+0x32a>
 8002876:	2b60      	cmp	r3, #96	@ 0x60
 8002878:	d82e      	bhi.n	80028d8 <HAL_CAN_IRQHandler+0x334>
 800287a:	2b50      	cmp	r3, #80	@ 0x50
 800287c:	d022      	beq.n	80028c4 <HAL_CAN_IRQHandler+0x320>
 800287e:	2b50      	cmp	r3, #80	@ 0x50
 8002880:	d82a      	bhi.n	80028d8 <HAL_CAN_IRQHandler+0x334>
 8002882:	2b40      	cmp	r3, #64	@ 0x40
 8002884:	d019      	beq.n	80028ba <HAL_CAN_IRQHandler+0x316>
 8002886:	2b40      	cmp	r3, #64	@ 0x40
 8002888:	d826      	bhi.n	80028d8 <HAL_CAN_IRQHandler+0x334>
 800288a:	2b30      	cmp	r3, #48	@ 0x30
 800288c:	d010      	beq.n	80028b0 <HAL_CAN_IRQHandler+0x30c>
 800288e:	2b30      	cmp	r3, #48	@ 0x30
 8002890:	d822      	bhi.n	80028d8 <HAL_CAN_IRQHandler+0x334>
 8002892:	2b10      	cmp	r3, #16
 8002894:	d002      	beq.n	800289c <HAL_CAN_IRQHandler+0x2f8>
 8002896:	2b20      	cmp	r3, #32
 8002898:	d005      	beq.n	80028a6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800289a:	e01d      	b.n	80028d8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	f043 0308 	orr.w	r3, r3, #8
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028a4:	e019      	b.n	80028da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	f043 0310 	orr.w	r3, r3, #16
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028ae:	e014      	b.n	80028da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	f043 0320 	orr.w	r3, r3, #32
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028b8:	e00f      	b.n	80028da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028c2:	e00a      	b.n	80028da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028cc:	e005      	b.n	80028da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028d6:	e000      	b.n	80028da <HAL_CAN_IRQHandler+0x336>
            break;
 80028d8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80028e8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2204      	movs	r2, #4
 80028f0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f872 	bl	80029ee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800290a:	bf00      	nop
 800290c:	3728      	adds	r7, #40	@ 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a14:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a20:	4013      	ands	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a36:	4a04      	ldr	r2, [pc, #16]	@ (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	60d3      	str	r3, [r2, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a50:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <__NVIC_GetPriorityGrouping+0x18>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	f003 0307 	and.w	r3, r3, #7
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	db0b      	blt.n	8002a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4907      	ldr	r1, [pc, #28]	@ (8002aa0 <__NVIC_EnableIRQ+0x38>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2001      	movs	r0, #1
 8002a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000e100 	.word	0xe000e100

08002aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	db0a      	blt.n	8002ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	490c      	ldr	r1, [pc, #48]	@ (8002af0 <__NVIC_SetPriority+0x4c>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002acc:	e00a      	b.n	8002ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4908      	ldr	r1, [pc, #32]	@ (8002af4 <__NVIC_SetPriority+0x50>)
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	3b04      	subs	r3, #4
 8002adc:	0112      	lsls	r2, r2, #4
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	761a      	strb	r2, [r3, #24]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000e100 	.word	0xe000e100
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	@ 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f1c3 0307 	rsb	r3, r3, #7
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	bf28      	it	cs
 8002b16:	2304      	movcs	r3, #4
 8002b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d902      	bls.n	8002b28 <NVIC_EncodePriority+0x30>
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3b03      	subs	r3, #3
 8002b26:	e000      	b.n	8002b2a <NVIC_EncodePriority+0x32>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43da      	mvns	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b40:	f04f 31ff 	mov.w	r1, #4294967295
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	43d9      	mvns	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	4313      	orrs	r3, r2
         );
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3724      	adds	r7, #36	@ 0x24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ff4c 	bl	8002a04 <__NVIC_SetPriorityGrouping>
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b86:	f7ff ff61 	bl	8002a4c <__NVIC_GetPriorityGrouping>
 8002b8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	6978      	ldr	r0, [r7, #20]
 8002b92:	f7ff ffb1 	bl	8002af8 <NVIC_EncodePriority>
 8002b96:	4602      	mov	r2, r0
 8002b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ff80 	bl	8002aa4 <__NVIC_SetPriority>
}
 8002ba4:	bf00      	nop
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ff54 	bl	8002a68 <__NVIC_EnableIRQ>
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bd4:	f7ff f87e 	bl	8001cd4 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e099      	b.n	8002d18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c04:	e00f      	b.n	8002c26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c06:	f7ff f865 	bl	8001cd4 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d908      	bls.n	8002c26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e078      	b.n	8002d18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e8      	bne.n	8002c06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	4b38      	ldr	r3, [pc, #224]	@ (8002d20 <HAL_DMA_Init+0x158>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d107      	bne.n	8002c90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f023 0307 	bic.w	r3, r3, #7
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d117      	bne.n	8002cea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fb01 	bl	80032d4 <DMA_CheckFifoParam>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2240      	movs	r2, #64	@ 0x40
 8002cdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e016      	b.n	8002d18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fab8 	bl	8003268 <DMA_CalcBaseAndBitshift>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d00:	223f      	movs	r2, #63	@ 0x3f
 8002d02:	409a      	lsls	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	f010803f 	.word	0xf010803f

08002d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_DMA_Start_IT+0x26>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e040      	b.n	8002dcc <HAL_DMA_Start_IT+0xa8>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d12f      	bne.n	8002dbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2202      	movs	r2, #2
 8002d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fa4a 	bl	800320c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	223f      	movs	r2, #63	@ 0x3f
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0216 	orr.w	r2, r2, #22
 8002d92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d007      	beq.n	8002dac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0208 	orr.w	r2, r2, #8
 8002daa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e005      	b.n	8002dca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002de2:	f7fe ff77 	bl	8001cd4 <HAL_GetTick>
 8002de6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d008      	beq.n	8002e06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2280      	movs	r2, #128	@ 0x80
 8002df8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e052      	b.n	8002eac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0216 	bic.w	r2, r2, #22
 8002e14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <HAL_DMA_Abort+0x62>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0208 	bic.w	r2, r2, #8
 8002e44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e56:	e013      	b.n	8002e80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e58:	f7fe ff3c 	bl	8001cd4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d90c      	bls.n	8002e80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e015      	b.n	8002eac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1e4      	bne.n	8002e58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e92:	223f      	movs	r2, #63	@ 0x3f
 8002e94:	409a      	lsls	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2280      	movs	r2, #128	@ 0x80
 8002ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00c      	b.n	8002eec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2205      	movs	r2, #5
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f04:	4b8e      	ldr	r3, [pc, #568]	@ (8003140 <HAL_DMA_IRQHandler+0x248>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a8e      	ldr	r2, [pc, #568]	@ (8003144 <HAL_DMA_IRQHandler+0x24c>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0a9b      	lsrs	r3, r3, #10
 8002f10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f22:	2208      	movs	r2, #8
 8002f24:	409a      	lsls	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01a      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f50:	2208      	movs	r2, #8
 8002f52:	409a      	lsls	r2, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	2201      	movs	r2, #1
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d012      	beq.n	8002f9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f86:	2201      	movs	r2, #1
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f92:	f043 0202 	orr.w	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc8:	f043 0204 	orr.w	r2, r3, #4
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d043      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d03c      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff2:	2210      	movs	r2, #16
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d018      	beq.n	800303a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d108      	bne.n	8003028 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d024      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4798      	blx	r3
 8003026:	e01f      	b.n	8003068 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01b      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
 8003038:	e016      	b.n	8003068 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0208 	bic.w	r2, r2, #8
 8003056:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306c:	2220      	movs	r2, #32
 800306e:	409a      	lsls	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 808f 	beq.w	8003198 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8087 	beq.w	8003198 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	2220      	movs	r2, #32
 8003090:	409a      	lsls	r2, r3
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b05      	cmp	r3, #5
 80030a0:	d136      	bne.n	8003110 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0216 	bic.w	r2, r2, #22
 80030b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <HAL_DMA_IRQHandler+0x1da>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0208 	bic.w	r2, r2, #8
 80030e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e6:	223f      	movs	r2, #63	@ 0x3f
 80030e8:	409a      	lsls	r2, r3
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003102:	2b00      	cmp	r3, #0
 8003104:	d07e      	beq.n	8003204 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
        }
        return;
 800310e:	e079      	b.n	8003204 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01d      	beq.n	800315a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10d      	bne.n	8003148 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	2b00      	cmp	r3, #0
 8003132:	d031      	beq.n	8003198 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
 800313c:	e02c      	b.n	8003198 <HAL_DMA_IRQHandler+0x2a0>
 800313e:	bf00      	nop
 8003140:	20000000 	.word	0x20000000
 8003144:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d023      	beq.n	8003198 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
 8003158:	e01e      	b.n	8003198 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10f      	bne.n	8003188 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0210 	bic.w	r2, r2, #16
 8003176:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319c:	2b00      	cmp	r3, #0
 800319e:	d032      	beq.n	8003206 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d022      	beq.n	80031f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2205      	movs	r2, #5
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	3301      	adds	r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d307      	bcc.n	80031e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f2      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x2cc>
 80031de:	e000      	b.n	80031e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4798      	blx	r3
 8003202:	e000      	b.n	8003206 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003204:	bf00      	nop
    }
  }
}
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003228:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b40      	cmp	r3, #64	@ 0x40
 8003238:	d108      	bne.n	800324c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800324a:	e007      	b.n	800325c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	60da      	str	r2, [r3, #12]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	3b10      	subs	r3, #16
 8003278:	4a14      	ldr	r2, [pc, #80]	@ (80032cc <DMA_CalcBaseAndBitshift+0x64>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003282:	4a13      	ldr	r2, [pc, #76]	@ (80032d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d909      	bls.n	80032aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800329e:	f023 0303 	bic.w	r3, r3, #3
 80032a2:	1d1a      	adds	r2, r3, #4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80032a8:	e007      	b.n	80032ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	aaaaaaab 	.word	0xaaaaaaab
 80032d0:	08012244 	.word	0x08012244

080032d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d11f      	bne.n	800332e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d856      	bhi.n	80033a2 <DMA_CheckFifoParam+0xce>
 80032f4:	a201      	add	r2, pc, #4	@ (adr r2, 80032fc <DMA_CheckFifoParam+0x28>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	0800331f 	.word	0x0800331f
 8003304:	0800330d 	.word	0x0800330d
 8003308:	080033a3 	.word	0x080033a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003310:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d046      	beq.n	80033a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331c:	e043      	b.n	80033a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003322:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003326:	d140      	bne.n	80033aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332c:	e03d      	b.n	80033aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003336:	d121      	bne.n	800337c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b03      	cmp	r3, #3
 800333c:	d837      	bhi.n	80033ae <DMA_CheckFifoParam+0xda>
 800333e:	a201      	add	r2, pc, #4	@ (adr r2, 8003344 <DMA_CheckFifoParam+0x70>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	08003355 	.word	0x08003355
 8003348:	0800335b 	.word	0x0800335b
 800334c:	08003355 	.word	0x08003355
 8003350:	0800336d 	.word	0x0800336d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e030      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d025      	beq.n	80033b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336a:	e022      	b.n	80033b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003370:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003374:	d11f      	bne.n	80033b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800337a:	e01c      	b.n	80033b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d903      	bls.n	800338a <DMA_CheckFifoParam+0xb6>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d003      	beq.n	8003390 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003388:	e018      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
      break;
 800338e:	e015      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00e      	beq.n	80033ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
      break;
 80033a0:	e00b      	b.n	80033ba <DMA_CheckFifoParam+0xe6>
      break;
 80033a2:	bf00      	nop
 80033a4:	e00a      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      break;
 80033a6:	bf00      	nop
 80033a8:	e008      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      break;
 80033aa:	bf00      	nop
 80033ac:	e006      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      break;
 80033ae:	bf00      	nop
 80033b0:	e004      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      break;
 80033b2:	bf00      	nop
 80033b4:	e002      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      break;   
 80033b6:	bf00      	nop
 80033b8:	e000      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      break;
 80033ba:	bf00      	nop
    }
  } 
  
  return status; 
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop

080033cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	@ 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	e165      	b.n	80036b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033e8:	2201      	movs	r2, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	429a      	cmp	r2, r3
 8003402:	f040 8154 	bne.w	80036ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d005      	beq.n	800341e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800341a:	2b02      	cmp	r3, #2
 800341c:	d130      	bne.n	8003480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2203      	movs	r2, #3
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003454:	2201      	movs	r2, #1
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 0201 	and.w	r2, r3, #1
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b03      	cmp	r3, #3
 800348a:	d017      	beq.n	80034bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2203      	movs	r2, #3
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d123      	bne.n	8003510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	08da      	lsrs	r2, r3, #3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3208      	adds	r2, #8
 80034d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	220f      	movs	r2, #15
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	08da      	lsrs	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3208      	adds	r2, #8
 800350a:	69b9      	ldr	r1, [r7, #24]
 800350c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0203 	and.w	r2, r3, #3
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80ae 	beq.w	80036ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b5d      	ldr	r3, [pc, #372]	@ (80036cc <HAL_GPIO_Init+0x300>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	4a5c      	ldr	r2, [pc, #368]	@ (80036cc <HAL_GPIO_Init+0x300>)
 800355c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003560:	6453      	str	r3, [r2, #68]	@ 0x44
 8003562:	4b5a      	ldr	r3, [pc, #360]	@ (80036cc <HAL_GPIO_Init+0x300>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800356e:	4a58      	ldr	r2, [pc, #352]	@ (80036d0 <HAL_GPIO_Init+0x304>)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3302      	adds	r3, #2
 8003576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	220f      	movs	r2, #15
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4f      	ldr	r2, [pc, #316]	@ (80036d4 <HAL_GPIO_Init+0x308>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d025      	beq.n	80035e6 <HAL_GPIO_Init+0x21a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4e      	ldr	r2, [pc, #312]	@ (80036d8 <HAL_GPIO_Init+0x30c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01f      	beq.n	80035e2 <HAL_GPIO_Init+0x216>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4d      	ldr	r2, [pc, #308]	@ (80036dc <HAL_GPIO_Init+0x310>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d019      	beq.n	80035de <HAL_GPIO_Init+0x212>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4c      	ldr	r2, [pc, #304]	@ (80036e0 <HAL_GPIO_Init+0x314>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_GPIO_Init+0x20e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4b      	ldr	r2, [pc, #300]	@ (80036e4 <HAL_GPIO_Init+0x318>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00d      	beq.n	80035d6 <HAL_GPIO_Init+0x20a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4a      	ldr	r2, [pc, #296]	@ (80036e8 <HAL_GPIO_Init+0x31c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d007      	beq.n	80035d2 <HAL_GPIO_Init+0x206>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a49      	ldr	r2, [pc, #292]	@ (80036ec <HAL_GPIO_Init+0x320>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d101      	bne.n	80035ce <HAL_GPIO_Init+0x202>
 80035ca:	2306      	movs	r3, #6
 80035cc:	e00c      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035ce:	2307      	movs	r3, #7
 80035d0:	e00a      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035d2:	2305      	movs	r3, #5
 80035d4:	e008      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035d6:	2304      	movs	r3, #4
 80035d8:	e006      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035da:	2303      	movs	r3, #3
 80035dc:	e004      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035de:	2302      	movs	r3, #2
 80035e0:	e002      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035e6:	2300      	movs	r3, #0
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	f002 0203 	and.w	r2, r2, #3
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	4093      	lsls	r3, r2
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f8:	4935      	ldr	r1, [pc, #212]	@ (80036d0 <HAL_GPIO_Init+0x304>)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3302      	adds	r3, #2
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003606:	4b3a      	ldr	r3, [pc, #232]	@ (80036f0 <HAL_GPIO_Init+0x324>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800362a:	4a31      	ldr	r2, [pc, #196]	@ (80036f0 <HAL_GPIO_Init+0x324>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003630:	4b2f      	ldr	r3, [pc, #188]	@ (80036f0 <HAL_GPIO_Init+0x324>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003654:	4a26      	ldr	r2, [pc, #152]	@ (80036f0 <HAL_GPIO_Init+0x324>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800365a:	4b25      	ldr	r3, [pc, #148]	@ (80036f0 <HAL_GPIO_Init+0x324>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800367e:	4a1c      	ldr	r2, [pc, #112]	@ (80036f0 <HAL_GPIO_Init+0x324>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003684:	4b1a      	ldr	r3, [pc, #104]	@ (80036f0 <HAL_GPIO_Init+0x324>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036a8:	4a11      	ldr	r2, [pc, #68]	@ (80036f0 <HAL_GPIO_Init+0x324>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3301      	adds	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b0f      	cmp	r3, #15
 80036b8:	f67f ae96 	bls.w	80033e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3724      	adds	r7, #36	@ 0x24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40013800 	.word	0x40013800
 80036d4:	40020000 	.word	0x40020000
 80036d8:	40020400 	.word	0x40020400
 80036dc:	40020800 	.word	0x40020800
 80036e0:	40020c00 	.word	0x40020c00
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40021400 	.word	0x40021400
 80036ec:	40021800 	.word	0x40021800
 80036f0:	40013c00 	.word	0x40013c00

080036f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
 8003700:	4613      	mov	r3, r2
 8003702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003704:	787b      	ldrb	r3, [r7, #1]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003710:	e003      	b.n	800371a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	041a      	lsls	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	619a      	str	r2, [r3, #24]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003738:	887a      	ldrh	r2, [r7, #2]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4013      	ands	r3, r2
 800373e:	041a      	lsls	r2, r3, #16
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	43d9      	mvns	r1, r3
 8003744:	887b      	ldrh	r3, [r7, #2]
 8003746:	400b      	ands	r3, r1
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	619a      	str	r2, [r3, #24]
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b086      	sub	sp, #24
 800375e:	af02      	add	r7, sp, #8
 8003760:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e108      	b.n	800397e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f008 fe40 	bl	800c40c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2203      	movs	r2, #3
 8003790:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800379a:	d102      	bne.n	80037a2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f004 f94d 	bl	8007a46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	7c1a      	ldrb	r2, [r3, #16]
 80037b4:	f88d 2000 	strb.w	r2, [sp]
 80037b8:	3304      	adds	r3, #4
 80037ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037bc:	f004 f82c 	bl	8007818 <USB_CoreInit>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2202      	movs	r2, #2
 80037ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0d5      	b.n	800397e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 f945 	bl	8007a68 <USB_SetCurrentMode>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0c6      	b.n	800397e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	73fb      	strb	r3, [r7, #15]
 80037f4:	e04a      	b.n	800388c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3315      	adds	r3, #21
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	3314      	adds	r3, #20
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	b298      	uxth	r0, r3
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	332e      	adds	r3, #46	@ 0x2e
 8003832:	4602      	mov	r2, r0
 8003834:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3318      	adds	r3, #24
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	331c      	adds	r3, #28
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3320      	adds	r3, #32
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	3324      	adds	r3, #36	@ 0x24
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	3301      	adds	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	791b      	ldrb	r3, [r3, #4]
 8003890:	7bfa      	ldrb	r2, [r7, #15]
 8003892:	429a      	cmp	r2, r3
 8003894:	d3af      	bcc.n	80037f6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
 800389a:	e044      	b.n	8003926 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038b2:	7bfa      	ldrb	r2, [r7, #15]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038de:	7bfa      	ldrb	r2, [r7, #15]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	3301      	adds	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	791b      	ldrb	r3, [r3, #4]
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	429a      	cmp	r2, r3
 800392e:	d3b5      	bcc.n	800389c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	7c1a      	ldrb	r2, [r3, #16]
 8003938:	f88d 2000 	strb.w	r2, [sp]
 800393c:	3304      	adds	r3, #4
 800393e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003940:	f004 f8de 	bl	8007b00 <USB_DevInit>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e013      	b.n	800397e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	7b1b      	ldrb	r3, [r3, #12]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d102      	bne.n	8003972 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f001 f96d 	bl	8004c4c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f005 f915 	bl	8008ba6 <USB_DevDisconnect>

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_PCD_Start+0x1c>
 800399e:	2302      	movs	r3, #2
 80039a0:	e022      	b.n	80039e8 <HAL_PCD_Start+0x62>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d105      	bne.n	80039ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f004 f828 	bl	8007a24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f005 f8c3 	bl	8008b64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b08d      	sub	sp, #52	@ 0x34
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f005 f981 	bl	8008d0e <USB_GetMode>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f040 84b9 	bne.w	8004386 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f005 f8e5 	bl	8008be8 <USB_ReadInterrupts>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 84af 	beq.w	8004384 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f005 f8d2 	bl	8008be8 <USB_ReadInterrupts>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d107      	bne.n	8003a5e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f002 0202 	and.w	r2, r2, #2
 8003a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f005 f8c0 	bl	8008be8 <USB_ReadInterrupts>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d161      	bne.n	8003b36 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699a      	ldr	r2, [r3, #24]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0210 	bic.w	r2, r2, #16
 8003a80:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	0c5b      	lsrs	r3, r3, #17
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d124      	bne.n	8003af8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d035      	beq.n	8003b26 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	6a38      	ldr	r0, [r7, #32]
 8003ace:	f004 fef7 	bl	80088c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ade:	441a      	add	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af0:	441a      	add	r2, r3
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	615a      	str	r2, [r3, #20]
 8003af6:	e016      	b.n	8003b26 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	0c5b      	lsrs	r3, r3, #17
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d110      	bne.n	8003b26 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6a38      	ldr	r0, [r7, #32]
 8003b10:	f004 fed6 	bl	80088c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b20:	441a      	add	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0210 	orr.w	r2, r2, #16
 8003b34:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f005 f854 	bl	8008be8 <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b4a:	f040 80a7 	bne.w	8003c9c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f005 f859 	bl	8008c0e <USB_ReadDevAllOutEpInterrupt>
 8003b5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003b5e:	e099      	b.n	8003c94 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 808e 	beq.w	8003c88 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f005 f87d 	bl	8008c76 <USB_ReadDevOutEPInterrupt>
 8003b7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00c      	beq.n	8003ba2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b94:	461a      	mov	r2, r3
 8003b96:	2301      	movs	r3, #1
 8003b98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fecf 	bl	8004940 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00c      	beq.n	8003bc6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2308      	movs	r3, #8
 8003bbc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 ffa5 	bl	8004b10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2310      	movs	r3, #16
 8003be0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d030      	beq.n	8003c4e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf4:	2b80      	cmp	r3, #128	@ 0x80
 8003bf6:	d109      	bne.n	8003c0c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c0a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c0e:	4613      	mov	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3304      	adds	r3, #4
 8003c20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	78db      	ldrb	r3, [r3, #3]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d108      	bne.n	8003c3c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	4619      	mov	r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f008 fd04 	bl	800c644 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c64:	461a      	mov	r2, r3
 8003c66:	2320      	movs	r3, #32
 8003c68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d009      	beq.n	8003c88 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c80:	461a      	mov	r2, r3
 8003c82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c86:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f47f af62 	bne.w	8003b60 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f004 ffa1 	bl	8008be8 <USB_ReadInterrupts>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cb0:	f040 80db 	bne.w	8003e6a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f004 ffc2 	bl	8008c42 <USB_ReadDevAllInEpInterrupt>
 8003cbe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003cc4:	e0cd      	b.n	8003e62 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80c2 	beq.w	8003e56 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f004 ffe8 	bl	8008cb2 <USB_ReadDevInEPInterrupt>
 8003ce2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d057      	beq.n	8003d9e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69f9      	ldr	r1, [r7, #28]
 8003d0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d0e:	4013      	ands	r3, r2
 8003d10:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2301      	movs	r3, #1
 8003d22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	799b      	ldrb	r3, [r3, #6]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d132      	bne.n	8003d92 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	3320      	adds	r3, #32
 8003d3c:	6819      	ldr	r1, [r3, #0]
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4403      	add	r3, r0
 8003d4c:	331c      	adds	r3, #28
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4419      	add	r1, r3
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4403      	add	r3, r0
 8003d60:	3320      	adds	r3, #32
 8003d62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d113      	bne.n	8003d92 <HAL_PCD_IRQHandler+0x3a2>
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	3324      	adds	r3, #36	@ 0x24
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d108      	bne.n	8003d92 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	f004 ffef 	bl	8008d70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	4619      	mov	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f008 fbce 	bl	800c53a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db4:	461a      	mov	r2, r3
 8003db6:	2308      	movs	r3, #8
 8003db8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	2310      	movs	r3, #16
 8003dd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dec:	461a      	mov	r2, r3
 8003dee:	2340      	movs	r3, #64	@ 0x40
 8003df0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d023      	beq.n	8003e44 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003dfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dfe:	6a38      	ldr	r0, [r7, #32]
 8003e00:	f003 ffdc 	bl	8007dbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	3310      	adds	r3, #16
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	4413      	add	r3, r2
 8003e14:	3304      	adds	r3, #4
 8003e16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	78db      	ldrb	r3, [r3, #3]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d108      	bne.n	8003e32 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2200      	movs	r2, #0
 8003e24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f008 fc1b 	bl	800c668 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2302      	movs	r3, #2
 8003e42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fce8 	bl	8004826 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	3301      	adds	r3, #1
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f47f af2e 	bne.w	8003cc6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f004 feba 	bl	8008be8 <USB_ReadInterrupts>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e7e:	d122      	bne.n	8003ec6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d108      	bne.n	8003eb0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f008 fd95 	bl	800c9d8 <HAL_PCDEx_LPM_Callback>
 8003eae:	e002      	b.n	8003eb6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f008 fbb9 	bl	800c628 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f004 fe8c 	bl	8008be8 <USB_ReadInterrupts>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eda:	d112      	bne.n	8003f02 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d102      	bne.n	8003ef2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f008 fb75 	bl	800c5dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003f00:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f004 fe6e 	bl	8008be8 <USB_ReadInterrupts>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f16:	d121      	bne.n	8003f5c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003f26:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d111      	bne.n	8003f56 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	f003 020f 	and.w	r2, r3, #15
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f008 fd42 	bl	800c9d8 <HAL_PCDEx_LPM_Callback>
 8003f54:	e002      	b.n	8003f5c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f008 fb40 	bl	800c5dc <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f004 fe41 	bl	8008be8 <USB_ReadInterrupts>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f70:	f040 80b7 	bne.w	80040e2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2110      	movs	r1, #16
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f003 ff14 	bl	8007dbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f94:	2300      	movs	r3, #0
 8003f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f98:	e046      	b.n	8004028 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fc8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fcc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fe0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ff2:	0151      	lsls	r1, r2, #5
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	440a      	add	r2, r1
 8003ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ffc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004000:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	440a      	add	r2, r1
 8004018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800401c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004020:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004024:	3301      	adds	r3, #1
 8004026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	791b      	ldrb	r3, [r3, #4]
 800402c:	461a      	mov	r2, r3
 800402e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004030:	4293      	cmp	r3, r2
 8004032:	d3b2      	bcc.n	8003f9a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004042:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004046:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7bdb      	ldrb	r3, [r3, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d016      	beq.n	800407e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004060:	f043 030b 	orr.w	r3, r3, #11
 8004064:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004076:	f043 030b 	orr.w	r3, r3, #11
 800407a:	6453      	str	r3, [r2, #68]	@ 0x44
 800407c:	e015      	b.n	80040aa <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800408c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004090:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004094:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040a4:	f043 030b 	orr.w	r3, r3, #11
 80040a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040b8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80040bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040cc:	461a      	mov	r2, r3
 80040ce:	f004 fe4f 	bl	8008d70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80040e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f004 fd7e 	bl	8008be8 <USB_ReadInterrupts>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040f6:	d123      	bne.n	8004140 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f004 fe14 	bl	8008d2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f003 fed1 	bl	8007eae <USB_GetDevSpeed>
 800410c:	4603      	mov	r3, r0
 800410e:	461a      	mov	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681c      	ldr	r4, [r3, #0]
 8004118:	f000 fea2 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 800411c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004122:	461a      	mov	r2, r3
 8004124:	4620      	mov	r0, r4
 8004126:	f003 fbdb 	bl	80078e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f008 fa2d 	bl	800c58a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800413e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f004 fd4f 	bl	8008be8 <USB_ReadInterrupts>
 800414a:	4603      	mov	r3, r0
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b08      	cmp	r3, #8
 8004152:	d10a      	bne.n	800416a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f008 fa0a 	bl	800c56e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695a      	ldr	r2, [r3, #20]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f002 0208 	and.w	r2, r2, #8
 8004168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f004 fd3a 	bl	8008be8 <USB_ReadInterrupts>
 8004174:	4603      	mov	r3, r0
 8004176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417a:	2b80      	cmp	r3, #128	@ 0x80
 800417c:	d123      	bne.n	80041c6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800418a:	2301      	movs	r3, #1
 800418c:	627b      	str	r3, [r7, #36]	@ 0x24
 800418e:	e014      	b.n	80041ba <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d105      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	4619      	mov	r1, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fb08 	bl	80047c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	3301      	adds	r3, #1
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	791b      	ldrb	r3, [r3, #4]
 80041be:	461a      	mov	r2, r3
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d3e4      	bcc.n	8004190 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f004 fd0c 	bl	8008be8 <USB_ReadInterrupts>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041da:	d13c      	bne.n	8004256 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041dc:	2301      	movs	r3, #1
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
 80041e0:	e02b      	b.n	800423a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	3318      	adds	r3, #24
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d115      	bne.n	8004234 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004208:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800420a:	2b00      	cmp	r3, #0
 800420c:	da12      	bge.n	8004234 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3317      	adds	r3, #23
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fac8 	bl	80047c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004236:	3301      	adds	r3, #1
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	791b      	ldrb	r3, [r3, #4]
 800423e:	461a      	mov	r2, r3
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004242:	4293      	cmp	r3, r2
 8004244:	d3cd      	bcc.n	80041e2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695a      	ldr	r2, [r3, #20]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004254:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f004 fcc4 	bl	8008be8 <USB_ReadInterrupts>
 8004260:	4603      	mov	r3, r0
 8004262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004266:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800426a:	d156      	bne.n	800431a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800426c:	2301      	movs	r3, #1
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004270:	e045      	b.n	80042fe <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d12e      	bne.n	80042f8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800429a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800429c:	2b00      	cmp	r3, #0
 800429e:	da2b      	bge.n	80042f8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80042ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d121      	bne.n	80042f8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042f4:	6053      	str	r3, [r2, #4]
            break;
 80042f6:	e008      	b.n	800430a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	3301      	adds	r3, #1
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	791b      	ldrb	r3, [r3, #4]
 8004302:	461a      	mov	r2, r3
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	4293      	cmp	r3, r2
 8004308:	d3b3      	bcc.n	8004272 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695a      	ldr	r2, [r3, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f004 fc62 	bl	8008be8 <USB_ReadInterrupts>
 8004324:	4603      	mov	r3, r0
 8004326:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800432e:	d10a      	bne.n	8004346 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f008 f9ab 	bl	800c68c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f004 fc4c 	bl	8008be8 <USB_ReadInterrupts>
 8004350:	4603      	mov	r3, r0
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b04      	cmp	r3, #4
 8004358:	d115      	bne.n	8004386 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f008 f99b 	bl	800c6a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6859      	ldr	r1, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	e000      	b.n	8004386 <HAL_PCD_IRQHandler+0x996>
      return;
 8004384:	bf00      	nop
    }
  }
}
 8004386:	3734      	adds	r7, #52	@ 0x34
 8004388:	46bd      	mov	sp, r7
 800438a:	bd90      	pop	{r4, r7, pc}

0800438c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_PCD_SetAddress+0x1a>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e012      	b.n	80043cc <HAL_PCD_SetAddress+0x40>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f004 fbab 	bl	8008b18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	4608      	mov	r0, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	461a      	mov	r2, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	70fb      	strb	r3, [r7, #3]
 80043e6:	460b      	mov	r3, r1
 80043e8:	803b      	strh	r3, [r7, #0]
 80043ea:	4613      	mov	r3, r2
 80043ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da0f      	bge.n	800441a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 020f 	and.w	r2, r3, #15
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	3310      	adds	r3, #16
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	3304      	adds	r3, #4
 8004410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	705a      	strb	r2, [r3, #1]
 8004418:	e00f      	b.n	800443a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	f003 020f 	and.w	r2, r3, #15
 8004420:	4613      	mov	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	4413      	add	r3, r2
 8004430:	3304      	adds	r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	b2da      	uxtb	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004446:	883a      	ldrh	r2, [r7, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	78ba      	ldrb	r2, [r7, #2]
 8004450:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	785b      	ldrb	r3, [r3, #1]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004464:	78bb      	ldrb	r3, [r7, #2]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d102      	bne.n	8004470 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_PCD_EP_Open+0xaa>
 800447a:	2302      	movs	r3, #2
 800447c:	e00e      	b.n	800449c <HAL_PCD_EP_Open+0xc8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68f9      	ldr	r1, [r7, #12]
 800448c:	4618      	mov	r0, r3
 800448e:	f003 fd33 	bl	8007ef8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800449a:	7afb      	ldrb	r3, [r7, #11]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	da0f      	bge.n	80044d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	f003 020f 	and.w	r2, r3, #15
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	3310      	adds	r3, #16
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4413      	add	r3, r2
 80044cc:	3304      	adds	r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	705a      	strb	r2, [r3, #1]
 80044d6:	e00f      	b.n	80044f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	f003 020f 	and.w	r2, r3, #15
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	3304      	adds	r3, #4
 80044f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_PCD_EP_Close+0x6e>
 800450e:	2302      	movs	r3, #2
 8004510:	e00e      	b.n	8004530 <HAL_PCD_EP_Close+0x8c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	4618      	mov	r0, r3
 8004522:	f003 fd71 	bl	8008008 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	460b      	mov	r3, r1
 8004546:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004548:	7afb      	ldrb	r3, [r7, #11]
 800454a:	f003 020f 	and.w	r2, r3, #15
 800454e:	4613      	mov	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	3304      	adds	r3, #4
 8004560:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2200      	movs	r2, #0
 8004578:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800457a:	7afb      	ldrb	r3, [r7, #11]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	b2da      	uxtb	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	799b      	ldrb	r3, [r3, #6]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d102      	bne.n	8004594 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	799b      	ldrb	r3, [r3, #6]
 800459c:	461a      	mov	r2, r3
 800459e:	6979      	ldr	r1, [r7, #20]
 80045a0:	f003 fe0e 	bl	80081c0 <USB_EPStartXfer>

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	f003 020f 	and.w	r2, r3, #15
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80045d0:	681b      	ldr	r3, [r3, #0]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b086      	sub	sp, #24
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
 80045ea:	460b      	mov	r3, r1
 80045ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ee:	7afb      	ldrb	r3, [r7, #11]
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	3310      	adds	r3, #16
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	3304      	adds	r3, #4
 8004604:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2200      	movs	r2, #0
 8004616:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2201      	movs	r2, #1
 800461c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800461e:	7afb      	ldrb	r3, [r7, #11]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	b2da      	uxtb	r2, r3
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	799b      	ldrb	r3, [r3, #6]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d102      	bne.n	8004638 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	799b      	ldrb	r3, [r3, #6]
 8004640:	461a      	mov	r2, r3
 8004642:	6979      	ldr	r1, [r7, #20]
 8004644:	f003 fdbc 	bl	80081c0 <USB_EPStartXfer>

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	460b      	mov	r3, r1
 800465c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	7912      	ldrb	r2, [r2, #4]
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e04f      	b.n	8004710 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004674:	2b00      	cmp	r3, #0
 8004676:	da0f      	bge.n	8004698 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	f003 020f 	and.w	r2, r3, #15
 800467e:	4613      	mov	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	3310      	adds	r3, #16
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	4413      	add	r3, r2
 800468c:	3304      	adds	r3, #4
 800468e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2201      	movs	r2, #1
 8004694:	705a      	strb	r2, [r3, #1]
 8004696:	e00d      	b.n	80046b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	4613      	mov	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	3304      	adds	r3, #4
 80046ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_PCD_EP_SetStall+0x82>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e01d      	b.n	8004710 <HAL_PCD_EP_SetStall+0xbe>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68f9      	ldr	r1, [r7, #12]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f004 f944 	bl	8008970 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	7999      	ldrb	r1, [r3, #6]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004700:	461a      	mov	r2, r3
 8004702:	f004 fb35 	bl	8008d70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	7912      	ldrb	r2, [r2, #4]
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e042      	b.n	80047bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800473a:	2b00      	cmp	r3, #0
 800473c:	da0f      	bge.n	800475e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	f003 020f 	and.w	r2, r3, #15
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	3310      	adds	r3, #16
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	3304      	adds	r3, #4
 8004754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	705a      	strb	r2, [r3, #1]
 800475c:	e00f      	b.n	800477e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	f003 020f 	and.w	r2, r3, #15
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	4413      	add	r3, r2
 8004774:	3304      	adds	r3, #4
 8004776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_PCD_EP_ClrStall+0x86>
 800479a:	2302      	movs	r3, #2
 800479c:	e00e      	b.n	80047bc <HAL_PCD_EP_ClrStall+0xa4>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f004 f94d 	bl	8008a4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	da0c      	bge.n	80047f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	f003 020f 	and.w	r2, r3, #15
 80047de:	4613      	mov	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	3310      	adds	r3, #16
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	4413      	add	r3, r2
 80047ec:	3304      	adds	r3, #4
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e00c      	b.n	800480c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	4413      	add	r3, r2
 8004808:	3304      	adds	r3, #4
 800480a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68f9      	ldr	r1, [r7, #12]
 8004812:	4618      	mov	r0, r3
 8004814:	f003 ff6c 	bl	80086f0 <USB_EPStopXfer>
 8004818:	4603      	mov	r3, r0
 800481a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800481c:	7afb      	ldrb	r3, [r7, #11]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b08a      	sub	sp, #40	@ 0x28
 800482a:	af02      	add	r7, sp, #8
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	3310      	adds	r3, #16
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	4413      	add	r3, r2
 800484a:	3304      	adds	r3, #4
 800484c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	429a      	cmp	r2, r3
 8004858:	d901      	bls.n	800485e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e06b      	b.n	8004936 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	429a      	cmp	r2, r3
 8004872:	d902      	bls.n	800487a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3303      	adds	r3, #3
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004882:	e02a      	b.n	80048da <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	429a      	cmp	r2, r3
 8004898:	d902      	bls.n	80048a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	3303      	adds	r3, #3
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68d9      	ldr	r1, [r3, #12]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	4603      	mov	r3, r0
 80048bc:	6978      	ldr	r0, [r7, #20]
 80048be:	f003 ffc1 	bl	8008844 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	441a      	add	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	441a      	add	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d809      	bhi.n	8004904 <PCD_WriteEmptyTxFifo+0xde>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d203      	bcs.n	8004904 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1bf      	bne.n	8004884 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	429a      	cmp	r2, r3
 800490e:	d811      	bhi.n	8004934 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	2201      	movs	r2, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	43db      	mvns	r3, r3
 800492a:	6939      	ldr	r1, [r7, #16]
 800492c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004930:	4013      	ands	r3, r2
 8004932:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	333c      	adds	r3, #60	@ 0x3c
 8004958:	3304      	adds	r3, #4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	799b      	ldrb	r3, [r3, #6]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d17b      	bne.n	8004a6e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d015      	beq.n	80049ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4a61      	ldr	r2, [pc, #388]	@ (8004b08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	f240 80b9 	bls.w	8004afc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80b3 	beq.w	8004afc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a2:	461a      	mov	r2, r3
 80049a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a8:	6093      	str	r3, [r2, #8]
 80049aa:	e0a7      	b.n	8004afc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c2:	461a      	mov	r2, r3
 80049c4:	2320      	movs	r3, #32
 80049c6:	6093      	str	r3, [r2, #8]
 80049c8:	e098      	b.n	8004afc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f040 8093 	bne.w	8004afc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004b08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d90f      	bls.n	80049fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f4:	461a      	mov	r2, r3
 80049f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049fa:	6093      	str	r3, [r2, #8]
 80049fc:	e07e      	b.n	8004afc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	3304      	adds	r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1a      	ldr	r2, [r3, #32]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	0159      	lsls	r1, r3, #5
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	440b      	add	r3, r1
 8004a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a2a:	1ad2      	subs	r2, r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d114      	bne.n	8004a60 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	f004 f990 	bl	8008d70 <USB_EP0_OutStart>
 8004a50:	e006      	b.n	8004a60 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	441a      	add	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	4619      	mov	r1, r3
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f007 fd4c 	bl	800c504 <HAL_PCD_DataOutStageCallback>
 8004a6c:	e046      	b.n	8004afc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	4a26      	ldr	r2, [pc, #152]	@ (8004b0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d124      	bne.n	8004ac0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a92:	6093      	str	r3, [r2, #8]
 8004a94:	e032      	b.n	8004afc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aac:	461a      	mov	r2, r3
 8004aae:	2320      	movs	r3, #32
 8004ab0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f007 fd23 	bl	800c504 <HAL_PCD_DataOutStageCallback>
 8004abe:	e01d      	b.n	8004afc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d114      	bne.n	8004af0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	4613      	mov	r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d108      	bne.n	8004af0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ae8:	461a      	mov	r2, r3
 8004aea:	2100      	movs	r1, #0
 8004aec:	f004 f940 	bl	8008d70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	4619      	mov	r1, r3
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f007 fd04 	bl	800c504 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	4f54300a 	.word	0x4f54300a
 8004b0c:	4f54310a 	.word	0x4f54310a

08004b10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	333c      	adds	r3, #60	@ 0x3c
 8004b28:	3304      	adds	r3, #4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a15      	ldr	r2, [pc, #84]	@ (8004b98 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d90e      	bls.n	8004b64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f007 fcbb 	bl	800c4e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b98 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d90c      	bls.n	8004b8c <PCD_EP_OutSetupPacket_int+0x7c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	799b      	ldrb	r3, [r3, #6]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d108      	bne.n	8004b8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b84:	461a      	mov	r2, r3
 8004b86:	2101      	movs	r1, #1
 8004b88:	f004 f8f2 	bl	8008d70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	4f54300a 	.word	0x4f54300a

08004b9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d107      	bne.n	8004bca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bba:	883b      	ldrh	r3, [r7, #0]
 8004bbc:	0419      	lsls	r1, r3, #16
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bc8:	e028      	b.n	8004c1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	73fb      	strb	r3, [r7, #15]
 8004bdc:	e00d      	b.n	8004bfa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	3340      	adds	r3, #64	@ 0x40
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
 8004bfa:	7bfa      	ldrb	r2, [r7, #15]
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d3ec      	bcc.n	8004bde <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c04:	883b      	ldrh	r3, [r7, #0]
 8004c06:	0418      	lsls	r0, r3, #16
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6819      	ldr	r1, [r3, #0]
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	4302      	orrs	r2, r0
 8004c14:	3340      	adds	r3, #64	@ 0x40
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	887a      	ldrh	r2, [r7, #2]
 8004c3c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c7e:	f043 0303 	orr.w	r3, r3, #3
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e0cc      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca8:	4b68      	ldr	r3, [pc, #416]	@ (8004e4c <HAL_RCC_ClockConfig+0x1b8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d90c      	bls.n	8004cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb6:	4b65      	ldr	r3, [pc, #404]	@ (8004e4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	4b63      	ldr	r3, [pc, #396]	@ (8004e4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0b8      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d020      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ce8:	4b59      	ldr	r3, [pc, #356]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4a58      	ldr	r2, [pc, #352]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d00:	4b53      	ldr	r3, [pc, #332]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4a52      	ldr	r2, [pc, #328]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d0c:	4b50      	ldr	r3, [pc, #320]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	494d      	ldr	r1, [pc, #308]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d044      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d107      	bne.n	8004d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d32:	4b47      	ldr	r3, [pc, #284]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d119      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e07f      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d003      	beq.n	8004d52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d107      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d52:	4b3f      	ldr	r3, [pc, #252]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e06f      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d62:	4b3b      	ldr	r3, [pc, #236]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e067      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d72:	4b37      	ldr	r3, [pc, #220]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f023 0203 	bic.w	r2, r3, #3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4934      	ldr	r1, [pc, #208]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d84:	f7fc ffa6 	bl	8001cd4 <HAL_GetTick>
 8004d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8a:	e00a      	b.n	8004da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d8c:	f7fc ffa2 	bl	8001cd4 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e04f      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da2:	4b2b      	ldr	r3, [pc, #172]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 020c 	and.w	r2, r3, #12
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d1eb      	bne.n	8004d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db4:	4b25      	ldr	r3, [pc, #148]	@ (8004e4c <HAL_RCC_ClockConfig+0x1b8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d20c      	bcs.n	8004ddc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	4b22      	ldr	r3, [pc, #136]	@ (8004e4c <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dca:	4b20      	ldr	r3, [pc, #128]	@ (8004e4c <HAL_RCC_ClockConfig+0x1b8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e032      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de8:	4b19      	ldr	r3, [pc, #100]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4916      	ldr	r1, [pc, #88]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d009      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e06:	4b12      	ldr	r3, [pc, #72]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	490e      	ldr	r1, [pc, #56]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e1a:	f000 fbb1 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	4b0b      	ldr	r3, [pc, #44]	@ (8004e50 <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	490a      	ldr	r1, [pc, #40]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c0>)
 8004e2c:	5ccb      	ldrb	r3, [r1, r3]
 8004e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e32:	4a09      	ldr	r2, [pc, #36]	@ (8004e58 <HAL_RCC_ClockConfig+0x1c4>)
 8004e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e36:	4b09      	ldr	r3, [pc, #36]	@ (8004e5c <HAL_RCC_ClockConfig+0x1c8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fc fb6a 	bl	8001514 <HAL_InitTick>

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40023c00 	.word	0x40023c00
 8004e50:	40023800 	.word	0x40023800
 8004e54:	0801222c 	.word	0x0801222c
 8004e58:	20000000 	.word	0x20000000
 8004e5c:	20000004 	.word	0x20000004

08004e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e64:	4b03      	ldr	r3, [pc, #12]	@ (8004e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e66:	681b      	ldr	r3, [r3, #0]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000000 	.word	0x20000000

08004e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e7c:	f7ff fff0 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	0a9b      	lsrs	r3, r3, #10
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	4903      	ldr	r1, [pc, #12]	@ (8004e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	0801223c 	.word	0x0801223c

08004ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ea4:	f7ff ffdc 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	0b5b      	lsrs	r3, r3, #13
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	4903      	ldr	r1, [pc, #12]	@ (8004ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	0801223c 	.word	0x0801223c

08004ec8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	220f      	movs	r2, #15
 8004ed6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ed8:	4b12      	ldr	r3, [pc, #72]	@ (8004f24 <HAL_RCC_GetClockConfig+0x5c>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0203 	and.w	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f24 <HAL_RCC_GetClockConfig+0x5c>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f24 <HAL_RCC_GetClockConfig+0x5c>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004efc:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <HAL_RCC_GetClockConfig+0x5c>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	08db      	lsrs	r3, r3, #3
 8004f02:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f0a:	4b07      	ldr	r3, [pc, #28]	@ (8004f28 <HAL_RCC_GetClockConfig+0x60>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 020f 	and.w	r2, r3, #15
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	601a      	str	r2, [r3, #0]
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40023800 	.word	0x40023800
 8004f28:	40023c00 	.word	0x40023c00

08004f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08c      	sub	sp, #48	@ 0x30
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d010      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004f64:	4b6f      	ldr	r3, [pc, #444]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f6a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	496c      	ldr	r1, [pc, #432]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004f82:	2301      	movs	r3, #1
 8004f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d010      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004f92:	4b64      	ldr	r3, [pc, #400]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f98:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa0:	4960      	ldr	r1, [pc, #384]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d017      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fc0:	4b58      	ldr	r3, [pc, #352]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fce:	4955      	ldr	r1, [pc, #340]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fde:	d101      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004fec:	2301      	movs	r3, #1
 8004fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d017      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ffc:	4b49      	ldr	r3, [pc, #292]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005002:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500a:	4946      	ldr	r1, [pc, #280]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800501a:	d101      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800501c:	2301      	movs	r3, #1
 800501e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005028:	2301      	movs	r3, #1
 800502a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 808a 	beq.w	800514e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800503a:	2300      	movs	r3, #0
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	4b39      	ldr	r3, [pc, #228]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	4a38      	ldr	r2, [pc, #224]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005048:	6413      	str	r3, [r2, #64]	@ 0x40
 800504a:	4b36      	ldr	r3, [pc, #216]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005056:	4b34      	ldr	r3, [pc, #208]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a33      	ldr	r2, [pc, #204]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800505c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005060:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005062:	f7fc fe37 	bl	8001cd4 <HAL_GetTick>
 8005066:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005068:	e008      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800506a:	f7fc fe33 	bl	8001cd4 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e278      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800507c:	4b2a      	ldr	r3, [pc, #168]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005088:	4b26      	ldr	r3, [pc, #152]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005090:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02f      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a0:	6a3a      	ldr	r2, [r7, #32]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d028      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ae:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050b0:	4b1e      	ldr	r3, [pc, #120]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050b6:	4b1d      	ldr	r3, [pc, #116]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050bc:	4a19      	ldr	r2, [pc, #100]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050c2:	4b18      	ldr	r3, [pc, #96]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d114      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050ce:	f7fc fe01 	bl	8001cd4 <HAL_GetTick>
 80050d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d4:	e00a      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d6:	f7fc fdfd 	bl	8001cd4 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d901      	bls.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e240      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0ee      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005100:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005104:	d114      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005106:	4b07      	ldr	r3, [pc, #28]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800511a:	4902      	ldr	r1, [pc, #8]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800511c:	4313      	orrs	r3, r2
 800511e:	608b      	str	r3, [r1, #8]
 8005120:	e00c      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	40007000 	.word	0x40007000
 800512c:	42470e40 	.word	0x42470e40
 8005130:	4b4a      	ldr	r3, [pc, #296]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4a49      	ldr	r2, [pc, #292]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005136:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800513a:	6093      	str	r3, [r2, #8]
 800513c:	4b47      	ldr	r3, [pc, #284]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800513e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005148:	4944      	ldr	r1, [pc, #272]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800514a:	4313      	orrs	r3, r2
 800514c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0310 	and.w	r3, r3, #16
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005160:	4b3f      	ldr	r3, [pc, #252]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005162:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005170:	4b3a      	ldr	r3, [pc, #232]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005176:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800517e:	4937      	ldr	r1, [pc, #220]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005192:	4b32      	ldr	r3, [pc, #200]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005198:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a0:	492e      	ldr	r1, [pc, #184]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d011      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051b4:	4b29      	ldr	r3, [pc, #164]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ba:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c2:	4926      	ldr	r1, [pc, #152]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051d2:	d101      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80051d4:	2301      	movs	r3, #1
 80051d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80051e4:	4b1d      	ldr	r3, [pc, #116]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	491a      	ldr	r1, [pc, #104]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005202:	2b00      	cmp	r3, #0
 8005204:	d011      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005206:	4b15      	ldr	r3, [pc, #84]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800520c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005214:	4911      	ldr	r1, [pc, #68]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005224:	d101      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005226:	2301      	movs	r3, #1
 8005228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800522a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d005      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005238:	f040 80ff 	bne.w	800543a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800523c:	4b09      	ldr	r3, [pc, #36]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005242:	f7fc fd47 	bl	8001cd4 <HAL_GetTick>
 8005246:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005248:	e00e      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800524a:	f7fc fd43 	bl	8001cd4 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d907      	bls.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e188      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800525c:	40023800 	.word	0x40023800
 8005260:	424711e0 	.word	0x424711e0
 8005264:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005268:	4b7e      	ldr	r3, [pc, #504]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1ea      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005290:	2b00      	cmp	r3, #0
 8005292:	d028      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d124      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800529c:	4b71      	ldr	r3, [pc, #452]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800529e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052a2:	0c1b      	lsrs	r3, r3, #16
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	3301      	adds	r3, #1
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052b4:	0e1b      	lsrs	r3, r3, #24
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	019b      	lsls	r3, r3, #6
 80052c6:	431a      	orrs	r2, r3
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	3b01      	subs	r3, #1
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	431a      	orrs	r2, r3
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	071b      	lsls	r3, r3, #28
 80052de:	4961      	ldr	r1, [pc, #388]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005304:	2b00      	cmp	r3, #0
 8005306:	d035      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005310:	d130      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005312:	4b54      	ldr	r3, [pc, #336]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005318:	0c1b      	lsrs	r3, r3, #16
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	3301      	adds	r3, #1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005324:	4b4f      	ldr	r3, [pc, #316]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800532a:	0f1b      	lsrs	r3, r3, #28
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	019b      	lsls	r3, r3, #6
 800533c:	431a      	orrs	r2, r3
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	3b01      	subs	r3, #1
 8005344:	041b      	lsls	r3, r3, #16
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	061b      	lsls	r3, r3, #24
 800534e:	431a      	orrs	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	071b      	lsls	r3, r3, #28
 8005354:	4943      	ldr	r1, [pc, #268]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800535c:	4b41      	ldr	r3, [pc, #260]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800535e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005362:	f023 021f 	bic.w	r2, r3, #31
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	3b01      	subs	r3, #1
 800536c:	493d      	ldr	r1, [pc, #244]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800537c:	2b00      	cmp	r3, #0
 800537e:	d029      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005388:	d124      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800538a:	4b36      	ldr	r3, [pc, #216]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800538c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	3301      	adds	r3, #1
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800539c:	4b31      	ldr	r3, [pc, #196]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800539e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a2:	0f1b      	lsrs	r3, r3, #28
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	019b      	lsls	r3, r3, #6
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	3b01      	subs	r3, #1
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	431a      	orrs	r2, r3
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	431a      	orrs	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	071b      	lsls	r3, r3, #28
 80053cc:	4925      	ldr	r1, [pc, #148]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d016      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	019b      	lsls	r3, r3, #6
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	3b01      	subs	r3, #1
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	071b      	lsls	r3, r3, #28
 8005406:	4917      	ldr	r1, [pc, #92]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800540e:	4b16      	ldr	r3, [pc, #88]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005414:	f7fc fc5e 	bl	8001cd4 <HAL_GetTick>
 8005418:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800541a:	e008      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800541c:	f7fc fc5a 	bl	8001cd4 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e09f      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800542e:	4b0d      	ldr	r3, [pc, #52]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800543a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543c:	2b01      	cmp	r3, #1
 800543e:	f040 8095 	bne.w	800556c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005442:	4b0a      	ldr	r3, [pc, #40]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005448:	f7fc fc44 	bl	8001cd4 <HAL_GetTick>
 800544c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800544e:	e00f      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005450:	f7fc fc40 	bl	8001cd4 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d908      	bls.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e085      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005462:	bf00      	nop
 8005464:	40023800 	.word	0x40023800
 8005468:	42470068 	.word	0x42470068
 800546c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005470:	4b41      	ldr	r3, [pc, #260]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800547c:	d0e8      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800549a:	2b00      	cmp	r3, #0
 800549c:	d02b      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d127      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80054a6:	4b34      	ldr	r3, [pc, #208]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	3301      	adds	r3, #1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699a      	ldr	r2, [r3, #24]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	019b      	lsls	r3, r3, #6
 80054c2:	431a      	orrs	r2, r3
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	3b01      	subs	r3, #1
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	4928      	ldr	r1, [pc, #160]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054dc:	4b26      	ldr	r3, [pc, #152]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054e2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	3b01      	subs	r3, #1
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	4922      	ldr	r1, [pc, #136]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01d      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800550a:	d118      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800550c:	4b1a      	ldr	r3, [pc, #104]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005512:	0e1b      	lsrs	r3, r3, #24
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	019b      	lsls	r3, r3, #6
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	3b01      	subs	r3, #1
 800552e:	041b      	lsls	r3, r3, #16
 8005530:	431a      	orrs	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	061b      	lsls	r3, r3, #24
 8005536:	4910      	ldr	r1, [pc, #64]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800553e:	4b0f      	ldr	r3, [pc, #60]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005540:	2201      	movs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005544:	f7fc fbc6 	bl	8001cd4 <HAL_GetTick>
 8005548:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800554c:	f7fc fbc2 	bl	8001cd4 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e007      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800555e:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800556a:	d1ef      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3730      	adds	r7, #48	@ 0x30
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40023800 	.word	0x40023800
 800557c:	42470070 	.word	0x42470070

08005580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005584:	b0a6      	sub	sp, #152	@ 0x98
 8005586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055a6:	4bc8      	ldr	r3, [pc, #800]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 030c 	and.w	r3, r3, #12
 80055ae:	2b0c      	cmp	r3, #12
 80055b0:	f200 817e 	bhi.w	80058b0 <HAL_RCC_GetSysClockFreq+0x330>
 80055b4:	a201      	add	r2, pc, #4	@ (adr r2, 80055bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80055b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ba:	bf00      	nop
 80055bc:	080055f1 	.word	0x080055f1
 80055c0:	080058b1 	.word	0x080058b1
 80055c4:	080058b1 	.word	0x080058b1
 80055c8:	080058b1 	.word	0x080058b1
 80055cc:	080055f9 	.word	0x080055f9
 80055d0:	080058b1 	.word	0x080058b1
 80055d4:	080058b1 	.word	0x080058b1
 80055d8:	080058b1 	.word	0x080058b1
 80055dc:	08005601 	.word	0x08005601
 80055e0:	080058b1 	.word	0x080058b1
 80055e4:	080058b1 	.word	0x080058b1
 80055e8:	080058b1 	.word	0x080058b1
 80055ec:	0800576b 	.word	0x0800576b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055f0:	4bb6      	ldr	r3, [pc, #728]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80055f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80055f6:	e15f      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055f8:	4bb5      	ldr	r3, [pc, #724]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80055fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80055fe:	e15b      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005600:	4bb1      	ldr	r3, [pc, #708]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005608:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800560c:	4bae      	ldr	r3, [pc, #696]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d031      	beq.n	800567c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005618:	4bab      	ldr	r3, [pc, #684]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	099b      	lsrs	r3, r3, #6
 800561e:	2200      	movs	r2, #0
 8005620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005622:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005624:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562a:	663b      	str	r3, [r7, #96]	@ 0x60
 800562c:	2300      	movs	r3, #0
 800562e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005630:	4ba7      	ldr	r3, [pc, #668]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005632:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005636:	462a      	mov	r2, r5
 8005638:	fb03 f202 	mul.w	r2, r3, r2
 800563c:	2300      	movs	r3, #0
 800563e:	4621      	mov	r1, r4
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	4413      	add	r3, r2
 8005646:	4aa2      	ldr	r2, [pc, #648]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005648:	4621      	mov	r1, r4
 800564a:	fba1 1202 	umull	r1, r2, r1, r2
 800564e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005650:	460a      	mov	r2, r1
 8005652:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005654:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005656:	4413      	add	r3, r2
 8005658:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800565a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800565e:	2200      	movs	r2, #0
 8005660:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005662:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005664:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005668:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800566c:	f7fb fb2c 	bl	8000cc8 <__aeabi_uldivmod>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4613      	mov	r3, r2
 8005676:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800567a:	e064      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800567c:	4b92      	ldr	r3, [pc, #584]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	099b      	lsrs	r3, r3, #6
 8005682:	2200      	movs	r2, #0
 8005684:	653b      	str	r3, [r7, #80]	@ 0x50
 8005686:	657a      	str	r2, [r7, #84]	@ 0x54
 8005688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800568a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005690:	2300      	movs	r3, #0
 8005692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005694:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005698:	4622      	mov	r2, r4
 800569a:	462b      	mov	r3, r5
 800569c:	f04f 0000 	mov.w	r0, #0
 80056a0:	f04f 0100 	mov.w	r1, #0
 80056a4:	0159      	lsls	r1, r3, #5
 80056a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056aa:	0150      	lsls	r0, r2, #5
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4621      	mov	r1, r4
 80056b2:	1a51      	subs	r1, r2, r1
 80056b4:	6139      	str	r1, [r7, #16]
 80056b6:	4629      	mov	r1, r5
 80056b8:	eb63 0301 	sbc.w	r3, r3, r1
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056ca:	4659      	mov	r1, fp
 80056cc:	018b      	lsls	r3, r1, #6
 80056ce:	4651      	mov	r1, sl
 80056d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056d4:	4651      	mov	r1, sl
 80056d6:	018a      	lsls	r2, r1, #6
 80056d8:	4651      	mov	r1, sl
 80056da:	ebb2 0801 	subs.w	r8, r2, r1
 80056de:	4659      	mov	r1, fp
 80056e0:	eb63 0901 	sbc.w	r9, r3, r1
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056f8:	4690      	mov	r8, r2
 80056fa:	4699      	mov	r9, r3
 80056fc:	4623      	mov	r3, r4
 80056fe:	eb18 0303 	adds.w	r3, r8, r3
 8005702:	60bb      	str	r3, [r7, #8]
 8005704:	462b      	mov	r3, r5
 8005706:	eb49 0303 	adc.w	r3, r9, r3
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005718:	4629      	mov	r1, r5
 800571a:	028b      	lsls	r3, r1, #10
 800571c:	4621      	mov	r1, r4
 800571e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005722:	4621      	mov	r1, r4
 8005724:	028a      	lsls	r2, r1, #10
 8005726:	4610      	mov	r0, r2
 8005728:	4619      	mov	r1, r3
 800572a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800572e:	2200      	movs	r2, #0
 8005730:	643b      	str	r3, [r7, #64]	@ 0x40
 8005732:	647a      	str	r2, [r7, #68]	@ 0x44
 8005734:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005738:	f7fb fac6 	bl	8000cc8 <__aeabi_uldivmod>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4613      	mov	r3, r2
 8005742:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005746:	4b60      	ldr	r3, [pc, #384]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	0c1b      	lsrs	r3, r3, #16
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	3301      	adds	r3, #1
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8005758:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800575c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005768:	e0a6      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800576a:	4b57      	ldr	r3, [pc, #348]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005772:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005776:	4b54      	ldr	r3, [pc, #336]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d02a      	beq.n	80057d8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005782:	4b51      	ldr	r3, [pc, #324]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	099b      	lsrs	r3, r3, #6
 8005788:	2200      	movs	r2, #0
 800578a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800578c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800578e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005790:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005794:	2100      	movs	r1, #0
 8005796:	4b4e      	ldr	r3, [pc, #312]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005798:	fb03 f201 	mul.w	r2, r3, r1
 800579c:	2300      	movs	r3, #0
 800579e:	fb00 f303 	mul.w	r3, r0, r3
 80057a2:	4413      	add	r3, r2
 80057a4:	4a4a      	ldr	r2, [pc, #296]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80057a6:	fba0 1202 	umull	r1, r2, r0, r2
 80057aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80057ac:	460a      	mov	r2, r1
 80057ae:	673a      	str	r2, [r7, #112]	@ 0x70
 80057b0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80057b2:	4413      	add	r3, r2
 80057b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80057b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057ba:	2200      	movs	r2, #0
 80057bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80057be:	637a      	str	r2, [r7, #52]	@ 0x34
 80057c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80057c4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80057c8:	f7fb fa7e 	bl	8000cc8 <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4613      	mov	r3, r2
 80057d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80057d6:	e05b      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057d8:	4b3b      	ldr	r3, [pc, #236]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	099b      	lsrs	r3, r3, #6
 80057de:	2200      	movs	r2, #0
 80057e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	2300      	movs	r3, #0
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057f4:	4642      	mov	r2, r8
 80057f6:	464b      	mov	r3, r9
 80057f8:	f04f 0000 	mov.w	r0, #0
 80057fc:	f04f 0100 	mov.w	r1, #0
 8005800:	0159      	lsls	r1, r3, #5
 8005802:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005806:	0150      	lsls	r0, r2, #5
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4641      	mov	r1, r8
 800580e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005812:	4649      	mov	r1, r9
 8005814:	eb63 0b01 	sbc.w	fp, r3, r1
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005824:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005828:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800582c:	ebb2 040a 	subs.w	r4, r2, sl
 8005830:	eb63 050b 	sbc.w	r5, r3, fp
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	00eb      	lsls	r3, r5, #3
 800583e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005842:	00e2      	lsls	r2, r4, #3
 8005844:	4614      	mov	r4, r2
 8005846:	461d      	mov	r5, r3
 8005848:	4643      	mov	r3, r8
 800584a:	18e3      	adds	r3, r4, r3
 800584c:	603b      	str	r3, [r7, #0]
 800584e:	464b      	mov	r3, r9
 8005850:	eb45 0303 	adc.w	r3, r5, r3
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005862:	4629      	mov	r1, r5
 8005864:	028b      	lsls	r3, r1, #10
 8005866:	4621      	mov	r1, r4
 8005868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800586c:	4621      	mov	r1, r4
 800586e:	028a      	lsls	r2, r1, #10
 8005870:	4610      	mov	r0, r2
 8005872:	4619      	mov	r1, r3
 8005874:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005878:	2200      	movs	r2, #0
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	61fa      	str	r2, [r7, #28]
 800587e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005882:	f7fb fa21 	bl	8000cc8 <__aeabi_uldivmod>
 8005886:	4602      	mov	r2, r0
 8005888:	460b      	mov	r3, r1
 800588a:	4613      	mov	r3, r2
 800588c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005890:	4b0d      	ldr	r3, [pc, #52]	@ (80058c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	0f1b      	lsrs	r3, r3, #28
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 800589e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80058ae:	e003      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058b0:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80058b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80058b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3798      	adds	r7, #152	@ 0x98
 80058c0:	46bd      	mov	sp, r7
 80058c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058c6:	bf00      	nop
 80058c8:	40023800 	.word	0x40023800
 80058cc:	00f42400 	.word	0x00f42400
 80058d0:	00b71b00 	.word	0x00b71b00

080058d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e28d      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8083 	beq.w	80059fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80058f4:	4b94      	ldr	r3, [pc, #592]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 030c 	and.w	r3, r3, #12
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d019      	beq.n	8005934 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005900:	4b91      	ldr	r3, [pc, #580]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005908:	2b08      	cmp	r3, #8
 800590a:	d106      	bne.n	800591a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800590c:	4b8e      	ldr	r3, [pc, #568]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005914:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005918:	d00c      	beq.n	8005934 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800591a:	4b8b      	ldr	r3, [pc, #556]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005922:	2b0c      	cmp	r3, #12
 8005924:	d112      	bne.n	800594c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005926:	4b88      	ldr	r3, [pc, #544]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800592e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005932:	d10b      	bne.n	800594c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005934:	4b84      	ldr	r3, [pc, #528]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d05b      	beq.n	80059f8 <HAL_RCC_OscConfig+0x124>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d157      	bne.n	80059f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e25a      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005954:	d106      	bne.n	8005964 <HAL_RCC_OscConfig+0x90>
 8005956:	4b7c      	ldr	r3, [pc, #496]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a7b      	ldr	r2, [pc, #492]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 800595c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	e01d      	b.n	80059a0 <HAL_RCC_OscConfig+0xcc>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800596c:	d10c      	bne.n	8005988 <HAL_RCC_OscConfig+0xb4>
 800596e:	4b76      	ldr	r3, [pc, #472]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a75      	ldr	r2, [pc, #468]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	4b73      	ldr	r3, [pc, #460]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a72      	ldr	r2, [pc, #456]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	e00b      	b.n	80059a0 <HAL_RCC_OscConfig+0xcc>
 8005988:	4b6f      	ldr	r3, [pc, #444]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a6e      	ldr	r2, [pc, #440]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 800598e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	4b6c      	ldr	r3, [pc, #432]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a6b      	ldr	r2, [pc, #428]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 800599a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800599e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d013      	beq.n	80059d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a8:	f7fc f994 	bl	8001cd4 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059b0:	f7fc f990 	bl	8001cd4 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b64      	cmp	r3, #100	@ 0x64
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e21f      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059c2:	4b61      	ldr	r3, [pc, #388]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0f0      	beq.n	80059b0 <HAL_RCC_OscConfig+0xdc>
 80059ce:	e014      	b.n	80059fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fc f980 	bl	8001cd4 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059d8:	f7fc f97c 	bl	8001cd4 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	@ 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e20b      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ea:	4b57      	ldr	r3, [pc, #348]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f0      	bne.n	80059d8 <HAL_RCC_OscConfig+0x104>
 80059f6:	e000      	b.n	80059fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d06f      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a06:	4b50      	ldr	r3, [pc, #320]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 030c 	and.w	r3, r3, #12
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d017      	beq.n	8005a42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a12:	4b4d      	ldr	r3, [pc, #308]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d105      	bne.n	8005a2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a2a:	4b47      	ldr	r3, [pc, #284]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a32:	2b0c      	cmp	r3, #12
 8005a34:	d11c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a36:	4b44      	ldr	r3, [pc, #272]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d116      	bne.n	8005a70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a42:	4b41      	ldr	r3, [pc, #260]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <HAL_RCC_OscConfig+0x186>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d001      	beq.n	8005a5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e1d3      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4937      	ldr	r1, [pc, #220]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a6e:	e03a      	b.n	8005ae6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d020      	beq.n	8005aba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a78:	4b34      	ldr	r3, [pc, #208]	@ (8005b4c <HAL_RCC_OscConfig+0x278>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7e:	f7fc f929 	bl	8001cd4 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a86:	f7fc f925 	bl	8001cd4 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e1b4      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a98:	4b2b      	ldr	r3, [pc, #172]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa4:	4b28      	ldr	r3, [pc, #160]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4925      	ldr	r1, [pc, #148]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	600b      	str	r3, [r1, #0]
 8005ab8:	e015      	b.n	8005ae6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aba:	4b24      	ldr	r3, [pc, #144]	@ (8005b4c <HAL_RCC_OscConfig+0x278>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac0:	f7fc f908 	bl	8001cd4 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ac8:	f7fc f904 	bl	8001cd4 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e193      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ada:	4b1b      	ldr	r3, [pc, #108]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d036      	beq.n	8005b60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d016      	beq.n	8005b28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005afa:	4b15      	ldr	r3, [pc, #84]	@ (8005b50 <HAL_RCC_OscConfig+0x27c>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fc f8e8 	bl	8001cd4 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b08:	f7fc f8e4 	bl	8001cd4 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e173      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0x234>
 8005b26:	e01b      	b.n	8005b60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b28:	4b09      	ldr	r3, [pc, #36]	@ (8005b50 <HAL_RCC_OscConfig+0x27c>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b2e:	f7fc f8d1 	bl	8001cd4 <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b34:	e00e      	b.n	8005b54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b36:	f7fc f8cd 	bl	8001cd4 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d907      	bls.n	8005b54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e15c      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
 8005b48:	40023800 	.word	0x40023800
 8005b4c:	42470000 	.word	0x42470000
 8005b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b54:	4b8a      	ldr	r3, [pc, #552]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1ea      	bne.n	8005b36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 8097 	beq.w	8005c9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b72:	4b83      	ldr	r3, [pc, #524]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10f      	bne.n	8005b9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60bb      	str	r3, [r7, #8]
 8005b82:	4b7f      	ldr	r3, [pc, #508]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	4a7e      	ldr	r2, [pc, #504]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b96:	60bb      	str	r3, [r7, #8]
 8005b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9e:	4b79      	ldr	r3, [pc, #484]	@ (8005d84 <HAL_RCC_OscConfig+0x4b0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d118      	bne.n	8005bdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005baa:	4b76      	ldr	r3, [pc, #472]	@ (8005d84 <HAL_RCC_OscConfig+0x4b0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a75      	ldr	r2, [pc, #468]	@ (8005d84 <HAL_RCC_OscConfig+0x4b0>)
 8005bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb6:	f7fc f88d 	bl	8001cd4 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bbe:	f7fc f889 	bl	8001cd4 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e118      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd0:	4b6c      	ldr	r3, [pc, #432]	@ (8005d84 <HAL_RCC_OscConfig+0x4b0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d106      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x31e>
 8005be4:	4b66      	ldr	r3, [pc, #408]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be8:	4a65      	ldr	r2, [pc, #404]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bf0:	e01c      	b.n	8005c2c <HAL_RCC_OscConfig+0x358>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b05      	cmp	r3, #5
 8005bf8:	d10c      	bne.n	8005c14 <HAL_RCC_OscConfig+0x340>
 8005bfa:	4b61      	ldr	r3, [pc, #388]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfe:	4a60      	ldr	r2, [pc, #384]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005c00:	f043 0304 	orr.w	r3, r3, #4
 8005c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c06:	4b5e      	ldr	r3, [pc, #376]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0a:	4a5d      	ldr	r2, [pc, #372]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c12:	e00b      	b.n	8005c2c <HAL_RCC_OscConfig+0x358>
 8005c14:	4b5a      	ldr	r3, [pc, #360]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c18:	4a59      	ldr	r2, [pc, #356]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005c1a:	f023 0301 	bic.w	r3, r3, #1
 8005c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c20:	4b57      	ldr	r3, [pc, #348]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c24:	4a56      	ldr	r2, [pc, #344]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005c26:	f023 0304 	bic.w	r3, r3, #4
 8005c2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d015      	beq.n	8005c60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c34:	f7fc f84e 	bl	8001cd4 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c3a:	e00a      	b.n	8005c52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c3c:	f7fc f84a 	bl	8001cd4 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e0d7      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c52:	4b4b      	ldr	r3, [pc, #300]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0ee      	beq.n	8005c3c <HAL_RCC_OscConfig+0x368>
 8005c5e:	e014      	b.n	8005c8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c60:	f7fc f838 	bl	8001cd4 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c66:	e00a      	b.n	8005c7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c68:	f7fc f834 	bl	8001cd4 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e0c1      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c7e:	4b40      	ldr	r3, [pc, #256]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1ee      	bne.n	8005c68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d105      	bne.n	8005c9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c90:	4b3b      	ldr	r3, [pc, #236]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	4a3a      	ldr	r2, [pc, #232]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80ad 	beq.w	8005e00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ca6:	4b36      	ldr	r3, [pc, #216]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 030c 	and.w	r3, r3, #12
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d060      	beq.n	8005d74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d145      	bne.n	8005d46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cba:	4b33      	ldr	r3, [pc, #204]	@ (8005d88 <HAL_RCC_OscConfig+0x4b4>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc0:	f7fc f808 	bl	8001cd4 <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cc8:	f7fc f804 	bl	8001cd4 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e093      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cda:	4b29      	ldr	r3, [pc, #164]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f0      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69da      	ldr	r2, [r3, #28]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	019b      	lsls	r3, r3, #6
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	085b      	lsrs	r3, r3, #1
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	041b      	lsls	r3, r3, #16
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d08:	061b      	lsls	r3, r3, #24
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d10:	071b      	lsls	r3, r3, #28
 8005d12:	491b      	ldr	r1, [pc, #108]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d18:	4b1b      	ldr	r3, [pc, #108]	@ (8005d88 <HAL_RCC_OscConfig+0x4b4>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1e:	f7fb ffd9 	bl	8001cd4 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d26:	f7fb ffd5 	bl	8001cd4 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e064      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d38:	4b11      	ldr	r3, [pc, #68]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0f0      	beq.n	8005d26 <HAL_RCC_OscConfig+0x452>
 8005d44:	e05c      	b.n	8005e00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d46:	4b10      	ldr	r3, [pc, #64]	@ (8005d88 <HAL_RCC_OscConfig+0x4b4>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4c:	f7fb ffc2 	bl	8001cd4 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d54:	f7fb ffbe 	bl	8001cd4 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e04d      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d66:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <HAL_RCC_OscConfig+0x4ac>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f0      	bne.n	8005d54 <HAL_RCC_OscConfig+0x480>
 8005d72:	e045      	b.n	8005e00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d107      	bne.n	8005d8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e040      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
 8005d80:	40023800 	.word	0x40023800
 8005d84:	40007000 	.word	0x40007000
 8005d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8005e0c <HAL_RCC_OscConfig+0x538>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d030      	beq.n	8005dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d129      	bne.n	8005dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d122      	bne.n	8005dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d119      	bne.n	8005dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d10f      	bne.n	8005dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d107      	bne.n	8005dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40023800 	.word	0x40023800

08005e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e041      	b.n	8005ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f839 	bl	8005eae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f000 f9c0 	bl	80061d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
	...

08005ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d001      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e04e      	b.n	8005f7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0201 	orr.w	r2, r2, #1
 8005ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a23      	ldr	r2, [pc, #140]	@ (8005f88 <HAL_TIM_Base_Start_IT+0xc4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d022      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f06:	d01d      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8005f8c <HAL_TIM_Base_Start_IT+0xc8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d018      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1e      	ldr	r2, [pc, #120]	@ (8005f90 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1c      	ldr	r2, [pc, #112]	@ (8005f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00e      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d009      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a19      	ldr	r2, [pc, #100]	@ (8005f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x80>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a18      	ldr	r2, [pc, #96]	@ (8005fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d111      	bne.n	8005f68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b06      	cmp	r3, #6
 8005f54:	d010      	beq.n	8005f78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0201 	orr.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f66:	e007      	b.n	8005f78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40010000 	.word	0x40010000
 8005f8c:	40000400 	.word	0x40000400
 8005f90:	40000800 	.word	0x40000800
 8005f94:	40000c00 	.word	0x40000c00
 8005f98:	40010400 	.word	0x40010400
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40001800 	.word	0x40001800

08005fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d020      	beq.n	8006008 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0202 	mvn.w	r2, #2
 8005fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f8d2 	bl	8006198 <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f8c4 	bl	8006184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f8d5 	bl	80061ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d020      	beq.n	8006054 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0204 	mvn.w	r2, #4
 8006024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8ac 	bl	8006198 <HAL_TIM_IC_CaptureCallback>
 8006040:	e005      	b.n	800604e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f89e 	bl	8006184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f8af 	bl	80061ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d020      	beq.n	80060a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01b      	beq.n	80060a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0208 	mvn.w	r2, #8
 8006070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2204      	movs	r2, #4
 8006076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f886 	bl	8006198 <HAL_TIM_IC_CaptureCallback>
 800608c:	e005      	b.n	800609a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f878 	bl	8006184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f889 	bl	80061ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d020      	beq.n	80060ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01b      	beq.n	80060ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0210 	mvn.w	r2, #16
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2208      	movs	r2, #8
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f860 	bl	8006198 <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f852 	bl	8006184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f863 	bl	80061ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00c      	beq.n	8006110 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0201 	mvn.w	r2, #1
 8006108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fb f9c0 	bl	8001490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00c      	beq.n	8006134 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800612c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f906 	bl	8006340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00c      	beq.n	8006158 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	d007      	beq.n	8006158 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f834 	bl	80061c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00c      	beq.n	800617c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f06f 0220 	mvn.w	r2, #32
 8006174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8d8 	bl	800632c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800617c:	bf00      	nop
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a46      	ldr	r2, [pc, #280]	@ (8006300 <TIM_Base_SetConfig+0x12c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d013      	beq.n	8006214 <TIM_Base_SetConfig+0x40>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f2:	d00f      	beq.n	8006214 <TIM_Base_SetConfig+0x40>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a43      	ldr	r2, [pc, #268]	@ (8006304 <TIM_Base_SetConfig+0x130>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00b      	beq.n	8006214 <TIM_Base_SetConfig+0x40>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a42      	ldr	r2, [pc, #264]	@ (8006308 <TIM_Base_SetConfig+0x134>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d007      	beq.n	8006214 <TIM_Base_SetConfig+0x40>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a41      	ldr	r2, [pc, #260]	@ (800630c <TIM_Base_SetConfig+0x138>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d003      	beq.n	8006214 <TIM_Base_SetConfig+0x40>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a40      	ldr	r2, [pc, #256]	@ (8006310 <TIM_Base_SetConfig+0x13c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d108      	bne.n	8006226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800621a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a35      	ldr	r2, [pc, #212]	@ (8006300 <TIM_Base_SetConfig+0x12c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d02b      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006234:	d027      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a32      	ldr	r2, [pc, #200]	@ (8006304 <TIM_Base_SetConfig+0x130>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d023      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a31      	ldr	r2, [pc, #196]	@ (8006308 <TIM_Base_SetConfig+0x134>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01f      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a30      	ldr	r2, [pc, #192]	@ (800630c <TIM_Base_SetConfig+0x138>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01b      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a2f      	ldr	r2, [pc, #188]	@ (8006310 <TIM_Base_SetConfig+0x13c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d017      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a2e      	ldr	r2, [pc, #184]	@ (8006314 <TIM_Base_SetConfig+0x140>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a2d      	ldr	r2, [pc, #180]	@ (8006318 <TIM_Base_SetConfig+0x144>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00f      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a2c      	ldr	r2, [pc, #176]	@ (800631c <TIM_Base_SetConfig+0x148>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00b      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2b      	ldr	r2, [pc, #172]	@ (8006320 <TIM_Base_SetConfig+0x14c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d007      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2a      	ldr	r2, [pc, #168]	@ (8006324 <TIM_Base_SetConfig+0x150>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d003      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a29      	ldr	r2, [pc, #164]	@ (8006328 <TIM_Base_SetConfig+0x154>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d108      	bne.n	8006298 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800628c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a10      	ldr	r2, [pc, #64]	@ (8006300 <TIM_Base_SetConfig+0x12c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d003      	beq.n	80062cc <TIM_Base_SetConfig+0xf8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a12      	ldr	r2, [pc, #72]	@ (8006310 <TIM_Base_SetConfig+0x13c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d103      	bne.n	80062d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d105      	bne.n	80062f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f023 0201 	bic.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	611a      	str	r2, [r3, #16]
  }
}
 80062f2:	bf00      	nop
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40010000 	.word	0x40010000
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00
 8006310:	40010400 	.word	0x40010400
 8006314:	40014000 	.word	0x40014000
 8006318:	40014400 	.word	0x40014400
 800631c:	40014800 	.word	0x40014800
 8006320:	40001800 	.word	0x40001800
 8006324:	40001c00 	.word	0x40001c00
 8006328:	40002000 	.word	0x40002000

0800632c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e042      	b.n	80063ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fb faf0 	bl	8001960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2224      	movs	r2, #36	@ 0x24
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 ffc9 	bl	8007330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691a      	ldr	r2, [r3, #16]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695a      	ldr	r2, [r3, #20]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08c      	sub	sp, #48	@ 0x30
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b20      	cmp	r3, #32
 800640c:	d156      	bne.n	80064bc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_UART_Transmit_DMA+0x26>
 8006414:	88fb      	ldrh	r3, [r7, #6]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e04f      	b.n	80064be <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	88fa      	ldrh	r2, [r7, #6]
 800642e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2221      	movs	r2, #33	@ 0x21
 800643a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006442:	4a21      	ldr	r2, [pc, #132]	@ (80064c8 <HAL_UART_Transmit_DMA+0xd4>)
 8006444:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644a:	4a20      	ldr	r2, [pc, #128]	@ (80064cc <HAL_UART_Transmit_DMA+0xd8>)
 800644c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006452:	4a1f      	ldr	r2, [pc, #124]	@ (80064d0 <HAL_UART_Transmit_DMA+0xdc>)
 8006454:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645a:	2200      	movs	r2, #0
 800645c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800645e:	f107 0308 	add.w	r3, r7, #8
 8006462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646a:	6819      	ldr	r1, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3304      	adds	r3, #4
 8006472:	461a      	mov	r2, r3
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	f7fc fc55 	bl	8002d24 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006482:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3314      	adds	r3, #20
 800648a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	617b      	str	r3, [r7, #20]
   return(result);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3314      	adds	r3, #20
 80064a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80064a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6a39      	ldr	r1, [r7, #32]
 80064aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e5      	bne.n	8006484 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e000      	b.n	80064be <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3730      	adds	r7, #48	@ 0x30
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	08006bbd 	.word	0x08006bbd
 80064cc:	08006c57 	.word	0x08006c57
 80064d0:	08006ddb 	.word	0x08006ddb

080064d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d112      	bne.n	8006514 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_UART_Receive_DMA+0x26>
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e00b      	b.n	8006516 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	461a      	mov	r2, r3
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fcb0 	bl	8006e70 <UART_Start_Receive_DMA>
 8006510:	4603      	mov	r3, r0
 8006512:	e000      	b.n	8006516 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b090      	sub	sp, #64	@ 0x40
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006526:	2300      	movs	r3, #0
 8006528:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006534:	2b80      	cmp	r3, #128	@ 0x80
 8006536:	bf0c      	ite	eq
 8006538:	2301      	moveq	r3, #1
 800653a:	2300      	movne	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b21      	cmp	r3, #33	@ 0x21
 800654a:	d128      	bne.n	800659e <HAL_UART_DMAStop+0x80>
 800654c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654e:	2b00      	cmp	r3, #0
 8006550:	d025      	beq.n	800659e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3314      	adds	r3, #20
 8006558:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	623b      	str	r3, [r7, #32]
   return(result);
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006568:	63bb      	str	r3, [r7, #56]	@ 0x38
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3314      	adds	r3, #20
 8006570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006572:	633a      	str	r2, [r7, #48]	@ 0x30
 8006574:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e5      	bne.n	8006552 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658a:	2b00      	cmp	r3, #0
 800658c:	d004      	beq.n	8006598 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006592:	4618      	mov	r0, r3
 8006594:	f7fc fc1e 	bl	8002dd4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fd03 	bl	8006fa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a8:	2b40      	cmp	r3, #64	@ 0x40
 80065aa:	bf0c      	ite	eq
 80065ac:	2301      	moveq	r3, #1
 80065ae:	2300      	movne	r3, #0
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b22      	cmp	r3, #34	@ 0x22
 80065be:	d128      	bne.n	8006612 <HAL_UART_DMAStop+0xf4>
 80065c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d025      	beq.n	8006612 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3314      	adds	r3, #20
 80065cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3314      	adds	r3, #20
 80065e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065e6:	61fa      	str	r2, [r7, #28]
 80065e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	69b9      	ldr	r1, [r7, #24]
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	617b      	str	r3, [r7, #20]
   return(result);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e5      	bne.n	80065c6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d004      	beq.n	800660c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006606:	4618      	mov	r0, r3
 8006608:	f7fc fbe4 	bl	8002dd4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fcf1 	bl	8006ff4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3740      	adds	r7, #64	@ 0x40
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b0ba      	sub	sp, #232	@ 0xe8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006642:	2300      	movs	r3, #0
 8006644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006648:	2300      	movs	r3, #0
 800664a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800664e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800665a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10f      	bne.n	8006682 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <HAL_UART_IRQHandler+0x66>
 800666e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fd99 	bl	80071b2 <UART_Receive_IT>
      return;
 8006680:	e25b      	b.n	8006b3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 80de 	beq.w	8006848 <HAL_UART_IRQHandler+0x22c>
 800668c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800669c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 80d1 	beq.w	8006848 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00b      	beq.n	80066ca <HAL_UART_IRQHandler+0xae>
 80066b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d005      	beq.n	80066ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c2:	f043 0201 	orr.w	r2, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <HAL_UART_IRQHandler+0xd2>
 80066d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e6:	f043 0202 	orr.w	r2, r3, #2
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00b      	beq.n	8006712 <HAL_UART_IRQHandler+0xf6>
 80066fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d005      	beq.n	8006712 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670a:	f043 0204 	orr.w	r2, r3, #4
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006716:	f003 0308 	and.w	r3, r3, #8
 800671a:	2b00      	cmp	r3, #0
 800671c:	d011      	beq.n	8006742 <HAL_UART_IRQHandler+0x126>
 800671e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b00      	cmp	r3, #0
 8006728:	d105      	bne.n	8006736 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800672a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d005      	beq.n	8006742 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800673a:	f043 0208 	orr.w	r2, r3, #8
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 81f2 	beq.w	8006b30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800674c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b00      	cmp	r3, #0
 8006756:	d008      	beq.n	800676a <HAL_UART_IRQHandler+0x14e>
 8006758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fd24 	bl	80071b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006774:	2b40      	cmp	r3, #64	@ 0x40
 8006776:	bf0c      	ite	eq
 8006778:	2301      	moveq	r3, #1
 800677a:	2300      	movne	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <HAL_UART_IRQHandler+0x17a>
 800678e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006792:	2b00      	cmp	r3, #0
 8006794:	d04f      	beq.n	8006836 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fc2c 	bl	8006ff4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a6:	2b40      	cmp	r3, #64	@ 0x40
 80067a8:	d141      	bne.n	800682e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3314      	adds	r3, #20
 80067b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3314      	adds	r3, #20
 80067d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1d9      	bne.n	80067aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d013      	beq.n	8006826 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006802:	4a7e      	ldr	r2, [pc, #504]	@ (80069fc <HAL_UART_IRQHandler+0x3e0>)
 8006804:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800680a:	4618      	mov	r0, r3
 800680c:	f7fc fb52 	bl	8002eb4 <HAL_DMA_Abort_IT>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d016      	beq.n	8006844 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006820:	4610      	mov	r0, r2
 8006822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006824:	e00e      	b.n	8006844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f9b2 	bl	8006b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	e00a      	b.n	8006844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f9ae 	bl	8006b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006834:	e006      	b.n	8006844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f9aa 	bl	8006b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006842:	e175      	b.n	8006b30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006844:	bf00      	nop
    return;
 8006846:	e173      	b.n	8006b30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684c:	2b01      	cmp	r3, #1
 800684e:	f040 814f 	bne.w	8006af0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006856:	f003 0310 	and.w	r3, r3, #16
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 8148 	beq.w	8006af0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8141 	beq.w	8006af0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800686e:	2300      	movs	r3, #0
 8006870:	60bb      	str	r3, [r7, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688e:	2b40      	cmp	r3, #64	@ 0x40
 8006890:	f040 80b6 	bne.w	8006a00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8145 	beq.w	8006b34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068b2:	429a      	cmp	r2, r3
 80068b4:	f080 813e 	bcs.w	8006b34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ca:	f000 8088 	beq.w	80069de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	330c      	adds	r3, #12
 80068d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	330c      	adds	r3, #12
 80068f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80068fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80068fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006906:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1d9      	bne.n	80068ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3314      	adds	r3, #20
 8006920:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800692a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3314      	adds	r3, #20
 800693a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800693e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006942:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006946:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e1      	bne.n	800691a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3314      	adds	r3, #20
 800695c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800696c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3314      	adds	r3, #20
 8006976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800697a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800697c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006980:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e3      	bne.n	8006956 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	330c      	adds	r3, #12
 80069a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069ae:	f023 0310 	bic.w	r3, r3, #16
 80069b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	330c      	adds	r3, #12
 80069bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80069c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e3      	bne.n	800699c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fc f9fb 	bl	8002dd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f8d5 	bl	8006ba4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069fa:	e09b      	b.n	8006b34 <HAL_UART_IRQHandler+0x518>
 80069fc:	080070bb 	.word	0x080070bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 808e 	beq.w	8006b38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 8089 	beq.w	8006b38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	330c      	adds	r3, #12
 8006a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	330c      	adds	r3, #12
 8006a46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e3      	bne.n	8006a26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3314      	adds	r3, #20
 8006a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3314      	adds	r3, #20
 8006a7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a82:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e3      	bne.n	8006a5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0310 	bic.w	r3, r3, #16
 8006aba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	330c      	adds	r3, #12
 8006ac4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ac8:	61fa      	str	r2, [r7, #28]
 8006aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	69b9      	ldr	r1, [r7, #24]
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e3      	bne.n	8006aa4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ae2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f85b 	bl	8006ba4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006aee:	e023      	b.n	8006b38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d009      	beq.n	8006b10 <HAL_UART_IRQHandler+0x4f4>
 8006afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 faea 	bl	80070e2 <UART_Transmit_IT>
    return;
 8006b0e:	e014      	b.n	8006b3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00e      	beq.n	8006b3a <HAL_UART_IRQHandler+0x51e>
 8006b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fb2a 	bl	8007182 <UART_EndTransmit_IT>
    return;
 8006b2e:	e004      	b.n	8006b3a <HAL_UART_IRQHandler+0x51e>
    return;
 8006b30:	bf00      	nop
 8006b32:	e002      	b.n	8006b3a <HAL_UART_IRQHandler+0x51e>
      return;
 8006b34:	bf00      	nop
 8006b36:	e000      	b.n	8006b3a <HAL_UART_IRQHandler+0x51e>
      return;
 8006b38:	bf00      	nop
  }
}
 8006b3a:	37e8      	adds	r7, #232	@ 0xe8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b090      	sub	sp, #64	@ 0x40
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d137      	bne.n	8006c48 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bda:	2200      	movs	r2, #0
 8006bdc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3314      	adds	r3, #20
 8006be4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	623b      	str	r3, [r7, #32]
   return(result);
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3314      	adds	r3, #20
 8006bfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e5      	bne.n	8006bde <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	330c      	adds	r3, #12
 8006c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	330c      	adds	r3, #12
 8006c30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c32:	61fa      	str	r2, [r7, #28]
 8006c34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	69b9      	ldr	r1, [r7, #24]
 8006c38:	69fa      	ldr	r2, [r7, #28]
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e5      	bne.n	8006c12 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c46:	e002      	b.n	8006c4e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c48:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006c4a:	f7ff ff79 	bl	8006b40 <HAL_UART_TxCpltCallback>
}
 8006c4e:	bf00      	nop
 8006c50:	3740      	adds	r7, #64	@ 0x40
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff ff75 	bl	8006b54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c6a:	bf00      	nop
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b09c      	sub	sp, #112	@ 0x70
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d172      	bne.n	8006d74 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c90:	2200      	movs	r2, #0
 8006c92:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	330c      	adds	r3, #12
 8006c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006caa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006cb4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006cb6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e5      	bne.n	8006c94 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3314      	adds	r3, #20
 8006cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ce8:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e5      	bne.n	8006cc8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3314      	adds	r3, #20
 8006d02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d12:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3314      	adds	r3, #20
 8006d1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e5      	bne.n	8006cfc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d119      	bne.n	8006d74 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	330c      	adds	r3, #12
 8006d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0310 	bic.w	r3, r3, #16
 8006d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d60:	61fa      	str	r2, [r7, #28]
 8006d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	69b9      	ldr	r1, [r7, #24]
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e5      	bne.n	8006d40 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d76:	2200      	movs	r2, #0
 8006d78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d106      	bne.n	8006d90 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d86:	4619      	mov	r1, r3
 8006d88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d8a:	f7ff ff0b 	bl	8006ba4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d8e:	e002      	b.n	8006d96 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006d90:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d92:	f7ff fee9 	bl	8006b68 <HAL_UART_RxCpltCallback>
}
 8006d96:	bf00      	nop
 8006d98:	3770      	adds	r7, #112	@ 0x70
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d108      	bne.n	8006dcc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006dbe:	085b      	lsrs	r3, r3, #1
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f7ff feed 	bl	8006ba4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dca:	e002      	b.n	8006dd2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7ff fed5 	bl	8006b7c <HAL_UART_RxHalfCpltCallback>
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006df6:	2b80      	cmp	r3, #128	@ 0x80
 8006df8:	bf0c      	ite	eq
 8006dfa:	2301      	moveq	r3, #1
 8006dfc:	2300      	movne	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b21      	cmp	r3, #33	@ 0x21
 8006e0c:	d108      	bne.n	8006e20 <UART_DMAError+0x46>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d005      	beq.n	8006e20 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2200      	movs	r2, #0
 8006e18:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006e1a:	68b8      	ldr	r0, [r7, #8]
 8006e1c:	f000 f8c2 	bl	8006fa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2a:	2b40      	cmp	r3, #64	@ 0x40
 8006e2c:	bf0c      	ite	eq
 8006e2e:	2301      	moveq	r3, #1
 8006e30:	2300      	movne	r3, #0
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b22      	cmp	r3, #34	@ 0x22
 8006e40:	d108      	bne.n	8006e54 <UART_DMAError+0x7a>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006e4e:	68b8      	ldr	r0, [r7, #8]
 8006e50:	f000 f8d0 	bl	8006ff4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e58:	f043 0210 	orr.w	r2, r3, #16
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e60:	68b8      	ldr	r0, [r7, #8]
 8006e62:	f7ff fe95 	bl	8006b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b098      	sub	sp, #96	@ 0x60
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2222      	movs	r2, #34	@ 0x22
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e9c:	4a3e      	ldr	r2, [pc, #248]	@ (8006f98 <UART_Start_Receive_DMA+0x128>)
 8006e9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea4:	4a3d      	ldr	r2, [pc, #244]	@ (8006f9c <UART_Start_Receive_DMA+0x12c>)
 8006ea6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eac:	4a3c      	ldr	r2, [pc, #240]	@ (8006fa0 <UART_Start_Receive_DMA+0x130>)
 8006eae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006eb8:	f107 0308 	add.w	r3, r7, #8
 8006ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	f7fb ff28 	bl	8002d24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d019      	beq.n	8006f26 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f12:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006f14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006f18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e5      	bne.n	8006ef2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3314      	adds	r3, #20
 8006f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f38:	f043 0301 	orr.w	r3, r3, #1
 8006f3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3314      	adds	r3, #20
 8006f44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f46:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006f48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006f4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e5      	bne.n	8006f26 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3314      	adds	r3, #20
 8006f60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	617b      	str	r3, [r7, #20]
   return(result);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f70:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3314      	adds	r3, #20
 8006f78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6a39      	ldr	r1, [r7, #32]
 8006f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e5      	bne.n	8006f5a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3760      	adds	r7, #96	@ 0x60
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	08006c73 	.word	0x08006c73
 8006f9c:	08006d9f 	.word	0x08006d9f
 8006fa0:	08006ddb 	.word	0x08006ddb

08006fa4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b089      	sub	sp, #36	@ 0x24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006fc2:	61fb      	str	r3, [r7, #28]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	330c      	adds	r3, #12
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	61ba      	str	r2, [r7, #24]
 8006fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	6979      	ldr	r1, [r7, #20]
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e5      	bne.n	8006fac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006fe8:	bf00      	nop
 8006fea:	3724      	adds	r7, #36	@ 0x24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b095      	sub	sp, #84	@ 0x54
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800701c:	643a      	str	r2, [r7, #64]	@ 0x40
 800701e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007022:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800702a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e5      	bne.n	8006ffc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3314      	adds	r3, #20
 8007036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f023 0301 	bic.w	r3, r3, #1
 8007046:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3314      	adds	r3, #20
 800704e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007050:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007052:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e5      	bne.n	8007030 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007068:	2b01      	cmp	r3, #1
 800706a:	d119      	bne.n	80070a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	330c      	adds	r3, #12
 8007072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	60bb      	str	r3, [r7, #8]
   return(result);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f023 0310 	bic.w	r3, r3, #16
 8007082:	647b      	str	r3, [r7, #68]	@ 0x44
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	330c      	adds	r3, #12
 800708a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800708c:	61ba      	str	r2, [r7, #24]
 800708e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6979      	ldr	r1, [r7, #20]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	613b      	str	r3, [r7, #16]
   return(result);
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e5      	bne.n	800706c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80070ae:	bf00      	nop
 80070b0:	3754      	adds	r7, #84	@ 0x54
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff fd5b 	bl	8006b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b21      	cmp	r3, #33	@ 0x21
 80070f4:	d13e      	bne.n	8007174 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070fe:	d114      	bne.n	800712a <UART_Transmit_IT+0x48>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d110      	bne.n	800712a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800711c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	1c9a      	adds	r2, r3, #2
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	621a      	str	r2, [r3, #32]
 8007128:	e008      	b.n	800713c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	1c59      	adds	r1, r3, #1
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6211      	str	r1, [r2, #32]
 8007134:	781a      	ldrb	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007140:	b29b      	uxth	r3, r3
 8007142:	3b01      	subs	r3, #1
 8007144:	b29b      	uxth	r3, r3
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	4619      	mov	r1, r3
 800714a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10f      	bne.n	8007170 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800715e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800716e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	e000      	b.n	8007176 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007174:	2302      	movs	r3, #2
  }
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b082      	sub	sp, #8
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68da      	ldr	r2, [r3, #12]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007198:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7ff fccc 	bl	8006b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b08c      	sub	sp, #48	@ 0x30
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b22      	cmp	r3, #34	@ 0x22
 80071c4:	f040 80ae 	bne.w	8007324 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d0:	d117      	bne.n	8007202 <UART_Receive_IT+0x50>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d113      	bne.n	8007202 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fa:	1c9a      	adds	r2, r3, #2
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8007200:	e026      	b.n	8007250 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007206:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007208:	2300      	movs	r3, #0
 800720a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007214:	d007      	beq.n	8007226 <UART_Receive_IT+0x74>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10a      	bne.n	8007234 <UART_Receive_IT+0x82>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d106      	bne.n	8007234 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	b2da      	uxtb	r2, r3
 800722e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007230:	701a      	strb	r2, [r3, #0]
 8007232:	e008      	b.n	8007246 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007240:	b2da      	uxtb	r2, r3
 8007242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007244:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007254:	b29b      	uxth	r3, r3
 8007256:	3b01      	subs	r3, #1
 8007258:	b29b      	uxth	r3, r3
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	4619      	mov	r1, r3
 800725e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007260:	2b00      	cmp	r3, #0
 8007262:	d15d      	bne.n	8007320 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0220 	bic.w	r2, r2, #32
 8007272:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695a      	ldr	r2, [r3, #20]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0201 	bic.w	r2, r2, #1
 8007292:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2220      	movs	r2, #32
 8007298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d135      	bne.n	8007316 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	330c      	adds	r3, #12
 80072b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	613b      	str	r3, [r7, #16]
   return(result);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f023 0310 	bic.w	r3, r3, #16
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	330c      	adds	r3, #12
 80072ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d0:	623a      	str	r2, [r7, #32]
 80072d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	69f9      	ldr	r1, [r7, #28]
 80072d6:	6a3a      	ldr	r2, [r7, #32]
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e5      	bne.n	80072b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0310 	and.w	r3, r3, #16
 80072ee:	2b10      	cmp	r3, #16
 80072f0:	d10a      	bne.n	8007308 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	60fb      	str	r3, [r7, #12]
 8007306:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fc48 	bl	8006ba4 <HAL_UARTEx_RxEventCallback>
 8007314:	e002      	b.n	800731c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff fc26 	bl	8006b68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	e002      	b.n	8007326 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	e000      	b.n	8007326 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007324:	2302      	movs	r3, #2
  }
}
 8007326:	4618      	mov	r0, r3
 8007328:	3730      	adds	r7, #48	@ 0x30
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007334:	b0c0      	sub	sp, #256	@ 0x100
 8007336:	af00      	add	r7, sp, #0
 8007338:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800734c:	68d9      	ldr	r1, [r3, #12]
 800734e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	ea40 0301 	orr.w	r3, r0, r1
 8007358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800735a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	431a      	orrs	r2, r3
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	431a      	orrs	r2, r3
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800737c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007388:	f021 010c 	bic.w	r1, r1, #12
 800738c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007396:	430b      	orrs	r3, r1
 8007398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800739a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80073a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073aa:	6999      	ldr	r1, [r3, #24]
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	ea40 0301 	orr.w	r3, r0, r1
 80073b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	4b8f      	ldr	r3, [pc, #572]	@ (80075fc <UART_SetConfig+0x2cc>)
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d005      	beq.n	80073d0 <UART_SetConfig+0xa0>
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007600 <UART_SetConfig+0x2d0>)
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d104      	bne.n	80073da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073d0:	f7fd fd66 	bl	8004ea0 <HAL_RCC_GetPCLK2Freq>
 80073d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80073d8:	e003      	b.n	80073e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073da:	f7fd fd4d 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 80073de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073ec:	f040 810c 	bne.w	8007608 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80073fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007402:	4622      	mov	r2, r4
 8007404:	462b      	mov	r3, r5
 8007406:	1891      	adds	r1, r2, r2
 8007408:	65b9      	str	r1, [r7, #88]	@ 0x58
 800740a:	415b      	adcs	r3, r3
 800740c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800740e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007412:	4621      	mov	r1, r4
 8007414:	eb12 0801 	adds.w	r8, r2, r1
 8007418:	4629      	mov	r1, r5
 800741a:	eb43 0901 	adc.w	r9, r3, r1
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800742a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800742e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007432:	4690      	mov	r8, r2
 8007434:	4699      	mov	r9, r3
 8007436:	4623      	mov	r3, r4
 8007438:	eb18 0303 	adds.w	r3, r8, r3
 800743c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007440:	462b      	mov	r3, r5
 8007442:	eb49 0303 	adc.w	r3, r9, r3
 8007446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800744a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007456:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800745a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800745e:	460b      	mov	r3, r1
 8007460:	18db      	adds	r3, r3, r3
 8007462:	653b      	str	r3, [r7, #80]	@ 0x50
 8007464:	4613      	mov	r3, r2
 8007466:	eb42 0303 	adc.w	r3, r2, r3
 800746a:	657b      	str	r3, [r7, #84]	@ 0x54
 800746c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007474:	f7f9 fc28 	bl	8000cc8 <__aeabi_uldivmod>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4b61      	ldr	r3, [pc, #388]	@ (8007604 <UART_SetConfig+0x2d4>)
 800747e:	fba3 2302 	umull	r2, r3, r3, r2
 8007482:	095b      	lsrs	r3, r3, #5
 8007484:	011c      	lsls	r4, r3, #4
 8007486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800748a:	2200      	movs	r2, #0
 800748c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007490:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007494:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007498:	4642      	mov	r2, r8
 800749a:	464b      	mov	r3, r9
 800749c:	1891      	adds	r1, r2, r2
 800749e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074a0:	415b      	adcs	r3, r3
 80074a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80074a8:	4641      	mov	r1, r8
 80074aa:	eb12 0a01 	adds.w	sl, r2, r1
 80074ae:	4649      	mov	r1, r9
 80074b0:	eb43 0b01 	adc.w	fp, r3, r1
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	f04f 0300 	mov.w	r3, #0
 80074bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074c8:	4692      	mov	sl, r2
 80074ca:	469b      	mov	fp, r3
 80074cc:	4643      	mov	r3, r8
 80074ce:	eb1a 0303 	adds.w	r3, sl, r3
 80074d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074d6:	464b      	mov	r3, r9
 80074d8:	eb4b 0303 	adc.w	r3, fp, r3
 80074dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80074f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074f4:	460b      	mov	r3, r1
 80074f6:	18db      	adds	r3, r3, r3
 80074f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80074fa:	4613      	mov	r3, r2
 80074fc:	eb42 0303 	adc.w	r3, r2, r3
 8007500:	647b      	str	r3, [r7, #68]	@ 0x44
 8007502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800750a:	f7f9 fbdd 	bl	8000cc8 <__aeabi_uldivmod>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4611      	mov	r1, r2
 8007514:	4b3b      	ldr	r3, [pc, #236]	@ (8007604 <UART_SetConfig+0x2d4>)
 8007516:	fba3 2301 	umull	r2, r3, r3, r1
 800751a:	095b      	lsrs	r3, r3, #5
 800751c:	2264      	movs	r2, #100	@ 0x64
 800751e:	fb02 f303 	mul.w	r3, r2, r3
 8007522:	1acb      	subs	r3, r1, r3
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800752a:	4b36      	ldr	r3, [pc, #216]	@ (8007604 <UART_SetConfig+0x2d4>)
 800752c:	fba3 2302 	umull	r2, r3, r3, r2
 8007530:	095b      	lsrs	r3, r3, #5
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007538:	441c      	add	r4, r3
 800753a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800753e:	2200      	movs	r2, #0
 8007540:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007544:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007548:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800754c:	4642      	mov	r2, r8
 800754e:	464b      	mov	r3, r9
 8007550:	1891      	adds	r1, r2, r2
 8007552:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007554:	415b      	adcs	r3, r3
 8007556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800755c:	4641      	mov	r1, r8
 800755e:	1851      	adds	r1, r2, r1
 8007560:	6339      	str	r1, [r7, #48]	@ 0x30
 8007562:	4649      	mov	r1, r9
 8007564:	414b      	adcs	r3, r1
 8007566:	637b      	str	r3, [r7, #52]	@ 0x34
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007574:	4659      	mov	r1, fp
 8007576:	00cb      	lsls	r3, r1, #3
 8007578:	4651      	mov	r1, sl
 800757a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800757e:	4651      	mov	r1, sl
 8007580:	00ca      	lsls	r2, r1, #3
 8007582:	4610      	mov	r0, r2
 8007584:	4619      	mov	r1, r3
 8007586:	4603      	mov	r3, r0
 8007588:	4642      	mov	r2, r8
 800758a:	189b      	adds	r3, r3, r2
 800758c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007590:	464b      	mov	r3, r9
 8007592:	460a      	mov	r2, r1
 8007594:	eb42 0303 	adc.w	r3, r2, r3
 8007598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800759c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80075ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80075b0:	460b      	mov	r3, r1
 80075b2:	18db      	adds	r3, r3, r3
 80075b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075b6:	4613      	mov	r3, r2
 80075b8:	eb42 0303 	adc.w	r3, r2, r3
 80075bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80075c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80075c6:	f7f9 fb7f 	bl	8000cc8 <__aeabi_uldivmod>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007604 <UART_SetConfig+0x2d4>)
 80075d0:	fba3 1302 	umull	r1, r3, r3, r2
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	2164      	movs	r1, #100	@ 0x64
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	3332      	adds	r3, #50	@ 0x32
 80075e2:	4a08      	ldr	r2, [pc, #32]	@ (8007604 <UART_SetConfig+0x2d4>)
 80075e4:	fba2 2303 	umull	r2, r3, r2, r3
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	f003 0207 	and.w	r2, r3, #7
 80075ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4422      	add	r2, r4
 80075f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075f8:	e106      	b.n	8007808 <UART_SetConfig+0x4d8>
 80075fa:	bf00      	nop
 80075fc:	40011000 	.word	0x40011000
 8007600:	40011400 	.word	0x40011400
 8007604:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800760c:	2200      	movs	r2, #0
 800760e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007612:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007616:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800761a:	4642      	mov	r2, r8
 800761c:	464b      	mov	r3, r9
 800761e:	1891      	adds	r1, r2, r2
 8007620:	6239      	str	r1, [r7, #32]
 8007622:	415b      	adcs	r3, r3
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24
 8007626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800762a:	4641      	mov	r1, r8
 800762c:	1854      	adds	r4, r2, r1
 800762e:	4649      	mov	r1, r9
 8007630:	eb43 0501 	adc.w	r5, r3, r1
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	00eb      	lsls	r3, r5, #3
 800763e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007642:	00e2      	lsls	r2, r4, #3
 8007644:	4614      	mov	r4, r2
 8007646:	461d      	mov	r5, r3
 8007648:	4643      	mov	r3, r8
 800764a:	18e3      	adds	r3, r4, r3
 800764c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007650:	464b      	mov	r3, r9
 8007652:	eb45 0303 	adc.w	r3, r5, r3
 8007656:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800765a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007666:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800766a:	f04f 0200 	mov.w	r2, #0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007676:	4629      	mov	r1, r5
 8007678:	008b      	lsls	r3, r1, #2
 800767a:	4621      	mov	r1, r4
 800767c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007680:	4621      	mov	r1, r4
 8007682:	008a      	lsls	r2, r1, #2
 8007684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007688:	f7f9 fb1e 	bl	8000cc8 <__aeabi_uldivmod>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4b60      	ldr	r3, [pc, #384]	@ (8007814 <UART_SetConfig+0x4e4>)
 8007692:	fba3 2302 	umull	r2, r3, r3, r2
 8007696:	095b      	lsrs	r3, r3, #5
 8007698:	011c      	lsls	r4, r3, #4
 800769a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800769e:	2200      	movs	r2, #0
 80076a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80076a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80076ac:	4642      	mov	r2, r8
 80076ae:	464b      	mov	r3, r9
 80076b0:	1891      	adds	r1, r2, r2
 80076b2:	61b9      	str	r1, [r7, #24]
 80076b4:	415b      	adcs	r3, r3
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076bc:	4641      	mov	r1, r8
 80076be:	1851      	adds	r1, r2, r1
 80076c0:	6139      	str	r1, [r7, #16]
 80076c2:	4649      	mov	r1, r9
 80076c4:	414b      	adcs	r3, r1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	f04f 0200 	mov.w	r2, #0
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076d4:	4659      	mov	r1, fp
 80076d6:	00cb      	lsls	r3, r1, #3
 80076d8:	4651      	mov	r1, sl
 80076da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076de:	4651      	mov	r1, sl
 80076e0:	00ca      	lsls	r2, r1, #3
 80076e2:	4610      	mov	r0, r2
 80076e4:	4619      	mov	r1, r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	4642      	mov	r2, r8
 80076ea:	189b      	adds	r3, r3, r2
 80076ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076f0:	464b      	mov	r3, r9
 80076f2:	460a      	mov	r2, r1
 80076f4:	eb42 0303 	adc.w	r3, r2, r3
 80076f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007706:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007708:	f04f 0200 	mov.w	r2, #0
 800770c:	f04f 0300 	mov.w	r3, #0
 8007710:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007714:	4649      	mov	r1, r9
 8007716:	008b      	lsls	r3, r1, #2
 8007718:	4641      	mov	r1, r8
 800771a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800771e:	4641      	mov	r1, r8
 8007720:	008a      	lsls	r2, r1, #2
 8007722:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007726:	f7f9 facf 	bl	8000cc8 <__aeabi_uldivmod>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4611      	mov	r1, r2
 8007730:	4b38      	ldr	r3, [pc, #224]	@ (8007814 <UART_SetConfig+0x4e4>)
 8007732:	fba3 2301 	umull	r2, r3, r3, r1
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	2264      	movs	r2, #100	@ 0x64
 800773a:	fb02 f303 	mul.w	r3, r2, r3
 800773e:	1acb      	subs	r3, r1, r3
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	3332      	adds	r3, #50	@ 0x32
 8007744:	4a33      	ldr	r2, [pc, #204]	@ (8007814 <UART_SetConfig+0x4e4>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	095b      	lsrs	r3, r3, #5
 800774c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007750:	441c      	add	r4, r3
 8007752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007756:	2200      	movs	r2, #0
 8007758:	673b      	str	r3, [r7, #112]	@ 0x70
 800775a:	677a      	str	r2, [r7, #116]	@ 0x74
 800775c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007760:	4642      	mov	r2, r8
 8007762:	464b      	mov	r3, r9
 8007764:	1891      	adds	r1, r2, r2
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	415b      	adcs	r3, r3
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007770:	4641      	mov	r1, r8
 8007772:	1851      	adds	r1, r2, r1
 8007774:	6039      	str	r1, [r7, #0]
 8007776:	4649      	mov	r1, r9
 8007778:	414b      	adcs	r3, r1
 800777a:	607b      	str	r3, [r7, #4]
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	f04f 0300 	mov.w	r3, #0
 8007784:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007788:	4659      	mov	r1, fp
 800778a:	00cb      	lsls	r3, r1, #3
 800778c:	4651      	mov	r1, sl
 800778e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007792:	4651      	mov	r1, sl
 8007794:	00ca      	lsls	r2, r1, #3
 8007796:	4610      	mov	r0, r2
 8007798:	4619      	mov	r1, r3
 800779a:	4603      	mov	r3, r0
 800779c:	4642      	mov	r2, r8
 800779e:	189b      	adds	r3, r3, r2
 80077a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077a2:	464b      	mov	r3, r9
 80077a4:	460a      	mov	r2, r1
 80077a6:	eb42 0303 	adc.w	r3, r2, r3
 80077aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80077b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80077c4:	4649      	mov	r1, r9
 80077c6:	008b      	lsls	r3, r1, #2
 80077c8:	4641      	mov	r1, r8
 80077ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ce:	4641      	mov	r1, r8
 80077d0:	008a      	lsls	r2, r1, #2
 80077d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80077d6:	f7f9 fa77 	bl	8000cc8 <__aeabi_uldivmod>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4b0d      	ldr	r3, [pc, #52]	@ (8007814 <UART_SetConfig+0x4e4>)
 80077e0:	fba3 1302 	umull	r1, r3, r3, r2
 80077e4:	095b      	lsrs	r3, r3, #5
 80077e6:	2164      	movs	r1, #100	@ 0x64
 80077e8:	fb01 f303 	mul.w	r3, r1, r3
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	011b      	lsls	r3, r3, #4
 80077f0:	3332      	adds	r3, #50	@ 0x32
 80077f2:	4a08      	ldr	r2, [pc, #32]	@ (8007814 <UART_SetConfig+0x4e4>)
 80077f4:	fba2 2303 	umull	r2, r3, r2, r3
 80077f8:	095b      	lsrs	r3, r3, #5
 80077fa:	f003 020f 	and.w	r2, r3, #15
 80077fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4422      	add	r2, r4
 8007806:	609a      	str	r2, [r3, #8]
}
 8007808:	bf00      	nop
 800780a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800780e:	46bd      	mov	sp, r7
 8007810:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007814:	51eb851f 	.word	0x51eb851f

08007818 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007818:	b084      	sub	sp, #16
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	f107 001c 	add.w	r0, r7, #28
 8007826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800782a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800782e:	2b01      	cmp	r3, #1
 8007830:	d123      	bne.n	800787a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007836:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007846:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800785a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800785e:	2b01      	cmp	r3, #1
 8007860:	d105      	bne.n	800786e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fadc 	bl	8008e2c <USB_CoreReset>
 8007874:	4603      	mov	r3, r0
 8007876:	73fb      	strb	r3, [r7, #15]
 8007878:	e01b      	b.n	80078b2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 fad0 	bl	8008e2c <USB_CoreReset>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007890:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007894:	2b00      	cmp	r3, #0
 8007896:	d106      	bne.n	80078a6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80078a4:	e005      	b.n	80078b2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80078b2:	7fbb      	ldrb	r3, [r7, #30]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d10b      	bne.n	80078d0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f043 0206 	orr.w	r2, r3, #6
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f043 0220 	orr.w	r2, r3, #32
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078dc:	b004      	add	sp, #16
 80078de:	4770      	bx	lr

080078e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d165      	bne.n	80079c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4a41      	ldr	r2, [pc, #260]	@ (80079fc <USB_SetTurnaroundTime+0x11c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d906      	bls.n	800790a <USB_SetTurnaroundTime+0x2a>
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4a40      	ldr	r2, [pc, #256]	@ (8007a00 <USB_SetTurnaroundTime+0x120>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d202      	bcs.n	800790a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007904:	230f      	movs	r3, #15
 8007906:	617b      	str	r3, [r7, #20]
 8007908:	e062      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	4a3c      	ldr	r2, [pc, #240]	@ (8007a00 <USB_SetTurnaroundTime+0x120>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d306      	bcc.n	8007920 <USB_SetTurnaroundTime+0x40>
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	4a3b      	ldr	r2, [pc, #236]	@ (8007a04 <USB_SetTurnaroundTime+0x124>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d202      	bcs.n	8007920 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800791a:	230e      	movs	r3, #14
 800791c:	617b      	str	r3, [r7, #20]
 800791e:	e057      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	4a38      	ldr	r2, [pc, #224]	@ (8007a04 <USB_SetTurnaroundTime+0x124>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d306      	bcc.n	8007936 <USB_SetTurnaroundTime+0x56>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4a37      	ldr	r2, [pc, #220]	@ (8007a08 <USB_SetTurnaroundTime+0x128>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d202      	bcs.n	8007936 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007930:	230d      	movs	r3, #13
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e04c      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	4a33      	ldr	r2, [pc, #204]	@ (8007a08 <USB_SetTurnaroundTime+0x128>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d306      	bcc.n	800794c <USB_SetTurnaroundTime+0x6c>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	4a32      	ldr	r2, [pc, #200]	@ (8007a0c <USB_SetTurnaroundTime+0x12c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d802      	bhi.n	800794c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007946:	230c      	movs	r3, #12
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	e041      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	4a2f      	ldr	r2, [pc, #188]	@ (8007a0c <USB_SetTurnaroundTime+0x12c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d906      	bls.n	8007962 <USB_SetTurnaroundTime+0x82>
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	4a2e      	ldr	r2, [pc, #184]	@ (8007a10 <USB_SetTurnaroundTime+0x130>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d802      	bhi.n	8007962 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800795c:	230b      	movs	r3, #11
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	e036      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	4a2a      	ldr	r2, [pc, #168]	@ (8007a10 <USB_SetTurnaroundTime+0x130>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d906      	bls.n	8007978 <USB_SetTurnaroundTime+0x98>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	4a29      	ldr	r2, [pc, #164]	@ (8007a14 <USB_SetTurnaroundTime+0x134>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d802      	bhi.n	8007978 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007972:	230a      	movs	r3, #10
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	e02b      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4a26      	ldr	r2, [pc, #152]	@ (8007a14 <USB_SetTurnaroundTime+0x134>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d906      	bls.n	800798e <USB_SetTurnaroundTime+0xae>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4a25      	ldr	r2, [pc, #148]	@ (8007a18 <USB_SetTurnaroundTime+0x138>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d202      	bcs.n	800798e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007988:	2309      	movs	r3, #9
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	e020      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	4a21      	ldr	r2, [pc, #132]	@ (8007a18 <USB_SetTurnaroundTime+0x138>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d306      	bcc.n	80079a4 <USB_SetTurnaroundTime+0xc4>
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	4a20      	ldr	r2, [pc, #128]	@ (8007a1c <USB_SetTurnaroundTime+0x13c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d802      	bhi.n	80079a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800799e:	2308      	movs	r3, #8
 80079a0:	617b      	str	r3, [r7, #20]
 80079a2:	e015      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4a1d      	ldr	r2, [pc, #116]	@ (8007a1c <USB_SetTurnaroundTime+0x13c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d906      	bls.n	80079ba <USB_SetTurnaroundTime+0xda>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007a20 <USB_SetTurnaroundTime+0x140>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d202      	bcs.n	80079ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80079b4:	2307      	movs	r3, #7
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	e00a      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80079ba:	2306      	movs	r3, #6
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	e007      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80079c6:	2309      	movs	r3, #9
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	e001      	b.n	80079d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80079cc:	2309      	movs	r3, #9
 80079ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68da      	ldr	r2, [r3, #12]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	029b      	lsls	r3, r3, #10
 80079e4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80079e8:	431a      	orrs	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	371c      	adds	r7, #28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	00d8acbf 	.word	0x00d8acbf
 8007a00:	00e4e1c0 	.word	0x00e4e1c0
 8007a04:	00f42400 	.word	0x00f42400
 8007a08:	01067380 	.word	0x01067380
 8007a0c:	011a499f 	.word	0x011a499f
 8007a10:	01312cff 	.word	0x01312cff
 8007a14:	014ca43f 	.word	0x014ca43f
 8007a18:	016e3600 	.word	0x016e3600
 8007a1c:	01a6ab1f 	.word	0x01a6ab1f
 8007a20:	01e84800 	.word	0x01e84800

08007a24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f043 0201 	orr.w	r2, r3, #1
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f023 0201 	bic.w	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a84:	78fb      	ldrb	r3, [r7, #3]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d115      	bne.n	8007ab6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007a96:	200a      	movs	r0, #10
 8007a98:	f7fa f928 	bl	8001cec <HAL_Delay>
      ms += 10U;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	330a      	adds	r3, #10
 8007aa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f933 	bl	8008d0e <USB_GetMode>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d01e      	beq.n	8007aec <USB_SetCurrentMode+0x84>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2bc7      	cmp	r3, #199	@ 0xc7
 8007ab2:	d9f0      	bls.n	8007a96 <USB_SetCurrentMode+0x2e>
 8007ab4:	e01a      	b.n	8007aec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ab6:	78fb      	ldrb	r3, [r7, #3]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d115      	bne.n	8007ae8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ac8:	200a      	movs	r0, #10
 8007aca:	f7fa f90f 	bl	8001cec <HAL_Delay>
      ms += 10U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	330a      	adds	r3, #10
 8007ad2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 f91a 	bl	8008d0e <USB_GetMode>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <USB_SetCurrentMode+0x84>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2bc7      	cmp	r3, #199	@ 0xc7
 8007ae4:	d9f0      	bls.n	8007ac8 <USB_SetCurrentMode+0x60>
 8007ae6:	e001      	b.n	8007aec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e005      	b.n	8007af8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2bc8      	cmp	r3, #200	@ 0xc8
 8007af0:	d101      	bne.n	8007af6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e000      	b.n	8007af8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b00:	b084      	sub	sp, #16
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b086      	sub	sp, #24
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	613b      	str	r3, [r7, #16]
 8007b1e:	e009      	b.n	8007b34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	3340      	adds	r3, #64	@ 0x40
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	3301      	adds	r3, #1
 8007b32:	613b      	str	r3, [r7, #16]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b0e      	cmp	r3, #14
 8007b38:	d9f2      	bls.n	8007b20 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d11c      	bne.n	8007b7c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b50:	f043 0302 	orr.w	r3, r3, #2
 8007b54:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	e005      	b.n	8007b88 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b80:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b8e:	461a      	mov	r2, r3
 8007b90:	2300      	movs	r3, #0
 8007b92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d10d      	bne.n	8007bb8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d104      	bne.n	8007bae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f968 	bl	8007e7c <USB_SetDevSpeed>
 8007bac:	e008      	b.n	8007bc0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007bae:	2101      	movs	r1, #1
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f963 	bl	8007e7c <USB_SetDevSpeed>
 8007bb6:	e003      	b.n	8007bc0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bb8:	2103      	movs	r1, #3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f95e 	bl	8007e7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bc0:	2110      	movs	r1, #16
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f8fa 	bl	8007dbc <USB_FlushTxFifo>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f924 	bl	8007e20 <USB_FlushRxFifo>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007be8:	461a      	mov	r2, r3
 8007bea:	2300      	movs	r3, #0
 8007bec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c00:	461a      	mov	r2, r3
 8007c02:	2300      	movs	r3, #0
 8007c04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c06:	2300      	movs	r3, #0
 8007c08:	613b      	str	r3, [r7, #16]
 8007c0a:	e043      	b.n	8007c94 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c22:	d118      	bne.n	8007c56 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10a      	bne.n	8007c40 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c36:	461a      	mov	r2, r3
 8007c38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	e013      	b.n	8007c68 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	e008      	b.n	8007c68 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c62:	461a      	mov	r2, r3
 8007c64:	2300      	movs	r3, #0
 8007c66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c74:	461a      	mov	r2, r3
 8007c76:	2300      	movs	r3, #0
 8007c78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c86:	461a      	mov	r2, r3
 8007c88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	3301      	adds	r3, #1
 8007c92:	613b      	str	r3, [r7, #16]
 8007c94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c98:	461a      	mov	r2, r3
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d3b5      	bcc.n	8007c0c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	e043      	b.n	8007d2e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cbc:	d118      	bne.n	8007cf0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	e013      	b.n	8007d02 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e008      	b.n	8007d02 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0e:	461a      	mov	r2, r3
 8007d10:	2300      	movs	r3, #0
 8007d12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d20:	461a      	mov	r2, r3
 8007d22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	613b      	str	r3, [r7, #16]
 8007d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d32:	461a      	mov	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d3b5      	bcc.n	8007ca6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007d5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d105      	bne.n	8007d70 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	f043 0210 	orr.w	r2, r3, #16
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	699a      	ldr	r2, [r3, #24]
 8007d74:	4b10      	ldr	r3, [pc, #64]	@ (8007db8 <USB_DevInit+0x2b8>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d005      	beq.n	8007d90 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	f043 0208 	orr.w	r2, r3, #8
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d107      	bne.n	8007da8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007da0:	f043 0304 	orr.w	r3, r3, #4
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007db4:	b004      	add	sp, #16
 8007db6:	4770      	bx	lr
 8007db8:	803c3800 	.word	0x803c3800

08007dbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dd6:	d901      	bls.n	8007ddc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e01b      	b.n	8007e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	daf2      	bge.n	8007dca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	019b      	lsls	r3, r3, #6
 8007dec:	f043 0220 	orr.w	r2, r3, #32
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	3301      	adds	r3, #1
 8007df8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e00:	d901      	bls.n	8007e06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e006      	b.n	8007e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	d0f0      	beq.n	8007df4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e38:	d901      	bls.n	8007e3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e018      	b.n	8007e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	daf2      	bge.n	8007e2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2210      	movs	r2, #16
 8007e4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e5c:	d901      	bls.n	8007e62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e006      	b.n	8007e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0310 	and.w	r3, r3, #16
 8007e6a:	2b10      	cmp	r3, #16
 8007e6c:	d0f0      	beq.n	8007e50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	460b      	mov	r3, r1
 8007e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	68f9      	ldr	r1, [r7, #12]
 8007e98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b087      	sub	sp, #28
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f003 0306 	and.w	r3, r3, #6
 8007ec6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d102      	bne.n	8007ed4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	75fb      	strb	r3, [r7, #23]
 8007ed2:	e00a      	b.n	8007eea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d002      	beq.n	8007ee0 <USB_GetDevSpeed+0x32>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b06      	cmp	r3, #6
 8007ede:	d102      	bne.n	8007ee6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	75fb      	strb	r3, [r7, #23]
 8007ee4:	e001      	b.n	8007eea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007ee6:	230f      	movs	r3, #15
 8007ee8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	785b      	ldrb	r3, [r3, #1]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d13a      	bne.n	8007f8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f1a:	69da      	ldr	r2, [r3, #28]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	f003 030f 	and.w	r3, r3, #15
 8007f24:	2101      	movs	r1, #1
 8007f26:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	68f9      	ldr	r1, [r7, #12]
 8007f2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f32:	4313      	orrs	r3, r2
 8007f34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d155      	bne.n	8007ff8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	791b      	ldrb	r3, [r3, #4]
 8007f66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	059b      	lsls	r3, r3, #22
 8007f6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f70:	4313      	orrs	r3, r2
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	0151      	lsls	r1, r2, #5
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	440a      	add	r2, r1
 8007f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	e036      	b.n	8007ff8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f90:	69da      	ldr	r2, [r3, #28]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa0:	041b      	lsls	r3, r3, #16
 8007fa2:	68f9      	ldr	r1, [r7, #12]
 8007fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d11a      	bne.n	8007ff8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	791b      	ldrb	r3, [r3, #4]
 8007fdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fde:	430b      	orrs	r3, r1
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	0151      	lsls	r1, r2, #5
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	440a      	add	r2, r1
 8007fea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ff6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
	...

08008008 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d161      	bne.n	80080e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008036:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800803a:	d11f      	bne.n	800807c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	440a      	add	r2, r1
 8008052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008056:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800805a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	440a      	add	r2, r1
 8008072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008076:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800807a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	f003 030f 	and.w	r3, r3, #15
 800808c:	2101      	movs	r1, #1
 800808e:	fa01 f303 	lsl.w	r3, r1, r3
 8008092:	b29b      	uxth	r3, r3
 8008094:	43db      	mvns	r3, r3
 8008096:	68f9      	ldr	r1, [r7, #12]
 8008098:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800809c:	4013      	ands	r3, r2
 800809e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080a6:	69da      	ldr	r2, [r3, #28]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	2101      	movs	r1, #1
 80080b2:	fa01 f303 	lsl.w	r3, r1, r3
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	43db      	mvns	r3, r3
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080c0:	4013      	ands	r3, r2
 80080c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	0159      	lsls	r1, r3, #5
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	440b      	add	r3, r1
 80080da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080de:	4619      	mov	r1, r3
 80080e0:	4b35      	ldr	r3, [pc, #212]	@ (80081b8 <USB_DeactivateEndpoint+0x1b0>)
 80080e2:	4013      	ands	r3, r2
 80080e4:	600b      	str	r3, [r1, #0]
 80080e6:	e060      	b.n	80081aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080fe:	d11f      	bne.n	8008140 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	0151      	lsls	r1, r2, #5
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	440a      	add	r2, r1
 8008116:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800811a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800811e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	0151      	lsls	r1, r2, #5
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	440a      	add	r2, r1
 8008136:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800813a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800813e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	2101      	movs	r1, #1
 8008152:	fa01 f303 	lsl.w	r3, r1, r3
 8008156:	041b      	lsls	r3, r3, #16
 8008158:	43db      	mvns	r3, r3
 800815a:	68f9      	ldr	r1, [r7, #12]
 800815c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008160:	4013      	ands	r3, r2
 8008162:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800816a:	69da      	ldr	r2, [r3, #28]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	2101      	movs	r1, #1
 8008176:	fa01 f303 	lsl.w	r3, r1, r3
 800817a:	041b      	lsls	r3, r3, #16
 800817c:	43db      	mvns	r3, r3
 800817e:	68f9      	ldr	r1, [r7, #12]
 8008180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008184:	4013      	ands	r3, r2
 8008186:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	0159      	lsls	r1, r3, #5
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	440b      	add	r3, r1
 800819e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a2:	4619      	mov	r1, r3
 80081a4:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <USB_DeactivateEndpoint+0x1b4>)
 80081a6:	4013      	ands	r3, r2
 80081a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	ec337800 	.word	0xec337800
 80081bc:	eff37800 	.word	0xeff37800

080081c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08a      	sub	sp, #40	@ 0x28
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	4613      	mov	r3, r2
 80081cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	785b      	ldrb	r3, [r3, #1]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	f040 817a 	bne.w	80084d6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d132      	bne.n	8008250 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	0151      	lsls	r1, r2, #5
 80081fc:	69fa      	ldr	r2, [r7, #28]
 80081fe:	440a      	add	r2, r1
 8008200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008204:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008208:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800820c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	440a      	add	r2, r1
 8008224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008228:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800822c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	0151      	lsls	r1, r2, #5
 8008240:	69fa      	ldr	r2, [r7, #28]
 8008242:	440a      	add	r2, r1
 8008244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008248:	0cdb      	lsrs	r3, r3, #19
 800824a:	04db      	lsls	r3, r3, #19
 800824c:	6113      	str	r3, [r2, #16]
 800824e:	e092      	b.n	8008376 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	440a      	add	r2, r1
 8008266:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800826a:	0cdb      	lsrs	r3, r3, #19
 800826c:	04db      	lsls	r3, r3, #19
 800826e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	0151      	lsls	r1, r2, #5
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	440a      	add	r2, r1
 8008286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800828a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800828e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008292:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d11a      	bne.n	80082d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	691a      	ldr	r2, [r3, #16]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d903      	bls.n	80082ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	689a      	ldr	r2, [r3, #8]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	0151      	lsls	r1, r2, #5
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	440a      	add	r2, r1
 80082c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082cc:	6113      	str	r3, [r2, #16]
 80082ce:	e01b      	b.n	8008308 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082dc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	6919      	ldr	r1, [r3, #16]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	440b      	add	r3, r1
 80082e8:	1e59      	subs	r1, r3, #1
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80082f2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80082f4:	4ba2      	ldr	r3, [pc, #648]	@ (8008580 <USB_EPStartXfer+0x3c0>)
 80082f6:	400b      	ands	r3, r1
 80082f8:	69b9      	ldr	r1, [r7, #24]
 80082fa:	0148      	lsls	r0, r1, #5
 80082fc:	69f9      	ldr	r1, [r7, #28]
 80082fe:	4401      	add	r1, r0
 8008300:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008304:	4313      	orrs	r3, r2
 8008306:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008314:	691a      	ldr	r2, [r3, #16]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800831e:	69b9      	ldr	r1, [r7, #24]
 8008320:	0148      	lsls	r0, r1, #5
 8008322:	69f9      	ldr	r1, [r7, #28]
 8008324:	4401      	add	r1, r0
 8008326:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800832a:	4313      	orrs	r3, r2
 800832c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	791b      	ldrb	r3, [r3, #4]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d11f      	bne.n	8008376 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	4413      	add	r3, r2
 800833e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	0151      	lsls	r1, r2, #5
 8008348:	69fa      	ldr	r2, [r7, #28]
 800834a:	440a      	add	r2, r1
 800834c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008350:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008354:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	0151      	lsls	r1, r2, #5
 8008368:	69fa      	ldr	r2, [r7, #28]
 800836a:	440a      	add	r2, r1
 800836c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008370:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008374:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008376:	79fb      	ldrb	r3, [r7, #7]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d14b      	bne.n	8008414 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d009      	beq.n	8008398 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	4413      	add	r3, r2
 800838c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008390:	461a      	mov	r2, r3
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	791b      	ldrb	r3, [r3, #4]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d128      	bne.n	80083f2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d110      	bne.n	80083d2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	0151      	lsls	r1, r2, #5
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	440a      	add	r2, r1
 80083c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	e00f      	b.n	80083f2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	0151      	lsls	r1, r2, #5
 80083e4:	69fa      	ldr	r2, [r7, #28]
 80083e6:	440a      	add	r2, r1
 80083e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	0151      	lsls	r1, r2, #5
 8008404:	69fa      	ldr	r2, [r7, #28]
 8008406:	440a      	add	r2, r1
 8008408:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800840c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	e165      	b.n	80086e0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	69fa      	ldr	r2, [r7, #28]
 8008428:	440a      	add	r2, r1
 800842a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800842e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008432:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	791b      	ldrb	r3, [r3, #4]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d015      	beq.n	8008468 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 814d 	beq.w	80086e0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800844c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	f003 030f 	and.w	r3, r3, #15
 8008456:	2101      	movs	r1, #1
 8008458:	fa01 f303 	lsl.w	r3, r1, r3
 800845c:	69f9      	ldr	r1, [r7, #28]
 800845e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008462:	4313      	orrs	r3, r2
 8008464:	634b      	str	r3, [r1, #52]	@ 0x34
 8008466:	e13b      	b.n	80086e0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008474:	2b00      	cmp	r3, #0
 8008476:	d110      	bne.n	800849a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	0151      	lsls	r1, r2, #5
 800848a:	69fa      	ldr	r2, [r7, #28]
 800848c:	440a      	add	r2, r1
 800848e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008492:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	e00f      	b.n	80084ba <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	0151      	lsls	r1, r2, #5
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	440a      	add	r2, r1
 80084b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	68d9      	ldr	r1, [r3, #12]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	781a      	ldrb	r2, [r3, #0]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	b298      	uxth	r0, r3
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	4603      	mov	r3, r0
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 f9b8 	bl	8008844 <USB_WritePacket>
 80084d4:	e104      	b.n	80086e0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	0151      	lsls	r1, r2, #5
 80084e8:	69fa      	ldr	r2, [r7, #28]
 80084ea:	440a      	add	r2, r1
 80084ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084f0:	0cdb      	lsrs	r3, r3, #19
 80084f2:	04db      	lsls	r3, r3, #19
 80084f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	0151      	lsls	r1, r2, #5
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	440a      	add	r2, r1
 800850c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008510:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008514:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008518:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d131      	bne.n	8008584 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	4413      	add	r3, r2
 8008540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008544:	691a      	ldr	r2, [r3, #16]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800854e:	69b9      	ldr	r1, [r7, #24]
 8008550:	0148      	lsls	r0, r1, #5
 8008552:	69f9      	ldr	r1, [r7, #28]
 8008554:	4401      	add	r1, r0
 8008556:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800855a:	4313      	orrs	r3, r2
 800855c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	0151      	lsls	r1, r2, #5
 8008570:	69fa      	ldr	r2, [r7, #28]
 8008572:	440a      	add	r2, r1
 8008574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008578:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800857c:	6113      	str	r3, [r2, #16]
 800857e:	e061      	b.n	8008644 <USB_EPStartXfer+0x484>
 8008580:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d123      	bne.n	80085d4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008598:	691a      	ldr	r2, [r3, #16]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085a2:	69b9      	ldr	r1, [r7, #24]
 80085a4:	0148      	lsls	r0, r1, #5
 80085a6:	69f9      	ldr	r1, [r7, #28]
 80085a8:	4401      	add	r1, r0
 80085aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085ae:	4313      	orrs	r3, r2
 80085b0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	69fa      	ldr	r2, [r7, #28]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085d0:	6113      	str	r3, [r2, #16]
 80085d2:	e037      	b.n	8008644 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	691a      	ldr	r2, [r3, #16]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	4413      	add	r3, r2
 80085de:	1e5a      	subs	r2, r3, #1
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	8afa      	ldrh	r2, [r7, #22]
 80085f0:	fb03 f202 	mul.w	r2, r3, r2
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008604:	691a      	ldr	r2, [r3, #16]
 8008606:	8afb      	ldrh	r3, [r7, #22]
 8008608:	04d9      	lsls	r1, r3, #19
 800860a:	4b38      	ldr	r3, [pc, #224]	@ (80086ec <USB_EPStartXfer+0x52c>)
 800860c:	400b      	ands	r3, r1
 800860e:	69b9      	ldr	r1, [r7, #24]
 8008610:	0148      	lsls	r0, r1, #5
 8008612:	69f9      	ldr	r1, [r7, #28]
 8008614:	4401      	add	r1, r0
 8008616:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800861a:	4313      	orrs	r3, r2
 800861c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008634:	69b9      	ldr	r1, [r7, #24]
 8008636:	0148      	lsls	r0, r1, #5
 8008638:	69f9      	ldr	r1, [r7, #28]
 800863a:	4401      	add	r1, r0
 800863c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008640:	4313      	orrs	r3, r2
 8008642:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008644:	79fb      	ldrb	r3, [r7, #7]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d10d      	bne.n	8008666 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d009      	beq.n	8008666 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	68d9      	ldr	r1, [r3, #12]
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	4413      	add	r3, r2
 800865e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008662:	460a      	mov	r2, r1
 8008664:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	791b      	ldrb	r3, [r3, #4]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d128      	bne.n	80086c0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800867a:	2b00      	cmp	r3, #0
 800867c:	d110      	bne.n	80086a0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	4413      	add	r3, r2
 8008686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	0151      	lsls	r1, r2, #5
 8008690:	69fa      	ldr	r2, [r7, #28]
 8008692:	440a      	add	r2, r1
 8008694:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008698:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	e00f      	b.n	80086c0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	0151      	lsls	r1, r2, #5
 80086b2:	69fa      	ldr	r2, [r7, #28]
 80086b4:	440a      	add	r2, r1
 80086b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80086de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3720      	adds	r7, #32
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	1ff80000 	.word	0x1ff80000

080086f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	785b      	ldrb	r3, [r3, #1]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d14a      	bne.n	80087a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008722:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008726:	f040 8086 	bne.w	8008836 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	7812      	ldrb	r2, [r2, #0]
 800873e:	0151      	lsls	r1, r2, #5
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	440a      	add	r2, r1
 8008744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008748:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800874c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	7812      	ldrb	r2, [r2, #0]
 8008762:	0151      	lsls	r1, r2, #5
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	440a      	add	r2, r1
 8008768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800876c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008770:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	3301      	adds	r3, #1
 8008776:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800877e:	4293      	cmp	r3, r2
 8008780:	d902      	bls.n	8008788 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	75fb      	strb	r3, [r7, #23]
          break;
 8008786:	e056      	b.n	8008836 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800879c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087a0:	d0e7      	beq.n	8008772 <USB_EPStopXfer+0x82>
 80087a2:	e048      	b.n	8008836 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	015a      	lsls	r2, r3, #5
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	4413      	add	r3, r2
 80087ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087bc:	d13b      	bne.n	8008836 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	7812      	ldrb	r2, [r2, #0]
 80087d2:	0151      	lsls	r1, r2, #5
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	440a      	add	r2, r1
 80087d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	7812      	ldrb	r2, [r2, #0]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008800:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008804:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3301      	adds	r3, #1
 800880a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008812:	4293      	cmp	r3, r2
 8008814:	d902      	bls.n	800881c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	75fb      	strb	r3, [r7, #23]
          break;
 800881a:	e00c      	b.n	8008836 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008830:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008834:	d0e7      	beq.n	8008806 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008836:	7dfb      	ldrb	r3, [r7, #23]
}
 8008838:	4618      	mov	r0, r3
 800883a:	371c      	adds	r7, #28
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008844:	b480      	push	{r7}
 8008846:	b089      	sub	sp, #36	@ 0x24
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	4611      	mov	r1, r2
 8008850:	461a      	mov	r2, r3
 8008852:	460b      	mov	r3, r1
 8008854:	71fb      	strb	r3, [r7, #7]
 8008856:	4613      	mov	r3, r2
 8008858:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008862:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008866:	2b00      	cmp	r3, #0
 8008868:	d123      	bne.n	80088b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800886a:	88bb      	ldrh	r3, [r7, #4]
 800886c:	3303      	adds	r3, #3
 800886e:	089b      	lsrs	r3, r3, #2
 8008870:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008872:	2300      	movs	r3, #0
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	e018      	b.n	80088aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008878:	79fb      	ldrb	r3, [r7, #7]
 800887a:	031a      	lsls	r2, r3, #12
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	4413      	add	r3, r2
 8008880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008884:	461a      	mov	r2, r3
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	3301      	adds	r3, #1
 8008890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	3301      	adds	r3, #1
 8008896:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	3301      	adds	r3, #1
 800889c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	3301      	adds	r3, #1
 80088a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	3301      	adds	r3, #1
 80088a8:	61bb      	str	r3, [r7, #24]
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d3e2      	bcc.n	8008878 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3724      	adds	r7, #36	@ 0x24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b08b      	sub	sp, #44	@ 0x2c
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4613      	mov	r3, r2
 80088cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088d6:	88fb      	ldrh	r3, [r7, #6]
 80088d8:	089b      	lsrs	r3, r3, #2
 80088da:	b29b      	uxth	r3, r3
 80088dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80088de:	88fb      	ldrh	r3, [r7, #6]
 80088e0:	f003 0303 	and.w	r3, r3, #3
 80088e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80088e6:	2300      	movs	r3, #0
 80088e8:	623b      	str	r3, [r7, #32]
 80088ea:	e014      	b.n	8008916 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80088f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fa:	3301      	adds	r3, #1
 80088fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	3301      	adds	r3, #1
 8008902:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008906:	3301      	adds	r3, #1
 8008908:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800890a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890c:	3301      	adds	r3, #1
 800890e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008910:	6a3b      	ldr	r3, [r7, #32]
 8008912:	3301      	adds	r3, #1
 8008914:	623b      	str	r3, [r7, #32]
 8008916:	6a3a      	ldr	r2, [r7, #32]
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	429a      	cmp	r2, r3
 800891c:	d3e6      	bcc.n	80088ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800891e:	8bfb      	ldrh	r3, [r7, #30]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d01e      	beq.n	8008962 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800892e:	461a      	mov	r2, r3
 8008930:	f107 0310 	add.w	r3, r7, #16
 8008934:	6812      	ldr	r2, [r2, #0]
 8008936:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	fa22 f303 	lsr.w	r3, r2, r3
 8008944:	b2da      	uxtb	r2, r3
 8008946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008948:	701a      	strb	r2, [r3, #0]
      i++;
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	3301      	adds	r3, #1
 800894e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	3301      	adds	r3, #1
 8008954:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008956:	8bfb      	ldrh	r3, [r7, #30]
 8008958:	3b01      	subs	r3, #1
 800895a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800895c:	8bfb      	ldrh	r3, [r7, #30]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1ea      	bne.n	8008938 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008964:	4618      	mov	r0, r3
 8008966:	372c      	adds	r7, #44	@ 0x2c
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	785b      	ldrb	r3, [r3, #1]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d12c      	bne.n	80089e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	db12      	blt.n	80089c4 <USB_EPSetStall+0x54>
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00f      	beq.n	80089c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	015a      	lsls	r2, r3, #5
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	0151      	lsls	r1, r2, #5
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	440a      	add	r2, r1
 80089ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	0151      	lsls	r1, r2, #5
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	440a      	add	r2, r1
 80089da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80089e2:	6013      	str	r3, [r2, #0]
 80089e4:	e02b      	b.n	8008a3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	db12      	blt.n	8008a1e <USB_EPSetStall+0xae>
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00f      	beq.n	8008a1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	015a      	lsls	r2, r3, #5
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	0151      	lsls	r1, r2, #5
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	440a      	add	r2, r1
 8008a14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	0151      	lsls	r1, r2, #5
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	440a      	add	r2, r1
 8008a34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	785b      	ldrb	r3, [r3, #1]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d128      	bne.n	8008aba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	0151      	lsls	r1, r2, #5
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	440a      	add	r2, r1
 8008a7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	791b      	ldrb	r3, [r3, #4]
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d003      	beq.n	8008a98 <USB_EPClearStall+0x4c>
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	791b      	ldrb	r3, [r3, #4]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d138      	bne.n	8008b0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	0151      	lsls	r1, r2, #5
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	440a      	add	r2, r1
 8008aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ab6:	6013      	str	r3, [r2, #0]
 8008ab8:	e027      	b.n	8008b0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ad4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ad8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	791b      	ldrb	r3, [r3, #4]
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d003      	beq.n	8008aea <USB_EPClearStall+0x9e>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	791b      	ldrb	r3, [r3, #4]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d10f      	bne.n	8008b0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	0151      	lsls	r1, r2, #5
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	440a      	add	r2, r1
 8008b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b36:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008b3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	011b      	lsls	r3, r3, #4
 8008b48:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008b4c:	68f9      	ldr	r1, [r7, #12]
 8008b4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b52:	4313      	orrs	r3, r2
 8008b54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b7e:	f023 0303 	bic.w	r3, r3, #3
 8008b82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b92:	f023 0302 	bic.w	r3, r3, #2
 8008b96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b085      	sub	sp, #20
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bc0:	f023 0303 	bic.w	r3, r3, #3
 8008bc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bd4:	f043 0302 	orr.w	r3, r3, #2
 8008bd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c00:	68fb      	ldr	r3, [r7, #12]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b085      	sub	sp, #20
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	0c1b      	lsrs	r3, r3, #16
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b085      	sub	sp, #20
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	4013      	ands	r3, r2
 8008c64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	b29b      	uxth	r3, r3
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008c86:	78fb      	ldrb	r3, [r7, #3]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b087      	sub	sp, #28
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008cd6:	78fb      	ldrb	r3, [r7, #3]
 8008cd8:	f003 030f 	and.w	r3, r3, #15
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce2:	01db      	lsls	r3, r3, #7
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d00:	68bb      	ldr	r3, [r7, #8]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	371c      	adds	r7, #28
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b085      	sub	sp, #20
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d44:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008d48:	f023 0307 	bic.w	r3, r3, #7
 8008d4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	333c      	adds	r3, #60	@ 0x3c
 8008d86:	3304      	adds	r3, #4
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	4a26      	ldr	r2, [pc, #152]	@ (8008e28 <USB_EP0_OutStart+0xb8>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d90a      	bls.n	8008daa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008da4:	d101      	bne.n	8008daa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	e037      	b.n	8008e1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db0:	461a      	mov	r2, r3
 8008db2:	2300      	movs	r3, #0
 8008db4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008dc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dd8:	f043 0318 	orr.w	r3, r3, #24
 8008ddc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008df0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008df2:	7afb      	ldrb	r3, [r7, #11]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d10f      	bne.n	8008e18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dfe:	461a      	mov	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e12:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008e16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	371c      	adds	r7, #28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	4f54300a 	.word	0x4f54300a

08008e2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e44:	d901      	bls.n	8008e4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e01b      	b.n	8008e82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	daf2      	bge.n	8008e38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	f043 0201 	orr.w	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3301      	adds	r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e6e:	d901      	bls.n	8008e74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e006      	b.n	8008e82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d0f0      	beq.n	8008e62 <USB_CoreReset+0x36>

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
	...

08008e90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008e9c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008ea0:	f003 fde8 	bl	800ca74 <USBD_static_malloc>
 8008ea4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d109      	bne.n	8008ec0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	32b0      	adds	r2, #176	@ 0xb0
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e0d4      	b.n	800906a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008ec0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f006 fd31 	bl	800f92e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	32b0      	adds	r2, #176	@ 0xb0
 8008ed6:	68f9      	ldr	r1, [r7, #12]
 8008ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	32b0      	adds	r2, #176	@ 0xb0
 8008ee6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	7c1b      	ldrb	r3, [r3, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d138      	bne.n	8008f6a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8009074 <USBD_CDC_Init+0x1e4>)
 8008efa:	7819      	ldrb	r1, [r3, #0]
 8008efc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f00:	2202      	movs	r2, #2
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f003 fc45 	bl	800c792 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f08:	4b5a      	ldr	r3, [pc, #360]	@ (8009074 <USBD_CDC_Init+0x1e4>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	f003 020f 	and.w	r2, r3, #15
 8008f10:	6879      	ldr	r1, [r7, #4]
 8008f12:	4613      	mov	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	440b      	add	r3, r1
 8008f1c:	3324      	adds	r3, #36	@ 0x24
 8008f1e:	2201      	movs	r2, #1
 8008f20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f22:	4b55      	ldr	r3, [pc, #340]	@ (8009078 <USBD_CDC_Init+0x1e8>)
 8008f24:	7819      	ldrb	r1, [r3, #0]
 8008f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f003 fc30 	bl	800c792 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008f32:	4b51      	ldr	r3, [pc, #324]	@ (8009078 <USBD_CDC_Init+0x1e8>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	f003 020f 	and.w	r2, r3, #15
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	440b      	add	r3, r1
 8008f46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800907c <USBD_CDC_Init+0x1ec>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	f003 020f 	and.w	r2, r3, #15
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	440b      	add	r3, r1
 8008f62:	3326      	adds	r3, #38	@ 0x26
 8008f64:	2210      	movs	r2, #16
 8008f66:	801a      	strh	r2, [r3, #0]
 8008f68:	e035      	b.n	8008fd6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f6a:	4b42      	ldr	r3, [pc, #264]	@ (8009074 <USBD_CDC_Init+0x1e4>)
 8008f6c:	7819      	ldrb	r1, [r3, #0]
 8008f6e:	2340      	movs	r3, #64	@ 0x40
 8008f70:	2202      	movs	r2, #2
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f003 fc0d 	bl	800c792 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f78:	4b3e      	ldr	r3, [pc, #248]	@ (8009074 <USBD_CDC_Init+0x1e4>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	f003 020f 	and.w	r2, r3, #15
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	440b      	add	r3, r1
 8008f8c:	3324      	adds	r3, #36	@ 0x24
 8008f8e:	2201      	movs	r2, #1
 8008f90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f92:	4b39      	ldr	r3, [pc, #228]	@ (8009078 <USBD_CDC_Init+0x1e8>)
 8008f94:	7819      	ldrb	r1, [r3, #0]
 8008f96:	2340      	movs	r3, #64	@ 0x40
 8008f98:	2202      	movs	r2, #2
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f003 fbf9 	bl	800c792 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008fa0:	4b35      	ldr	r3, [pc, #212]	@ (8009078 <USBD_CDC_Init+0x1e8>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	f003 020f 	and.w	r2, r3, #15
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	4613      	mov	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	440b      	add	r3, r1
 8008fb4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008fb8:	2201      	movs	r2, #1
 8008fba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800907c <USBD_CDC_Init+0x1ec>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	f003 020f 	and.w	r2, r3, #15
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	440b      	add	r3, r1
 8008fd0:	3326      	adds	r3, #38	@ 0x26
 8008fd2:	2210      	movs	r2, #16
 8008fd4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008fd6:	4b29      	ldr	r3, [pc, #164]	@ (800907c <USBD_CDC_Init+0x1ec>)
 8008fd8:	7819      	ldrb	r1, [r3, #0]
 8008fda:	2308      	movs	r3, #8
 8008fdc:	2203      	movs	r2, #3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f003 fbd7 	bl	800c792 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008fe4:	4b25      	ldr	r3, [pc, #148]	@ (800907c <USBD_CDC_Init+0x1ec>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	f003 020f 	and.w	r2, r3, #15
 8008fec:	6879      	ldr	r1, [r7, #4]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	440b      	add	r3, r1
 8008ff8:	3324      	adds	r3, #36	@ 0x24
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	33b0      	adds	r3, #176	@ 0xb0
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009030:	2b00      	cmp	r3, #0
 8009032:	d101      	bne.n	8009038 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009034:	2302      	movs	r3, #2
 8009036:	e018      	b.n	800906a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	7c1b      	ldrb	r3, [r3, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10a      	bne.n	8009056 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009040:	4b0d      	ldr	r3, [pc, #52]	@ (8009078 <USBD_CDC_Init+0x1e8>)
 8009042:	7819      	ldrb	r1, [r3, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800904a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f003 fc8e 	bl	800c970 <USBD_LL_PrepareReceive>
 8009054:	e008      	b.n	8009068 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009056:	4b08      	ldr	r3, [pc, #32]	@ (8009078 <USBD_CDC_Init+0x1e8>)
 8009058:	7819      	ldrb	r1, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009060:	2340      	movs	r3, #64	@ 0x40
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f003 fc84 	bl	800c970 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000093 	.word	0x20000093
 8009078:	20000094 	.word	0x20000094
 800907c:	20000095 	.word	0x20000095

08009080 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800908c:	4b3a      	ldr	r3, [pc, #232]	@ (8009178 <USBD_CDC_DeInit+0xf8>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f003 fba3 	bl	800c7de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009098:	4b37      	ldr	r3, [pc, #220]	@ (8009178 <USBD_CDC_DeInit+0xf8>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	f003 020f 	and.w	r2, r3, #15
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	4613      	mov	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	440b      	add	r3, r1
 80090ac:	3324      	adds	r3, #36	@ 0x24
 80090ae:	2200      	movs	r2, #0
 80090b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80090b2:	4b32      	ldr	r3, [pc, #200]	@ (800917c <USBD_CDC_DeInit+0xfc>)
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f003 fb90 	bl	800c7de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80090be:	4b2f      	ldr	r3, [pc, #188]	@ (800917c <USBD_CDC_DeInit+0xfc>)
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	f003 020f 	and.w	r2, r3, #15
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	4613      	mov	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	440b      	add	r3, r1
 80090d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80090d6:	2200      	movs	r2, #0
 80090d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80090da:	4b29      	ldr	r3, [pc, #164]	@ (8009180 <USBD_CDC_DeInit+0x100>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f003 fb7c 	bl	800c7de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80090e6:	4b26      	ldr	r3, [pc, #152]	@ (8009180 <USBD_CDC_DeInit+0x100>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	f003 020f 	and.w	r2, r3, #15
 80090ee:	6879      	ldr	r1, [r7, #4]
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	440b      	add	r3, r1
 80090fa:	3324      	adds	r3, #36	@ 0x24
 80090fc:	2200      	movs	r2, #0
 80090fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009100:	4b1f      	ldr	r3, [pc, #124]	@ (8009180 <USBD_CDC_DeInit+0x100>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	f003 020f 	and.w	r2, r3, #15
 8009108:	6879      	ldr	r1, [r7, #4]
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	440b      	add	r3, r1
 8009114:	3326      	adds	r3, #38	@ 0x26
 8009116:	2200      	movs	r2, #0
 8009118:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	32b0      	adds	r2, #176	@ 0xb0
 8009124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d01f      	beq.n	800916c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	33b0      	adds	r3, #176	@ 0xb0
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	32b0      	adds	r2, #176	@ 0xb0
 800914a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800914e:	4618      	mov	r0, r3
 8009150:	f003 fc9e 	bl	800ca90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	32b0      	adds	r2, #176	@ 0xb0
 800915e:	2100      	movs	r1, #0
 8009160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20000093 	.word	0x20000093
 800917c:	20000094 	.word	0x20000094
 8009180:	20000095 	.word	0x20000095

08009184 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	32b0      	adds	r2, #176	@ 0xb0
 8009198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80091a2:	2300      	movs	r3, #0
 80091a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e0bf      	b.n	8009334 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d050      	beq.n	8009262 <USBD_CDC_Setup+0xde>
 80091c0:	2b20      	cmp	r3, #32
 80091c2:	f040 80af 	bne.w	8009324 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	88db      	ldrh	r3, [r3, #6]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d03a      	beq.n	8009244 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	b25b      	sxtb	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	da1b      	bge.n	8009210 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	33b0      	adds	r3, #176	@ 0xb0
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80091ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	88d2      	ldrh	r2, [r2, #6]
 80091f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	88db      	ldrh	r3, [r3, #6]
 80091fa:	2b07      	cmp	r3, #7
 80091fc:	bf28      	it	cs
 80091fe:	2307      	movcs	r3, #7
 8009200:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	89fa      	ldrh	r2, [r7, #14]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fdb1 	bl	800ad70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800920e:	e090      	b.n	8009332 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	785a      	ldrb	r2, [r3, #1]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	88db      	ldrh	r3, [r3, #6]
 800921e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009220:	d803      	bhi.n	800922a <USBD_CDC_Setup+0xa6>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	88db      	ldrh	r3, [r3, #6]
 8009226:	b2da      	uxtb	r2, r3
 8009228:	e000      	b.n	800922c <USBD_CDC_Setup+0xa8>
 800922a:	2240      	movs	r2, #64	@ 0x40
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009232:	6939      	ldr	r1, [r7, #16]
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800923a:	461a      	mov	r2, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 fdc3 	bl	800adc8 <USBD_CtlPrepareRx>
      break;
 8009242:	e076      	b.n	8009332 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	33b0      	adds	r3, #176	@ 0xb0
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	7850      	ldrb	r0, [r2, #1]
 800925a:	2200      	movs	r2, #0
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	4798      	blx	r3
      break;
 8009260:	e067      	b.n	8009332 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	785b      	ldrb	r3, [r3, #1]
 8009266:	2b0b      	cmp	r3, #11
 8009268:	d851      	bhi.n	800930e <USBD_CDC_Setup+0x18a>
 800926a:	a201      	add	r2, pc, #4	@ (adr r2, 8009270 <USBD_CDC_Setup+0xec>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	080092a1 	.word	0x080092a1
 8009274:	0800931d 	.word	0x0800931d
 8009278:	0800930f 	.word	0x0800930f
 800927c:	0800930f 	.word	0x0800930f
 8009280:	0800930f 	.word	0x0800930f
 8009284:	0800930f 	.word	0x0800930f
 8009288:	0800930f 	.word	0x0800930f
 800928c:	0800930f 	.word	0x0800930f
 8009290:	0800930f 	.word	0x0800930f
 8009294:	0800930f 	.word	0x0800930f
 8009298:	080092cb 	.word	0x080092cb
 800929c:	080092f5 	.word	0x080092f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d107      	bne.n	80092bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80092ac:	f107 030a 	add.w	r3, r7, #10
 80092b0:	2202      	movs	r2, #2
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 fd5b 	bl	800ad70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092ba:	e032      	b.n	8009322 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f001 fce5 	bl	800ac8e <USBD_CtlError>
            ret = USBD_FAIL;
 80092c4:	2303      	movs	r3, #3
 80092c6:	75fb      	strb	r3, [r7, #23]
          break;
 80092c8:	e02b      	b.n	8009322 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d107      	bne.n	80092e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80092d6:	f107 030d 	add.w	r3, r7, #13
 80092da:	2201      	movs	r2, #1
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 fd46 	bl	800ad70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092e4:	e01d      	b.n	8009322 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 fcd0 	bl	800ac8e <USBD_CtlError>
            ret = USBD_FAIL;
 80092ee:	2303      	movs	r3, #3
 80092f0:	75fb      	strb	r3, [r7, #23]
          break;
 80092f2:	e016      	b.n	8009322 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	d00f      	beq.n	8009320 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f001 fcc3 	bl	800ac8e <USBD_CtlError>
            ret = USBD_FAIL;
 8009308:	2303      	movs	r3, #3
 800930a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800930c:	e008      	b.n	8009320 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 fcbc 	bl	800ac8e <USBD_CtlError>
          ret = USBD_FAIL;
 8009316:	2303      	movs	r3, #3
 8009318:	75fb      	strb	r3, [r7, #23]
          break;
 800931a:	e002      	b.n	8009322 <USBD_CDC_Setup+0x19e>
          break;
 800931c:	bf00      	nop
 800931e:	e008      	b.n	8009332 <USBD_CDC_Setup+0x1ae>
          break;
 8009320:	bf00      	nop
      }
      break;
 8009322:	e006      	b.n	8009332 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f001 fcb1 	bl	800ac8e <USBD_CtlError>
      ret = USBD_FAIL;
 800932c:	2303      	movs	r3, #3
 800932e:	75fb      	strb	r3, [r7, #23]
      break;
 8009330:	bf00      	nop
  }

  return (uint8_t)ret;
 8009332:	7dfb      	ldrb	r3, [r7, #23]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800934e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	32b0      	adds	r2, #176	@ 0xb0
 800935a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009362:	2303      	movs	r3, #3
 8009364:	e065      	b.n	8009432 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	32b0      	adds	r2, #176	@ 0xb0
 8009370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009374:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009376:	78fb      	ldrb	r3, [r7, #3]
 8009378:	f003 020f 	and.w	r2, r3, #15
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	440b      	add	r3, r1
 8009388:	3318      	adds	r3, #24
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d02f      	beq.n	80093f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	f003 020f 	and.w	r2, r3, #15
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	440b      	add	r3, r1
 80093a2:	3318      	adds	r3, #24
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	78fb      	ldrb	r3, [r7, #3]
 80093a8:	f003 010f 	and.w	r1, r3, #15
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	460b      	mov	r3, r1
 80093b0:	00db      	lsls	r3, r3, #3
 80093b2:	440b      	add	r3, r1
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4403      	add	r3, r0
 80093b8:	331c      	adds	r3, #28
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80093c0:	fb01 f303 	mul.w	r3, r1, r3
 80093c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d112      	bne.n	80093f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80093ca:	78fb      	ldrb	r3, [r7, #3]
 80093cc:	f003 020f 	and.w	r2, r3, #15
 80093d0:	6879      	ldr	r1, [r7, #4]
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	440b      	add	r3, r1
 80093dc:	3318      	adds	r3, #24
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80093e2:	78f9      	ldrb	r1, [r7, #3]
 80093e4:	2300      	movs	r3, #0
 80093e6:	2200      	movs	r2, #0
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f003 faa0 	bl	800c92e <USBD_LL_Transmit>
 80093ee:	e01f      	b.n	8009430 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	33b0      	adds	r3, #176	@ 0xb0
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	33b0      	adds	r3, #176	@ 0xb0
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800942c:	78fa      	ldrb	r2, [r7, #3]
 800942e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	32b0      	adds	r2, #176	@ 0xb0
 8009450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009454:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	32b0      	adds	r2, #176	@ 0xb0
 8009460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009468:	2303      	movs	r3, #3
 800946a:	e01a      	b.n	80094a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f003 fa9e 	bl	800c9b2 <USBD_LL_GetRxDataSize>
 8009476:	4602      	mov	r2, r0
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	33b0      	adds	r3, #176	@ 0xb0
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800949c:	4611      	mov	r1, r2
 800949e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	32b0      	adds	r2, #176	@ 0xb0
 80094bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e024      	b.n	8009516 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	33b0      	adds	r3, #176	@ 0xb0
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d019      	beq.n	8009514 <USBD_CDC_EP0_RxReady+0x6a>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80094e6:	2bff      	cmp	r3, #255	@ 0xff
 80094e8:	d014      	beq.n	8009514 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	33b0      	adds	r3, #176	@ 0xb0
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009502:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800950a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	22ff      	movs	r2, #255	@ 0xff
 8009510:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009528:	2182      	movs	r1, #130	@ 0x82
 800952a:	4818      	ldr	r0, [pc, #96]	@ (800958c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800952c:	f000 fd4f 	bl	8009fce <USBD_GetEpDesc>
 8009530:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009532:	2101      	movs	r1, #1
 8009534:	4815      	ldr	r0, [pc, #84]	@ (800958c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009536:	f000 fd4a 	bl	8009fce <USBD_GetEpDesc>
 800953a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800953c:	2181      	movs	r1, #129	@ 0x81
 800953e:	4813      	ldr	r0, [pc, #76]	@ (800958c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009540:	f000 fd45 	bl	8009fce <USBD_GetEpDesc>
 8009544:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	2210      	movs	r2, #16
 8009550:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d006      	beq.n	8009566 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	2200      	movs	r2, #0
 800955c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009560:	711a      	strb	r2, [r3, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d006      	beq.n	800957a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009574:	711a      	strb	r2, [r3, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2243      	movs	r2, #67	@ 0x43
 800957e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009580:	4b02      	ldr	r3, [pc, #8]	@ (800958c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20000050 	.word	0x20000050

08009590 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009598:	2182      	movs	r1, #130	@ 0x82
 800959a:	4818      	ldr	r0, [pc, #96]	@ (80095fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800959c:	f000 fd17 	bl	8009fce <USBD_GetEpDesc>
 80095a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095a2:	2101      	movs	r1, #1
 80095a4:	4815      	ldr	r0, [pc, #84]	@ (80095fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095a6:	f000 fd12 	bl	8009fce <USBD_GetEpDesc>
 80095aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80095ac:	2181      	movs	r1, #129	@ 0x81
 80095ae:	4813      	ldr	r0, [pc, #76]	@ (80095fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095b0:	f000 fd0d 	bl	8009fce <USBD_GetEpDesc>
 80095b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	2210      	movs	r2, #16
 80095c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d006      	beq.n	80095d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	2200      	movs	r2, #0
 80095cc:	711a      	strb	r2, [r3, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f042 0202 	orr.w	r2, r2, #2
 80095d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d006      	beq.n	80095ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	711a      	strb	r2, [r3, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f042 0202 	orr.w	r2, r2, #2
 80095e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2243      	movs	r2, #67	@ 0x43
 80095ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80095f0:	4b02      	ldr	r3, [pc, #8]	@ (80095fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20000050 	.word	0x20000050

08009600 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009608:	2182      	movs	r1, #130	@ 0x82
 800960a:	4818      	ldr	r0, [pc, #96]	@ (800966c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800960c:	f000 fcdf 	bl	8009fce <USBD_GetEpDesc>
 8009610:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009612:	2101      	movs	r1, #1
 8009614:	4815      	ldr	r0, [pc, #84]	@ (800966c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009616:	f000 fcda 	bl	8009fce <USBD_GetEpDesc>
 800961a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800961c:	2181      	movs	r1, #129	@ 0x81
 800961e:	4813      	ldr	r0, [pc, #76]	@ (800966c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009620:	f000 fcd5 	bl	8009fce <USBD_GetEpDesc>
 8009624:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	2210      	movs	r2, #16
 8009630:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d006      	beq.n	8009646 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	2200      	movs	r2, #0
 800963c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009640:	711a      	strb	r2, [r3, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d006      	beq.n	800965a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009654:	711a      	strb	r2, [r3, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2243      	movs	r2, #67	@ 0x43
 800965e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009660:	4b02      	ldr	r3, [pc, #8]	@ (800966c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009662:	4618      	mov	r0, r3
 8009664:	3718      	adds	r7, #24
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20000050 	.word	0x20000050

08009670 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	220a      	movs	r2, #10
 800967c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800967e:	4b03      	ldr	r3, [pc, #12]	@ (800968c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009680:	4618      	mov	r0, r3
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	2000000c 	.word	0x2000000c

08009690 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80096a0:	2303      	movs	r3, #3
 80096a2:	e009      	b.n	80096b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	33b0      	adds	r3, #176	@ 0xb0
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	32b0      	adds	r2, #176	@ 0xb0
 80096da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80096e6:	2303      	movs	r3, #3
 80096e8:	e008      	b.n	80096fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	371c      	adds	r7, #28
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	32b0      	adds	r2, #176	@ 0xb0
 800971c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009720:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009728:	2303      	movs	r3, #3
 800972a:	e004      	b.n	8009736 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
	...

08009744 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	32b0      	adds	r2, #176	@ 0xb0
 8009756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800975a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800975c:	2301      	movs	r3, #1
 800975e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009766:	2303      	movs	r3, #3
 8009768:	e025      	b.n	80097b6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009770:	2b00      	cmp	r3, #0
 8009772:	d11f      	bne.n	80097b4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2201      	movs	r2, #1
 8009778:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800977c:	4b10      	ldr	r3, [pc, #64]	@ (80097c0 <USBD_CDC_TransmitPacket+0x7c>)
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	f003 020f 	and.w	r2, r3, #15
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4403      	add	r3, r0
 8009796:	3318      	adds	r3, #24
 8009798:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800979a:	4b09      	ldr	r3, [pc, #36]	@ (80097c0 <USBD_CDC_TransmitPacket+0x7c>)
 800979c:	7819      	ldrb	r1, [r3, #0]
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f003 f8bf 	bl	800c92e <USBD_LL_Transmit>

    ret = USBD_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	20000093 	.word	0x20000093

080097c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	32b0      	adds	r2, #176	@ 0xb0
 80097d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	32b0      	adds	r2, #176	@ 0xb0
 80097e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80097ee:	2303      	movs	r3, #3
 80097f0:	e018      	b.n	8009824 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	7c1b      	ldrb	r3, [r3, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10a      	bne.n	8009810 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097fa:	4b0c      	ldr	r3, [pc, #48]	@ (800982c <USBD_CDC_ReceivePacket+0x68>)
 80097fc:	7819      	ldrb	r1, [r3, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f003 f8b1 	bl	800c970 <USBD_LL_PrepareReceive>
 800980e:	e008      	b.n	8009822 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009810:	4b06      	ldr	r3, [pc, #24]	@ (800982c <USBD_CDC_ReceivePacket+0x68>)
 8009812:	7819      	ldrb	r1, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800981a:	2340      	movs	r3, #64	@ 0x40
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f003 f8a7 	bl	800c970 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	20000094 	.word	0x20000094

08009830 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	4613      	mov	r3, r2
 800983c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009844:	2303      	movs	r3, #3
 8009846:	e01f      	b.n	8009888 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	79fa      	ldrb	r2, [r7, #7]
 800987a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f002 ff21 	bl	800c6c4 <USBD_LL_Init>
 8009882:	4603      	mov	r3, r0
 8009884:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800989a:	2300      	movs	r3, #0
 800989c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e025      	b.n	80098f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	32ae      	adds	r2, #174	@ 0xae
 80098ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00f      	beq.n	80098e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	32ae      	adds	r2, #174	@ 0xae
 80098ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d4:	f107 020e 	add.w	r2, r7, #14
 80098d8:	4610      	mov	r0, r2
 80098da:	4798      	blx	r3
 80098dc:	4602      	mov	r2, r0
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f002 ff29 	bl	800c75c <USBD_LL_Start>
 800990a:	4603      	mov	r3, r0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800991c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	460b      	mov	r3, r1
 8009934:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009940:	2b00      	cmp	r3, #0
 8009942:	d009      	beq.n	8009958 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	78fa      	ldrb	r2, [r7, #3]
 800994e:	4611      	mov	r1, r2
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	4798      	blx	r3
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009958:	7bfb      	ldrb	r3, [r7, #15]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	460b      	mov	r3, r1
 800996c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	78fa      	ldrb	r2, [r7, #3]
 800997c:	4611      	mov	r1, r2
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	4798      	blx	r3
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009988:	2303      	movs	r3, #3
 800998a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f001 f936 	bl	800ac1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80099bc:	461a      	mov	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80099ca:	f003 031f 	and.w	r3, r3, #31
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d01a      	beq.n	8009a08 <USBD_LL_SetupStage+0x72>
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d822      	bhi.n	8009a1c <USBD_LL_SetupStage+0x86>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <USBD_LL_SetupStage+0x4a>
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d00a      	beq.n	80099f4 <USBD_LL_SetupStage+0x5e>
 80099de:	e01d      	b.n	8009a1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fb63 	bl	800a0b4 <USBD_StdDevReq>
 80099ee:	4603      	mov	r3, r0
 80099f0:	73fb      	strb	r3, [r7, #15]
      break;
 80099f2:	e020      	b.n	8009a36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fbcb 	bl	800a198 <USBD_StdItfReq>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73fb      	strb	r3, [r7, #15]
      break;
 8009a06:	e016      	b.n	8009a36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fc2d 	bl	800a270 <USBD_StdEPReq>
 8009a16:	4603      	mov	r3, r0
 8009a18:	73fb      	strb	r3, [r7, #15]
      break;
 8009a1a:	e00c      	b.n	8009a36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009a22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f002 fef6 	bl	800c81c <USBD_LL_StallEP>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73fb      	strb	r3, [r7, #15]
      break;
 8009a34:	bf00      	nop
  }

  return ret;
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	607a      	str	r2, [r7, #4]
 8009a4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009a52:	7afb      	ldrb	r3, [r7, #11]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d16e      	bne.n	8009b36 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009a5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	f040 8098 	bne.w	8009b9c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d913      	bls.n	8009aa0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	689a      	ldr	r2, [r3, #8]
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	1ad2      	subs	r2, r2, r3
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	bf28      	it	cs
 8009a92:	4613      	movcs	r3, r2
 8009a94:	461a      	mov	r2, r3
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f001 f9b2 	bl	800ae02 <USBD_CtlContinueRx>
 8009a9e:	e07d      	b.n	8009b9c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009aa6:	f003 031f 	and.w	r3, r3, #31
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d014      	beq.n	8009ad8 <USBD_LL_DataOutStage+0x98>
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d81d      	bhi.n	8009aee <USBD_LL_DataOutStage+0xae>
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <USBD_LL_DataOutStage+0x7c>
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d003      	beq.n	8009ac2 <USBD_LL_DataOutStage+0x82>
 8009aba:	e018      	b.n	8009aee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009abc:	2300      	movs	r3, #0
 8009abe:	75bb      	strb	r3, [r7, #22]
            break;
 8009ac0:	e018      	b.n	8009af4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	4619      	mov	r1, r3
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 fa64 	bl	8009f9a <USBD_CoreFindIF>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	75bb      	strb	r3, [r7, #22]
            break;
 8009ad6:	e00d      	b.n	8009af4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 fa66 	bl	8009fb4 <USBD_CoreFindEP>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	75bb      	strb	r3, [r7, #22]
            break;
 8009aec:	e002      	b.n	8009af4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	75bb      	strb	r3, [r7, #22]
            break;
 8009af2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009af4:	7dbb      	ldrb	r3, [r7, #22]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d119      	bne.n	8009b2e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	d113      	bne.n	8009b2e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009b06:	7dba      	ldrb	r2, [r7, #22]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	32ae      	adds	r2, #174	@ 0xae
 8009b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00b      	beq.n	8009b2e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009b16:	7dba      	ldrb	r2, [r7, #22]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009b1e:	7dba      	ldrb	r2, [r7, #22]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	32ae      	adds	r2, #174	@ 0xae
 8009b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f001 f978 	bl	800ae24 <USBD_CtlSendStatus>
 8009b34:	e032      	b.n	8009b9c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009b36:	7afb      	ldrb	r3, [r7, #11]
 8009b38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	4619      	mov	r1, r3
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f000 fa37 	bl	8009fb4 <USBD_CoreFindEP>
 8009b46:	4603      	mov	r3, r0
 8009b48:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b4a:	7dbb      	ldrb	r3, [r7, #22]
 8009b4c:	2bff      	cmp	r3, #255	@ 0xff
 8009b4e:	d025      	beq.n	8009b9c <USBD_LL_DataOutStage+0x15c>
 8009b50:	7dbb      	ldrb	r3, [r7, #22]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d122      	bne.n	8009b9c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b03      	cmp	r3, #3
 8009b60:	d117      	bne.n	8009b92 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009b62:	7dba      	ldrb	r2, [r7, #22]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	32ae      	adds	r2, #174	@ 0xae
 8009b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00f      	beq.n	8009b92 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009b72:	7dba      	ldrb	r2, [r7, #22]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009b7a:	7dba      	ldrb	r2, [r7, #22]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	32ae      	adds	r2, #174	@ 0xae
 8009b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	7afa      	ldrb	r2, [r7, #11]
 8009b88:	4611      	mov	r1, r2
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	4798      	blx	r3
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
 8009b9a:	e000      	b.n	8009b9e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b086      	sub	sp, #24
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	607a      	str	r2, [r7, #4]
 8009bb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009bb4:	7afb      	ldrb	r3, [r7, #11]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d16f      	bne.n	8009c9a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	3314      	adds	r3, #20
 8009bbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d15a      	bne.n	8009c80 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	689a      	ldr	r2, [r3, #8]
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d914      	bls.n	8009c00 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	689a      	ldr	r2, [r3, #8]
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	1ad2      	subs	r2, r2, r3
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	461a      	mov	r2, r3
 8009bea:	6879      	ldr	r1, [r7, #4]
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f001 f8da 	bl	800ada6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f002 feb9 	bl	800c970 <USBD_LL_PrepareReceive>
 8009bfe:	e03f      	b.n	8009c80 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	68da      	ldr	r2, [r3, #12]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d11c      	bne.n	8009c46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d316      	bcc.n	8009c46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d20f      	bcs.n	8009c46 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c26:	2200      	movs	r2, #0
 8009c28:	2100      	movs	r1, #0
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f001 f8bb 	bl	800ada6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c38:	2300      	movs	r3, #0
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f002 fe96 	bl	800c970 <USBD_LL_PrepareReceive>
 8009c44:	e01c      	b.n	8009c80 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d10f      	bne.n	8009c72 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d009      	beq.n	8009c72 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c72:	2180      	movs	r1, #128	@ 0x80
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f002 fdd1 	bl	800c81c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f001 f8e5 	bl	800ae4a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d03a      	beq.n	8009d00 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f7ff fe42 	bl	8009914 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009c98:	e032      	b.n	8009d00 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009c9a:	7afb      	ldrb	r3, [r7, #11]
 8009c9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 f985 	bl	8009fb4 <USBD_CoreFindEP>
 8009caa:	4603      	mov	r3, r0
 8009cac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cae:	7dfb      	ldrb	r3, [r7, #23]
 8009cb0:	2bff      	cmp	r3, #255	@ 0xff
 8009cb2:	d025      	beq.n	8009d00 <USBD_LL_DataInStage+0x15a>
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d122      	bne.n	8009d00 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	d11c      	bne.n	8009d00 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009cc6:	7dfa      	ldrb	r2, [r7, #23]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	32ae      	adds	r2, #174	@ 0xae
 8009ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d014      	beq.n	8009d00 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009cd6:	7dfa      	ldrb	r2, [r7, #23]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009cde:	7dfa      	ldrb	r2, [r7, #23]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	32ae      	adds	r2, #174	@ 0xae
 8009ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	7afa      	ldrb	r2, [r7, #11]
 8009cec:	4611      	mov	r1, r2
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	4798      	blx	r3
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009cf6:	7dbb      	ldrb	r3, [r7, #22]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009cfc:	7dbb      	ldrb	r3, [r7, #22]
 8009cfe:	e000      	b.n	8009d02 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d014      	beq.n	8009d70 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00e      	beq.n	8009d70 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	6852      	ldr	r2, [r2, #4]
 8009d5e:	b2d2      	uxtb	r2, r2
 8009d60:	4611      	mov	r1, r2
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	4798      	blx	r3
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d70:	2340      	movs	r3, #64	@ 0x40
 8009d72:	2200      	movs	r2, #0
 8009d74:	2100      	movs	r1, #0
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f002 fd0b 	bl	800c792 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2240      	movs	r2, #64	@ 0x40
 8009d88:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d8c:	2340      	movs	r3, #64	@ 0x40
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2180      	movs	r1, #128	@ 0x80
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f002 fcfd 	bl	800c792 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2240      	movs	r2, #64	@ 0x40
 8009da2:	621a      	str	r2, [r3, #32]

  return ret;
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b083      	sub	sp, #12
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	78fa      	ldrb	r2, [r7, #3]
 8009dbe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d006      	beq.n	8009df0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2204      	movs	r2, #4
 8009df4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e06:	b480      	push	{r7}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d106      	bne.n	8009e28 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b082      	sub	sp, #8
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	d110      	bne.n	8009e6c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e5a:	69db      	ldr	r3, [r3, #28]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d005      	beq.n	8009e6c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b082      	sub	sp, #8
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	32ae      	adds	r2, #174	@ 0xae
 8009e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e01c      	b.n	8009ed2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d115      	bne.n	8009ed0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	32ae      	adds	r2, #174	@ 0xae
 8009eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb2:	6a1b      	ldr	r3, [r3, #32]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00b      	beq.n	8009ed0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	32ae      	adds	r2, #174	@ 0xae
 8009ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec6:	6a1b      	ldr	r3, [r3, #32]
 8009ec8:	78fa      	ldrb	r2, [r7, #3]
 8009eca:	4611      	mov	r1, r2
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b082      	sub	sp, #8
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	32ae      	adds	r2, #174	@ 0xae
 8009ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e01c      	b.n	8009f36 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b03      	cmp	r3, #3
 8009f06:	d115      	bne.n	8009f34 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	32ae      	adds	r2, #174	@ 0xae
 8009f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00b      	beq.n	8009f34 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	32ae      	adds	r2, #174	@ 0xae
 8009f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f2c:	78fa      	ldrb	r2, [r7, #3]
 8009f2e:	4611      	mov	r1, r2
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b083      	sub	sp, #12
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00e      	beq.n	8009f90 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	6852      	ldr	r2, [r2, #4]
 8009f7e:	b2d2      	uxtb	r2, r2
 8009f80:	4611      	mov	r1, r2
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	4798      	blx	r3
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f9a:	b480      	push	{r7}
 8009f9c:	b083      	sub	sp, #12
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009fa6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009fc0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b086      	sub	sp, #24
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	885b      	ldrh	r3, [r3, #2]
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	7812      	ldrb	r2, [r2, #0]
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d91f      	bls.n	800a034 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009ffa:	e013      	b.n	800a024 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009ffc:	f107 030a 	add.w	r3, r7, #10
 800a000:	4619      	mov	r1, r3
 800a002:	6978      	ldr	r0, [r7, #20]
 800a004:	f000 f81b 	bl	800a03e <USBD_GetNextDesc>
 800a008:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	785b      	ldrb	r3, [r3, #1]
 800a00e:	2b05      	cmp	r3, #5
 800a010:	d108      	bne.n	800a024 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	789b      	ldrb	r3, [r3, #2]
 800a01a:	78fa      	ldrb	r2, [r7, #3]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d008      	beq.n	800a032 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a020:	2300      	movs	r3, #0
 800a022:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	885b      	ldrh	r3, [r3, #2]
 800a028:	b29a      	uxth	r2, r3
 800a02a:	897b      	ldrh	r3, [r7, #10]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d8e5      	bhi.n	8009ffc <USBD_GetEpDesc+0x2e>
 800a030:	e000      	b.n	800a034 <USBD_GetEpDesc+0x66>
          break;
 800a032:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a034:	693b      	ldr	r3, [r7, #16]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a03e:	b480      	push	{r7}
 800a040:	b085      	sub	sp, #20
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	881b      	ldrh	r3, [r3, #0]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	7812      	ldrb	r2, [r2, #0]
 800a054:	4413      	add	r3, r2
 800a056:	b29a      	uxth	r2, r3
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	461a      	mov	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4413      	add	r3, r2
 800a066:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a068:	68fb      	ldr	r3, [r7, #12]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a076:	b480      	push	{r7}
 800a078:	b087      	sub	sp, #28
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	3301      	adds	r3, #1
 800a08c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a094:	8a3b      	ldrh	r3, [r7, #16]
 800a096:	021b      	lsls	r3, r3, #8
 800a098:	b21a      	sxth	r2, r3
 800a09a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	b21b      	sxth	r3, r3
 800a0a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a0a4:	89fb      	ldrh	r3, [r7, #14]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	371c      	adds	r7, #28
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
	...

0800a0b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a0ca:	2b40      	cmp	r3, #64	@ 0x40
 800a0cc:	d005      	beq.n	800a0da <USBD_StdDevReq+0x26>
 800a0ce:	2b40      	cmp	r3, #64	@ 0x40
 800a0d0:	d857      	bhi.n	800a182 <USBD_StdDevReq+0xce>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00f      	beq.n	800a0f6 <USBD_StdDevReq+0x42>
 800a0d6:	2b20      	cmp	r3, #32
 800a0d8:	d153      	bne.n	800a182 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	32ae      	adds	r2, #174	@ 0xae
 800a0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	4798      	blx	r3
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f4:	e04a      	b.n	800a18c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	785b      	ldrb	r3, [r3, #1]
 800a0fa:	2b09      	cmp	r3, #9
 800a0fc:	d83b      	bhi.n	800a176 <USBD_StdDevReq+0xc2>
 800a0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a104 <USBD_StdDevReq+0x50>)
 800a100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a104:	0800a159 	.word	0x0800a159
 800a108:	0800a16d 	.word	0x0800a16d
 800a10c:	0800a177 	.word	0x0800a177
 800a110:	0800a163 	.word	0x0800a163
 800a114:	0800a177 	.word	0x0800a177
 800a118:	0800a137 	.word	0x0800a137
 800a11c:	0800a12d 	.word	0x0800a12d
 800a120:	0800a177 	.word	0x0800a177
 800a124:	0800a14f 	.word	0x0800a14f
 800a128:	0800a141 	.word	0x0800a141
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa3c 	bl	800a5ac <USBD_GetDescriptor>
          break;
 800a134:	e024      	b.n	800a180 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fbcb 	bl	800a8d4 <USBD_SetAddress>
          break;
 800a13e:	e01f      	b.n	800a180 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fc0a 	bl	800a95c <USBD_SetConfig>
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]
          break;
 800a14c:	e018      	b.n	800a180 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fcad 	bl	800aab0 <USBD_GetConfig>
          break;
 800a156:	e013      	b.n	800a180 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fcde 	bl	800ab1c <USBD_GetStatus>
          break;
 800a160:	e00e      	b.n	800a180 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fd0d 	bl	800ab84 <USBD_SetFeature>
          break;
 800a16a:	e009      	b.n	800a180 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fd31 	bl	800abd6 <USBD_ClrFeature>
          break;
 800a174:	e004      	b.n	800a180 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fd88 	bl	800ac8e <USBD_CtlError>
          break;
 800a17e:	bf00      	nop
      }
      break;
 800a180:	e004      	b.n	800a18c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fd82 	bl	800ac8e <USBD_CtlError>
      break;
 800a18a:	bf00      	nop
  }

  return ret;
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop

0800a198 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a1ae:	2b40      	cmp	r3, #64	@ 0x40
 800a1b0:	d005      	beq.n	800a1be <USBD_StdItfReq+0x26>
 800a1b2:	2b40      	cmp	r3, #64	@ 0x40
 800a1b4:	d852      	bhi.n	800a25c <USBD_StdItfReq+0xc4>
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d001      	beq.n	800a1be <USBD_StdItfReq+0x26>
 800a1ba:	2b20      	cmp	r3, #32
 800a1bc:	d14e      	bne.n	800a25c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d840      	bhi.n	800a24e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	889b      	ldrh	r3, [r3, #4]
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d836      	bhi.n	800a244 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	889b      	ldrh	r3, [r3, #4]
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7ff fedb 	bl	8009f9a <USBD_CoreFindIF>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	2bff      	cmp	r3, #255	@ 0xff
 800a1ec:	d01d      	beq.n	800a22a <USBD_StdItfReq+0x92>
 800a1ee:	7bbb      	ldrb	r3, [r7, #14]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d11a      	bne.n	800a22a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a1f4:	7bba      	ldrb	r2, [r7, #14]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	32ae      	adds	r2, #174	@ 0xae
 800a1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00f      	beq.n	800a224 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a204:	7bba      	ldrb	r2, [r7, #14]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a20c:	7bba      	ldrb	r2, [r7, #14]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	32ae      	adds	r2, #174	@ 0xae
 800a212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	4798      	blx	r3
 800a21e:	4603      	mov	r3, r0
 800a220:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a222:	e004      	b.n	800a22e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a224:	2303      	movs	r3, #3
 800a226:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a228:	e001      	b.n	800a22e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a22a:	2303      	movs	r3, #3
 800a22c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	88db      	ldrh	r3, [r3, #6]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d110      	bne.n	800a258 <USBD_StdItfReq+0xc0>
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10d      	bne.n	800a258 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fdf1 	bl	800ae24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a242:	e009      	b.n	800a258 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fd21 	bl	800ac8e <USBD_CtlError>
          break;
 800a24c:	e004      	b.n	800a258 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fd1c 	bl	800ac8e <USBD_CtlError>
          break;
 800a256:	e000      	b.n	800a25a <USBD_StdItfReq+0xc2>
          break;
 800a258:	bf00      	nop
      }
      break;
 800a25a:	e004      	b.n	800a266 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fd15 	bl	800ac8e <USBD_CtlError>
      break;
 800a264:	bf00      	nop
  }

  return ret;
 800a266:	7bfb      	ldrb	r3, [r7, #15]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	889b      	ldrh	r3, [r3, #4]
 800a282:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a28c:	2b40      	cmp	r3, #64	@ 0x40
 800a28e:	d007      	beq.n	800a2a0 <USBD_StdEPReq+0x30>
 800a290:	2b40      	cmp	r3, #64	@ 0x40
 800a292:	f200 817f 	bhi.w	800a594 <USBD_StdEPReq+0x324>
 800a296:	2b00      	cmp	r3, #0
 800a298:	d02a      	beq.n	800a2f0 <USBD_StdEPReq+0x80>
 800a29a:	2b20      	cmp	r3, #32
 800a29c:	f040 817a 	bne.w	800a594 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff fe85 	bl	8009fb4 <USBD_CoreFindEP>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2ae:	7b7b      	ldrb	r3, [r7, #13]
 800a2b0:	2bff      	cmp	r3, #255	@ 0xff
 800a2b2:	f000 8174 	beq.w	800a59e <USBD_StdEPReq+0x32e>
 800a2b6:	7b7b      	ldrb	r3, [r7, #13]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f040 8170 	bne.w	800a59e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a2be:	7b7a      	ldrb	r2, [r7, #13]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a2c6:	7b7a      	ldrb	r2, [r7, #13]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	32ae      	adds	r2, #174	@ 0xae
 800a2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f000 8163 	beq.w	800a59e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a2d8:	7b7a      	ldrb	r2, [r7, #13]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	32ae      	adds	r2, #174	@ 0xae
 800a2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	4798      	blx	r3
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a2ee:	e156      	b.n	800a59e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	785b      	ldrb	r3, [r3, #1]
 800a2f4:	2b03      	cmp	r3, #3
 800a2f6:	d008      	beq.n	800a30a <USBD_StdEPReq+0x9a>
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	f300 8145 	bgt.w	800a588 <USBD_StdEPReq+0x318>
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 809b 	beq.w	800a43a <USBD_StdEPReq+0x1ca>
 800a304:	2b01      	cmp	r3, #1
 800a306:	d03c      	beq.n	800a382 <USBD_StdEPReq+0x112>
 800a308:	e13e      	b.n	800a588 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b02      	cmp	r3, #2
 800a314:	d002      	beq.n	800a31c <USBD_StdEPReq+0xac>
 800a316:	2b03      	cmp	r3, #3
 800a318:	d016      	beq.n	800a348 <USBD_StdEPReq+0xd8>
 800a31a:	e02c      	b.n	800a376 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00d      	beq.n	800a33e <USBD_StdEPReq+0xce>
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	2b80      	cmp	r3, #128	@ 0x80
 800a326:	d00a      	beq.n	800a33e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a328:	7bbb      	ldrb	r3, [r7, #14]
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f002 fa75 	bl	800c81c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a332:	2180      	movs	r1, #128	@ 0x80
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f002 fa71 	bl	800c81c <USBD_LL_StallEP>
 800a33a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a33c:	e020      	b.n	800a380 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fca4 	bl	800ac8e <USBD_CtlError>
              break;
 800a346:	e01b      	b.n	800a380 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	885b      	ldrh	r3, [r3, #2]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10e      	bne.n	800a36e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a350:	7bbb      	ldrb	r3, [r7, #14]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00b      	beq.n	800a36e <USBD_StdEPReq+0xfe>
 800a356:	7bbb      	ldrb	r3, [r7, #14]
 800a358:	2b80      	cmp	r3, #128	@ 0x80
 800a35a:	d008      	beq.n	800a36e <USBD_StdEPReq+0xfe>
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	88db      	ldrh	r3, [r3, #6]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d104      	bne.n	800a36e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a364:	7bbb      	ldrb	r3, [r7, #14]
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f002 fa57 	bl	800c81c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fd58 	bl	800ae24 <USBD_CtlSendStatus>

              break;
 800a374:	e004      	b.n	800a380 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fc88 	bl	800ac8e <USBD_CtlError>
              break;
 800a37e:	bf00      	nop
          }
          break;
 800a380:	e107      	b.n	800a592 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d002      	beq.n	800a394 <USBD_StdEPReq+0x124>
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d016      	beq.n	800a3c0 <USBD_StdEPReq+0x150>
 800a392:	e04b      	b.n	800a42c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a394:	7bbb      	ldrb	r3, [r7, #14]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00d      	beq.n	800a3b6 <USBD_StdEPReq+0x146>
 800a39a:	7bbb      	ldrb	r3, [r7, #14]
 800a39c:	2b80      	cmp	r3, #128	@ 0x80
 800a39e:	d00a      	beq.n	800a3b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3a0:	7bbb      	ldrb	r3, [r7, #14]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f002 fa39 	bl	800c81c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3aa:	2180      	movs	r1, #128	@ 0x80
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f002 fa35 	bl	800c81c <USBD_LL_StallEP>
 800a3b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3b4:	e040      	b.n	800a438 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fc68 	bl	800ac8e <USBD_CtlError>
              break;
 800a3be:	e03b      	b.n	800a438 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	885b      	ldrh	r3, [r3, #2]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d136      	bne.n	800a436 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a3c8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d004      	beq.n	800a3dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f002 fa3f 	bl	800c85a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fd21 	bl	800ae24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a3e2:	7bbb      	ldrb	r3, [r7, #14]
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7ff fde4 	bl	8009fb4 <USBD_CoreFindEP>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3f0:	7b7b      	ldrb	r3, [r7, #13]
 800a3f2:	2bff      	cmp	r3, #255	@ 0xff
 800a3f4:	d01f      	beq.n	800a436 <USBD_StdEPReq+0x1c6>
 800a3f6:	7b7b      	ldrb	r3, [r7, #13]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d11c      	bne.n	800a436 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a3fc:	7b7a      	ldrb	r2, [r7, #13]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a404:	7b7a      	ldrb	r2, [r7, #13]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	32ae      	adds	r2, #174	@ 0xae
 800a40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d010      	beq.n	800a436 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a414:	7b7a      	ldrb	r2, [r7, #13]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	32ae      	adds	r2, #174	@ 0xae
 800a41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	4798      	blx	r3
 800a426:	4603      	mov	r3, r0
 800a428:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a42a:	e004      	b.n	800a436 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fc2d 	bl	800ac8e <USBD_CtlError>
              break;
 800a434:	e000      	b.n	800a438 <USBD_StdEPReq+0x1c8>
              break;
 800a436:	bf00      	nop
          }
          break;
 800a438:	e0ab      	b.n	800a592 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b02      	cmp	r3, #2
 800a444:	d002      	beq.n	800a44c <USBD_StdEPReq+0x1dc>
 800a446:	2b03      	cmp	r3, #3
 800a448:	d032      	beq.n	800a4b0 <USBD_StdEPReq+0x240>
 800a44a:	e097      	b.n	800a57c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a44c:	7bbb      	ldrb	r3, [r7, #14]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d007      	beq.n	800a462 <USBD_StdEPReq+0x1f2>
 800a452:	7bbb      	ldrb	r3, [r7, #14]
 800a454:	2b80      	cmp	r3, #128	@ 0x80
 800a456:	d004      	beq.n	800a462 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fc17 	bl	800ac8e <USBD_CtlError>
                break;
 800a460:	e091      	b.n	800a586 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a466:	2b00      	cmp	r3, #0
 800a468:	da0b      	bge.n	800a482 <USBD_StdEPReq+0x212>
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	3310      	adds	r3, #16
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	4413      	add	r3, r2
 800a47e:	3304      	adds	r3, #4
 800a480:	e00b      	b.n	800a49a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a488:	4613      	mov	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	4413      	add	r3, r2
 800a498:	3304      	adds	r3, #4
 800a49a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2202      	movs	r2, #2
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fc61 	bl	800ad70 <USBD_CtlSendData>
              break;
 800a4ae:	e06a      	b.n	800a586 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a4b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	da11      	bge.n	800a4dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	f003 020f 	and.w	r2, r3, #15
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4413      	add	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	440b      	add	r3, r1
 800a4ca:	3324      	adds	r3, #36	@ 0x24
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d117      	bne.n	800a502 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fbda 	bl	800ac8e <USBD_CtlError>
                  break;
 800a4da:	e054      	b.n	800a586 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a4dc:	7bbb      	ldrb	r3, [r7, #14]
 800a4de:	f003 020f 	and.w	r2, r3, #15
 800a4e2:	6879      	ldr	r1, [r7, #4]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	440b      	add	r3, r1
 800a4ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a4f2:	881b      	ldrh	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d104      	bne.n	800a502 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fbc7 	bl	800ac8e <USBD_CtlError>
                  break;
 800a500:	e041      	b.n	800a586 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a506:	2b00      	cmp	r3, #0
 800a508:	da0b      	bge.n	800a522 <USBD_StdEPReq+0x2b2>
 800a50a:	7bbb      	ldrb	r3, [r7, #14]
 800a50c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	3310      	adds	r3, #16
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	4413      	add	r3, r2
 800a51e:	3304      	adds	r3, #4
 800a520:	e00b      	b.n	800a53a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a522:	7bbb      	ldrb	r3, [r7, #14]
 800a524:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a528:	4613      	mov	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	4413      	add	r3, r2
 800a538:	3304      	adds	r3, #4
 800a53a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a53c:	7bbb      	ldrb	r3, [r7, #14]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d002      	beq.n	800a548 <USBD_StdEPReq+0x2d8>
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	2b80      	cmp	r3, #128	@ 0x80
 800a546:	d103      	bne.n	800a550 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2200      	movs	r2, #0
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	e00e      	b.n	800a56e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a550:	7bbb      	ldrb	r3, [r7, #14]
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f002 f99f 	bl	800c898 <USBD_LL_IsStallEP>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d003      	beq.n	800a568 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2201      	movs	r2, #1
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	e002      	b.n	800a56e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	2200      	movs	r2, #0
 800a56c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	2202      	movs	r2, #2
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fbfb 	bl	800ad70 <USBD_CtlSendData>
              break;
 800a57a:	e004      	b.n	800a586 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fb85 	bl	800ac8e <USBD_CtlError>
              break;
 800a584:	bf00      	nop
          }
          break;
 800a586:	e004      	b.n	800a592 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fb7f 	bl	800ac8e <USBD_CtlError>
          break;
 800a590:	bf00      	nop
      }
      break;
 800a592:	e005      	b.n	800a5a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fb79 	bl	800ac8e <USBD_CtlError>
      break;
 800a59c:	e000      	b.n	800a5a0 <USBD_StdEPReq+0x330>
      break;
 800a59e:	bf00      	nop
  }

  return ret;
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
	...

0800a5ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	885b      	ldrh	r3, [r3, #2]
 800a5c6:	0a1b      	lsrs	r3, r3, #8
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	2b0e      	cmp	r3, #14
 800a5ce:	f200 8152 	bhi.w	800a876 <USBD_GetDescriptor+0x2ca>
 800a5d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d8 <USBD_GetDescriptor+0x2c>)
 800a5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d8:	0800a649 	.word	0x0800a649
 800a5dc:	0800a661 	.word	0x0800a661
 800a5e0:	0800a6a1 	.word	0x0800a6a1
 800a5e4:	0800a877 	.word	0x0800a877
 800a5e8:	0800a877 	.word	0x0800a877
 800a5ec:	0800a817 	.word	0x0800a817
 800a5f0:	0800a843 	.word	0x0800a843
 800a5f4:	0800a877 	.word	0x0800a877
 800a5f8:	0800a877 	.word	0x0800a877
 800a5fc:	0800a877 	.word	0x0800a877
 800a600:	0800a877 	.word	0x0800a877
 800a604:	0800a877 	.word	0x0800a877
 800a608:	0800a877 	.word	0x0800a877
 800a60c:	0800a877 	.word	0x0800a877
 800a610:	0800a615 	.word	0x0800a615
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00b      	beq.n	800a638 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	7c12      	ldrb	r2, [r2, #16]
 800a62c:	f107 0108 	add.w	r1, r7, #8
 800a630:	4610      	mov	r0, r2
 800a632:	4798      	blx	r3
 800a634:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a636:	e126      	b.n	800a886 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fb27 	bl	800ac8e <USBD_CtlError>
        err++;
 800a640:	7afb      	ldrb	r3, [r7, #11]
 800a642:	3301      	adds	r3, #1
 800a644:	72fb      	strb	r3, [r7, #11]
      break;
 800a646:	e11e      	b.n	800a886 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	7c12      	ldrb	r2, [r2, #16]
 800a654:	f107 0108 	add.w	r1, r7, #8
 800a658:	4610      	mov	r0, r2
 800a65a:	4798      	blx	r3
 800a65c:	60f8      	str	r0, [r7, #12]
      break;
 800a65e:	e112      	b.n	800a886 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	7c1b      	ldrb	r3, [r3, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10d      	bne.n	800a684 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a670:	f107 0208 	add.w	r2, r7, #8
 800a674:	4610      	mov	r0, r2
 800a676:	4798      	blx	r3
 800a678:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3301      	adds	r3, #1
 800a67e:	2202      	movs	r2, #2
 800a680:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a682:	e100      	b.n	800a886 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a68c:	f107 0208 	add.w	r2, r7, #8
 800a690:	4610      	mov	r0, r2
 800a692:	4798      	blx	r3
 800a694:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3301      	adds	r3, #1
 800a69a:	2202      	movs	r2, #2
 800a69c:	701a      	strb	r2, [r3, #0]
      break;
 800a69e:	e0f2      	b.n	800a886 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	885b      	ldrh	r3, [r3, #2]
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b05      	cmp	r3, #5
 800a6a8:	f200 80ac 	bhi.w	800a804 <USBD_GetDescriptor+0x258>
 800a6ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a6b4 <USBD_GetDescriptor+0x108>)
 800a6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b2:	bf00      	nop
 800a6b4:	0800a6cd 	.word	0x0800a6cd
 800a6b8:	0800a701 	.word	0x0800a701
 800a6bc:	0800a735 	.word	0x0800a735
 800a6c0:	0800a769 	.word	0x0800a769
 800a6c4:	0800a79d 	.word	0x0800a79d
 800a6c8:	0800a7d1 	.word	0x0800a7d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00b      	beq.n	800a6f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	7c12      	ldrb	r2, [r2, #16]
 800a6e4:	f107 0108 	add.w	r1, r7, #8
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	4798      	blx	r3
 800a6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ee:	e091      	b.n	800a814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 facb 	bl	800ac8e <USBD_CtlError>
            err++;
 800a6f8:	7afb      	ldrb	r3, [r7, #11]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a6fe:	e089      	b.n	800a814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00b      	beq.n	800a724 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	7c12      	ldrb	r2, [r2, #16]
 800a718:	f107 0108 	add.w	r1, r7, #8
 800a71c:	4610      	mov	r0, r2
 800a71e:	4798      	blx	r3
 800a720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a722:	e077      	b.n	800a814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a724:	6839      	ldr	r1, [r7, #0]
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fab1 	bl	800ac8e <USBD_CtlError>
            err++;
 800a72c:	7afb      	ldrb	r3, [r7, #11]
 800a72e:	3301      	adds	r3, #1
 800a730:	72fb      	strb	r3, [r7, #11]
          break;
 800a732:	e06f      	b.n	800a814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00b      	beq.n	800a758 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	7c12      	ldrb	r2, [r2, #16]
 800a74c:	f107 0108 	add.w	r1, r7, #8
 800a750:	4610      	mov	r0, r2
 800a752:	4798      	blx	r3
 800a754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a756:	e05d      	b.n	800a814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fa97 	bl	800ac8e <USBD_CtlError>
            err++;
 800a760:	7afb      	ldrb	r3, [r7, #11]
 800a762:	3301      	adds	r3, #1
 800a764:	72fb      	strb	r3, [r7, #11]
          break;
 800a766:	e055      	b.n	800a814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00b      	beq.n	800a78c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	7c12      	ldrb	r2, [r2, #16]
 800a780:	f107 0108 	add.w	r1, r7, #8
 800a784:	4610      	mov	r0, r2
 800a786:	4798      	blx	r3
 800a788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a78a:	e043      	b.n	800a814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fa7d 	bl	800ac8e <USBD_CtlError>
            err++;
 800a794:	7afb      	ldrb	r3, [r7, #11]
 800a796:	3301      	adds	r3, #1
 800a798:	72fb      	strb	r3, [r7, #11]
          break;
 800a79a:	e03b      	b.n	800a814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7a2:	695b      	ldr	r3, [r3, #20]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00b      	beq.n	800a7c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	7c12      	ldrb	r2, [r2, #16]
 800a7b4:	f107 0108 	add.w	r1, r7, #8
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	4798      	blx	r3
 800a7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7be:	e029      	b.n	800a814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7c0:	6839      	ldr	r1, [r7, #0]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fa63 	bl	800ac8e <USBD_CtlError>
            err++;
 800a7c8:	7afb      	ldrb	r3, [r7, #11]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ce:	e021      	b.n	800a814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00b      	beq.n	800a7f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	7c12      	ldrb	r2, [r2, #16]
 800a7e8:	f107 0108 	add.w	r1, r7, #8
 800a7ec:	4610      	mov	r0, r2
 800a7ee:	4798      	blx	r3
 800a7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7f2:	e00f      	b.n	800a814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fa49 	bl	800ac8e <USBD_CtlError>
            err++;
 800a7fc:	7afb      	ldrb	r3, [r7, #11]
 800a7fe:	3301      	adds	r3, #1
 800a800:	72fb      	strb	r3, [r7, #11]
          break;
 800a802:	e007      	b.n	800a814 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a804:	6839      	ldr	r1, [r7, #0]
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fa41 	bl	800ac8e <USBD_CtlError>
          err++;
 800a80c:	7afb      	ldrb	r3, [r7, #11]
 800a80e:	3301      	adds	r3, #1
 800a810:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a812:	bf00      	nop
      }
      break;
 800a814:	e037      	b.n	800a886 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	7c1b      	ldrb	r3, [r3, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d109      	bne.n	800a832 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a826:	f107 0208 	add.w	r2, r7, #8
 800a82a:	4610      	mov	r0, r2
 800a82c:	4798      	blx	r3
 800a82e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a830:	e029      	b.n	800a886 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fa2a 	bl	800ac8e <USBD_CtlError>
        err++;
 800a83a:	7afb      	ldrb	r3, [r7, #11]
 800a83c:	3301      	adds	r3, #1
 800a83e:	72fb      	strb	r3, [r7, #11]
      break;
 800a840:	e021      	b.n	800a886 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	7c1b      	ldrb	r3, [r3, #16]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10d      	bne.n	800a866 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a852:	f107 0208 	add.w	r2, r7, #8
 800a856:	4610      	mov	r0, r2
 800a858:	4798      	blx	r3
 800a85a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3301      	adds	r3, #1
 800a860:	2207      	movs	r2, #7
 800a862:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a864:	e00f      	b.n	800a886 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a866:	6839      	ldr	r1, [r7, #0]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fa10 	bl	800ac8e <USBD_CtlError>
        err++;
 800a86e:	7afb      	ldrb	r3, [r7, #11]
 800a870:	3301      	adds	r3, #1
 800a872:	72fb      	strb	r3, [r7, #11]
      break;
 800a874:	e007      	b.n	800a886 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fa08 	bl	800ac8e <USBD_CtlError>
      err++;
 800a87e:	7afb      	ldrb	r3, [r7, #11]
 800a880:	3301      	adds	r3, #1
 800a882:	72fb      	strb	r3, [r7, #11]
      break;
 800a884:	bf00      	nop
  }

  if (err != 0U)
 800a886:	7afb      	ldrb	r3, [r7, #11]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d11e      	bne.n	800a8ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	88db      	ldrh	r3, [r3, #6]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d016      	beq.n	800a8c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a894:	893b      	ldrh	r3, [r7, #8]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00e      	beq.n	800a8b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	88da      	ldrh	r2, [r3, #6]
 800a89e:	893b      	ldrh	r3, [r7, #8]
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	bf28      	it	cs
 800a8a4:	4613      	movcs	r3, r2
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a8aa:	893b      	ldrh	r3, [r7, #8]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	68f9      	ldr	r1, [r7, #12]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fa5d 	bl	800ad70 <USBD_CtlSendData>
 800a8b6:	e009      	b.n	800a8cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a8b8:	6839      	ldr	r1, [r7, #0]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f9e7 	bl	800ac8e <USBD_CtlError>
 800a8c0:	e004      	b.n	800a8cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 faae 	bl	800ae24 <USBD_CtlSendStatus>
 800a8c8:	e000      	b.n	800a8cc <USBD_GetDescriptor+0x320>
    return;
 800a8ca:	bf00      	nop
  }
}
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop

0800a8d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	889b      	ldrh	r3, [r3, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d131      	bne.n	800a94a <USBD_SetAddress+0x76>
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	88db      	ldrh	r3, [r3, #6]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d12d      	bne.n	800a94a <USBD_SetAddress+0x76>
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	885b      	ldrh	r3, [r3, #2]
 800a8f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a8f4:	d829      	bhi.n	800a94a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	885b      	ldrh	r3, [r3, #2]
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a900:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d104      	bne.n	800a918 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a90e:	6839      	ldr	r1, [r7, #0]
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f9bc 	bl	800ac8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a916:	e01d      	b.n	800a954 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	7bfa      	ldrb	r2, [r7, #15]
 800a91c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f001 ffe3 	bl	800c8f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fa7a 	bl	800ae24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d004      	beq.n	800a940 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2202      	movs	r2, #2
 800a93a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a93e:	e009      	b.n	800a954 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a948:	e004      	b.n	800a954 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 f99e 	bl	800ac8e <USBD_CtlError>
  }
}
 800a952:	bf00      	nop
 800a954:	bf00      	nop
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a966:	2300      	movs	r3, #0
 800a968:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	885b      	ldrh	r3, [r3, #2]
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	4b4e      	ldr	r3, [pc, #312]	@ (800aaac <USBD_SetConfig+0x150>)
 800a972:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a974:	4b4d      	ldr	r3, [pc, #308]	@ (800aaac <USBD_SetConfig+0x150>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d905      	bls.n	800a988 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a97c:	6839      	ldr	r1, [r7, #0]
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f985 	bl	800ac8e <USBD_CtlError>
    return USBD_FAIL;
 800a984:	2303      	movs	r3, #3
 800a986:	e08c      	b.n	800aaa2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b02      	cmp	r3, #2
 800a992:	d002      	beq.n	800a99a <USBD_SetConfig+0x3e>
 800a994:	2b03      	cmp	r3, #3
 800a996:	d029      	beq.n	800a9ec <USBD_SetConfig+0x90>
 800a998:	e075      	b.n	800aa86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a99a:	4b44      	ldr	r3, [pc, #272]	@ (800aaac <USBD_SetConfig+0x150>)
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d020      	beq.n	800a9e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a9a2:	4b42      	ldr	r3, [pc, #264]	@ (800aaac <USBD_SetConfig+0x150>)
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9ac:	4b3f      	ldr	r3, [pc, #252]	@ (800aaac <USBD_SetConfig+0x150>)
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7fe ffb9 	bl	800992a <USBD_SetClassConfig>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d008      	beq.n	800a9d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f962 	bl	800ac8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2202      	movs	r2, #2
 800a9ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a9d2:	e065      	b.n	800aaa0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fa25 	bl	800ae24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2203      	movs	r2, #3
 800a9de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a9e2:	e05d      	b.n	800aaa0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fa1d 	bl	800ae24 <USBD_CtlSendStatus>
      break;
 800a9ea:	e059      	b.n	800aaa0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a9ec:	4b2f      	ldr	r3, [pc, #188]	@ (800aaac <USBD_SetConfig+0x150>)
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d112      	bne.n	800aa1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a9fc:	4b2b      	ldr	r3, [pc, #172]	@ (800aaac <USBD_SetConfig+0x150>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	461a      	mov	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa06:	4b29      	ldr	r3, [pc, #164]	@ (800aaac <USBD_SetConfig+0x150>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7fe ffa8 	bl	8009962 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fa06 	bl	800ae24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa18:	e042      	b.n	800aaa0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aa1a:	4b24      	ldr	r3, [pc, #144]	@ (800aaac <USBD_SetConfig+0x150>)
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	461a      	mov	r2, r3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d02a      	beq.n	800aa7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7fe ff96 	bl	8009962 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aa36:	4b1d      	ldr	r3, [pc, #116]	@ (800aaac <USBD_SetConfig+0x150>)
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa40:	4b1a      	ldr	r3, [pc, #104]	@ (800aaac <USBD_SetConfig+0x150>)
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	4619      	mov	r1, r3
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7fe ff6f 	bl	800992a <USBD_SetClassConfig>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00f      	beq.n	800aa76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f918 	bl	800ac8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7fe ff7b 	bl	8009962 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2202      	movs	r2, #2
 800aa70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aa74:	e014      	b.n	800aaa0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f9d4 	bl	800ae24 <USBD_CtlSendStatus>
      break;
 800aa7c:	e010      	b.n	800aaa0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f9d0 	bl	800ae24 <USBD_CtlSendStatus>
      break;
 800aa84:	e00c      	b.n	800aaa0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f900 	bl	800ac8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa8e:	4b07      	ldr	r3, [pc, #28]	@ (800aaac <USBD_SetConfig+0x150>)
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7fe ff64 	bl	8009962 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa9e:	bf00      	nop
  }

  return ret;
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	2000058c 	.word	0x2000058c

0800aab0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	88db      	ldrh	r3, [r3, #6]
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d004      	beq.n	800aacc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f8e2 	bl	800ac8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aaca:	e023      	b.n	800ab14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	dc02      	bgt.n	800aade <USBD_GetConfig+0x2e>
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dc03      	bgt.n	800aae4 <USBD_GetConfig+0x34>
 800aadc:	e015      	b.n	800ab0a <USBD_GetConfig+0x5a>
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d00b      	beq.n	800aafa <USBD_GetConfig+0x4a>
 800aae2:	e012      	b.n	800ab0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3308      	adds	r3, #8
 800aaee:	2201      	movs	r2, #1
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f93c 	bl	800ad70 <USBD_CtlSendData>
        break;
 800aaf8:	e00c      	b.n	800ab14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	3304      	adds	r3, #4
 800aafe:	2201      	movs	r2, #1
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f934 	bl	800ad70 <USBD_CtlSendData>
        break;
 800ab08:	e004      	b.n	800ab14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f8be 	bl	800ac8e <USBD_CtlError>
        break;
 800ab12:	bf00      	nop
}
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d81e      	bhi.n	800ab72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	88db      	ldrh	r3, [r3, #6]
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d004      	beq.n	800ab46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f8a5 	bl	800ac8e <USBD_CtlError>
        break;
 800ab44:	e01a      	b.n	800ab7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d005      	beq.n	800ab62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	f043 0202 	orr.w	r2, r3, #2
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	330c      	adds	r3, #12
 800ab66:	2202      	movs	r2, #2
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f900 	bl	800ad70 <USBD_CtlSendData>
      break;
 800ab70:	e004      	b.n	800ab7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f88a 	bl	800ac8e <USBD_CtlError>
      break;
 800ab7a:	bf00      	nop
  }
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	885b      	ldrh	r3, [r3, #2]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d107      	bne.n	800aba6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f940 	bl	800ae24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800aba4:	e013      	b.n	800abce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	885b      	ldrh	r3, [r3, #2]
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d10b      	bne.n	800abc6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	889b      	ldrh	r3, [r3, #4]
 800abb2:	0a1b      	lsrs	r3, r3, #8
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f930 	bl	800ae24 <USBD_CtlSendStatus>
}
 800abc4:	e003      	b.n	800abce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f860 	bl	800ac8e <USBD_CtlError>
}
 800abce:	bf00      	nop
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b082      	sub	sp, #8
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	3b01      	subs	r3, #1
 800abea:	2b02      	cmp	r3, #2
 800abec:	d80b      	bhi.n	800ac06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	885b      	ldrh	r3, [r3, #2]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d10c      	bne.n	800ac10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f910 	bl	800ae24 <USBD_CtlSendStatus>
      }
      break;
 800ac04:	e004      	b.n	800ac10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ac06:	6839      	ldr	r1, [r7, #0]
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 f840 	bl	800ac8e <USBD_CtlError>
      break;
 800ac0e:	e000      	b.n	800ac12 <USBD_ClrFeature+0x3c>
      break;
 800ac10:	bf00      	nop
  }
}
 800ac12:	bf00      	nop
 800ac14:	3708      	adds	r7, #8
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b084      	sub	sp, #16
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	781a      	ldrb	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	3301      	adds	r3, #1
 800ac34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3301      	adds	r3, #1
 800ac42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f7ff fa16 	bl	800a076 <SWAPBYTE>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3301      	adds	r3, #1
 800ac56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f7ff fa09 	bl	800a076 <SWAPBYTE>
 800ac64:	4603      	mov	r3, r0
 800ac66:	461a      	mov	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	3301      	adds	r3, #1
 800ac76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7ff f9fc 	bl	800a076 <SWAPBYTE>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	461a      	mov	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	80da      	strh	r2, [r3, #6]
}
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b082      	sub	sp, #8
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac98:	2180      	movs	r1, #128	@ 0x80
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f001 fdbe 	bl	800c81c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aca0:	2100      	movs	r1, #0
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f001 fdba 	bl	800c81c <USBD_LL_StallEP>
}
 800aca8:	bf00      	nop
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800acbc:	2300      	movs	r3, #0
 800acbe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d036      	beq.n	800ad34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800acca:	6938      	ldr	r0, [r7, #16]
 800accc:	f000 f836 	bl	800ad3c <USBD_GetLen>
 800acd0:	4603      	mov	r3, r0
 800acd2:	3301      	adds	r3, #1
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	b29a      	uxth	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800acde:	7dfb      	ldrb	r3, [r7, #23]
 800ace0:	68ba      	ldr	r2, [r7, #8]
 800ace2:	4413      	add	r3, r2
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7812      	ldrb	r2, [r2, #0]
 800ace8:	701a      	strb	r2, [r3, #0]
  idx++;
 800acea:	7dfb      	ldrb	r3, [r7, #23]
 800acec:	3301      	adds	r3, #1
 800acee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800acf0:	7dfb      	ldrb	r3, [r7, #23]
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	4413      	add	r3, r2
 800acf6:	2203      	movs	r2, #3
 800acf8:	701a      	strb	r2, [r3, #0]
  idx++;
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
 800acfc:	3301      	adds	r3, #1
 800acfe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad00:	e013      	b.n	800ad2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ad02:	7dfb      	ldrb	r3, [r7, #23]
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	4413      	add	r3, r2
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	7812      	ldrb	r2, [r2, #0]
 800ad0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	3301      	adds	r3, #1
 800ad12:	613b      	str	r3, [r7, #16]
    idx++;
 800ad14:	7dfb      	ldrb	r3, [r7, #23]
 800ad16:	3301      	adds	r3, #1
 800ad18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ad1a:	7dfb      	ldrb	r3, [r7, #23]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	4413      	add	r3, r2
 800ad20:	2200      	movs	r2, #0
 800ad22:	701a      	strb	r2, [r3, #0]
    idx++;
 800ad24:	7dfb      	ldrb	r3, [r7, #23]
 800ad26:	3301      	adds	r3, #1
 800ad28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1e7      	bne.n	800ad02 <USBD_GetString+0x52>
 800ad32:	e000      	b.n	800ad36 <USBD_GetString+0x86>
    return;
 800ad34:	bf00      	nop
  }
}
 800ad36:	3718      	adds	r7, #24
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ad4c:	e005      	b.n	800ad5a <USBD_GetLen+0x1e>
  {
    len++;
 800ad4e:	7bfb      	ldrb	r3, [r7, #15]
 800ad50:	3301      	adds	r3, #1
 800ad52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	3301      	adds	r3, #1
 800ad58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1f5      	bne.n	800ad4e <USBD_GetLen+0x12>
  }

  return len;
 800ad62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2202      	movs	r2, #2
 800ad80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	2100      	movs	r1, #0
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f001 fdc9 	bl	800c92e <USBD_LL_Transmit>

  return USBD_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	2100      	movs	r1, #0
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f001 fdb8 	bl	800c92e <USBD_LL_Transmit>

  return USBD_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2203      	movs	r2, #3
 800add8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	2100      	movs	r1, #0
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f001 fdbc 	bl	800c970 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	60f8      	str	r0, [r7, #12]
 800ae0a:	60b9      	str	r1, [r7, #8]
 800ae0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	2100      	movs	r1, #0
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f001 fdab 	bl	800c970 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2204      	movs	r2, #4
 800ae30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae34:	2300      	movs	r3, #0
 800ae36:	2200      	movs	r2, #0
 800ae38:	2100      	movs	r1, #0
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f001 fd77 	bl	800c92e <USBD_LL_Transmit>

  return USBD_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2205      	movs	r2, #5
 800ae56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	2100      	movs	r1, #0
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f001 fd85 	bl	800c970 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae76:	f3ef 8305 	mrs	r3, IPSR
 800ae7a:	607b      	str	r3, [r7, #4]
  return(result);
 800ae7c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bf14      	ite	ne
 800ae82:	2301      	movne	r3, #1
 800ae84:	2300      	moveq	r3, #0
 800ae86:	b2db      	uxtb	r3, r3
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800aea0:	2300      	movs	r3, #0
 800aea2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <osMessagePut+0x1e>
    ticks = 1;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800aeb2:	f7ff ffdd 	bl	800ae70 <inHandlerMode>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d018      	beq.n	800aeee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800aebc:	f107 0210 	add.w	r2, r7, #16
 800aec0:	f107 0108 	add.w	r1, r7, #8
 800aec4:	2300      	movs	r3, #0
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f000 f9ae 	bl	800b228 <xQueueGenericSendFromISR>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d001      	beq.n	800aed6 <osMessagePut+0x42>
      return osErrorOS;
 800aed2:	23ff      	movs	r3, #255	@ 0xff
 800aed4:	e018      	b.n	800af08 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d014      	beq.n	800af06 <osMessagePut+0x72>
 800aedc:	4b0c      	ldr	r3, [pc, #48]	@ (800af10 <osMessagePut+0x7c>)
 800aede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	e00b      	b.n	800af06 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800aeee:	f107 0108 	add.w	r1, r7, #8
 800aef2:	2300      	movs	r3, #0
 800aef4:	697a      	ldr	r2, [r7, #20]
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f000 f894 	bl	800b024 <xQueueGenericSend>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d001      	beq.n	800af06 <osMessagePut+0x72>
      return osErrorOS;
 800af02:	23ff      	movs	r3, #255	@ 0xff
 800af04:	e000      	b.n	800af08 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	e000ed04 	.word	0xe000ed04

0800af14 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	689a      	ldr	r2, [r3, #8]
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	683a      	ldr	r2, [r7, #0]
 800af3e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	1c5a      	adds	r2, r3, #1
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	601a      	str	r2, [r3, #0]
}
 800af50:	bf00      	nop
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af72:	d103      	bne.n	800af7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	e00c      	b.n	800af96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	3308      	adds	r3, #8
 800af80:	60fb      	str	r3, [r7, #12]
 800af82:	e002      	b.n	800af8a <vListInsert+0x2e>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	60fb      	str	r3, [r7, #12]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	429a      	cmp	r2, r3
 800af94:	d2f6      	bcs.n	800af84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	685a      	ldr	r2, [r3, #4]
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	1c5a      	adds	r2, r3, #1
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	601a      	str	r2, [r3, #0]
}
 800afc2:	bf00      	nop
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800afce:	b480      	push	{r7}
 800afd0:	b085      	sub	sp, #20
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	6892      	ldr	r2, [r2, #8]
 800afe4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	6852      	ldr	r2, [r2, #4]
 800afee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d103      	bne.n	800b002 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	689a      	ldr	r2, [r3, #8]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	1e5a      	subs	r2, r3, #1
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
	...

0800b024 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b08e      	sub	sp, #56	@ 0x38
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
 800b030:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b032:	2300      	movs	r3, #0
 800b034:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10b      	bne.n	800b058 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b052:	bf00      	nop
 800b054:	bf00      	nop
 800b056:	e7fd      	b.n	800b054 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d103      	bne.n	800b066 <xQueueGenericSend+0x42>
 800b05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <xQueueGenericSend+0x46>
 800b066:	2301      	movs	r3, #1
 800b068:	e000      	b.n	800b06c <xQueueGenericSend+0x48>
 800b06a:	2300      	movs	r3, #0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10b      	bne.n	800b088 <xQueueGenericSend+0x64>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b082:	bf00      	nop
 800b084:	bf00      	nop
 800b086:	e7fd      	b.n	800b084 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d103      	bne.n	800b096 <xQueueGenericSend+0x72>
 800b08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b092:	2b01      	cmp	r3, #1
 800b094:	d101      	bne.n	800b09a <xQueueGenericSend+0x76>
 800b096:	2301      	movs	r3, #1
 800b098:	e000      	b.n	800b09c <xQueueGenericSend+0x78>
 800b09a:	2300      	movs	r3, #0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10b      	bne.n	800b0b8 <xQueueGenericSend+0x94>
	__asm volatile
 800b0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	623b      	str	r3, [r7, #32]
}
 800b0b2:	bf00      	nop
 800b0b4:	bf00      	nop
 800b0b6:	e7fd      	b.n	800b0b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0b8:	f000 fd22 	bl	800bb00 <xTaskGetSchedulerState>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d102      	bne.n	800b0c8 <xQueueGenericSend+0xa4>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <xQueueGenericSend+0xa8>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e000      	b.n	800b0ce <xQueueGenericSend+0xaa>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d10b      	bne.n	800b0ea <xQueueGenericSend+0xc6>
	__asm volatile
 800b0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	61fb      	str	r3, [r7, #28]
}
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop
 800b0e8:	e7fd      	b.n	800b0e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0ea:	f000 fe2d 	bl	800bd48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d302      	bcc.n	800b100 <xQueueGenericSend+0xdc>
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d129      	bne.n	800b154 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	68b9      	ldr	r1, [r7, #8]
 800b104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b106:	f000 f92d 	bl	800b364 <prvCopyDataToQueue>
 800b10a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b110:	2b00      	cmp	r3, #0
 800b112:	d010      	beq.n	800b136 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b116:	3324      	adds	r3, #36	@ 0x24
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 fbe7 	bl	800b8ec <xTaskRemoveFromEventList>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d013      	beq.n	800b14c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b124:	4b3f      	ldr	r3, [pc, #252]	@ (800b224 <xQueueGenericSend+0x200>)
 800b126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	f3bf 8f6f 	isb	sy
 800b134:	e00a      	b.n	800b14c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d007      	beq.n	800b14c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b13c:	4b39      	ldr	r3, [pc, #228]	@ (800b224 <xQueueGenericSend+0x200>)
 800b13e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b142:	601a      	str	r2, [r3, #0]
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b14c:	f000 fe2e 	bl	800bdac <vPortExitCritical>
				return pdPASS;
 800b150:	2301      	movs	r3, #1
 800b152:	e063      	b.n	800b21c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d103      	bne.n	800b162 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b15a:	f000 fe27 	bl	800bdac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b15e:	2300      	movs	r3, #0
 800b160:	e05c      	b.n	800b21c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b164:	2b00      	cmp	r3, #0
 800b166:	d106      	bne.n	800b176 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b168:	f107 0314 	add.w	r3, r7, #20
 800b16c:	4618      	mov	r0, r3
 800b16e:	f000 fc21 	bl	800b9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b172:	2301      	movs	r3, #1
 800b174:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b176:	f000 fe19 	bl	800bdac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b17a:	f000 f9c7 	bl	800b50c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b17e:	f000 fde3 	bl	800bd48 <vPortEnterCritical>
 800b182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b184:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b188:	b25b      	sxtb	r3, r3
 800b18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18e:	d103      	bne.n	800b198 <xQueueGenericSend+0x174>
 800b190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b19e:	b25b      	sxtb	r3, r3
 800b1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a4:	d103      	bne.n	800b1ae <xQueueGenericSend+0x18a>
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1ae:	f000 fdfd 	bl	800bdac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1b2:	1d3a      	adds	r2, r7, #4
 800b1b4:	f107 0314 	add.w	r3, r7, #20
 800b1b8:	4611      	mov	r1, r2
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fc10 	bl	800b9e0 <xTaskCheckForTimeOut>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d124      	bne.n	800b210 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b1c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1c8:	f000 f988 	bl	800b4dc <prvIsQueueFull>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d018      	beq.n	800b204 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d4:	3310      	adds	r3, #16
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	4611      	mov	r1, r2
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 fb60 	bl	800b8a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b1e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1e2:	f000 f929 	bl	800b438 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b1e6:	f000 f99f 	bl	800b528 <xTaskResumeAll>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f47f af7c 	bne.w	800b0ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b1f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b224 <xQueueGenericSend+0x200>)
 800b1f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1f8:	601a      	str	r2, [r3, #0]
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	e772      	b.n	800b0ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b206:	f000 f917 	bl	800b438 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b20a:	f000 f98d 	bl	800b528 <xTaskResumeAll>
 800b20e:	e76c      	b.n	800b0ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b210:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b212:	f000 f911 	bl	800b438 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b216:	f000 f987 	bl	800b528 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b21a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3738      	adds	r7, #56	@ 0x38
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	e000ed04 	.word	0xe000ed04

0800b228 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b090      	sub	sp, #64	@ 0x40
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
 800b234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10b      	bne.n	800b258 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b252:	bf00      	nop
 800b254:	bf00      	nop
 800b256:	e7fd      	b.n	800b254 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d103      	bne.n	800b266 <xQueueGenericSendFromISR+0x3e>
 800b25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <xQueueGenericSendFromISR+0x42>
 800b266:	2301      	movs	r3, #1
 800b268:	e000      	b.n	800b26c <xQueueGenericSendFromISR+0x44>
 800b26a:	2300      	movs	r3, #0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10b      	bne.n	800b288 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b282:	bf00      	nop
 800b284:	bf00      	nop
 800b286:	e7fd      	b.n	800b284 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d103      	bne.n	800b296 <xQueueGenericSendFromISR+0x6e>
 800b28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b292:	2b01      	cmp	r3, #1
 800b294:	d101      	bne.n	800b29a <xQueueGenericSendFromISR+0x72>
 800b296:	2301      	movs	r3, #1
 800b298:	e000      	b.n	800b29c <xQueueGenericSendFromISR+0x74>
 800b29a:	2300      	movs	r3, #0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10b      	bne.n	800b2b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	623b      	str	r3, [r7, #32]
}
 800b2b2:	bf00      	nop
 800b2b4:	bf00      	nop
 800b2b6:	e7fd      	b.n	800b2b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2b8:	f000 fdf8 	bl	800beac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b2bc:	f3ef 8211 	mrs	r2, BASEPRI
 800b2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	61fa      	str	r2, [r7, #28]
 800b2d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b2d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d302      	bcc.n	800b2ea <xQueueGenericSendFromISR+0xc2>
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d12f      	bne.n	800b34a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b300:	f000 f830 	bl	800b364 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b304:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b30c:	d112      	bne.n	800b334 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b312:	2b00      	cmp	r3, #0
 800b314:	d016      	beq.n	800b344 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b318:	3324      	adds	r3, #36	@ 0x24
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 fae6 	bl	800b8ec <xTaskRemoveFromEventList>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00e      	beq.n	800b344 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00b      	beq.n	800b344 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	e007      	b.n	800b344 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b334:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b338:	3301      	adds	r3, #1
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	b25a      	sxtb	r2, r3
 800b33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b344:	2301      	movs	r3, #1
 800b346:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b348:	e001      	b.n	800b34e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b34e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b350:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b358:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3740      	adds	r7, #64	@ 0x40
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b370:	2300      	movs	r3, #0
 800b372:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b378:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10d      	bne.n	800b39e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d14d      	bne.n	800b426 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 fbd4 	bl	800bb3c <xTaskPriorityDisinherit>
 800b394:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	609a      	str	r2, [r3, #8]
 800b39c:	e043      	b.n	800b426 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d119      	bne.n	800b3d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6858      	ldr	r0, [r3, #4]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	68b9      	ldr	r1, [r7, #8]
 800b3b0:	f004 fb5f 	bl	800fa72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3bc:	441a      	add	r2, r3
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d32b      	bcc.n	800b426 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	605a      	str	r2, [r3, #4]
 800b3d6:	e026      	b.n	800b426 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	68d8      	ldr	r0, [r3, #12]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	68b9      	ldr	r1, [r7, #8]
 800b3e4:	f004 fb45 	bl	800fa72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	68da      	ldr	r2, [r3, #12]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3f0:	425b      	negs	r3, r3
 800b3f2:	441a      	add	r2, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	68da      	ldr	r2, [r3, #12]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	429a      	cmp	r2, r3
 800b402:	d207      	bcs.n	800b414 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	689a      	ldr	r2, [r3, #8]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b40c:	425b      	negs	r3, r3
 800b40e:	441a      	add	r2, r3
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b02      	cmp	r3, #2
 800b418:	d105      	bne.n	800b426 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d002      	beq.n	800b426 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	3b01      	subs	r3, #1
 800b424:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b42e:	697b      	ldr	r3, [r7, #20]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3718      	adds	r7, #24
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b440:	f000 fc82 	bl	800bd48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b44a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b44c:	e011      	b.n	800b472 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b452:	2b00      	cmp	r3, #0
 800b454:	d012      	beq.n	800b47c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	3324      	adds	r3, #36	@ 0x24
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 fa46 	bl	800b8ec <xTaskRemoveFromEventList>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d001      	beq.n	800b46a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b466:	f000 fb1f 	bl	800baa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
 800b46c:	3b01      	subs	r3, #1
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b476:	2b00      	cmp	r3, #0
 800b478:	dce9      	bgt.n	800b44e <prvUnlockQueue+0x16>
 800b47a:	e000      	b.n	800b47e <prvUnlockQueue+0x46>
					break;
 800b47c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	22ff      	movs	r2, #255	@ 0xff
 800b482:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b486:	f000 fc91 	bl	800bdac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b48a:	f000 fc5d 	bl	800bd48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b494:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b496:	e011      	b.n	800b4bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d012      	beq.n	800b4c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3310      	adds	r3, #16
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 fa21 	bl	800b8ec <xTaskRemoveFromEventList>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d001      	beq.n	800b4b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b4b0:	f000 fafa 	bl	800baa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b4b4:	7bbb      	ldrb	r3, [r7, #14]
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	dce9      	bgt.n	800b498 <prvUnlockQueue+0x60>
 800b4c4:	e000      	b.n	800b4c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b4c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	22ff      	movs	r2, #255	@ 0xff
 800b4cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b4d0:	f000 fc6c 	bl	800bdac <vPortExitCritical>
}
 800b4d4:	bf00      	nop
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4e4:	f000 fc30 	bl	800bd48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d102      	bne.n	800b4fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	60fb      	str	r3, [r7, #12]
 800b4f8:	e001      	b.n	800b4fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4fe:	f000 fc55 	bl	800bdac <vPortExitCritical>

	return xReturn;
 800b502:	68fb      	ldr	r3, [r7, #12]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b50c:	b480      	push	{r7}
 800b50e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b510:	4b04      	ldr	r3, [pc, #16]	@ (800b524 <vTaskSuspendAll+0x18>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	3301      	adds	r3, #1
 800b516:	4a03      	ldr	r2, [pc, #12]	@ (800b524 <vTaskSuspendAll+0x18>)
 800b518:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b51a:	bf00      	nop
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr
 800b524:	20000670 	.word	0x20000670

0800b528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b52e:	2300      	movs	r3, #0
 800b530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b532:	2300      	movs	r3, #0
 800b534:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b536:	4b42      	ldr	r3, [pc, #264]	@ (800b640 <xTaskResumeAll+0x118>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10b      	bne.n	800b556 <xTaskResumeAll+0x2e>
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	603b      	str	r3, [r7, #0]
}
 800b550:	bf00      	nop
 800b552:	bf00      	nop
 800b554:	e7fd      	b.n	800b552 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b556:	f000 fbf7 	bl	800bd48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b55a:	4b39      	ldr	r3, [pc, #228]	@ (800b640 <xTaskResumeAll+0x118>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	3b01      	subs	r3, #1
 800b560:	4a37      	ldr	r2, [pc, #220]	@ (800b640 <xTaskResumeAll+0x118>)
 800b562:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b564:	4b36      	ldr	r3, [pc, #216]	@ (800b640 <xTaskResumeAll+0x118>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d161      	bne.n	800b630 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b56c:	4b35      	ldr	r3, [pc, #212]	@ (800b644 <xTaskResumeAll+0x11c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d05d      	beq.n	800b630 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b574:	e02e      	b.n	800b5d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b576:	4b34      	ldr	r3, [pc, #208]	@ (800b648 <xTaskResumeAll+0x120>)
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3318      	adds	r3, #24
 800b582:	4618      	mov	r0, r3
 800b584:	f7ff fd23 	bl	800afce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	3304      	adds	r3, #4
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7ff fd1e 	bl	800afce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b596:	2201      	movs	r2, #1
 800b598:	409a      	lsls	r2, r3
 800b59a:	4b2c      	ldr	r3, [pc, #176]	@ (800b64c <xTaskResumeAll+0x124>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	4a2a      	ldr	r2, [pc, #168]	@ (800b64c <xTaskResumeAll+0x124>)
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4413      	add	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4a27      	ldr	r2, [pc, #156]	@ (800b650 <xTaskResumeAll+0x128>)
 800b5b2:	441a      	add	r2, r3
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	f7ff fcaa 	bl	800af14 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c4:	4b23      	ldr	r3, [pc, #140]	@ (800b654 <xTaskResumeAll+0x12c>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d302      	bcc.n	800b5d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b5ce:	4b22      	ldr	r3, [pc, #136]	@ (800b658 <xTaskResumeAll+0x130>)
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b648 <xTaskResumeAll+0x120>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1cc      	bne.n	800b576 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5e2:	f000 fa6d 	bl	800bac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5e6:	4b1d      	ldr	r3, [pc, #116]	@ (800b65c <xTaskResumeAll+0x134>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d010      	beq.n	800b614 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5f2:	f000 f837 	bl	800b664 <xTaskIncrementTick>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d002      	beq.n	800b602 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b5fc:	4b16      	ldr	r3, [pc, #88]	@ (800b658 <xTaskResumeAll+0x130>)
 800b5fe:	2201      	movs	r2, #1
 800b600:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	3b01      	subs	r3, #1
 800b606:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1f1      	bne.n	800b5f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b60e:	4b13      	ldr	r3, [pc, #76]	@ (800b65c <xTaskResumeAll+0x134>)
 800b610:	2200      	movs	r2, #0
 800b612:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b614:	4b10      	ldr	r3, [pc, #64]	@ (800b658 <xTaskResumeAll+0x130>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d009      	beq.n	800b630 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b61c:	2301      	movs	r3, #1
 800b61e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b620:	4b0f      	ldr	r3, [pc, #60]	@ (800b660 <xTaskResumeAll+0x138>)
 800b622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b626:	601a      	str	r2, [r3, #0]
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b630:	f000 fbbc 	bl	800bdac <vPortExitCritical>

	return xAlreadyYielded;
 800b634:	68bb      	ldr	r3, [r7, #8]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	20000670 	.word	0x20000670
 800b644:	20000650 	.word	0x20000650
 800b648:	20000628 	.word	0x20000628
 800b64c:	20000658 	.word	0x20000658
 800b650:	20000594 	.word	0x20000594
 800b654:	20000590 	.word	0x20000590
 800b658:	20000664 	.word	0x20000664
 800b65c:	20000660 	.word	0x20000660
 800b660:	e000ed04 	.word	0xe000ed04

0800b664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b66a:	2300      	movs	r3, #0
 800b66c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b66e:	4b4f      	ldr	r3, [pc, #316]	@ (800b7ac <xTaskIncrementTick+0x148>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	f040 808f 	bne.w	800b796 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b678:	4b4d      	ldr	r3, [pc, #308]	@ (800b7b0 <xTaskIncrementTick+0x14c>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3301      	adds	r3, #1
 800b67e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b680:	4a4b      	ldr	r2, [pc, #300]	@ (800b7b0 <xTaskIncrementTick+0x14c>)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d121      	bne.n	800b6d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b68c:	4b49      	ldr	r3, [pc, #292]	@ (800b7b4 <xTaskIncrementTick+0x150>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00b      	beq.n	800b6ae <xTaskIncrementTick+0x4a>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	603b      	str	r3, [r7, #0]
}
 800b6a8:	bf00      	nop
 800b6aa:	bf00      	nop
 800b6ac:	e7fd      	b.n	800b6aa <xTaskIncrementTick+0x46>
 800b6ae:	4b41      	ldr	r3, [pc, #260]	@ (800b7b4 <xTaskIncrementTick+0x150>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	4b40      	ldr	r3, [pc, #256]	@ (800b7b8 <xTaskIncrementTick+0x154>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a3e      	ldr	r2, [pc, #248]	@ (800b7b4 <xTaskIncrementTick+0x150>)
 800b6ba:	6013      	str	r3, [r2, #0]
 800b6bc:	4a3e      	ldr	r2, [pc, #248]	@ (800b7b8 <xTaskIncrementTick+0x154>)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6013      	str	r3, [r2, #0]
 800b6c2:	4b3e      	ldr	r3, [pc, #248]	@ (800b7bc <xTaskIncrementTick+0x158>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	4a3c      	ldr	r2, [pc, #240]	@ (800b7bc <xTaskIncrementTick+0x158>)
 800b6ca:	6013      	str	r3, [r2, #0]
 800b6cc:	f000 f9f8 	bl	800bac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6d0:	4b3b      	ldr	r3, [pc, #236]	@ (800b7c0 <xTaskIncrementTick+0x15c>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d348      	bcc.n	800b76c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6da:	4b36      	ldr	r3, [pc, #216]	@ (800b7b4 <xTaskIncrementTick+0x150>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d104      	bne.n	800b6ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e4:	4b36      	ldr	r3, [pc, #216]	@ (800b7c0 <xTaskIncrementTick+0x15c>)
 800b6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ea:	601a      	str	r2, [r3, #0]
					break;
 800b6ec:	e03e      	b.n	800b76c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ee:	4b31      	ldr	r3, [pc, #196]	@ (800b7b4 <xTaskIncrementTick+0x150>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	429a      	cmp	r2, r3
 800b704:	d203      	bcs.n	800b70e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b706:	4a2e      	ldr	r2, [pc, #184]	@ (800b7c0 <xTaskIncrementTick+0x15c>)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b70c:	e02e      	b.n	800b76c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	3304      	adds	r3, #4
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff fc5b 	bl	800afce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d004      	beq.n	800b72a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	3318      	adds	r3, #24
 800b724:	4618      	mov	r0, r3
 800b726:	f7ff fc52 	bl	800afce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b72e:	2201      	movs	r2, #1
 800b730:	409a      	lsls	r2, r3
 800b732:	4b24      	ldr	r3, [pc, #144]	@ (800b7c4 <xTaskIncrementTick+0x160>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4313      	orrs	r3, r2
 800b738:	4a22      	ldr	r2, [pc, #136]	@ (800b7c4 <xTaskIncrementTick+0x160>)
 800b73a:	6013      	str	r3, [r2, #0]
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b740:	4613      	mov	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	4413      	add	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4a1f      	ldr	r2, [pc, #124]	@ (800b7c8 <xTaskIncrementTick+0x164>)
 800b74a:	441a      	add	r2, r3
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	3304      	adds	r3, #4
 800b750:	4619      	mov	r1, r3
 800b752:	4610      	mov	r0, r2
 800b754:	f7ff fbde 	bl	800af14 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b75c:	4b1b      	ldr	r3, [pc, #108]	@ (800b7cc <xTaskIncrementTick+0x168>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b762:	429a      	cmp	r2, r3
 800b764:	d3b9      	bcc.n	800b6da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b766:	2301      	movs	r3, #1
 800b768:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b76a:	e7b6      	b.n	800b6da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b76c:	4b17      	ldr	r3, [pc, #92]	@ (800b7cc <xTaskIncrementTick+0x168>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b772:	4915      	ldr	r1, [pc, #84]	@ (800b7c8 <xTaskIncrementTick+0x164>)
 800b774:	4613      	mov	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	4413      	add	r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	440b      	add	r3, r1
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d901      	bls.n	800b788 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b784:	2301      	movs	r3, #1
 800b786:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b788:	4b11      	ldr	r3, [pc, #68]	@ (800b7d0 <xTaskIncrementTick+0x16c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d007      	beq.n	800b7a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b790:	2301      	movs	r3, #1
 800b792:	617b      	str	r3, [r7, #20]
 800b794:	e004      	b.n	800b7a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b796:	4b0f      	ldr	r3, [pc, #60]	@ (800b7d4 <xTaskIncrementTick+0x170>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	3301      	adds	r3, #1
 800b79c:	4a0d      	ldr	r2, [pc, #52]	@ (800b7d4 <xTaskIncrementTick+0x170>)
 800b79e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b7a0:	697b      	ldr	r3, [r7, #20]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3718      	adds	r7, #24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	20000670 	.word	0x20000670
 800b7b0:	20000654 	.word	0x20000654
 800b7b4:	20000620 	.word	0x20000620
 800b7b8:	20000624 	.word	0x20000624
 800b7bc:	20000668 	.word	0x20000668
 800b7c0:	2000066c 	.word	0x2000066c
 800b7c4:	20000658 	.word	0x20000658
 800b7c8:	20000594 	.word	0x20000594
 800b7cc:	20000590 	.word	0x20000590
 800b7d0:	20000664 	.word	0x20000664
 800b7d4:	20000660 	.word	0x20000660

0800b7d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7de:	4b2a      	ldr	r3, [pc, #168]	@ (800b888 <vTaskSwitchContext+0xb0>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7e6:	4b29      	ldr	r3, [pc, #164]	@ (800b88c <vTaskSwitchContext+0xb4>)
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7ec:	e045      	b.n	800b87a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800b7ee:	4b27      	ldr	r3, [pc, #156]	@ (800b88c <vTaskSwitchContext+0xb4>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f4:	4b26      	ldr	r3, [pc, #152]	@ (800b890 <vTaskSwitchContext+0xb8>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	fab3 f383 	clz	r3, r3
 800b800:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b802:	7afb      	ldrb	r3, [r7, #11]
 800b804:	f1c3 031f 	rsb	r3, r3, #31
 800b808:	617b      	str	r3, [r7, #20]
 800b80a:	4922      	ldr	r1, [pc, #136]	@ (800b894 <vTaskSwitchContext+0xbc>)
 800b80c:	697a      	ldr	r2, [r7, #20]
 800b80e:	4613      	mov	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4413      	add	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	440b      	add	r3, r1
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10b      	bne.n	800b836 <vTaskSwitchContext+0x5e>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	607b      	str	r3, [r7, #4]
}
 800b830:	bf00      	nop
 800b832:	bf00      	nop
 800b834:	e7fd      	b.n	800b832 <vTaskSwitchContext+0x5a>
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	4613      	mov	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4a14      	ldr	r2, [pc, #80]	@ (800b894 <vTaskSwitchContext+0xbc>)
 800b842:	4413      	add	r3, r2
 800b844:	613b      	str	r3, [r7, #16]
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	685a      	ldr	r2, [r3, #4]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	605a      	str	r2, [r3, #4]
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	3308      	adds	r3, #8
 800b858:	429a      	cmp	r2, r3
 800b85a:	d104      	bne.n	800b866 <vTaskSwitchContext+0x8e>
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	605a      	str	r2, [r3, #4]
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	4a0a      	ldr	r2, [pc, #40]	@ (800b898 <vTaskSwitchContext+0xc0>)
 800b86e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b870:	4b09      	ldr	r3, [pc, #36]	@ (800b898 <vTaskSwitchContext+0xc0>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	334c      	adds	r3, #76	@ 0x4c
 800b876:	4a09      	ldr	r2, [pc, #36]	@ (800b89c <vTaskSwitchContext+0xc4>)
 800b878:	6013      	str	r3, [r2, #0]
}
 800b87a:	bf00      	nop
 800b87c:	371c      	adds	r7, #28
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	20000670 	.word	0x20000670
 800b88c:	20000664 	.word	0x20000664
 800b890:	20000658 	.word	0x20000658
 800b894:	20000594 	.word	0x20000594
 800b898:	20000590 	.word	0x20000590
 800b89c:	20000290 	.word	0x20000290

0800b8a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10b      	bne.n	800b8c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	60fb      	str	r3, [r7, #12]
}
 800b8c2:	bf00      	nop
 800b8c4:	bf00      	nop
 800b8c6:	e7fd      	b.n	800b8c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8c8:	4b07      	ldr	r3, [pc, #28]	@ (800b8e8 <vTaskPlaceOnEventList+0x48>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3318      	adds	r3, #24
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7ff fb43 	bl	800af5c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	6838      	ldr	r0, [r7, #0]
 800b8da:	f000 f9b7 	bl	800bc4c <prvAddCurrentTaskToDelayedList>
}
 800b8de:	bf00      	nop
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	20000590 	.word	0x20000590

0800b8ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10b      	bne.n	800b91a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	60fb      	str	r3, [r7, #12]
}
 800b914:	bf00      	nop
 800b916:	bf00      	nop
 800b918:	e7fd      	b.n	800b916 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	3318      	adds	r3, #24
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff fb55 	bl	800afce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b924:	4b1d      	ldr	r3, [pc, #116]	@ (800b99c <xTaskRemoveFromEventList+0xb0>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d11c      	bne.n	800b966 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	3304      	adds	r3, #4
 800b930:	4618      	mov	r0, r3
 800b932:	f7ff fb4c 	bl	800afce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b93a:	2201      	movs	r2, #1
 800b93c:	409a      	lsls	r2, r3
 800b93e:	4b18      	ldr	r3, [pc, #96]	@ (800b9a0 <xTaskRemoveFromEventList+0xb4>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4313      	orrs	r3, r2
 800b944:	4a16      	ldr	r2, [pc, #88]	@ (800b9a0 <xTaskRemoveFromEventList+0xb4>)
 800b946:	6013      	str	r3, [r2, #0]
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b94c:	4613      	mov	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4413      	add	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	4a13      	ldr	r2, [pc, #76]	@ (800b9a4 <xTaskRemoveFromEventList+0xb8>)
 800b956:	441a      	add	r2, r3
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	3304      	adds	r3, #4
 800b95c:	4619      	mov	r1, r3
 800b95e:	4610      	mov	r0, r2
 800b960:	f7ff fad8 	bl	800af14 <vListInsertEnd>
 800b964:	e005      	b.n	800b972 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	3318      	adds	r3, #24
 800b96a:	4619      	mov	r1, r3
 800b96c:	480e      	ldr	r0, [pc, #56]	@ (800b9a8 <xTaskRemoveFromEventList+0xbc>)
 800b96e:	f7ff fad1 	bl	800af14 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b976:	4b0d      	ldr	r3, [pc, #52]	@ (800b9ac <xTaskRemoveFromEventList+0xc0>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d905      	bls.n	800b98c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b980:	2301      	movs	r3, #1
 800b982:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b984:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b0 <xTaskRemoveFromEventList+0xc4>)
 800b986:	2201      	movs	r2, #1
 800b988:	601a      	str	r2, [r3, #0]
 800b98a:	e001      	b.n	800b990 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b98c:	2300      	movs	r3, #0
 800b98e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b990:	697b      	ldr	r3, [r7, #20]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3718      	adds	r7, #24
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20000670 	.word	0x20000670
 800b9a0:	20000658 	.word	0x20000658
 800b9a4:	20000594 	.word	0x20000594
 800b9a8:	20000628 	.word	0x20000628
 800b9ac:	20000590 	.word	0x20000590
 800b9b0:	20000664 	.word	0x20000664

0800b9b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9bc:	4b06      	ldr	r3, [pc, #24]	@ (800b9d8 <vTaskInternalSetTimeOutState+0x24>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9c4:	4b05      	ldr	r3, [pc, #20]	@ (800b9dc <vTaskInternalSetTimeOutState+0x28>)
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	605a      	str	r2, [r3, #4]
}
 800b9cc:	bf00      	nop
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	20000668 	.word	0x20000668
 800b9dc:	20000654 	.word	0x20000654

0800b9e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b088      	sub	sp, #32
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10b      	bne.n	800ba08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	613b      	str	r3, [r7, #16]
}
 800ba02:	bf00      	nop
 800ba04:	bf00      	nop
 800ba06:	e7fd      	b.n	800ba04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d10b      	bne.n	800ba26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ba0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	60fb      	str	r3, [r7, #12]
}
 800ba20:	bf00      	nop
 800ba22:	bf00      	nop
 800ba24:	e7fd      	b.n	800ba22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ba26:	f000 f98f 	bl	800bd48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba2a:	4b1d      	ldr	r3, [pc, #116]	@ (800baa0 <xTaskCheckForTimeOut+0xc0>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	69ba      	ldr	r2, [r7, #24]
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba42:	d102      	bne.n	800ba4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba44:	2300      	movs	r3, #0
 800ba46:	61fb      	str	r3, [r7, #28]
 800ba48:	e023      	b.n	800ba92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	4b15      	ldr	r3, [pc, #84]	@ (800baa4 <xTaskCheckForTimeOut+0xc4>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d007      	beq.n	800ba66 <xTaskCheckForTimeOut+0x86>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	69ba      	ldr	r2, [r7, #24]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d302      	bcc.n	800ba66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba60:	2301      	movs	r3, #1
 800ba62:	61fb      	str	r3, [r7, #28]
 800ba64:	e015      	b.n	800ba92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d20b      	bcs.n	800ba88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	1ad2      	subs	r2, r2, r3
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7ff ff99 	bl	800b9b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba82:	2300      	movs	r3, #0
 800ba84:	61fb      	str	r3, [r7, #28]
 800ba86:	e004      	b.n	800ba92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba92:	f000 f98b 	bl	800bdac <vPortExitCritical>

	return xReturn;
 800ba96:	69fb      	ldr	r3, [r7, #28]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3720      	adds	r7, #32
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	20000654 	.word	0x20000654
 800baa4:	20000668 	.word	0x20000668

0800baa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800baa8:	b480      	push	{r7}
 800baaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800baac:	4b03      	ldr	r3, [pc, #12]	@ (800babc <vTaskMissedYield+0x14>)
 800baae:	2201      	movs	r2, #1
 800bab0:	601a      	str	r2, [r3, #0]
}
 800bab2:	bf00      	nop
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	20000664 	.word	0x20000664

0800bac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bac6:	4b0c      	ldr	r3, [pc, #48]	@ (800baf8 <prvResetNextTaskUnblockTime+0x38>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d104      	bne.n	800bada <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bad0:	4b0a      	ldr	r3, [pc, #40]	@ (800bafc <prvResetNextTaskUnblockTime+0x3c>)
 800bad2:	f04f 32ff 	mov.w	r2, #4294967295
 800bad6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bad8:	e008      	b.n	800baec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bada:	4b07      	ldr	r3, [pc, #28]	@ (800baf8 <prvResetNextTaskUnblockTime+0x38>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	4a04      	ldr	r2, [pc, #16]	@ (800bafc <prvResetNextTaskUnblockTime+0x3c>)
 800baea:	6013      	str	r3, [r2, #0]
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	20000620 	.word	0x20000620
 800bafc:	2000066c 	.word	0x2000066c

0800bb00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb06:	4b0b      	ldr	r3, [pc, #44]	@ (800bb34 <xTaskGetSchedulerState+0x34>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d102      	bne.n	800bb14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	607b      	str	r3, [r7, #4]
 800bb12:	e008      	b.n	800bb26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb14:	4b08      	ldr	r3, [pc, #32]	@ (800bb38 <xTaskGetSchedulerState+0x38>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d102      	bne.n	800bb22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	607b      	str	r3, [r7, #4]
 800bb20:	e001      	b.n	800bb26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb22:	2300      	movs	r3, #0
 800bb24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb26:	687b      	ldr	r3, [r7, #4]
	}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	2000065c 	.word	0x2000065c
 800bb38:	20000670 	.word	0x20000670

0800bb3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d070      	beq.n	800bc34 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb52:	4b3b      	ldr	r3, [pc, #236]	@ (800bc40 <xTaskPriorityDisinherit+0x104>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	693a      	ldr	r2, [r7, #16]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d00b      	beq.n	800bb74 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	60fb      	str	r3, [r7, #12]
}
 800bb6e:	bf00      	nop
 800bb70:	bf00      	nop
 800bb72:	e7fd      	b.n	800bb70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d10b      	bne.n	800bb94 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bb7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb80:	f383 8811 	msr	BASEPRI, r3
 800bb84:	f3bf 8f6f 	isb	sy
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	60bb      	str	r3, [r7, #8]
}
 800bb8e:	bf00      	nop
 800bb90:	bf00      	nop
 800bb92:	e7fd      	b.n	800bb90 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb98:	1e5a      	subs	r2, r3, #1
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d044      	beq.n	800bc34 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d140      	bne.n	800bc34 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff fa09 	bl	800afce <uxListRemove>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d115      	bne.n	800bbee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbc6:	491f      	ldr	r1, [pc, #124]	@ (800bc44 <xTaskPriorityDisinherit+0x108>)
 800bbc8:	4613      	mov	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4413      	add	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	440b      	add	r3, r1
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10a      	bne.n	800bbee <xTaskPriorityDisinherit+0xb2>
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbdc:	2201      	movs	r2, #1
 800bbde:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe2:	43da      	mvns	r2, r3
 800bbe4:	4b18      	ldr	r3, [pc, #96]	@ (800bc48 <xTaskPriorityDisinherit+0x10c>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4013      	ands	r3, r2
 800bbea:	4a17      	ldr	r2, [pc, #92]	@ (800bc48 <xTaskPriorityDisinherit+0x10c>)
 800bbec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfa:	f1c3 0207 	rsb	r2, r3, #7
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc06:	2201      	movs	r2, #1
 800bc08:	409a      	lsls	r2, r3
 800bc0a:	4b0f      	ldr	r3, [pc, #60]	@ (800bc48 <xTaskPriorityDisinherit+0x10c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	4a0d      	ldr	r2, [pc, #52]	@ (800bc48 <xTaskPriorityDisinherit+0x10c>)
 800bc12:	6013      	str	r3, [r2, #0]
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc18:	4613      	mov	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4413      	add	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4a08      	ldr	r2, [pc, #32]	@ (800bc44 <xTaskPriorityDisinherit+0x108>)
 800bc22:	441a      	add	r2, r3
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	3304      	adds	r3, #4
 800bc28:	4619      	mov	r1, r3
 800bc2a:	4610      	mov	r0, r2
 800bc2c:	f7ff f972 	bl	800af14 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc30:	2301      	movs	r3, #1
 800bc32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc34:	697b      	ldr	r3, [r7, #20]
	}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3718      	adds	r7, #24
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	20000590 	.word	0x20000590
 800bc44:	20000594 	.word	0x20000594
 800bc48:	20000658 	.word	0x20000658

0800bc4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc56:	4b29      	ldr	r3, [pc, #164]	@ (800bcfc <prvAddCurrentTaskToDelayedList+0xb0>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc5c:	4b28      	ldr	r3, [pc, #160]	@ (800bd00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	3304      	adds	r3, #4
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7ff f9b3 	bl	800afce <uxListRemove>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10b      	bne.n	800bc86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bc6e:	4b24      	ldr	r3, [pc, #144]	@ (800bd00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc74:	2201      	movs	r2, #1
 800bc76:	fa02 f303 	lsl.w	r3, r2, r3
 800bc7a:	43da      	mvns	r2, r3
 800bc7c:	4b21      	ldr	r3, [pc, #132]	@ (800bd04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4013      	ands	r3, r2
 800bc82:	4a20      	ldr	r2, [pc, #128]	@ (800bd04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bc84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc8c:	d10a      	bne.n	800bca4 <prvAddCurrentTaskToDelayedList+0x58>
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d007      	beq.n	800bca4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc94:	4b1a      	ldr	r3, [pc, #104]	@ (800bd00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3304      	adds	r3, #4
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	481a      	ldr	r0, [pc, #104]	@ (800bd08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bc9e:	f7ff f939 	bl	800af14 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bca2:	e026      	b.n	800bcf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4413      	add	r3, r2
 800bcaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bcac:	4b14      	ldr	r3, [pc, #80]	@ (800bd00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bcb4:	68ba      	ldr	r2, [r7, #8]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d209      	bcs.n	800bcd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcbc:	4b13      	ldr	r3, [pc, #76]	@ (800bd0c <prvAddCurrentTaskToDelayedList+0xc0>)
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	4b0f      	ldr	r3, [pc, #60]	@ (800bd00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3304      	adds	r3, #4
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	4610      	mov	r0, r2
 800bcca:	f7ff f947 	bl	800af5c <vListInsert>
}
 800bcce:	e010      	b.n	800bcf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcd0:	4b0f      	ldr	r3, [pc, #60]	@ (800bd10 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	4b0a      	ldr	r3, [pc, #40]	@ (800bd00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	3304      	adds	r3, #4
 800bcda:	4619      	mov	r1, r3
 800bcdc:	4610      	mov	r0, r2
 800bcde:	f7ff f93d 	bl	800af5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bce2:	4b0c      	ldr	r3, [pc, #48]	@ (800bd14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d202      	bcs.n	800bcf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bcec:	4a09      	ldr	r2, [pc, #36]	@ (800bd14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	6013      	str	r3, [r2, #0]
}
 800bcf2:	bf00      	nop
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000654 	.word	0x20000654
 800bd00:	20000590 	.word	0x20000590
 800bd04:	20000658 	.word	0x20000658
 800bd08:	2000063c 	.word	0x2000063c
 800bd0c:	20000624 	.word	0x20000624
 800bd10:	20000620 	.word	0x20000620
 800bd14:	2000066c 	.word	0x2000066c
	...

0800bd20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd20:	4b07      	ldr	r3, [pc, #28]	@ (800bd40 <pxCurrentTCBConst2>)
 800bd22:	6819      	ldr	r1, [r3, #0]
 800bd24:	6808      	ldr	r0, [r1, #0]
 800bd26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2a:	f380 8809 	msr	PSP, r0
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f04f 0000 	mov.w	r0, #0
 800bd36:	f380 8811 	msr	BASEPRI, r0
 800bd3a:	4770      	bx	lr
 800bd3c:	f3af 8000 	nop.w

0800bd40 <pxCurrentTCBConst2>:
 800bd40:	20000590 	.word	0x20000590
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop

0800bd48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	607b      	str	r3, [r7, #4]
}
 800bd60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd62:	4b10      	ldr	r3, [pc, #64]	@ (800bda4 <vPortEnterCritical+0x5c>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	3301      	adds	r3, #1
 800bd68:	4a0e      	ldr	r2, [pc, #56]	@ (800bda4 <vPortEnterCritical+0x5c>)
 800bd6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd6c:	4b0d      	ldr	r3, [pc, #52]	@ (800bda4 <vPortEnterCritical+0x5c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d110      	bne.n	800bd96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd74:	4b0c      	ldr	r3, [pc, #48]	@ (800bda8 <vPortEnterCritical+0x60>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00b      	beq.n	800bd96 <vPortEnterCritical+0x4e>
	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	603b      	str	r3, [r7, #0]
}
 800bd90:	bf00      	nop
 800bd92:	bf00      	nop
 800bd94:	e7fd      	b.n	800bd92 <vPortEnterCritical+0x4a>
	}
}
 800bd96:	bf00      	nop
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	20000098 	.word	0x20000098
 800bda8:	e000ed04 	.word	0xe000ed04

0800bdac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdb2:	4b12      	ldr	r3, [pc, #72]	@ (800bdfc <vPortExitCritical+0x50>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d10b      	bne.n	800bdd2 <vPortExitCritical+0x26>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	607b      	str	r3, [r7, #4]
}
 800bdcc:	bf00      	nop
 800bdce:	bf00      	nop
 800bdd0:	e7fd      	b.n	800bdce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bdd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bdfc <vPortExitCritical+0x50>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	4a08      	ldr	r2, [pc, #32]	@ (800bdfc <vPortExitCritical+0x50>)
 800bdda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bddc:	4b07      	ldr	r3, [pc, #28]	@ (800bdfc <vPortExitCritical+0x50>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d105      	bne.n	800bdf0 <vPortExitCritical+0x44>
 800bde4:	2300      	movs	r3, #0
 800bde6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	f383 8811 	msr	BASEPRI, r3
}
 800bdee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	20000098 	.word	0x20000098

0800be00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be00:	f3ef 8009 	mrs	r0, PSP
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	4b15      	ldr	r3, [pc, #84]	@ (800be60 <pxCurrentTCBConst>)
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	f01e 0f10 	tst.w	lr, #16
 800be10:	bf08      	it	eq
 800be12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1a:	6010      	str	r0, [r2, #0]
 800be1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800be24:	f380 8811 	msr	BASEPRI, r0
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f7ff fcd2 	bl	800b7d8 <vTaskSwitchContext>
 800be34:	f04f 0000 	mov.w	r0, #0
 800be38:	f380 8811 	msr	BASEPRI, r0
 800be3c:	bc09      	pop	{r0, r3}
 800be3e:	6819      	ldr	r1, [r3, #0]
 800be40:	6808      	ldr	r0, [r1, #0]
 800be42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be46:	f01e 0f10 	tst.w	lr, #16
 800be4a:	bf08      	it	eq
 800be4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be50:	f380 8809 	msr	PSP, r0
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	f3af 8000 	nop.w

0800be60 <pxCurrentTCBConst>:
 800be60:	20000590 	.word	0x20000590
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop

0800be68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	607b      	str	r3, [r7, #4]
}
 800be80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be82:	f7ff fbef 	bl	800b664 <xTaskIncrementTick>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d003      	beq.n	800be94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be8c:	4b06      	ldr	r3, [pc, #24]	@ (800bea8 <SysTick_Handler+0x40>)
 800be8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	2300      	movs	r3, #0
 800be96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	f383 8811 	msr	BASEPRI, r3
}
 800be9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bea0:	bf00      	nop
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	e000ed04 	.word	0xe000ed04

0800beac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800beb2:	f3ef 8305 	mrs	r3, IPSR
 800beb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2b0f      	cmp	r3, #15
 800bebc:	d915      	bls.n	800beea <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bebe:	4a18      	ldr	r2, [pc, #96]	@ (800bf20 <vPortValidateInterruptPriority+0x74>)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4413      	add	r3, r2
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bec8:	4b16      	ldr	r3, [pc, #88]	@ (800bf24 <vPortValidateInterruptPriority+0x78>)
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	7afa      	ldrb	r2, [r7, #11]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d20b      	bcs.n	800beea <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	607b      	str	r3, [r7, #4]
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop
 800bee8:	e7fd      	b.n	800bee6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800beea:	4b0f      	ldr	r3, [pc, #60]	@ (800bf28 <vPortValidateInterruptPriority+0x7c>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bef2:	4b0e      	ldr	r3, [pc, #56]	@ (800bf2c <vPortValidateInterruptPriority+0x80>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d90b      	bls.n	800bf12 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800befa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	603b      	str	r3, [r7, #0]
}
 800bf0c:	bf00      	nop
 800bf0e:	bf00      	nop
 800bf10:	e7fd      	b.n	800bf0e <vPortValidateInterruptPriority+0x62>
	}
 800bf12:	bf00      	nop
 800bf14:	3714      	adds	r7, #20
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop
 800bf20:	e000e3f0 	.word	0xe000e3f0
 800bf24:	20000674 	.word	0x20000674
 800bf28:	e000ed0c 	.word	0xe000ed0c
 800bf2c:	20000678 	.word	0x20000678

0800bf30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf34:	2200      	movs	r2, #0
 800bf36:	4912      	ldr	r1, [pc, #72]	@ (800bf80 <MX_USB_DEVICE_Init+0x50>)
 800bf38:	4812      	ldr	r0, [pc, #72]	@ (800bf84 <MX_USB_DEVICE_Init+0x54>)
 800bf3a:	f7fd fc79 	bl	8009830 <USBD_Init>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d001      	beq.n	800bf48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bf44:	f7f5 fab3 	bl	80014ae <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bf48:	490f      	ldr	r1, [pc, #60]	@ (800bf88 <MX_USB_DEVICE_Init+0x58>)
 800bf4a:	480e      	ldr	r0, [pc, #56]	@ (800bf84 <MX_USB_DEVICE_Init+0x54>)
 800bf4c:	f7fd fca0 	bl	8009890 <USBD_RegisterClass>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bf56:	f7f5 faaa 	bl	80014ae <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bf5a:	490c      	ldr	r1, [pc, #48]	@ (800bf8c <MX_USB_DEVICE_Init+0x5c>)
 800bf5c:	4809      	ldr	r0, [pc, #36]	@ (800bf84 <MX_USB_DEVICE_Init+0x54>)
 800bf5e:	f7fd fb97 	bl	8009690 <USBD_CDC_RegisterInterface>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bf68:	f7f5 faa1 	bl	80014ae <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bf6c:	4805      	ldr	r0, [pc, #20]	@ (800bf84 <MX_USB_DEVICE_Init+0x54>)
 800bf6e:	f7fd fcc5 	bl	80098fc <USBD_Start>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d001      	beq.n	800bf7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bf78:	f7f5 fa99 	bl	80014ae <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bf7c:	bf00      	nop
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	200000b8 	.word	0x200000b8
 800bf84:	2000067c 	.word	0x2000067c
 800bf88:	20000018 	.word	0x20000018
 800bf8c:	200000a4 	.word	0x200000a4

0800bf90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bf94:	2200      	movs	r2, #0
 800bf96:	4905      	ldr	r1, [pc, #20]	@ (800bfac <CDC_Init_FS+0x1c>)
 800bf98:	4805      	ldr	r0, [pc, #20]	@ (800bfb0 <CDC_Init_FS+0x20>)
 800bf9a:	f7fd fb93 	bl	80096c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf9e:	4905      	ldr	r1, [pc, #20]	@ (800bfb4 <CDC_Init_FS+0x24>)
 800bfa0:	4803      	ldr	r0, [pc, #12]	@ (800bfb0 <CDC_Init_FS+0x20>)
 800bfa2:	f7fd fbb1 	bl	8009708 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bfa6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	20001158 	.word	0x20001158
 800bfb0:	2000067c 	.word	0x2000067c
 800bfb4:	20000958 	.word	0x20000958

0800bfb8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bfbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	4603      	mov	r3, r0
 800bfd0:	6039      	str	r1, [r7, #0]
 800bfd2:	71fb      	strb	r3, [r7, #7]
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bfd8:	79fb      	ldrb	r3, [r7, #7]
 800bfda:	2b23      	cmp	r3, #35	@ 0x23
 800bfdc:	f200 8098 	bhi.w	800c110 <CDC_Control_FS+0x148>
 800bfe0:	a201      	add	r2, pc, #4	@ (adr r2, 800bfe8 <CDC_Control_FS+0x20>)
 800bfe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe6:	bf00      	nop
 800bfe8:	0800c111 	.word	0x0800c111
 800bfec:	0800c111 	.word	0x0800c111
 800bff0:	0800c111 	.word	0x0800c111
 800bff4:	0800c111 	.word	0x0800c111
 800bff8:	0800c111 	.word	0x0800c111
 800bffc:	0800c111 	.word	0x0800c111
 800c000:	0800c111 	.word	0x0800c111
 800c004:	0800c111 	.word	0x0800c111
 800c008:	0800c111 	.word	0x0800c111
 800c00c:	0800c111 	.word	0x0800c111
 800c010:	0800c111 	.word	0x0800c111
 800c014:	0800c111 	.word	0x0800c111
 800c018:	0800c111 	.word	0x0800c111
 800c01c:	0800c111 	.word	0x0800c111
 800c020:	0800c111 	.word	0x0800c111
 800c024:	0800c111 	.word	0x0800c111
 800c028:	0800c111 	.word	0x0800c111
 800c02c:	0800c111 	.word	0x0800c111
 800c030:	0800c111 	.word	0x0800c111
 800c034:	0800c111 	.word	0x0800c111
 800c038:	0800c111 	.word	0x0800c111
 800c03c:	0800c111 	.word	0x0800c111
 800c040:	0800c111 	.word	0x0800c111
 800c044:	0800c111 	.word	0x0800c111
 800c048:	0800c111 	.word	0x0800c111
 800c04c:	0800c111 	.word	0x0800c111
 800c050:	0800c111 	.word	0x0800c111
 800c054:	0800c111 	.word	0x0800c111
 800c058:	0800c111 	.word	0x0800c111
 800c05c:	0800c111 	.word	0x0800c111
 800c060:	0800c111 	.word	0x0800c111
 800c064:	0800c111 	.word	0x0800c111
 800c068:	0800c079 	.word	0x0800c079
 800c06c:	0800c0bd 	.word	0x0800c0bd
 800c070:	0800c111 	.word	0x0800c111
 800c074:	0800c111 	.word	0x0800c111
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	461a      	mov	r2, r3
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	3301      	adds	r3, #1
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	021b      	lsls	r3, r3, #8
 800c086:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	3302      	adds	r3, #2
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	041b      	lsls	r3, r3, #16
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800c090:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	3303      	adds	r3, #3
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	061b      	lsls	r3, r3, #24
 800c09a:	4313      	orrs	r3, r2
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800c09c:	461a      	mov	r2, r3
 800c09e:	4b20      	ldr	r3, [pc, #128]	@ (800c120 <CDC_Control_FS+0x158>)
 800c0a0:	601a      	str	r2, [r3, #0]
		LineCoding.format     = pbuf[4];
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	791a      	ldrb	r2, [r3, #4]
 800c0a6:	4b1e      	ldr	r3, [pc, #120]	@ (800c120 <CDC_Control_FS+0x158>)
 800c0a8:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	795a      	ldrb	r2, [r3, #5]
 800c0ae:	4b1c      	ldr	r3, [pc, #112]	@ (800c120 <CDC_Control_FS+0x158>)
 800c0b0:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype   = pbuf[6];
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	799a      	ldrb	r2, [r3, #6]
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c120 <CDC_Control_FS+0x158>)
 800c0b8:	719a      	strb	r2, [r3, #6]
    break;
 800c0ba:	e02a      	b.n	800c112 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800c0bc:	4b18      	ldr	r3, [pc, #96]	@ (800c120 <CDC_Control_FS+0x158>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800c0c6:	4b16      	ldr	r3, [pc, #88]	@ (800c120 <CDC_Control_FS+0x158>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	0a1a      	lsrs	r2, r3, #8
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	b2d2      	uxtb	r2, r2
 800c0d2:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800c0d4:	4b12      	ldr	r3, [pc, #72]	@ (800c120 <CDC_Control_FS+0x158>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	0c1a      	lsrs	r2, r3, #16
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	3302      	adds	r3, #2
 800c0de:	b2d2      	uxtb	r2, r2
 800c0e0:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800c0e2:	4b0f      	ldr	r3, [pc, #60]	@ (800c120 <CDC_Control_FS+0x158>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	0e1a      	lsrs	r2, r3, #24
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	3303      	adds	r3, #3
 800c0ec:	b2d2      	uxtb	r2, r2
 800c0ee:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	3304      	adds	r3, #4
 800c0f4:	4a0a      	ldr	r2, [pc, #40]	@ (800c120 <CDC_Control_FS+0x158>)
 800c0f6:	7912      	ldrb	r2, [r2, #4]
 800c0f8:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	3305      	adds	r3, #5
 800c0fe:	4a08      	ldr	r2, [pc, #32]	@ (800c120 <CDC_Control_FS+0x158>)
 800c100:	7952      	ldrb	r2, [r2, #5]
 800c102:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	3306      	adds	r3, #6
 800c108:	4a05      	ldr	r2, [pc, #20]	@ (800c120 <CDC_Control_FS+0x158>)
 800c10a:	7992      	ldrb	r2, [r2, #6]
 800c10c:	701a      	strb	r2, [r3, #0]
    break;
 800c10e:	e000      	b.n	800c112 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c110:	bf00      	nop
  }

  return (USBD_OK);
 800c112:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c114:	4618      	mov	r0, r3
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr
 800c120:	2000009c 	.word	0x2000009c

0800c124 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_Process_Recv_Data(Buf, *Len);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7f5 f841 	bl	80011bc <CDC_Process_Recv_Data>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c13a:	6879      	ldr	r1, [r7, #4]
 800c13c:	4805      	ldr	r0, [pc, #20]	@ (800c154 <CDC_Receive_FS+0x30>)
 800c13e:	f7fd fae3 	bl	8009708 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c142:	4804      	ldr	r0, [pc, #16]	@ (800c154 <CDC_Receive_FS+0x30>)
 800c144:	f7fd fb3e 	bl	80097c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c148:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	2000067c 	.word	0x2000067c

0800c158 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	460b      	mov	r3, r1
 800c162:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c164:	2300      	movs	r3, #0
 800c166:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c168:	4b0d      	ldr	r3, [pc, #52]	@ (800c1a0 <CDC_Transmit_FS+0x48>)
 800c16a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c16e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c176:	2b00      	cmp	r3, #0
 800c178:	d001      	beq.n	800c17e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e00b      	b.n	800c196 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c17e:	887b      	ldrh	r3, [r7, #2]
 800c180:	461a      	mov	r2, r3
 800c182:	6879      	ldr	r1, [r7, #4]
 800c184:	4806      	ldr	r0, [pc, #24]	@ (800c1a0 <CDC_Transmit_FS+0x48>)
 800c186:	f7fd fa9d 	bl	80096c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c18a:	4805      	ldr	r0, [pc, #20]	@ (800c1a0 <CDC_Transmit_FS+0x48>)
 800c18c:	f7fd fada 	bl	8009744 <USBD_CDC_TransmitPacket>
 800c190:	4603      	mov	r3, r0
 800c192:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c194:	7bfb      	ldrb	r3, [r7, #15]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	2000067c 	.word	0x2000067c

0800c1a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b087      	sub	sp, #28
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c1b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	371c      	adds	r7, #28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
	...

0800c1c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	6039      	str	r1, [r7, #0]
 800c1d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	2212      	movs	r2, #18
 800c1d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c1da:	4b03      	ldr	r3, [pc, #12]	@ (800c1e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	200000d8 	.word	0x200000d8

0800c1ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	6039      	str	r1, [r7, #0]
 800c1f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	2204      	movs	r2, #4
 800c1fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c1fe:	4b03      	ldr	r3, [pc, #12]	@ (800c20c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c200:	4618      	mov	r0, r3
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	200000f8 	.word	0x200000f8

0800c210 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	6039      	str	r1, [r7, #0]
 800c21a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c21c:	79fb      	ldrb	r3, [r7, #7]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d105      	bne.n	800c22e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c222:	683a      	ldr	r2, [r7, #0]
 800c224:	4907      	ldr	r1, [pc, #28]	@ (800c244 <USBD_FS_ProductStrDescriptor+0x34>)
 800c226:	4808      	ldr	r0, [pc, #32]	@ (800c248 <USBD_FS_ProductStrDescriptor+0x38>)
 800c228:	f7fe fd42 	bl	800acb0 <USBD_GetString>
 800c22c:	e004      	b.n	800c238 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	4904      	ldr	r1, [pc, #16]	@ (800c244 <USBD_FS_ProductStrDescriptor+0x34>)
 800c232:	4805      	ldr	r0, [pc, #20]	@ (800c248 <USBD_FS_ProductStrDescriptor+0x38>)
 800c234:	f7fe fd3c 	bl	800acb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c238:	4b02      	ldr	r3, [pc, #8]	@ (800c244 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	20001958 	.word	0x20001958
 800c248:	080121c0 	.word	0x080121c0

0800c24c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	4603      	mov	r3, r0
 800c254:	6039      	str	r1, [r7, #0]
 800c256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c258:	683a      	ldr	r2, [r7, #0]
 800c25a:	4904      	ldr	r1, [pc, #16]	@ (800c26c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c25c:	4804      	ldr	r0, [pc, #16]	@ (800c270 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c25e:	f7fe fd27 	bl	800acb0 <USBD_GetString>
  return USBD_StrDesc;
 800c262:	4b02      	ldr	r3, [pc, #8]	@ (800c26c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c264:	4618      	mov	r0, r3
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	20001958 	.word	0x20001958
 800c270:	080121d8 	.word	0x080121d8

0800c274 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	4603      	mov	r3, r0
 800c27c:	6039      	str	r1, [r7, #0]
 800c27e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	221a      	movs	r2, #26
 800c284:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c286:	f000 f855 	bl	800c334 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c28a:	4b02      	ldr	r3, [pc, #8]	@ (800c294 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	200000fc 	.word	0x200000fc

0800c298 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	4603      	mov	r3, r0
 800c2a0:	6039      	str	r1, [r7, #0]
 800c2a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2a4:	79fb      	ldrb	r3, [r7, #7]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d105      	bne.n	800c2b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2aa:	683a      	ldr	r2, [r7, #0]
 800c2ac:	4907      	ldr	r1, [pc, #28]	@ (800c2cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2ae:	4808      	ldr	r0, [pc, #32]	@ (800c2d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2b0:	f7fe fcfe 	bl	800acb0 <USBD_GetString>
 800c2b4:	e004      	b.n	800c2c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	4904      	ldr	r1, [pc, #16]	@ (800c2cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2ba:	4805      	ldr	r0, [pc, #20]	@ (800c2d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2bc:	f7fe fcf8 	bl	800acb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2c0:	4b02      	ldr	r3, [pc, #8]	@ (800c2cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20001958 	.word	0x20001958
 800c2d0:	080121ec 	.word	0x080121ec

0800c2d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	4603      	mov	r3, r0
 800c2dc:	6039      	str	r1, [r7, #0]
 800c2de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2e0:	79fb      	ldrb	r3, [r7, #7]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d105      	bne.n	800c2f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	4907      	ldr	r1, [pc, #28]	@ (800c308 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2ea:	4808      	ldr	r0, [pc, #32]	@ (800c30c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2ec:	f7fe fce0 	bl	800acb0 <USBD_GetString>
 800c2f0:	e004      	b.n	800c2fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2f2:	683a      	ldr	r2, [r7, #0]
 800c2f4:	4904      	ldr	r1, [pc, #16]	@ (800c308 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2f6:	4805      	ldr	r0, [pc, #20]	@ (800c30c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2f8:	f7fe fcda 	bl	800acb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2fc:	4b02      	ldr	r3, [pc, #8]	@ (800c308 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20001958 	.word	0x20001958
 800c30c:	080121f8 	.word	0x080121f8

0800c310 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	4603      	mov	r3, r0
 800c318:	6039      	str	r1, [r7, #0]
 800c31a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	220c      	movs	r2, #12
 800c320:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c322:	4b03      	ldr	r3, [pc, #12]	@ (800c330 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c324:	4618      	mov	r0, r3
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	200000ec 	.word	0x200000ec

0800c334 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c33a:	4b0f      	ldr	r3, [pc, #60]	@ (800c378 <Get_SerialNum+0x44>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c340:	4b0e      	ldr	r3, [pc, #56]	@ (800c37c <Get_SerialNum+0x48>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c346:	4b0e      	ldr	r3, [pc, #56]	@ (800c380 <Get_SerialNum+0x4c>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c34c:	68fa      	ldr	r2, [r7, #12]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4413      	add	r3, r2
 800c352:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d009      	beq.n	800c36e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c35a:	2208      	movs	r2, #8
 800c35c:	4909      	ldr	r1, [pc, #36]	@ (800c384 <Get_SerialNum+0x50>)
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	f000 f814 	bl	800c38c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c364:	2204      	movs	r2, #4
 800c366:	4908      	ldr	r1, [pc, #32]	@ (800c388 <Get_SerialNum+0x54>)
 800c368:	68b8      	ldr	r0, [r7, #8]
 800c36a:	f000 f80f 	bl	800c38c <IntToUnicode>
  }
}
 800c36e:	bf00      	nop
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	1fff7a10 	.word	0x1fff7a10
 800c37c:	1fff7a14 	.word	0x1fff7a14
 800c380:	1fff7a18 	.word	0x1fff7a18
 800c384:	200000fe 	.word	0x200000fe
 800c388:	2000010e 	.word	0x2000010e

0800c38c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b087      	sub	sp, #28
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	4613      	mov	r3, r2
 800c398:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c39e:	2300      	movs	r3, #0
 800c3a0:	75fb      	strb	r3, [r7, #23]
 800c3a2:	e027      	b.n	800c3f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	0f1b      	lsrs	r3, r3, #28
 800c3a8:	2b09      	cmp	r3, #9
 800c3aa:	d80b      	bhi.n	800c3c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	0f1b      	lsrs	r3, r3, #28
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	440b      	add	r3, r1
 800c3bc:	3230      	adds	r2, #48	@ 0x30
 800c3be:	b2d2      	uxtb	r2, r2
 800c3c0:	701a      	strb	r2, [r3, #0]
 800c3c2:	e00a      	b.n	800c3da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	0f1b      	lsrs	r3, r3, #28
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	7dfb      	ldrb	r3, [r7, #23]
 800c3cc:	005b      	lsls	r3, r3, #1
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	440b      	add	r3, r1
 800c3d4:	3237      	adds	r2, #55	@ 0x37
 800c3d6:	b2d2      	uxtb	r2, r2
 800c3d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	011b      	lsls	r3, r3, #4
 800c3de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c3ee:	7dfb      	ldrb	r3, [r7, #23]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	75fb      	strb	r3, [r7, #23]
 800c3f4:	7dfa      	ldrb	r2, [r7, #23]
 800c3f6:	79fb      	ldrb	r3, [r7, #7]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d3d3      	bcc.n	800c3a4 <IntToUnicode+0x18>
  }
}
 800c3fc:	bf00      	nop
 800c3fe:	bf00      	nop
 800c400:	371c      	adds	r7, #28
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
	...

0800c40c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b0a0      	sub	sp, #128	@ 0x80
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c414:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800c418:	2200      	movs	r2, #0
 800c41a:	601a      	str	r2, [r3, #0]
 800c41c:	605a      	str	r2, [r3, #4]
 800c41e:	609a      	str	r2, [r3, #8]
 800c420:	60da      	str	r2, [r3, #12]
 800c422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c424:	f107 0310 	add.w	r3, r7, #16
 800c428:	225c      	movs	r2, #92	@ 0x5c
 800c42a:	2100      	movs	r1, #0
 800c42c:	4618      	mov	r0, r3
 800c42e:	f003 fa7e 	bl	800f92e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c43a:	d149      	bne.n	800c4d0 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c43c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c440:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800c442:	2300      	movs	r3, #0
 800c444:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c446:	f107 0310 	add.w	r3, r7, #16
 800c44a:	4618      	mov	r0, r3
 800c44c:	f7f8 fd6e 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800c456:	f7f5 f82a 	bl	80014ae <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c45a:	2300      	movs	r3, #0
 800c45c:	60fb      	str	r3, [r7, #12]
 800c45e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4d8 <HAL_PCD_MspInit+0xcc>)
 800c460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c462:	4a1d      	ldr	r2, [pc, #116]	@ (800c4d8 <HAL_PCD_MspInit+0xcc>)
 800c464:	f043 0301 	orr.w	r3, r3, #1
 800c468:	6313      	str	r3, [r2, #48]	@ 0x30
 800c46a:	4b1b      	ldr	r3, [pc, #108]	@ (800c4d8 <HAL_PCD_MspInit+0xcc>)
 800c46c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c46e:	f003 0301 	and.w	r3, r3, #1
 800c472:	60fb      	str	r3, [r7, #12]
 800c474:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c476:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c47a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c47c:	2302      	movs	r3, #2
 800c47e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c480:	2300      	movs	r3, #0
 800c482:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c484:	2303      	movs	r3, #3
 800c486:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c488:	230a      	movs	r3, #10
 800c48a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c48c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800c490:	4619      	mov	r1, r3
 800c492:	4812      	ldr	r0, [pc, #72]	@ (800c4dc <HAL_PCD_MspInit+0xd0>)
 800c494:	f7f6 ff9a 	bl	80033cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c498:	4b0f      	ldr	r3, [pc, #60]	@ (800c4d8 <HAL_PCD_MspInit+0xcc>)
 800c49a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c49c:	4a0e      	ldr	r2, [pc, #56]	@ (800c4d8 <HAL_PCD_MspInit+0xcc>)
 800c49e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4a2:	6353      	str	r3, [r2, #52]	@ 0x34
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	60bb      	str	r3, [r7, #8]
 800c4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c4d8 <HAL_PCD_MspInit+0xcc>)
 800c4aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4ac:	4a0a      	ldr	r2, [pc, #40]	@ (800c4d8 <HAL_PCD_MspInit+0xcc>)
 800c4ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c4b2:	6453      	str	r3, [r2, #68]	@ 0x44
 800c4b4:	4b08      	ldr	r3, [pc, #32]	@ (800c4d8 <HAL_PCD_MspInit+0xcc>)
 800c4b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4bc:	60bb      	str	r3, [r7, #8]
 800c4be:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	2105      	movs	r1, #5
 800c4c4:	2043      	movs	r0, #67	@ 0x43
 800c4c6:	f7f6 fb55 	bl	8002b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c4ca:	2043      	movs	r0, #67	@ 0x43
 800c4cc:	f7f6 fb6e 	bl	8002bac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c4d0:	bf00      	nop
 800c4d2:	3780      	adds	r7, #128	@ 0x80
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	40023800 	.word	0x40023800
 800c4dc:	40020000 	.word	0x40020000

0800c4e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	f7fd fa4d 	bl	8009996 <USBD_LL_SetupStage>
}
 800c4fc:	bf00      	nop
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	460b      	mov	r3, r1
 800c50e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c516:	78fa      	ldrb	r2, [r7, #3]
 800c518:	6879      	ldr	r1, [r7, #4]
 800c51a:	4613      	mov	r3, r2
 800c51c:	00db      	lsls	r3, r3, #3
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	440b      	add	r3, r1
 800c524:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	78fb      	ldrb	r3, [r7, #3]
 800c52c:	4619      	mov	r1, r3
 800c52e:	f7fd fa87 	bl	8009a40 <USBD_LL_DataOutStage>
}
 800c532:	bf00      	nop
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b082      	sub	sp, #8
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
 800c542:	460b      	mov	r3, r1
 800c544:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c54c:	78fa      	ldrb	r2, [r7, #3]
 800c54e:	6879      	ldr	r1, [r7, #4]
 800c550:	4613      	mov	r3, r2
 800c552:	00db      	lsls	r3, r3, #3
 800c554:	4413      	add	r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	440b      	add	r3, r1
 800c55a:	3320      	adds	r3, #32
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	78fb      	ldrb	r3, [r7, #3]
 800c560:	4619      	mov	r1, r3
 800c562:	f7fd fb20 	bl	8009ba6 <USBD_LL_DataInStage>
}
 800c566:	bf00      	nop
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b082      	sub	sp, #8
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7fd fc5a 	bl	8009e36 <USBD_LL_SOF>
}
 800c582:	bf00      	nop
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b084      	sub	sp, #16
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c592:	2301      	movs	r3, #1
 800c594:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	79db      	ldrb	r3, [r3, #7]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d102      	bne.n	800c5a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	73fb      	strb	r3, [r7, #15]
 800c5a2:	e008      	b.n	800c5b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	79db      	ldrb	r3, [r3, #7]
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d102      	bne.n	800c5b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	73fb      	strb	r3, [r7, #15]
 800c5b0:	e001      	b.n	800c5b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c5b2:	f7f4 ff7c 	bl	80014ae <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5bc:	7bfa      	ldrb	r2, [r7, #15]
 800c5be:	4611      	mov	r1, r2
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fd fbf4 	bl	8009dae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fd fb9c 	bl	8009d0a <USBD_LL_Reset>
}
 800c5d2:	bf00      	nop
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
	...

0800c5dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fd fbef 	bl	8009dce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	6812      	ldr	r2, [r2, #0]
 800c5fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c602:	f043 0301 	orr.w	r3, r3, #1
 800c606:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	7adb      	ldrb	r3, [r3, #11]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d005      	beq.n	800c61c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c610:	4b04      	ldr	r3, [pc, #16]	@ (800c624 <HAL_PCD_SuspendCallback+0x48>)
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	4a03      	ldr	r2, [pc, #12]	@ (800c624 <HAL_PCD_SuspendCallback+0x48>)
 800c616:	f043 0306 	orr.w	r3, r3, #6
 800c61a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c61c:	bf00      	nop
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	e000ed00 	.word	0xe000ed00

0800c628 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c636:	4618      	mov	r0, r3
 800c638:	f7fd fbe5 	bl	8009e06 <USBD_LL_Resume>
}
 800c63c:	bf00      	nop
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	460b      	mov	r3, r1
 800c64e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c656:	78fa      	ldrb	r2, [r7, #3]
 800c658:	4611      	mov	r1, r2
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7fd fc3d 	bl	8009eda <USBD_LL_IsoOUTIncomplete>
}
 800c660:	bf00      	nop
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	460b      	mov	r3, r1
 800c672:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c67a:	78fa      	ldrb	r2, [r7, #3]
 800c67c:	4611      	mov	r1, r2
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fd fbf9 	bl	8009e76 <USBD_LL_IsoINIncomplete>
}
 800c684:	bf00      	nop
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fd fc4f 	bl	8009f3e <USBD_LL_DevConnected>
}
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fd fc4c 	bl	8009f54 <USBD_LL_DevDisconnected>
}
 800c6bc:	bf00      	nop
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d13c      	bne.n	800c74e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c6d4:	4a20      	ldr	r2, [pc, #128]	@ (800c758 <USBD_LL_Init+0x94>)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a1e      	ldr	r2, [pc, #120]	@ (800c758 <USBD_LL_Init+0x94>)
 800c6e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c6e4:	4b1c      	ldr	r3, [pc, #112]	@ (800c758 <USBD_LL_Init+0x94>)
 800c6e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c6ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c6ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c758 <USBD_LL_Init+0x94>)
 800c6ee:	2206      	movs	r2, #6
 800c6f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c6f2:	4b19      	ldr	r3, [pc, #100]	@ (800c758 <USBD_LL_Init+0x94>)
 800c6f4:	2202      	movs	r2, #2
 800c6f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c6f8:	4b17      	ldr	r3, [pc, #92]	@ (800c758 <USBD_LL_Init+0x94>)
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c6fe:	4b16      	ldr	r3, [pc, #88]	@ (800c758 <USBD_LL_Init+0x94>)
 800c700:	2202      	movs	r2, #2
 800c702:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c704:	4b14      	ldr	r3, [pc, #80]	@ (800c758 <USBD_LL_Init+0x94>)
 800c706:	2200      	movs	r2, #0
 800c708:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c70a:	4b13      	ldr	r3, [pc, #76]	@ (800c758 <USBD_LL_Init+0x94>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c710:	4b11      	ldr	r3, [pc, #68]	@ (800c758 <USBD_LL_Init+0x94>)
 800c712:	2200      	movs	r2, #0
 800c714:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c716:	4b10      	ldr	r3, [pc, #64]	@ (800c758 <USBD_LL_Init+0x94>)
 800c718:	2200      	movs	r2, #0
 800c71a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c71c:	4b0e      	ldr	r3, [pc, #56]	@ (800c758 <USBD_LL_Init+0x94>)
 800c71e:	2200      	movs	r2, #0
 800c720:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c722:	480d      	ldr	r0, [pc, #52]	@ (800c758 <USBD_LL_Init+0x94>)
 800c724:	f7f7 f819 	bl	800375a <HAL_PCD_Init>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d001      	beq.n	800c732 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c72e:	f7f4 febe 	bl	80014ae <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c732:	2180      	movs	r1, #128	@ 0x80
 800c734:	4808      	ldr	r0, [pc, #32]	@ (800c758 <USBD_LL_Init+0x94>)
 800c736:	f7f8 fa78 	bl	8004c2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c73a:	2240      	movs	r2, #64	@ 0x40
 800c73c:	2100      	movs	r1, #0
 800c73e:	4806      	ldr	r0, [pc, #24]	@ (800c758 <USBD_LL_Init+0x94>)
 800c740:	f7f8 fa2c 	bl	8004b9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c744:	2280      	movs	r2, #128	@ 0x80
 800c746:	2101      	movs	r1, #1
 800c748:	4803      	ldr	r0, [pc, #12]	@ (800c758 <USBD_LL_Init+0x94>)
 800c74a:	f7f8 fa27 	bl	8004b9c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	3708      	adds	r7, #8
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	20001b58 	.word	0x20001b58

0800c75c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c772:	4618      	mov	r0, r3
 800c774:	f7f7 f907 	bl	8003986 <HAL_PCD_Start>
 800c778:	4603      	mov	r3, r0
 800c77a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	4618      	mov	r0, r3
 800c780:	f000 f990 	bl	800caa4 <USBD_Get_USB_Status>
 800c784:	4603      	mov	r3, r0
 800c786:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c788:	7bbb      	ldrb	r3, [r7, #14]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b084      	sub	sp, #16
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	4608      	mov	r0, r1
 800c79c:	4611      	mov	r1, r2
 800c79e:	461a      	mov	r2, r3
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	70fb      	strb	r3, [r7, #3]
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	70bb      	strb	r3, [r7, #2]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c7ba:	78bb      	ldrb	r3, [r7, #2]
 800c7bc:	883a      	ldrh	r2, [r7, #0]
 800c7be:	78f9      	ldrb	r1, [r7, #3]
 800c7c0:	f7f7 fe08 	bl	80043d4 <HAL_PCD_EP_Open>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 f96a 	bl	800caa4 <USBD_Get_USB_Status>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b084      	sub	sp, #16
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c7f8:	78fa      	ldrb	r2, [r7, #3]
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7f7 fe51 	bl	80044a4 <HAL_PCD_EP_Close>
 800c802:	4603      	mov	r3, r0
 800c804:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c806:	7bfb      	ldrb	r3, [r7, #15]
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 f94b 	bl	800caa4 <USBD_Get_USB_Status>
 800c80e:	4603      	mov	r3, r0
 800c810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c812:	7bbb      	ldrb	r3, [r7, #14]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	460b      	mov	r3, r1
 800c826:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c828:	2300      	movs	r3, #0
 800c82a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c82c:	2300      	movs	r3, #0
 800c82e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c836:	78fa      	ldrb	r2, [r7, #3]
 800c838:	4611      	mov	r1, r2
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7f7 ff09 	bl	8004652 <HAL_PCD_EP_SetStall>
 800c840:	4603      	mov	r3, r0
 800c842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c844:	7bfb      	ldrb	r3, [r7, #15]
 800c846:	4618      	mov	r0, r3
 800c848:	f000 f92c 	bl	800caa4 <USBD_Get_USB_Status>
 800c84c:	4603      	mov	r3, r0
 800c84e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c850:	7bbb      	ldrb	r3, [r7, #14]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b084      	sub	sp, #16
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
 800c862:	460b      	mov	r3, r1
 800c864:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c866:	2300      	movs	r3, #0
 800c868:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c874:	78fa      	ldrb	r2, [r7, #3]
 800c876:	4611      	mov	r1, r2
 800c878:	4618      	mov	r0, r3
 800c87a:	f7f7 ff4d 	bl	8004718 <HAL_PCD_EP_ClrStall>
 800c87e:	4603      	mov	r3, r0
 800c880:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c882:	7bfb      	ldrb	r3, [r7, #15]
 800c884:	4618      	mov	r0, r3
 800c886:	f000 f90d 	bl	800caa4 <USBD_Get_USB_Status>
 800c88a:	4603      	mov	r3, r0
 800c88c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c88e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c8ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	da0b      	bge.n	800c8cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c8b4:	78fb      	ldrb	r3, [r7, #3]
 800c8b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8ba:	68f9      	ldr	r1, [r7, #12]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	00db      	lsls	r3, r3, #3
 800c8c0:	4413      	add	r3, r2
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	440b      	add	r3, r1
 800c8c6:	3316      	adds	r3, #22
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	e00b      	b.n	800c8e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c8cc:	78fb      	ldrb	r3, [r7, #3]
 800c8ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8d2:	68f9      	ldr	r1, [r7, #12]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	00db      	lsls	r3, r3, #3
 800c8d8:	4413      	add	r3, r2
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	440b      	add	r3, r1
 800c8de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c8e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3714      	adds	r7, #20
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c900:	2300      	movs	r3, #0
 800c902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c90a:	78fa      	ldrb	r2, [r7, #3]
 800c90c:	4611      	mov	r1, r2
 800c90e:	4618      	mov	r0, r3
 800c910:	f7f7 fd3c 	bl	800438c <HAL_PCD_SetAddress>
 800c914:	4603      	mov	r3, r0
 800c916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c918:	7bfb      	ldrb	r3, [r7, #15]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 f8c2 	bl	800caa4 <USBD_Get_USB_Status>
 800c920:	4603      	mov	r3, r0
 800c922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c924:	7bbb      	ldrb	r3, [r7, #14]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b086      	sub	sp, #24
 800c932:	af00      	add	r7, sp, #0
 800c934:	60f8      	str	r0, [r7, #12]
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	603b      	str	r3, [r7, #0]
 800c93a:	460b      	mov	r3, r1
 800c93c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c93e:	2300      	movs	r3, #0
 800c940:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c94c:	7af9      	ldrb	r1, [r7, #11]
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	f7f7 fe44 	bl	80045de <HAL_PCD_EP_Transmit>
 800c956:	4603      	mov	r3, r0
 800c958:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c95a:	7dfb      	ldrb	r3, [r7, #23]
 800c95c:	4618      	mov	r0, r3
 800c95e:	f000 f8a1 	bl	800caa4 <USBD_Get_USB_Status>
 800c962:	4603      	mov	r3, r0
 800c964:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c966:	7dbb      	ldrb	r3, [r7, #22]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3718      	adds	r7, #24
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b086      	sub	sp, #24
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	607a      	str	r2, [r7, #4]
 800c97a:	603b      	str	r3, [r7, #0]
 800c97c:	460b      	mov	r3, r1
 800c97e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c980:	2300      	movs	r3, #0
 800c982:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c98e:	7af9      	ldrb	r1, [r7, #11]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	f7f7 fdd0 	bl	8004538 <HAL_PCD_EP_Receive>
 800c998:	4603      	mov	r3, r0
 800c99a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c99c:	7dfb      	ldrb	r3, [r7, #23]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 f880 	bl	800caa4 <USBD_Get_USB_Status>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3718      	adds	r7, #24
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b082      	sub	sp, #8
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9c4:	78fa      	ldrb	r2, [r7, #3]
 800c9c6:	4611      	mov	r1, r2
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7f7 fdf0 	bl	80045ae <HAL_PCD_EP_GetRxCount>
 800c9ce:	4603      	mov	r3, r0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c9e4:	78fb      	ldrb	r3, [r7, #3]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d002      	beq.n	800c9f0 <HAL_PCDEx_LPM_Callback+0x18>
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d01f      	beq.n	800ca2e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c9ee:	e03b      	b.n	800ca68 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	7adb      	ldrb	r3, [r3, #11]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d007      	beq.n	800ca08 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c9f8:	f7f4 fcde 	bl	80013b8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9fc:	4b1c      	ldr	r3, [pc, #112]	@ (800ca70 <HAL_PCDEx_LPM_Callback+0x98>)
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	4a1b      	ldr	r2, [pc, #108]	@ (800ca70 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca02:	f023 0306 	bic.w	r3, r3, #6
 800ca06:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	6812      	ldr	r2, [r2, #0]
 800ca16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca1a:	f023 0301 	bic.w	r3, r3, #1
 800ca1e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fd f9ed 	bl	8009e06 <USBD_LL_Resume>
    break;
 800ca2c:	e01c      	b.n	800ca68 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	6812      	ldr	r2, [r2, #0]
 800ca3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca40:	f043 0301 	orr.w	r3, r3, #1
 800ca44:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fd f9be 	bl	8009dce <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	7adb      	ldrb	r3, [r3, #11]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d005      	beq.n	800ca66 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca5a:	4b05      	ldr	r3, [pc, #20]	@ (800ca70 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	4a04      	ldr	r2, [pc, #16]	@ (800ca70 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca60:	f043 0306 	orr.w	r3, r3, #6
 800ca64:	6113      	str	r3, [r2, #16]
    break;
 800ca66:	bf00      	nop
}
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	e000ed00 	.word	0xe000ed00

0800ca74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ca7c:	4b03      	ldr	r3, [pc, #12]	@ (800ca8c <USBD_static_malloc+0x18>)
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	370c      	adds	r7, #12
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	2000203c 	.word	0x2000203c

0800ca90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]

}
 800ca98:	bf00      	nop
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	4603      	mov	r3, r0
 800caac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caae:	2300      	movs	r3, #0
 800cab0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cab2:	79fb      	ldrb	r3, [r7, #7]
 800cab4:	2b03      	cmp	r3, #3
 800cab6:	d817      	bhi.n	800cae8 <USBD_Get_USB_Status+0x44>
 800cab8:	a201      	add	r2, pc, #4	@ (adr r2, 800cac0 <USBD_Get_USB_Status+0x1c>)
 800caba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cabe:	bf00      	nop
 800cac0:	0800cad1 	.word	0x0800cad1
 800cac4:	0800cad7 	.word	0x0800cad7
 800cac8:	0800cadd 	.word	0x0800cadd
 800cacc:	0800cae3 	.word	0x0800cae3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	73fb      	strb	r3, [r7, #15]
    break;
 800cad4:	e00b      	b.n	800caee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cad6:	2303      	movs	r3, #3
 800cad8:	73fb      	strb	r3, [r7, #15]
    break;
 800cada:	e008      	b.n	800caee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cadc:	2301      	movs	r3, #1
 800cade:	73fb      	strb	r3, [r7, #15]
    break;
 800cae0:	e005      	b.n	800caee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cae2:	2303      	movs	r3, #3
 800cae4:	73fb      	strb	r3, [r7, #15]
    break;
 800cae6:	e002      	b.n	800caee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cae8:	2303      	movs	r3, #3
 800caea:	73fb      	strb	r3, [r7, #15]
    break;
 800caec:	bf00      	nop
  }
  return usb_status;
 800caee:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <CmdMsg_fromCharArray>:
		return cmd;
	}
	memcpy(&cmd, data, sizeof(MotorMsg));
	return cmd;
}
CmdMsg CmdMsg_fromCharArray(const uint8_t *data, size_t size) {
 800cafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cafe:	b091      	sub	sp, #68	@ 0x44
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
	CmdMsg msg;
	if (size < sizeof(msg)) {
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b29      	cmp	r3, #41	@ 0x29
 800cb0c:	d820      	bhi.n	800cb50 <CmdMsg_fromCharArray+0x54>
		// 返回一个默认初始化的结构体，这里简单地清零
		memset(&msg, 0, sizeof(msg));
 800cb0e:	f107 0314 	add.w	r3, r7, #20
 800cb12:	222a      	movs	r2, #42	@ 0x2a
 800cb14:	2100      	movs	r1, #0
 800cb16:	4618      	mov	r0, r3
 800cb18:	f002 ff09 	bl	800f92e <memset>
		return msg;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f107 0414 	add.w	r4, r7, #20
 800cb22:	469c      	mov	ip, r3
 800cb24:	f104 0e20 	add.w	lr, r4, #32
 800cb28:	4665      	mov	r5, ip
 800cb2a:	4626      	mov	r6, r4
 800cb2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cb2e:	6028      	str	r0, [r5, #0]
 800cb30:	6069      	str	r1, [r5, #4]
 800cb32:	60aa      	str	r2, [r5, #8]
 800cb34:	60eb      	str	r3, [r5, #12]
 800cb36:	3410      	adds	r4, #16
 800cb38:	f10c 0c10 	add.w	ip, ip, #16
 800cb3c:	4574      	cmp	r4, lr
 800cb3e:	d1f3      	bne.n	800cb28 <CmdMsg_fromCharArray+0x2c>
 800cb40:	4662      	mov	r2, ip
 800cb42:	4623      	mov	r3, r4
 800cb44:	cb03      	ldmia	r3!, {r0, r1}
 800cb46:	6010      	str	r0, [r2, #0]
 800cb48:	6051      	str	r1, [r2, #4]
 800cb4a:	881b      	ldrh	r3, [r3, #0]
 800cb4c:	8113      	strh	r3, [r2, #8]
 800cb4e:	e030      	b.n	800cbb2 <CmdMsg_fromCharArray+0xb6>
	}
	memcpy(&msg, data, sizeof(CmdMsg));
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	461c      	mov	r4, r3
 800cb54:	f107 0614 	add.w	r6, r7, #20
 800cb58:	f104 0c20 	add.w	ip, r4, #32
 800cb5c:	4635      	mov	r5, r6
 800cb5e:	4623      	mov	r3, r4
 800cb60:	6818      	ldr	r0, [r3, #0]
 800cb62:	6859      	ldr	r1, [r3, #4]
 800cb64:	689a      	ldr	r2, [r3, #8]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cb6a:	3410      	adds	r4, #16
 800cb6c:	3610      	adds	r6, #16
 800cb6e:	4564      	cmp	r4, ip
 800cb70:	d1f4      	bne.n	800cb5c <CmdMsg_fromCharArray+0x60>
 800cb72:	4633      	mov	r3, r6
 800cb74:	4622      	mov	r2, r4
 800cb76:	6810      	ldr	r0, [r2, #0]
 800cb78:	6851      	ldr	r1, [r2, #4]
 800cb7a:	c303      	stmia	r3!, {r0, r1}
 800cb7c:	8912      	ldrh	r2, [r2, #8]
 800cb7e:	801a      	strh	r2, [r3, #0]
	return msg;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f107 0414 	add.w	r4, r7, #20
 800cb86:	469c      	mov	ip, r3
 800cb88:	f104 0e20 	add.w	lr, r4, #32
 800cb8c:	4665      	mov	r5, ip
 800cb8e:	4626      	mov	r6, r4
 800cb90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cb92:	6028      	str	r0, [r5, #0]
 800cb94:	6069      	str	r1, [r5, #4]
 800cb96:	60aa      	str	r2, [r5, #8]
 800cb98:	60eb      	str	r3, [r5, #12]
 800cb9a:	3410      	adds	r4, #16
 800cb9c:	f10c 0c10 	add.w	ip, ip, #16
 800cba0:	4574      	cmp	r4, lr
 800cba2:	d1f3      	bne.n	800cb8c <CmdMsg_fromCharArray+0x90>
 800cba4:	4662      	mov	r2, ip
 800cba6:	4623      	mov	r3, r4
 800cba8:	cb03      	ldmia	r3!, {r0, r1}
 800cbaa:	6010      	str	r0, [r2, #0]
 800cbac:	6051      	str	r1, [r2, #4]
 800cbae:	881b      	ldrh	r3, [r3, #0]
 800cbb0:	8113      	strh	r3, [r2, #8]
}
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	3744      	adds	r7, #68	@ 0x44
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbba <TrajMsg_fromCharArray>:
TrajMsg TrajMsg_fromCharArray(const uint8_t *data, size_t size) {
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b086      	sub	sp, #24
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	60f8      	str	r0, [r7, #12]
 800cbc2:	60b9      	str	r1, [r7, #8]
 800cbc4:	607a      	str	r2, [r7, #4]
	TrajMsg msg;
	if (size < sizeof(msg)) {
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b07      	cmp	r3, #7
 800cbca:	d80e      	bhi.n	800cbea <TrajMsg_fromCharArray+0x30>
		// 返回一个默认初始化的结构体，这里简单地清零
		memset(&msg, 0, sizeof(msg));
 800cbcc:	f107 0310 	add.w	r3, r7, #16
 800cbd0:	2208      	movs	r2, #8
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f002 feaa 	bl	800f92e <memset>
		return msg;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	461a      	mov	r2, r3
 800cbde:	f107 0310 	add.w	r3, r7, #16
 800cbe2:	cb03      	ldmia	r3!, {r0, r1}
 800cbe4:	6010      	str	r0, [r2, #0]
 800cbe6:	6051      	str	r1, [r2, #4]
 800cbe8:	e00c      	b.n	800cc04 <TrajMsg_fromCharArray+0x4a>
	}
	memcpy(&msg, data, sizeof(TrajMsg));
 800cbea:	68ba      	ldr	r2, [r7, #8]
 800cbec:	f107 0310 	add.w	r3, r7, #16
 800cbf0:	6810      	ldr	r0, [r2, #0]
 800cbf2:	6851      	ldr	r1, [r2, #4]
 800cbf4:	c303      	stmia	r3!, {r0, r1}
	return msg;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	f107 0310 	add.w	r3, r7, #16
 800cbfe:	cb03      	ldmia	r3!, {r0, r1}
 800cc00:	6010      	str	r0, [r2, #0]
 800cc02:	6051      	str	r1, [r2, #4]
}
 800cc04:	68f8      	ldr	r0, [r7, #12]
 800cc06:	3718      	adds	r7, #24
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <Board_Init>:

#include "board.h"

Board board;

void Board_Init() {
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
	// A1接串口1，波特率4.8M，使用转接板时485的GND和B口线序需调换
	// GO接串口2，波特率4M，使用转接板时485的GND和B口线序需调换
	A1_Config config1 = { 0, 0, -1 };
 800cc12:	2300      	movs	r3, #0
 800cc14:	733b      	strb	r3, [r7, #12]
 800cc16:	2300      	movs	r3, #0
 800cc18:	737b      	strb	r3, [r7, #13]
 800cc1a:	23ff      	movs	r3, #255	@ 0xff
 800cc1c:	73bb      	strb	r3, [r7, #14]
	board.roll_motor = A1_Motor_Create(config1);
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	f000 fb0a 	bl	800d238 <A1_Motor_Create>
 800cc24:	4603      	mov	r3, r0
 800cc26:	4a19      	ldr	r2, [pc, #100]	@ (800cc8c <Board_Init+0x80>)
 800cc28:	6013      	str	r3, [r2, #0]
	GO_Config config2 = { 1, 0, 1 };
 800cc2a:	4a19      	ldr	r2, [pc, #100]	@ (800cc90 <Board_Init+0x84>)
 800cc2c:	f107 0308 	add.w	r3, r7, #8
 800cc30:	6812      	ldr	r2, [r2, #0]
 800cc32:	4611      	mov	r1, r2
 800cc34:	8019      	strh	r1, [r3, #0]
 800cc36:	3302      	adds	r3, #2
 800cc38:	0c12      	lsrs	r2, r2, #16
 800cc3a:	701a      	strb	r2, [r3, #0]
	board.steer_motor = GO_Motor_Create(config2);
 800cc3c:	68b8      	ldr	r0, [r7, #8]
 800cc3e:	f000 fc35 	bl	800d4ac <GO_Motor_Create>
 800cc42:	4603      	mov	r3, r0
 800cc44:	4a11      	ldr	r2, [pc, #68]	@ (800cc8c <Board_Init+0x80>)
 800cc46:	6053      	str	r3, [r2, #4]
	RE35_Config config3 = { 0, 1, -1, 0 };
 800cc48:	4b12      	ldr	r3, [pc, #72]	@ (800cc94 <Board_Init+0x88>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	607b      	str	r3, [r7, #4]
	board.cable_motor = RE35_Motor_Create(config3);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fa26 	bl	800d0a0 <RE35_Motor_Create>
 800cc54:	4603      	mov	r3, r0
 800cc56:	4a0d      	ldr	r2, [pc, #52]	@ (800cc8c <Board_Init+0x80>)
 800cc58:	6093      	str	r3, [r2, #8]
	RE35_Config config4 = { 0, 5, -1, 5 };
 800cc5a:	4b0f      	ldr	r3, [pc, #60]	@ (800cc98 <Board_Init+0x8c>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	603b      	str	r3, [r7, #0]
	board.archor_motor = RE35_Motor_Create(config4);
 800cc60:	6838      	ldr	r0, [r7, #0]
 800cc62:	f000 fa1d 	bl	800d0a0 <RE35_Motor_Create>
 800cc66:	4603      	mov	r3, r0
 800cc68:	4a08      	ldr	r2, [pc, #32]	@ (800cc8c <Board_Init+0x80>)
 800cc6a:	60d3      	str	r3, [r2, #12]

	RE35_Motor_Init(board.cable_motor, VEL_POS);
 800cc6c:	4b07      	ldr	r3, [pc, #28]	@ (800cc8c <Board_Init+0x80>)
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	2105      	movs	r1, #5
 800cc72:	4618      	mov	r0, r3
 800cc74:	f000 fa2f 	bl	800d0d6 <RE35_Motor_Init>
	RE35_Motor_Init(board.archor_motor, VEL_POS);
 800cc78:	4b04      	ldr	r3, [pc, #16]	@ (800cc8c <Board_Init+0x80>)
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	2105      	movs	r1, #5
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f000 fa29 	bl	800d0d6 <RE35_Motor_Init>
}
 800cc84:	bf00      	nop
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	2000225c 	.word	0x2000225c
 800cc90:	08012208 	.word	0x08012208
 800cc94:	0801220c 	.word	0x0801220c
 800cc98:	08012210 	.word	0x08012210

0800cc9c <BSP_Init>:
#include "usbd_cdc_if.h"

RS485_port_info unitree_port[2];
CAN_info CAN_port[2];

void BSP_Init() {
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
	unitree_port[0].port = RS485_DIR1_GPIO_Port;	// A1 motor
 800cca2:	4b2a      	ldr	r3, [pc, #168]	@ (800cd4c <BSP_Init+0xb0>)
 800cca4:	4a2a      	ldr	r2, [pc, #168]	@ (800cd50 <BSP_Init+0xb4>)
 800cca6:	601a      	str	r2, [r3, #0]
	unitree_port[0].pin = RS485_DIR1_Pin;
 800cca8:	4b28      	ldr	r3, [pc, #160]	@ (800cd4c <BSP_Init+0xb0>)
 800ccaa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800ccae:	809a      	strh	r2, [r3, #4]
	unitree_port[0].uart.handle = &huart1;
 800ccb0:	4b26      	ldr	r3, [pc, #152]	@ (800cd4c <BSP_Init+0xb0>)
 800ccb2:	4a28      	ldr	r2, [pc, #160]	@ (800cd54 <BSP_Init+0xb8>)
 800ccb4:	609a      	str	r2, [r3, #8]
	unitree_port[1].port = RS485_DIR2_GPIO_Port;	// GO motor
 800ccb6:	4b25      	ldr	r3, [pc, #148]	@ (800cd4c <BSP_Init+0xb0>)
 800ccb8:	4a27      	ldr	r2, [pc, #156]	@ (800cd58 <BSP_Init+0xbc>)
 800ccba:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	unitree_port[1].pin = RS485_DIR2_Pin;
 800ccbe:	4b23      	ldr	r3, [pc, #140]	@ (800cd4c <BSP_Init+0xb0>)
 800ccc0:	2208      	movs	r2, #8
 800ccc2:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
	unitree_port[1].uart.handle = &huart2;
 800ccc6:	4b21      	ldr	r3, [pc, #132]	@ (800cd4c <BSP_Init+0xb0>)
 800ccc8:	4a24      	ldr	r2, [pc, #144]	@ (800cd5c <BSP_Init+0xc0>)
 800ccca:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	for (uint8_t i = 0; i < 2; ++i) {
 800ccce:	2300      	movs	r3, #0
 800ccd0:	71fb      	strb	r3, [r7, #7]
 800ccd2:	e030      	b.n	800cd36 <BSP_Init+0x9a>
		//使能串口空闲中断
		__HAL_UART_ENABLE_IT(unitree_port[i].uart.handle, UART_IT_IDLE);
 800ccd4:	79fb      	ldrb	r3, [r7, #7]
 800ccd6:	4a1d      	ldr	r2, [pc, #116]	@ (800cd4c <BSP_Init+0xb0>)
 800ccd8:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800ccdc:	fb01 f303 	mul.w	r3, r1, r3
 800cce0:	4413      	add	r3, r2
 800cce2:	3308      	adds	r3, #8
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68da      	ldr	r2, [r3, #12]
 800ccea:	79fb      	ldrb	r3, [r7, #7]
 800ccec:	4917      	ldr	r1, [pc, #92]	@ (800cd4c <BSP_Init+0xb0>)
 800ccee:	f44f 7086 	mov.w	r0, #268	@ 0x10c
 800ccf2:	fb00 f303 	mul.w	r3, r0, r3
 800ccf6:	440b      	add	r3, r1
 800ccf8:	3308      	adds	r3, #8
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f042 0210 	orr.w	r2, r2, #16
 800cd02:	60da      	str	r2, [r3, #12]
		//开启DMA接收
		HAL_UART_Receive_DMA(unitree_port[i].uart.handle, unitree_port[i].uart.rx_buff, UART_BUFFER_SIZE);
 800cd04:	79fb      	ldrb	r3, [r7, #7]
 800cd06:	4a11      	ldr	r2, [pc, #68]	@ (800cd4c <BSP_Init+0xb0>)
 800cd08:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800cd0c:	fb01 f303 	mul.w	r3, r1, r3
 800cd10:	4413      	add	r3, r2
 800cd12:	3308      	adds	r3, #8
 800cd14:	6818      	ldr	r0, [r3, #0]
 800cd16:	79fb      	ldrb	r3, [r7, #7]
 800cd18:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800cd1c:	fb02 f303 	mul.w	r3, r2, r3
 800cd20:	3308      	adds	r3, #8
 800cd22:	4a0a      	ldr	r2, [pc, #40]	@ (800cd4c <BSP_Init+0xb0>)
 800cd24:	4413      	add	r3, r2
 800cd26:	3304      	adds	r3, #4
 800cd28:	22ff      	movs	r2, #255	@ 0xff
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	f7f9 fbd2 	bl	80064d4 <HAL_UART_Receive_DMA>
	for (uint8_t i = 0; i < 2; ++i) {
 800cd30:	79fb      	ldrb	r3, [r7, #7]
 800cd32:	3301      	adds	r3, #1
 800cd34:	71fb      	strb	r3, [r7, #7]
 800cd36:	79fb      	ldrb	r3, [r7, #7]
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d9cb      	bls.n	800ccd4 <BSP_Init+0x38>
	}

	CAN_port[0].handle = &hcan1;
 800cd3c:	4b08      	ldr	r3, [pc, #32]	@ (800cd60 <BSP_Init+0xc4>)
 800cd3e:	4a09      	ldr	r2, [pc, #36]	@ (800cd64 <BSP_Init+0xc8>)
 800cd40:	601a      	str	r2, [r3, #0]
}
 800cd42:	bf00      	nop
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	2000226c 	.word	0x2000226c
 800cd50:	40020800 	.word	0x40020800
 800cd54:	20000378 	.word	0x20000378
 800cd58:	40020400 	.word	0x40020400
 800cd5c:	200003c0 	.word	0x200003c0
 800cd60:	20002484 	.word	0x20002484
 800cd64:	200002fc 	.word	0x200002fc

0800cd68 <RS485_Send_DMA>:
	if (HAL_UART_Transmit(unitree_port[ind].uart.handle, data, size, timeout) != HAL_OK) //判断是否发送正常，如果出现异常则进入异常中断函数
		Error_Handler();
	HAL_GPIO_WritePin(unitree_port[ind].port, unitree_port[ind].pin, GPIO_PIN_RESET);
}

void RS485_Send_DMA(uint8_t ind, const uint8_t *data, uint16_t size) {
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	4603      	mov	r3, r0
 800cd70:	6039      	str	r1, [r7, #0]
 800cd72:	71fb      	strb	r3, [r7, #7]
 800cd74:	4613      	mov	r3, r2
 800cd76:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(unitree_port[ind].port, unitree_port[ind].pin, GPIO_PIN_SET);
 800cd78:	79fb      	ldrb	r3, [r7, #7]
 800cd7a:	4a28      	ldr	r2, [pc, #160]	@ (800ce1c <RS485_Send_DMA+0xb4>)
 800cd7c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800cd80:	fb01 f303 	mul.w	r3, r1, r3
 800cd84:	4413      	add	r3, r2
 800cd86:	6818      	ldr	r0, [r3, #0]
 800cd88:	79fb      	ldrb	r3, [r7, #7]
 800cd8a:	4a24      	ldr	r2, [pc, #144]	@ (800ce1c <RS485_Send_DMA+0xb4>)
 800cd8c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800cd90:	fb01 f303 	mul.w	r3, r1, r3
 800cd94:	4413      	add	r3, r2
 800cd96:	3304      	adds	r3, #4
 800cd98:	881b      	ldrh	r3, [r3, #0]
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	f7f6 fca9 	bl	80036f4 <HAL_GPIO_WritePin>
	if (HAL_UART_Transmit_DMA(unitree_port[ind].uart.handle, data, size) != HAL_OK) //判断是否发送正常，如果出现异常则进入异常中断函数
 800cda2:	79fb      	ldrb	r3, [r7, #7]
 800cda4:	4a1d      	ldr	r2, [pc, #116]	@ (800ce1c <RS485_Send_DMA+0xb4>)
 800cda6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800cdaa:	fb01 f303 	mul.w	r3, r1, r3
 800cdae:	4413      	add	r3, r2
 800cdb0:	3308      	adds	r3, #8
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	88ba      	ldrh	r2, [r7, #4]
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7f9 fb1b 	bl	80063f4 <HAL_UART_Transmit_DMA>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <RS485_Send_DMA+0x60>
		Error_Handler();
 800cdc4:	f7f4 fb73 	bl	80014ae <Error_Handler>
	while (__HAL_UART_GET_FLAG(unitree_port[ind].uart.handle,UART_FLAG_TC) != SET) {
 800cdc8:	bf00      	nop
 800cdca:	79fb      	ldrb	r3, [r7, #7]
 800cdcc:	4a13      	ldr	r2, [pc, #76]	@ (800ce1c <RS485_Send_DMA+0xb4>)
 800cdce:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800cdd2:	fb01 f303 	mul.w	r3, r1, r3
 800cdd6:	4413      	add	r3, r2
 800cdd8:	3308      	adds	r3, #8
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cde4:	2b40      	cmp	r3, #64	@ 0x40
 800cde6:	d1f0      	bne.n	800cdca <RS485_Send_DMA+0x62>
	}
	HAL_GPIO_WritePin(unitree_port[ind].port, unitree_port[ind].pin, GPIO_PIN_RESET);
 800cde8:	79fb      	ldrb	r3, [r7, #7]
 800cdea:	4a0c      	ldr	r2, [pc, #48]	@ (800ce1c <RS485_Send_DMA+0xb4>)
 800cdec:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800cdf0:	fb01 f303 	mul.w	r3, r1, r3
 800cdf4:	4413      	add	r3, r2
 800cdf6:	6818      	ldr	r0, [r3, #0]
 800cdf8:	79fb      	ldrb	r3, [r7, #7]
 800cdfa:	4a08      	ldr	r2, [pc, #32]	@ (800ce1c <RS485_Send_DMA+0xb4>)
 800cdfc:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800ce00:	fb01 f303 	mul.w	r3, r1, r3
 800ce04:	4413      	add	r3, r2
 800ce06:	3304      	adds	r3, #4
 800ce08:	881b      	ldrh	r3, [r3, #0]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	f7f6 fc71 	bl	80036f4 <HAL_GPIO_WritePin>
}
 800ce12:	bf00      	nop
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	2000226c 	.word	0x2000226c

0800ce20 <USER_UART_IRQHandler>:

/* 放在"stm32f4xx_it.c"里形如"void USART2_IRQHandler(void)"类的函数中，只要用了DMA接收的串口都放 */
void USER_UART_IRQHandler(UART_HandleTypeDef *huart) {
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
	//判断是否进入空闲中断
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET) {
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f003 0310 	and.w	r3, r3, #16
 800ce32:	2b10      	cmp	r3, #16
 800ce34:	d138      	bne.n	800cea8 <USER_UART_IRQHandler+0x88>
		__HAL_UART_CLEAR_IDLEFLAG(huart); //清楚空闲中断标志
 800ce36:	2300      	movs	r3, #0
 800ce38:	60bb      	str	r3, [r7, #8]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	60bb      	str	r3, [r7, #8]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	60bb      	str	r3, [r7, #8]
 800ce4a:	68bb      	ldr	r3, [r7, #8]
		HAL_UART_DMAStop(huart); //暂停本次DMA传输，进行数据处理
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7f9 fb66 	bl	800651e <HAL_UART_DMAStop>
		uint8_t data_length = UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx); //计算接收到的数据长度
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	43db      	mvns	r3, r3
 800ce5e:	73fb      	strb	r3, [r7, #15]
		//数据处理回调函数
		if (huart == unitree_port[0].uart.handle) {
 800ce60:	4b13      	ldr	r3, [pc, #76]	@ (800ceb0 <USER_UART_IRQHandler+0x90>)
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d10c      	bne.n	800ce84 <USER_UART_IRQHandler+0x64>
			A1_Motor_RecvData_Process(board.roll_motor, unitree_port[0].uart.rx_buff, data_length);
 800ce6a:	4b12      	ldr	r3, [pc, #72]	@ (800ceb4 <USER_UART_IRQHandler+0x94>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	7bfa      	ldrb	r2, [r7, #15]
 800ce70:	4911      	ldr	r1, [pc, #68]	@ (800ceb8 <USER_UART_IRQHandler+0x98>)
 800ce72:	4618      	mov	r0, r3
 800ce74:	f000 fa92 	bl	800d39c <A1_Motor_RecvData_Process>
			HAL_UART_Receive_DMA(huart, unitree_port[0].uart.rx_buff, UART_BUFFER_SIZE); //重启DMA接收
 800ce78:	22ff      	movs	r2, #255	@ 0xff
 800ce7a:	490f      	ldr	r1, [pc, #60]	@ (800ceb8 <USER_UART_IRQHandler+0x98>)
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7f9 fb29 	bl	80064d4 <HAL_UART_Receive_DMA>
		} else if (huart == unitree_port[1].uart.handle) {
			GO_Motor_RecvData_Process(board.steer_motor, unitree_port[1].uart.rx_buff, data_length);
			HAL_UART_Receive_DMA(huart, unitree_port[1].uart.rx_buff, UART_BUFFER_SIZE); //重启DMA接收
		}
	}
}
 800ce82:	e011      	b.n	800cea8 <USER_UART_IRQHandler+0x88>
		} else if (huart == unitree_port[1].uart.handle) {
 800ce84:	4b0a      	ldr	r3, [pc, #40]	@ (800ceb0 <USER_UART_IRQHandler+0x90>)
 800ce86:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d10b      	bne.n	800cea8 <USER_UART_IRQHandler+0x88>
			GO_Motor_RecvData_Process(board.steer_motor, unitree_port[1].uart.rx_buff, data_length);
 800ce90:	4b08      	ldr	r3, [pc, #32]	@ (800ceb4 <USER_UART_IRQHandler+0x94>)
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	7bfa      	ldrb	r2, [r7, #15]
 800ce96:	4909      	ldr	r1, [pc, #36]	@ (800cebc <USER_UART_IRQHandler+0x9c>)
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f000 fda7 	bl	800d9ec <GO_Motor_RecvData_Process>
			HAL_UART_Receive_DMA(huart, unitree_port[1].uart.rx_buff, UART_BUFFER_SIZE); //重启DMA接收
 800ce9e:	22ff      	movs	r2, #255	@ 0xff
 800cea0:	4906      	ldr	r1, [pc, #24]	@ (800cebc <USER_UART_IRQHandler+0x9c>)
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7f9 fb16 	bl	80064d4 <HAL_UART_Receive_DMA>
}
 800cea8:	bf00      	nop
 800ceaa:	3710      	adds	r7, #16
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	2000226c 	.word	0x2000226c
 800ceb4:	2000225c 	.word	0x2000225c
 800ceb8:	20002278 	.word	0x20002278
 800cebc:	20002384 	.word	0x20002384

0800cec0 <CAN_Filter_Init>:

/* CAN过滤器初始化 */
void CAN_Filter_Init() {
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b08a      	sub	sp, #40	@ 0x28
 800cec4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef fcan;

	fcan.FilterBank = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	617b      	str	r3, [r7, #20]
	fcan.FilterMode = CAN_FILTERMODE_IDMASK;
 800ceca:	2300      	movs	r3, #0
 800cecc:	61bb      	str	r3, [r7, #24]
	fcan.FilterScale = CAN_FILTERSCALE_32BIT;
 800cece:	2301      	movs	r3, #1
 800ced0:	61fb      	str	r3, [r7, #28]

	fcan.FilterIdHigh = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	603b      	str	r3, [r7, #0]
	fcan.FilterIdLow = 0;
 800ced6:	2300      	movs	r3, #0
 800ced8:	607b      	str	r3, [r7, #4]
	fcan.FilterMaskIdHigh = 0;
 800ceda:	2300      	movs	r3, #0
 800cedc:	60bb      	str	r3, [r7, #8]
	fcan.FilterMaskIdLow = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	60fb      	str	r3, [r7, #12]
	fcan.FilterFIFOAssignment = CAN_RX_FIFO0;
 800cee2:	2300      	movs	r3, #0
 800cee4:	613b      	str	r3, [r7, #16]
	fcan.FilterActivation = ENABLE;
 800cee6:	2301      	movs	r3, #1
 800cee8:	623b      	str	r3, [r7, #32]
	fcan.SlaveStartFilterBank = 0;
 800ceea:	2300      	movs	r3, #0
 800ceec:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Filter configuration */
	if (HAL_CAN_ConfigFilter(&hcan1, &fcan) != HAL_OK)
 800ceee:	463b      	mov	r3, r7
 800cef0:	4619      	mov	r1, r3
 800cef2:	480e      	ldr	r0, [pc, #56]	@ (800cf2c <CAN_Filter_Init+0x6c>)
 800cef4:	f7f5 f81a 	bl	8001f2c <HAL_CAN_ConfigFilter>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d001      	beq.n	800cf02 <CAN_Filter_Init+0x42>
		Error_Handler();
 800cefe:	f7f4 fad6 	bl	80014ae <Error_Handler>
	/* Start CAN */
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800cf02:	480a      	ldr	r0, [pc, #40]	@ (800cf2c <CAN_Filter_Init+0x6c>)
 800cf04:	f7f5 f8f2 	bl	80020ec <HAL_CAN_Start>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <CAN_Filter_Init+0x52>
		Error_Handler();
 800cf0e:	f7f4 face 	bl	80014ae <Error_Handler>
	/*enable can interrupt*/
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800cf12:	2102      	movs	r1, #2
 800cf14:	4805      	ldr	r0, [pc, #20]	@ (800cf2c <CAN_Filter_Init+0x6c>)
 800cf16:	f7f5 fb1f 	bl	8002558 <HAL_CAN_ActivateNotification>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d001      	beq.n	800cf24 <CAN_Filter_Init+0x64>
		Error_Handler();
 800cf20:	f7f4 fac5 	bl	80014ae <Error_Handler>
}
 800cf24:	bf00      	nop
 800cf26:	3728      	adds	r7, #40	@ 0x28
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	200002fc 	.word	0x200002fc

0800cf30 <CAN_Send_Msg>:

/* CAN发送数据函数 */
void CAN_Send_Msg(uint8_t can_ind, uint8_t id, uint8_t *msg, uint8_t len) {
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	603a      	str	r2, [r7, #0]
 800cf38:	461a      	mov	r2, r3
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	71fb      	strb	r3, [r7, #7]
 800cf3e:	460b      	mov	r3, r1
 800cf40:	71bb      	strb	r3, [r7, #6]
 800cf42:	4613      	mov	r3, r2
 800cf44:	717b      	strb	r3, [r7, #5]
	uint32_t TxMailbox;

	CAN_port[can_ind].TxHeader.StdId = id;
 800cf46:	79fa      	ldrb	r2, [r7, #7]
 800cf48:	79b9      	ldrb	r1, [r7, #6]
 800cf4a:	4827      	ldr	r0, [pc, #156]	@ (800cfe8 <CAN_Send_Msg+0xb8>)
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	00db      	lsls	r3, r3, #3
 800cf50:	1a9b      	subs	r3, r3, r2
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	4403      	add	r3, r0
 800cf56:	3304      	adds	r3, #4
 800cf58:	6019      	str	r1, [r3, #0]
	CAN_port[can_ind].TxHeader.ExtId = 0;
 800cf5a:	79fa      	ldrb	r2, [r7, #7]
 800cf5c:	4922      	ldr	r1, [pc, #136]	@ (800cfe8 <CAN_Send_Msg+0xb8>)
 800cf5e:	4613      	mov	r3, r2
 800cf60:	00db      	lsls	r3, r3, #3
 800cf62:	1a9b      	subs	r3, r3, r2
 800cf64:	00db      	lsls	r3, r3, #3
 800cf66:	440b      	add	r3, r1
 800cf68:	3308      	adds	r3, #8
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	601a      	str	r2, [r3, #0]
	CAN_port[can_ind].TxHeader.IDE = CAN_ID_STD;
 800cf6e:	79fa      	ldrb	r2, [r7, #7]
 800cf70:	491d      	ldr	r1, [pc, #116]	@ (800cfe8 <CAN_Send_Msg+0xb8>)
 800cf72:	4613      	mov	r3, r2
 800cf74:	00db      	lsls	r3, r3, #3
 800cf76:	1a9b      	subs	r3, r3, r2
 800cf78:	00db      	lsls	r3, r3, #3
 800cf7a:	440b      	add	r3, r1
 800cf7c:	330c      	adds	r3, #12
 800cf7e:	2200      	movs	r2, #0
 800cf80:	601a      	str	r2, [r3, #0]
	CAN_port[can_ind].TxHeader.RTR = CAN_RTR_DATA;
 800cf82:	79fa      	ldrb	r2, [r7, #7]
 800cf84:	4918      	ldr	r1, [pc, #96]	@ (800cfe8 <CAN_Send_Msg+0xb8>)
 800cf86:	4613      	mov	r3, r2
 800cf88:	00db      	lsls	r3, r3, #3
 800cf8a:	1a9b      	subs	r3, r3, r2
 800cf8c:	00db      	lsls	r3, r3, #3
 800cf8e:	440b      	add	r3, r1
 800cf90:	3310      	adds	r3, #16
 800cf92:	2200      	movs	r2, #0
 800cf94:	601a      	str	r2, [r3, #0]
	CAN_port[can_ind].TxHeader.DLC = len;
 800cf96:	79fa      	ldrb	r2, [r7, #7]
 800cf98:	7979      	ldrb	r1, [r7, #5]
 800cf9a:	4813      	ldr	r0, [pc, #76]	@ (800cfe8 <CAN_Send_Msg+0xb8>)
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	00db      	lsls	r3, r3, #3
 800cfa0:	1a9b      	subs	r3, r3, r2
 800cfa2:	00db      	lsls	r3, r3, #3
 800cfa4:	4403      	add	r3, r0
 800cfa6:	3314      	adds	r3, #20
 800cfa8:	6019      	str	r1, [r3, #0]

//	while(HAL_CAN_GetTxMailboxesFreeLevel(CAN_port[can_ind].handle) == 0) {}

	if (HAL_CAN_AddTxMessage(CAN_port[can_ind].handle, &CAN_port[can_ind].TxHeader, msg, &TxMailbox) != HAL_OK) //发送
 800cfaa:	79fa      	ldrb	r2, [r7, #7]
 800cfac:	490e      	ldr	r1, [pc, #56]	@ (800cfe8 <CAN_Send_Msg+0xb8>)
 800cfae:	4613      	mov	r3, r2
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	1a9b      	subs	r3, r3, r2
 800cfb4:	00db      	lsls	r3, r3, #3
 800cfb6:	440b      	add	r3, r1
 800cfb8:	6818      	ldr	r0, [r3, #0]
 800cfba:	79fa      	ldrb	r2, [r7, #7]
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	00db      	lsls	r3, r3, #3
 800cfc0:	1a9b      	subs	r3, r3, r2
 800cfc2:	00db      	lsls	r3, r3, #3
 800cfc4:	4a08      	ldr	r2, [pc, #32]	@ (800cfe8 <CAN_Send_Msg+0xb8>)
 800cfc6:	4413      	add	r3, r2
 800cfc8:	1d19      	adds	r1, r3, #4
 800cfca:	f107 030c 	add.w	r3, r7, #12
 800cfce:	683a      	ldr	r2, [r7, #0]
 800cfd0:	f7f5 f8d0 	bl	8002174 <HAL_CAN_AddTxMessage>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d001      	beq.n	800cfde <CAN_Send_Msg+0xae>
		Error_Handler();
 800cfda:	f7f4 fa68 	bl	80014ae <Error_Handler>
}
 800cfde:	bf00      	nop
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	20002484 	.word	0x20002484

0800cfec <HAL_CAN_RxFifo0MsgPendingCallback>:

/* CAN接收中断回调函数 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b086      	sub	sp, #24
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
	uint8_t rxdata[8] = { 0 };
 800cff4:	2300      	movs	r3, #0
 800cff6:	60fb      	str	r3, [r7, #12]
 800cff8:	2300      	movs	r3, #0
 800cffa:	613b      	str	r3, [r7, #16]
	if (hcan->Instance == CAN1) {
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a21      	ldr	r2, [pc, #132]	@ (800d088 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d12e      	bne.n	800d064 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
		HAL_CAN_GetRxMessage(CAN_port[0].handle, CAN_RX_FIFO0, &CAN_port[0].RxHeader, rxdata);
 800d006:	4b21      	ldr	r3, [pc, #132]	@ (800d08c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800d008:	6818      	ldr	r0, [r3, #0]
 800d00a:	f107 030c 	add.w	r3, r7, #12
 800d00e:	4a20      	ldr	r2, [pc, #128]	@ (800d090 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800d010:	2100      	movs	r1, #0
 800d012:	f7f5 f97f 	bl	8002314 <HAL_CAN_GetRxMessage>
		uint8_t temp_id = (CAN_port[0].RxHeader.StdId >> 4) & 0x0f;
 800d016:	4b1d      	ldr	r3, [pc, #116]	@ (800d08c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800d018:	69db      	ldr	r3, [r3, #28]
 800d01a:	091b      	lsrs	r3, r3, #4
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	f003 030f 	and.w	r3, r3, #15
 800d022:	75fb      	strb	r3, [r7, #23]
		if (temp_id == board.cable_motor->config.driver_id)
 800d024:	4b1b      	ldr	r3, [pc, #108]	@ (800d094 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	785b      	ldrb	r3, [r3, #1]
 800d02a:	7dfa      	ldrb	r2, [r7, #23]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d109      	bne.n	800d044 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
			RE35_Motor_RecvData_Process(board.cable_motor, CAN_port[0].RxHeader.StdId, rxdata);
 800d030:	4b18      	ldr	r3, [pc, #96]	@ (800d094 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	4a15      	ldr	r2, [pc, #84]	@ (800d08c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800d036:	69d1      	ldr	r1, [r2, #28]
 800d038:	f107 020c 	add.w	r2, r7, #12
 800d03c:	4618      	mov	r0, r3
 800d03e:	f000 f89e 	bl	800d17e <RE35_Motor_RecvData_Process>
		else if (temp_id == board.archor_motor->config.driver_id)
			RE35_Motor_RecvData_Process(board.archor_motor, CAN_port[0].RxHeader.StdId, rxdata);
	} else if (hcan->Instance == CAN2) {
		HAL_CAN_GetRxMessage(CAN_port[1].handle, CAN_RX_FIFO0, &CAN_port[1].RxHeader, rxdata);
	}
}
 800d042:	e01c      	b.n	800d07e <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
		else if (temp_id == board.archor_motor->config.driver_id)
 800d044:	4b13      	ldr	r3, [pc, #76]	@ (800d094 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	785b      	ldrb	r3, [r3, #1]
 800d04a:	7dfa      	ldrb	r2, [r7, #23]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d116      	bne.n	800d07e <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
			RE35_Motor_RecvData_Process(board.archor_motor, CAN_port[0].RxHeader.StdId, rxdata);
 800d050:	4b10      	ldr	r3, [pc, #64]	@ (800d094 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	4a0d      	ldr	r2, [pc, #52]	@ (800d08c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800d056:	69d1      	ldr	r1, [r2, #28]
 800d058:	f107 020c 	add.w	r2, r7, #12
 800d05c:	4618      	mov	r0, r3
 800d05e:	f000 f88e 	bl	800d17e <RE35_Motor_RecvData_Process>
}
 800d062:	e00c      	b.n	800d07e <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	} else if (hcan->Instance == CAN2) {
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a0b      	ldr	r2, [pc, #44]	@ (800d098 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d107      	bne.n	800d07e <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
		HAL_CAN_GetRxMessage(CAN_port[1].handle, CAN_RX_FIFO0, &CAN_port[1].RxHeader, rxdata);
 800d06e:	4b07      	ldr	r3, [pc, #28]	@ (800d08c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800d070:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d072:	f107 030c 	add.w	r3, r7, #12
 800d076:	4a09      	ldr	r2, [pc, #36]	@ (800d09c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800d078:	2100      	movs	r1, #0
 800d07a:	f7f5 f94b 	bl	8002314 <HAL_CAN_GetRxMessage>
}
 800d07e:	bf00      	nop
 800d080:	3718      	adds	r7, #24
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	40006400 	.word	0x40006400
 800d08c:	20002484 	.word	0x20002484
 800d090:	200024a0 	.word	0x200024a0
 800d094:	2000225c 	.word	0x2000225c
 800d098:	40006800 	.word	0x40006800
 800d09c:	200024d8 	.word	0x200024d8

0800d0a0 <RE35_Motor_Create>:
#define ENCODER_LINES_NUM 2000	// 编码器线数
#define PWM_LIM 5000	// pwm限制值
#define LEAD 5	// 丝杠导程（mm）
#define REEL_D 30	// 绕线轮直径（mm）

RE35_Motor* RE35_Motor_Create(RE35_Config config) {
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
	RE35_Motor *obj = (RE35_Motor*) malloc(sizeof(RE35_Motor));
 800d0a8:	2018      	movs	r0, #24
 800d0aa:	f000 fd15 	bl	800dad8 <malloc>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	60fb      	str	r3, [r7, #12]
	if (obj == NULL) {
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d101      	bne.n	800d0bc <RE35_Motor_Create+0x1c>
		// 如果内存分配失败，返回 NULL
		return NULL;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	e008      	b.n	800d0ce <RE35_Motor_Create+0x2e>
	}
	memset(obj, 0, sizeof(RE35_Motor));
 800d0bc:	2218      	movs	r2, #24
 800d0be:	2100      	movs	r1, #0
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f002 fc34 	bl	800f92e <memset>

	obj->config = config;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	601a      	str	r2, [r3, #0]

	return obj;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <RE35_Motor_Init>:

void RE35_Motor_Init(RE35_Motor *obj, RE35_Run_Mode mode) {
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b084      	sub	sp, #16
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	460b      	mov	r3, r1
 800d0e0:	70fb      	strb	r3, [r7, #3]
	obj->cmd.mode = mode;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	78fa      	ldrb	r2, [r7, #3]
 800d0e6:	715a      	strb	r2, [r3, #5]
	// 发送复位指令
	obj->cmd.cmd_id = 0x000 | (obj->config.driver_id << 4);  // 复位指令（帧ID，由驱动器编号和功能序号决定）
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	785b      	ldrb	r3, [r3, #1]
 800d0ec:	011b      	lsls	r3, r3, #4
 800d0ee:	b2da      	uxtb	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	711a      	strb	r2, [r3, #4]
	for (uint8_t i = 0; i < 8; ++i)
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	73fb      	strb	r3, [r7, #15]
 800d0f8:	e007      	b.n	800d10a <RE35_Motor_Init+0x34>
		obj->cmd.tx_data[i] = 0x55;
 800d0fa:	7bfb      	ldrb	r3, [r7, #15]
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	4413      	add	r3, r2
 800d100:	2255      	movs	r2, #85	@ 0x55
 800d102:	719a      	strb	r2, [r3, #6]
	for (uint8_t i = 0; i < 8; ++i)
 800d104:	7bfb      	ldrb	r3, [r7, #15]
 800d106:	3301      	adds	r3, #1
 800d108:	73fb      	strb	r3, [r7, #15]
 800d10a:	7bfb      	ldrb	r3, [r7, #15]
 800d10c:	2b07      	cmp	r3, #7
 800d10e:	d9f4      	bls.n	800d0fa <RE35_Motor_Init+0x24>
	RE35_Motor_Send(obj);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f880 	bl	800d216 <RE35_Motor_Send>
	HAL_Delay(500);
 800d116:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d11a:	f7f4 fde7 	bl	8001cec <HAL_Delay>
	// 发送模式选择指令
	obj->cmd.cmd_id = 0x001 | (obj->config.driver_id << 4);   // 模式选择指令
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	785b      	ldrb	r3, [r3, #1]
 800d122:	011b      	lsls	r3, r3, #4
 800d124:	b25b      	sxtb	r3, r3
 800d126:	f043 0301 	orr.w	r3, r3, #1
 800d12a:	b25b      	sxtb	r3, r3
 800d12c:	b2da      	uxtb	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	711a      	strb	r2, [r3, #4]
	obj->cmd.tx_data[0] = mode;  // 选择mode对应模式
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	78fa      	ldrb	r2, [r7, #3]
 800d136:	719a      	strb	r2, [r3, #6]
	RE35_Motor_Send(obj);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f86c 	bl	800d216 <RE35_Motor_Send>
	HAL_Delay(500);
 800d13e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d142:	f7f4 fdd3 	bl	8001cec <HAL_Delay>
	// 发送配置指令
	obj->cmd.cmd_id = 0x00A | (obj->config.driver_id << 4);  // 配置指令
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	785b      	ldrb	r3, [r3, #1]
 800d14a:	011b      	lsls	r3, r3, #4
 800d14c:	b25b      	sxtb	r3, r3
 800d14e:	f043 030a 	orr.w	r3, r3, #10
 800d152:	b25b      	sxtb	r3, r3
 800d154:	b2da      	uxtb	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	711a      	strb	r2, [r3, #4]
	obj->cmd.tx_data[0] = 0x01;    // 以 1 毫秒为周期对外发送电流、速度、位置等信息
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2201      	movs	r2, #1
 800d15e:	719a      	strb	r2, [r3, #6]
	obj->cmd.tx_data[1] = obj->config.period;  // 以 period 毫秒为周期对外发送CTL1/CTL2的电平状态
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	78da      	ldrb	r2, [r3, #3]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	71da      	strb	r2, [r3, #7]
	RE35_Motor_Send(obj);
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f854 	bl	800d216 <RE35_Motor_Send>
	HAL_Delay(500);
 800d16e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d172:	f7f4 fdbb 	bl	8001cec <HAL_Delay>
}
 800d176:	bf00      	nop
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <RE35_Motor_RecvData_Process>:
		default:
			break;
	}
}

void RE35_Motor_RecvData_Process(RE35_Motor *obj, uint32_t recv_id, uint8_t *data) {
 800d17e:	b480      	push	{r7}
 800d180:	b087      	sub	sp, #28
 800d182:	af00      	add	r7, sp, #0
 800d184:	60f8      	str	r0, [r7, #12]
 800d186:	60b9      	str	r1, [r7, #8]
 800d188:	607a      	str	r2, [r7, #4]
	uint8_t temp_id = recv_id & 0x0f;
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	f003 030f 	and.w	r3, r3, #15
 800d192:	75fb      	strb	r3, [r7, #23]

	if (temp_id == 0x0b) {
 800d194:	7dfb      	ldrb	r3, [r7, #23]
 800d196:	2b0b      	cmp	r3, #11
 800d198:	d12d      	bne.n	800d1f6 <RE35_Motor_RecvData_Process+0x78>
		// 接收到电流、速度、位置等信息
		obj->now_current = (data[0] << 8) | data[1];
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	021b      	lsls	r3, r3, #8
 800d1a0:	b21a      	sxth	r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	b21b      	sxth	r3, r3
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	b21a      	sxth	r2, r3
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	821a      	strh	r2, [r3, #16]
		obj->now_speed = (data[2] << 8) | data[3];
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	3302      	adds	r3, #2
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	021b      	lsls	r3, r3, #8
 800d1ba:	b21a      	sxth	r2, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	3303      	adds	r3, #3
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	b21b      	sxth	r3, r3
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	b21a      	sxth	r2, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	825a      	strh	r2, [r3, #18]
		obj->now_angle = (data[4] << 24) | (data[5] << 16) | (data[6] << 8) | data[7];
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	3304      	adds	r3, #4
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	061a      	lsls	r2, r3, #24
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	3305      	adds	r3, #5
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	041b      	lsls	r3, r3, #16
 800d1dc:	431a      	orrs	r2, r3
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	3306      	adds	r3, #6
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	021b      	lsls	r3, r3, #8
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	3207      	adds	r2, #7
 800d1ec:	7812      	ldrb	r2, [r2, #0]
 800d1ee:	431a      	orrs	r2, r3
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	615a      	str	r2, [r3, #20]
	} else if (temp_id == 0x0c && data[0] == 0x01) {
		// 接收到驱动器CTL1/CTL2的电平状态(只有锚点座用到)
		obj->reset_flag = true;
	}
}
 800d1f4:	e009      	b.n	800d20a <RE35_Motor_RecvData_Process+0x8c>
	} else if (temp_id == 0x0c && data[0] == 0x01) {
 800d1f6:	7dfb      	ldrb	r3, [r7, #23]
 800d1f8:	2b0c      	cmp	r3, #12
 800d1fa:	d106      	bne.n	800d20a <RE35_Motor_RecvData_Process+0x8c>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	2b01      	cmp	r3, #1
 800d202:	d102      	bne.n	800d20a <RE35_Motor_RecvData_Process+0x8c>
		obj->reset_flag = true;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2201      	movs	r2, #1
 800d208:	73da      	strb	r2, [r3, #15]
}
 800d20a:	bf00      	nop
 800d20c:	371c      	adds	r7, #28
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr

0800d216 <RE35_Motor_Send>:

void RE35_Motor_Send(RE35_Motor *obj) {
 800d216:	b580      	push	{r7, lr}
 800d218:	b082      	sub	sp, #8
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
	CAN_Send_Msg(obj->config.can_ind, obj->cmd.cmd_id, obj->cmd.tx_data, sizeof(obj->cmd.tx_data));
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	7818      	ldrb	r0, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	7919      	ldrb	r1, [r3, #4]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	1d9a      	adds	r2, r3, #6
 800d22a:	2308      	movs	r3, #8
 800d22c:	f7ff fe80 	bl	800cf30 <CAN_Send_Msg>
}
 800d230:	bf00      	nop
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <A1_Motor_Create>:
#include <string.h>

#define A1_REDUCTION_RATIO 9.1f
#define WHEEL_R 0.1175  // 轮胎半径（m）

A1_Motor* A1_Motor_Create(A1_Config config) {
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
	A1_Motor *obj = (A1_Motor*) malloc(sizeof(A1_Motor));
 800d240:	20ac      	movs	r0, #172	@ 0xac
 800d242:	f000 fc49 	bl	800dad8 <malloc>
 800d246:	4603      	mov	r3, r0
 800d248:	60fb      	str	r3, [r7, #12]
	if (obj == NULL) {
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d101      	bne.n	800d254 <A1_Motor_Create+0x1c>
		// 如果内存分配失败，返回 NULL
		return NULL;
 800d250:	2300      	movs	r3, #0
 800d252:	e00d      	b.n	800d270 <A1_Motor_Create+0x38>
	}
	memset(obj, 0, sizeof(A1_Motor));
 800d254:	22ac      	movs	r2, #172	@ 0xac
 800d256:	2100      	movs	r1, #0
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f002 fb68 	bl	800f92e <memset>

	obj->config = config;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	1d3a      	adds	r2, r7, #4
 800d262:	6812      	ldr	r2, [r2, #0]
 800d264:	4611      	mov	r1, r2
 800d266:	8019      	strh	r1, [r3, #0]
 800d268:	3302      	adds	r3, #2
 800d26a:	0c12      	lsrs	r2, r2, #16
 800d26c:	701a      	strb	r2, [r3, #0]

	return obj;
 800d26e:	68fb      	ldr	r3, [r7, #12]
}
 800d270:	4618      	mov	r0, r3
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <A1_Extract_Data>:
	memcpy(tx_buf, &(obj->motor_cmd.motor_send_data), sizeof(tx_buf));

	RS485_Send_DMA(obj->config.rs485_ind, tx_buf, sizeof(tx_buf));
}

bool A1_Extract_Data(A1Data *motor_r, uint8_t *data) {
 800d278:	b590      	push	{r4, r7, lr}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
	memcpy(&(motor_r->motor_recv_data), data, sizeof(ServoComdDataV3));
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	3315      	adds	r3, #21
 800d286:	224e      	movs	r2, #78	@ 0x4e
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	4618      	mov	r0, r3
 800d28c:	f002 fbf1 	bl	800fa72 <memcpy>

	motor_r->id = motor_r->motor_recv_data.head.motorID;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	7ddb      	ldrb	r3, [r3, #23]
 800d294:	461a      	mov	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	801a      	strh	r2, [r3, #0]
	motor_r->mode = motor_r->motor_recv_data.Mdata.mode;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	7e5a      	ldrb	r2, [r3, #25]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	709a      	strb	r2, [r3, #2]
	motor_r->T = motor_r->motor_recv_data.Mdata.T / 256.0f;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f9b3 3021 	ldrsh.w	r3, [r3, #33]	@ 0x21
 800d2a8:	b21b      	sxth	r3, r3
 800d2aa:	ee07 3a90 	vmov	s15, r3
 800d2ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d2b2:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d390 <A1_Extract_Data+0x118>
 800d2b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	edc3 7a01 	vstr	s15, [r3, #4]
	motor_r->W = motor_r->motor_recv_data.Mdata.W / 128.0f;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f9b3 3023 	ldrsh.w	r3, [r3, #35]	@ 0x23
 800d2c6:	b21b      	sxth	r3, r3
 800d2c8:	ee07 3a90 	vmov	s15, r3
 800d2cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d2d0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800d394 <A1_Extract_Data+0x11c>
 800d2d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	edc3 7a02 	vstr	s15, [r3, #8]
	motor_r->LW = motor_r->motor_recv_data.Mdata.LW;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 3025 	ldr.w	r3, [r3, #37]	@ 0x25
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	60d3      	str	r3, [r2, #12]
	motor_r->Pos = motor_r->motor_recv_data.Mdata.Pos * 2 * M_PI / 16384;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 3033 	ldr.w	r3, [r3, #51]	@ 0x33
 800d2ee:	005b      	lsls	r3, r3, #1
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7f3 f937 	bl	8000564 <__aeabi_i2d>
 800d2f6:	a324      	add	r3, pc, #144	@ (adr r3, 800d388 <A1_Extract_Data+0x110>)
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	f7f3 f99c 	bl	8000638 <__aeabi_dmul>
 800d300:	4602      	mov	r2, r0
 800d302:	460b      	mov	r3, r1
 800d304:	4610      	mov	r0, r2
 800d306:	4619      	mov	r1, r3
 800d308:	f04f 0200 	mov.w	r2, #0
 800d30c:	4b22      	ldr	r3, [pc, #136]	@ (800d398 <A1_Extract_Data+0x120>)
 800d30e:	f7f3 fabd 	bl	800088c <__aeabi_ddiv>
 800d312:	4602      	mov	r2, r0
 800d314:	460b      	mov	r3, r1
 800d316:	4610      	mov	r0, r2
 800d318:	4619      	mov	r1, r3
 800d31a:	f7f3 fc85 	bl	8000c28 <__aeabi_d2f>
 800d31e:	4602      	mov	r2, r0
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	611a      	str	r2, [r3, #16]

	// CRC data
	motor_r->motor_recv_data.CRCdata.u32 = data[74] | ((uint32_t) data[75] << 8) | ((uint32_t) data[76] << 16)
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	334a      	adds	r3, #74	@ 0x4a
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	461a      	mov	r2, r3
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	334b      	adds	r3, #75	@ 0x4b
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	021b      	lsls	r3, r3, #8
 800d334:	431a      	orrs	r2, r3
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	334c      	adds	r3, #76	@ 0x4c
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	041b      	lsls	r3, r3, #16
 800d33e:	431a      	orrs	r2, r3
	        | ((uint32_t) data[77] << 24);
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	334d      	adds	r3, #77	@ 0x4d
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	061b      	lsls	r3, r3, #24
 800d348:	431a      	orrs	r2, r3
	motor_r->motor_recv_data.CRCdata.u32 = data[74] | ((uint32_t) data[75] << 8) | ((uint32_t) data[76] << 16)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8c3 205f 	str.w	r2, [r3, #95]	@ 0x5f

	if (motor_r->motor_recv_data.CRCdata.u32 == crc32_core((uint32_t*) data, 18))
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 405f 	ldr.w	r4, [r3, #95]	@ 0x5f
 800d356:	2112      	movs	r1, #18
 800d358:	6838      	ldr	r0, [r7, #0]
 800d35a:	f000 f859 	bl	800d410 <crc32_core>
 800d35e:	4603      	mov	r3, r0
 800d360:	429c      	cmp	r4, r3
 800d362:	d105      	bne.n	800d370 <A1_Extract_Data+0xf8>
		return motor_r->correct = true;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	751a      	strb	r2, [r3, #20]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	7d1b      	ldrb	r3, [r3, #20]
 800d36e:	e004      	b.n	800d37a <A1_Extract_Data+0x102>
	else
		return motor_r->correct = false;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	751a      	strb	r2, [r3, #20]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	7d1b      	ldrb	r3, [r3, #20]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	370c      	adds	r7, #12
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd90      	pop	{r4, r7, pc}
 800d382:	bf00      	nop
 800d384:	f3af 8000 	nop.w
 800d388:	54442d18 	.word	0x54442d18
 800d38c:	400921fb 	.word	0x400921fb
 800d390:	43800000 	.word	0x43800000
 800d394:	43000000 	.word	0x43000000
 800d398:	40d00000 	.word	0x40d00000

0800d39c <A1_Motor_RecvData_Process>:
void A1_Get_Recv_Data(A1Data *motor_r, uint8_t *buf) {
	memcpy(buf, &(motor_r->motor_recv_data), sizeof(ServoComdDataV3));
}

char str[30];
void A1_Motor_RecvData_Process(A1_Motor *obj, uint8_t *data, uint8_t len) {
 800d39c:	b5b0      	push	{r4, r5, r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af02      	add	r7, sp, #8
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	71fb      	strb	r3, [r7, #7]
	A1_Extract_Data(&(obj->motor_data), data);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	3304      	adds	r3, #4
 800d3ae:	68b9      	ldr	r1, [r7, #8]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7ff ff61 	bl	800d278 <A1_Extract_Data>

	// 将浮点数转换为字符串
	sprintf(str, "%.2f %.2f\n", obj->motor_data.LW, obj->motor_data.Pos);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	691b      	ldr	r3, [r3, #16]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7f3 f8e4 	bl	8000588 <__aeabi_f2d>
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	460d      	mov	r5, r1
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	695b      	ldr	r3, [r3, #20]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7f3 f8dd 	bl	8000588 <__aeabi_f2d>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	e9cd 2300 	strd	r2, r3, [sp]
 800d3d6:	4622      	mov	r2, r4
 800d3d8:	462b      	mov	r3, r5
 800d3da:	490b      	ldr	r1, [pc, #44]	@ (800d408 <A1_Motor_RecvData_Process+0x6c>)
 800d3dc:	480b      	ldr	r0, [pc, #44]	@ (800d40c <A1_Motor_RecvData_Process+0x70>)
 800d3de:	f002 fa43 	bl	800f868 <siprintf>
	if (CDC_Transmit_FS((uint8_t*) str, strlen(str)) != USBD_OK) {
 800d3e2:	480a      	ldr	r0, [pc, #40]	@ (800d40c <A1_Motor_RecvData_Process+0x70>)
 800d3e4:	f7f2 ff64 	bl	80002b0 <strlen>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	4807      	ldr	r0, [pc, #28]	@ (800d40c <A1_Motor_RecvData_Process+0x70>)
 800d3f0:	f7fe feb2 	bl	800c158 <CDC_Transmit_FS>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d001      	beq.n	800d3fe <A1_Motor_RecvData_Process+0x62>
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		Error_Handler();
 800d3fa:	f7f4 f858 	bl	80014ae <Error_Handler>
	}
}
 800d3fe:	bf00      	nop
 800d400:	3710      	adds	r7, #16
 800d402:	46bd      	mov	sp, r7
 800d404:	bdb0      	pop	{r4, r5, r7, pc}
 800d406:	bf00      	nop
 800d408:	08012214 	.word	0x08012214
 800d40c:	200024f4 	.word	0x200024f4

0800d410 <crc32_core>:

float A1_Convert_Vel(float vel) {
	return vel / WHEEL_R;  //   m/s转换为rad/s
}

uint32_t crc32_core(uint32_t *ptr, uint32_t len) {
 800d410:	b480      	push	{r7}
 800d412:	b089      	sub	sp, #36	@ 0x24
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
	uint32_t xbit = 0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	61fb      	str	r3, [r7, #28]
	uint32_t data = 0;
 800d41e:	2300      	movs	r3, #0
 800d420:	60fb      	str	r3, [r7, #12]
	uint32_t CRC32 = 0xFFFFFFFF;
 800d422:	f04f 33ff 	mov.w	r3, #4294967295
 800d426:	61bb      	str	r3, [r7, #24]
	const uint32_t dwPolynomial = 0x04c11db7;
 800d428:	4b1f      	ldr	r3, [pc, #124]	@ (800d4a8 <crc32_core+0x98>)
 800d42a:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < len; i++) {
 800d42c:	2300      	movs	r3, #0
 800d42e:	617b      	str	r3, [r7, #20]
 800d430:	e02e      	b.n	800d490 <crc32_core+0x80>
		xbit = 1 << 31;
 800d432:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d436:	61fb      	str	r3, [r7, #28]
		data = ptr[i];
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	4413      	add	r3, r2
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	60fb      	str	r3, [r7, #12]
		for (uint32_t bits = 0; bits < 32; bits++) {
 800d444:	2300      	movs	r3, #0
 800d446:	613b      	str	r3, [r7, #16]
 800d448:	e01c      	b.n	800d484 <crc32_core+0x74>
			if (CRC32 & 0x80000000) {
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	da07      	bge.n	800d460 <crc32_core+0x50>
				CRC32 <<= 1;
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	005b      	lsls	r3, r3, #1
 800d454:	61bb      	str	r3, [r7, #24]
				CRC32 ^= dwPolynomial;
 800d456:	69ba      	ldr	r2, [r7, #24]
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	4053      	eors	r3, r2
 800d45c:	61bb      	str	r3, [r7, #24]
 800d45e:	e002      	b.n	800d466 <crc32_core+0x56>
			} else
				CRC32 <<= 1;
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	005b      	lsls	r3, r3, #1
 800d464:	61bb      	str	r3, [r7, #24]
			if (data & xbit)
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	4013      	ands	r3, r2
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d003      	beq.n	800d478 <crc32_core+0x68>
				CRC32 ^= dwPolynomial;
 800d470:	69ba      	ldr	r2, [r7, #24]
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	4053      	eors	r3, r2
 800d476:	61bb      	str	r3, [r7, #24]
			xbit >>= 1;
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	085b      	lsrs	r3, r3, #1
 800d47c:	61fb      	str	r3, [r7, #28]
		for (uint32_t bits = 0; bits < 32; bits++) {
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	3301      	adds	r3, #1
 800d482:	613b      	str	r3, [r7, #16]
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	2b1f      	cmp	r3, #31
 800d488:	d9df      	bls.n	800d44a <crc32_core+0x3a>
	for (uint32_t i = 0; i < len; i++) {
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	3301      	adds	r3, #1
 800d48e:	617b      	str	r3, [r7, #20]
 800d490:	697a      	ldr	r2, [r7, #20]
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	429a      	cmp	r2, r3
 800d496:	d3cc      	bcc.n	800d432 <crc32_core+0x22>
		}
	}
	return CRC32;
 800d498:	69bb      	ldr	r3, [r7, #24]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3724      	adds	r7, #36	@ 0x24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	04c11db7 	.word	0x04c11db7

0800d4ac <GO_Motor_Create>:
#include "bsp.h"
#include "usbd_cdc_if.h"

#define GO_REDUCTION_RATIO 6.33f

GO_Motor* GO_Motor_Create(GO_Config config) {
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
	GO_Motor *obj = (GO_Motor*) malloc(sizeof(GO_Motor));
 800d4b4:	2050      	movs	r0, #80	@ 0x50
 800d4b6:	f000 fb0f 	bl	800dad8 <malloc>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	60fb      	str	r3, [r7, #12]
	if (obj == NULL) {
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d101      	bne.n	800d4c8 <GO_Motor_Create+0x1c>
		// 如果内存分配失败，返回 NULL
		return NULL;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	e017      	b.n	800d4f8 <GO_Motor_Create+0x4c>
	}
	memset(obj, 0, sizeof(GO_Motor));
 800d4c8:	2250      	movs	r2, #80	@ 0x50
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f002 fa2e 	bl	800f92e <memset>

	obj->config = config;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	1d3a      	adds	r2, r7, #4
 800d4d6:	6812      	ldr	r2, [r2, #0]
 800d4d8:	4611      	mov	r1, r2
 800d4da:	8019      	strh	r1, [r3, #0]
 800d4dc:	3302      	adds	r3, #2
 800d4de:	0c12      	lsrs	r2, r2, #16
 800d4e0:	701a      	strb	r2, [r3, #0]
	GO_Motor_SetCmd(obj, GO_MODE_POS, 0, 0, 0);
 800d4e2:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 800d500 <GO_Motor_Create+0x54>
 800d4e6:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800d500 <GO_Motor_Create+0x54>
 800d4ea:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 800d500 <GO_Motor_Create+0x54>
 800d4ee:	2103      	movs	r1, #3
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f000 f807 	bl	800d504 <GO_Motor_SetCmd>

	return obj;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3710      	adds	r7, #16
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	00000000 	.word	0x00000000

0800d504 <GO_Motor_SetCmd>:

void GO_Motor_SetCmd(GO_Motor *obj, GO_Ctrl_Mode mode, float T, float W, float Pos) {
 800d504:	b480      	push	{r7}
 800d506:	b087      	sub	sp, #28
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6178      	str	r0, [r7, #20]
 800d50c:	460b      	mov	r3, r1
 800d50e:	ed87 0a03 	vstr	s0, [r7, #12]
 800d512:	edc7 0a02 	vstr	s1, [r7, #8]
 800d516:	ed87 1a01 	vstr	s2, [r7, #4]
 800d51a:	74fb      	strb	r3, [r7, #19]
	obj->motor_cmd.id = obj->config.id;
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	785b      	ldrb	r3, [r3, #1]
 800d520:	461a      	mov	r2, r3
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	845a      	strh	r2, [r3, #34]	@ 0x22
	switch (mode) {
 800d526:	7cfb      	ldrb	r3, [r7, #19]
 800d528:	2b04      	cmp	r3, #4
 800d52a:	f200 80dd 	bhi.w	800d6e8 <GO_Motor_SetCmd+0x1e4>
 800d52e:	a201      	add	r2, pc, #4	@ (adr r2, 800d534 <GO_Motor_SetCmd+0x30>)
 800d530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d534:	0800d549 	.word	0x0800d549
 800d538:	0800d583 	.word	0x0800d583
 800d53c:	0800d5bb 	.word	0x0800d5bb
 800d540:	0800d611 	.word	0x0800d611
 800d544:	0800d66f 	.word	0x0800d66f
		case GO_MODE_STOP:
			obj->motor_cmd.mode = BRAKE;
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	2200      	movs	r2, #0
 800d54c:	849a      	strh	r2, [r3, #36]	@ 0x24
			obj->motor_cmd.K_P = 0;
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	f04f 0200 	mov.w	r2, #0
 800d554:	f8c3 2032 	str.w	r2, [r3, #50]	@ 0x32
			obj->motor_cmd.K_W = 0;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	f04f 0200 	mov.w	r2, #0
 800d55e:	f8c3 2036 	str.w	r2, [r3, #54]	@ 0x36
			obj->motor_cmd.T = 0;
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	f04f 0200 	mov.w	r2, #0
 800d568:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
			obj->motor_cmd.W = 0;
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	f04f 0200 	mov.w	r2, #0
 800d572:	f8c3 202a 	str.w	r2, [r3, #42]	@ 0x2a
			obj->motor_cmd.Pos = 0;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f04f 0200 	mov.w	r2, #0
 800d57c:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
			break;
 800d580:	e0b3      	b.n	800d6ea <GO_Motor_SetCmd+0x1e6>
		case GO_MODE_T:
			obj->motor_cmd.mode = FOC;
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	2201      	movs	r2, #1
 800d586:	849a      	strh	r2, [r3, #36]	@ 0x24
			obj->motor_cmd.K_P = 0;
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	f04f 0200 	mov.w	r2, #0
 800d58e:	f8c3 2032 	str.w	r2, [r3, #50]	@ 0x32
			obj->motor_cmd.K_W = 0;
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	f04f 0200 	mov.w	r2, #0
 800d598:	f8c3 2036 	str.w	r2, [r3, #54]	@ 0x36
			obj->motor_cmd.T = T;
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
			obj->motor_cmd.W = 0;
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	f04f 0200 	mov.w	r2, #0
 800d5aa:	f8c3 202a 	str.w	r2, [r3, #42]	@ 0x2a
			obj->motor_cmd.Pos = 0;
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	f04f 0200 	mov.w	r2, #0
 800d5b4:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
			break;
 800d5b8:	e097      	b.n	800d6ea <GO_Motor_SetCmd+0x1e6>
		case GO_MODE_W:
			obj->motor_cmd.mode = FOC;
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	849a      	strh	r2, [r3, #36]	@ 0x24
			obj->motor_cmd.K_P = 0;
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f04f 0200 	mov.w	r2, #0
 800d5c6:	f8c3 2032 	str.w	r2, [r3, #50]	@ 0x32
			obj->motor_cmd.K_W = 0.02;
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	4a4a      	ldr	r2, [pc, #296]	@ (800d6f8 <GO_Motor_SetCmd+0x1f4>)
 800d5ce:	f8c3 2036 	str.w	r2, [r3, #54]	@ 0x36
			obj->motor_cmd.T = 0;
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	f04f 0200 	mov.w	r2, #0
 800d5d8:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
			obj->motor_cmd.W = W * GO_REDUCTION_RATIO * obj->config.dir;
 800d5dc:	edd7 7a02 	vldr	s15, [r7, #8]
 800d5e0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800d6fc <GO_Motor_SetCmd+0x1f8>
 800d5e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d5ee:	ee07 3a90 	vmov	s15, r3
 800d5f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	ee17 2a90 	vmov	r2, s15
 800d600:	f8c3 202a 	str.w	r2, [r3, #42]	@ 0x2a
			obj->motor_cmd.Pos = 0;
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	f04f 0200 	mov.w	r2, #0
 800d60a:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
			break;
 800d60e:	e06c      	b.n	800d6ea <GO_Motor_SetCmd+0x1e6>
		case GO_MODE_POS:
			obj->motor_cmd.mode = FOC;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	2201      	movs	r2, #1
 800d614:	849a      	strh	r2, [r3, #36]	@ 0x24
			obj->motor_cmd.K_P = 0.6;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	4a39      	ldr	r2, [pc, #228]	@ (800d700 <GO_Motor_SetCmd+0x1fc>)
 800d61a:	f8c3 2032 	str.w	r2, [r3, #50]	@ 0x32
			obj->motor_cmd.K_W = 0.1;
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	4a38      	ldr	r2, [pc, #224]	@ (800d704 <GO_Motor_SetCmd+0x200>)
 800d622:	f8c3 2036 	str.w	r2, [r3, #54]	@ 0x36
			obj->motor_cmd.T = 0;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	f04f 0200 	mov.w	r2, #0
 800d62c:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
			obj->motor_cmd.W = 0;
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	f04f 0200 	mov.w	r2, #0
 800d636:	f8c3 202a 	str.w	r2, [r3, #42]	@ 0x2a
			obj->motor_cmd.Pos = obj->zero_pos + Pos * GO_REDUCTION_RATIO * obj->config.dir;
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800d640:	edd7 7a01 	vldr	s15, [r7, #4]
 800d644:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 800d6fc <GO_Motor_SetCmd+0x1f8>
 800d648:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d652:	ee07 3a90 	vmov	s15, r3
 800d656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d65a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d65e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	ee17 2a90 	vmov	r2, s15
 800d668:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
			break;
 800d66c:	e03d      	b.n	800d6ea <GO_Motor_SetCmd+0x1e6>
		case GO_MODE_HB:
			obj->motor_cmd.mode = FOC;
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	2201      	movs	r2, #1
 800d672:	849a      	strh	r2, [r3, #36]	@ 0x24
			obj->motor_cmd.K_P = 1.5;
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800d67a:	f8c3 2032 	str.w	r2, [r3, #50]	@ 0x32
			obj->motor_cmd.K_W = 0.05;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	4a21      	ldr	r2, [pc, #132]	@ (800d708 <GO_Motor_SetCmd+0x204>)
 800d682:	f8c3 2036 	str.w	r2, [r3, #54]	@ 0x36
			obj->motor_cmd.T = T;
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
			obj->motor_cmd.W = W * GO_REDUCTION_RATIO * obj->config.dir;
 800d68e:	edd7 7a02 	vldr	s15, [r7, #8]
 800d692:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800d6fc <GO_Motor_SetCmd+0x1f8>
 800d696:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d6a0:	ee07 3a90 	vmov	s15, r3
 800d6a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	ee17 2a90 	vmov	r2, s15
 800d6b2:	f8c3 202a 	str.w	r2, [r3, #42]	@ 0x2a
			obj->motor_cmd.Pos = obj->zero_pos + Pos * GO_REDUCTION_RATIO * obj->config.dir;
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800d6bc:	edd7 7a01 	vldr	s15, [r7, #4]
 800d6c0:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d6fc <GO_Motor_SetCmd+0x1f8>
 800d6c4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d6ce:	ee07 3a90 	vmov	s15, r3
 800d6d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	ee17 2a90 	vmov	r2, s15
 800d6e4:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
		default:
			break;
 800d6e8:	bf00      	nop
	}
}
 800d6ea:	bf00      	nop
 800d6ec:	371c      	adds	r7, #28
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	3ca3d70a 	.word	0x3ca3d70a
 800d6fc:	40ca8f5c 	.word	0x40ca8f5c
 800d700:	3f19999a 	.word	0x3f19999a
 800d704:	3dcccccd 	.word	0x3dcccccd
 800d708:	3d4ccccd 	.word	0x3d4ccccd
 800d70c:	00000000 	.word	0x00000000

0800d710 <GO_Modify_Data>:

void GO_Modify_Data(GOCmd *motor_s) {
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
	// Header
	motor_s->motor_send_data.head[0] = 0XFE;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	22fe      	movs	r2, #254	@ 0xfe
 800d71c:	761a      	strb	r2, [r3, #24]
	motor_s->motor_send_data.head[1] = 0xEE;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	22ee      	movs	r2, #238	@ 0xee
 800d722:	765a      	strb	r2, [r3, #25]
	// Mode
	motor_s->motor_send_data.mode.id = motor_s->id;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	b29b      	uxth	r3, r3
 800d72a:	f003 030f 	and.w	r3, r3, #15
 800d72e:	b2d9      	uxtb	r1, r3
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	7e93      	ldrb	r3, [r2, #26]
 800d734:	f361 0303 	bfi	r3, r1, #0, #4
 800d738:	7693      	strb	r3, [r2, #26]
	motor_s->motor_send_data.mode.status = motor_s->mode;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	885b      	ldrh	r3, [r3, #2]
 800d73e:	b29b      	uxth	r3, r3
 800d740:	f003 0307 	and.w	r3, r3, #7
 800d744:	b2d9      	uxtb	r1, r3
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	7e93      	ldrb	r3, [r2, #26]
 800d74a:	f361 1306 	bfi	r3, r1, #4, #3
 800d74e:	7693      	strb	r3, [r2, #26]
	motor_s->motor_send_data.mode.none = 0;
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	7e93      	ldrb	r3, [r2, #26]
 800d754:	f36f 13c7 	bfc	r3, #7, #1
 800d758:	7693      	strb	r3, [r2, #26]
	// Command
	motor_s->motor_send_data.comd.tor_des = (int16_t) (motor_s->T * 256);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 800d850 <GO_Modify_Data+0x140>
 800d762:	ee07 3a10 	vmov	s14, r3
 800d766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d76a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d76e:	ee17 3a90 	vmov	r3, s15
 800d772:	b21a      	sxth	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8a3 201b 	strh.w	r2, [r3, #27]
	motor_s->motor_send_data.comd.spd_des = (int16_t) (motor_s->W * 128 / M_PI);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	eddf 7a35 	vldr	s15, [pc, #212]	@ 800d854 <GO_Modify_Data+0x144>
 800d782:	ee07 3a10 	vmov	s14, r3
 800d786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d78a:	ee17 0a90 	vmov	r0, s15
 800d78e:	f7f2 fefb 	bl	8000588 <__aeabi_f2d>
 800d792:	a32d      	add	r3, pc, #180	@ (adr r3, 800d848 <GO_Modify_Data+0x138>)
 800d794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d798:	f7f3 f878 	bl	800088c <__aeabi_ddiv>
 800d79c:	4602      	mov	r2, r0
 800d79e:	460b      	mov	r3, r1
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	f7f3 f9f8 	bl	8000b98 <__aeabi_d2iz>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	b21a      	sxth	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8a3 201d 	strh.w	r2, [r3, #29]
	motor_s->motor_send_data.comd.pos_des = (int32_t) (motor_s->Pos * 16384 / M_PI);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	eddf 7a28 	vldr	s15, [pc, #160]	@ 800d858 <GO_Modify_Data+0x148>
 800d7ba:	ee07 3a10 	vmov	s14, r3
 800d7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7c2:	ee17 0a90 	vmov	r0, s15
 800d7c6:	f7f2 fedf 	bl	8000588 <__aeabi_f2d>
 800d7ca:	a31f      	add	r3, pc, #124	@ (adr r3, 800d848 <GO_Modify_Data+0x138>)
 800d7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d0:	f7f3 f85c 	bl	800088c <__aeabi_ddiv>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	4610      	mov	r0, r2
 800d7da:	4619      	mov	r1, r3
 800d7dc:	f7f3 f9dc 	bl	8000b98 <__aeabi_d2iz>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8c3 201f 	str.w	r2, [r3, #31]
	motor_s->motor_send_data.comd.k_pos = (uint16_t) (motor_s->K_P * 1280);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	691b      	ldr	r3, [r3, #16]
 800d7ec:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800d85c <GO_Modify_Data+0x14c>
 800d7f0:	ee07 3a10 	vmov	s14, r3
 800d7f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7fc:	ee17 3a90 	vmov	r3, s15
 800d800:	b29a      	uxth	r2, r3
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8a3 2023 	strh.w	r2, [r3, #35]	@ 0x23
	motor_s->motor_send_data.comd.k_spd = (uint16_t) (motor_s->K_W * 1280);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	695b      	ldr	r3, [r3, #20]
 800d80c:	eddf 7a13 	vldr	s15, [pc, #76]	@ 800d85c <GO_Modify_Data+0x14c>
 800d810:	ee07 3a10 	vmov	s14, r3
 800d814:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d81c:	ee17 3a90 	vmov	r3, s15
 800d820:	b29a      	uxth	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8a3 2025 	strh.w	r2, [r3, #37]	@ 0x25
	// CRC Data
	motor_s->motor_send_data.CRC16 = crc_ccitt(0, (uint8_t*) &motor_s->motor_send_data, 15);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	3318      	adds	r3, #24
 800d82c:	220f      	movs	r2, #15
 800d82e:	4619      	mov	r1, r3
 800d830:	2000      	movs	r0, #0
 800d832:	f000 f933 	bl	800da9c <crc_ccitt>
 800d836:	4603      	mov	r3, r0
 800d838:	461a      	mov	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8a3 2027 	strh.w	r2, [r3, #39]	@ 0x27
}
 800d840:	bf00      	nop
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	54442d18 	.word	0x54442d18
 800d84c:	400921fb 	.word	0x400921fb
 800d850:	43800000 	.word	0x43800000
 800d854:	43000000 	.word	0x43000000
 800d858:	46800000 	.word	0x46800000
 800d85c:	44a00000 	.word	0x44a00000

0800d860 <GO_Motor_Send>:

void GO_Get_Send_Data(GOCmd *motor_s, uint8_t *buf) {
	memcpy(buf, &(motor_s->motor_send_data), sizeof(ControlData_t));
}

void GO_Motor_Send(GO_Motor *obj) {
 800d860:	b5b0      	push	{r4, r5, r7, lr}
 800d862:	b088      	sub	sp, #32
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
	GO_Modify_Data(&(obj->motor_cmd));
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	3322      	adds	r3, #34	@ 0x22
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7ff ff4f 	bl	800d710 <GO_Modify_Data>

	uint8_t tx_buf[17];
	memcpy(tx_buf, &obj->motor_cmd.motor_send_data, sizeof(tx_buf));
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	333a      	adds	r3, #58	@ 0x3a
 800d876:	f107 040c 	add.w	r4, r7, #12
 800d87a:	461d      	mov	r5, r3
 800d87c:	6828      	ldr	r0, [r5, #0]
 800d87e:	6869      	ldr	r1, [r5, #4]
 800d880:	68aa      	ldr	r2, [r5, #8]
 800d882:	68eb      	ldr	r3, [r5, #12]
 800d884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d886:	7c2b      	ldrb	r3, [r5, #16]
 800d888:	7023      	strb	r3, [r4, #0]

	RS485_Send_DMA(obj->config.rs485_ind, tx_buf, sizeof(tx_buf));
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	f107 010c 	add.w	r1, r7, #12
 800d892:	2211      	movs	r2, #17
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff fa67 	bl	800cd68 <RS485_Send_DMA>
}
 800d89a:	bf00      	nop
 800d89c:	3720      	adds	r7, #32
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bdb0      	pop	{r4, r5, r7, pc}
 800d8a2:	0000      	movs	r0, r0
 800d8a4:	0000      	movs	r0, r0
	...

0800d8a8 <GO_Extract_Data>:

bool GO_Extract_Data(GOData *motor_r, uint8_t *data) {
 800d8a8:	b590      	push	{r4, r7, lr}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
//	uint16_t combined = (uint16_t) data[13] | ((uint16_t) data[14] << 8);
//	motor_r->motor_recv_data.fbk.MError = combined & 0x07;	// 取最低的3位
//	motor_r->motor_recv_data.fbk.force = (combined >> 3) & 0xFFF; // 取接下来的12位
//	motor_r->motor_recv_data.fbk.none = (combined >> 15) & 0x01; // 取最高的1位

	memcpy(&(motor_r->motor_recv_data), data, sizeof(MotorData_t));
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	330f      	adds	r3, #15
 800d8b6:	2210      	movs	r2, #16
 800d8b8:	6839      	ldr	r1, [r7, #0]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f002 f8d9 	bl	800fa72 <memcpy>

	motor_r->id = motor_r->motor_recv_data.mode.id;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	7c5b      	ldrb	r3, [r3, #17]
 800d8c4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	705a      	strb	r2, [r3, #1]
	motor_r->mode = motor_r->motor_recv_data.mode.status;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	7c5b      	ldrb	r3, [r3, #17]
 800d8d4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	461a      	mov	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	709a      	strb	r2, [r3, #2]
	motor_r->T = motor_r->motor_recv_data.fbk.torque / 256.0f;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d8e6:	b21b      	sxth	r3, r3
 800d8e8:	ee07 3a90 	vmov	s15, r3
 800d8ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8f0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800d9e0 <GO_Extract_Data+0x138>
 800d8f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	3303      	adds	r3, #3
 800d8fc:	ee16 2a90 	vmov	r2, s13
 800d900:	601a      	str	r2, [r3, #0]
	motor_r->W = motor_r->motor_recv_data.fbk.speed * M_PI / 128;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d908:	b21b      	sxth	r3, r3
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7f2 fe2a 	bl	8000564 <__aeabi_i2d>
 800d910:	a331      	add	r3, pc, #196	@ (adr r3, 800d9d8 <GO_Extract_Data+0x130>)
 800d912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d916:	f7f2 fe8f 	bl	8000638 <__aeabi_dmul>
 800d91a:	4602      	mov	r2, r0
 800d91c:	460b      	mov	r3, r1
 800d91e:	4610      	mov	r0, r2
 800d920:	4619      	mov	r1, r3
 800d922:	f04f 0200 	mov.w	r2, #0
 800d926:	4b2f      	ldr	r3, [pc, #188]	@ (800d9e4 <GO_Extract_Data+0x13c>)
 800d928:	f7f2 ffb0 	bl	800088c <__aeabi_ddiv>
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	4610      	mov	r0, r2
 800d932:	4619      	mov	r1, r3
 800d934:	f7f3 f978 	bl	8000c28 <__aeabi_d2f>
 800d938:	4602      	mov	r2, r0
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	3307      	adds	r3, #7
 800d93e:	601a      	str	r2, [r3, #0]
	motor_r->Pos = motor_r->motor_recv_data.fbk.pos * M_PI / 16384;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 3016 	ldr.w	r3, [r3, #22]
 800d946:	4618      	mov	r0, r3
 800d948:	f7f2 fe0c 	bl	8000564 <__aeabi_i2d>
 800d94c:	a322      	add	r3, pc, #136	@ (adr r3, 800d9d8 <GO_Extract_Data+0x130>)
 800d94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d952:	f7f2 fe71 	bl	8000638 <__aeabi_dmul>
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	4610      	mov	r0, r2
 800d95c:	4619      	mov	r1, r3
 800d95e:	f04f 0200 	mov.w	r2, #0
 800d962:	4b21      	ldr	r3, [pc, #132]	@ (800d9e8 <GO_Extract_Data+0x140>)
 800d964:	f7f2 ff92 	bl	800088c <__aeabi_ddiv>
 800d968:	4602      	mov	r2, r0
 800d96a:	460b      	mov	r3, r1
 800d96c:	4610      	mov	r0, r2
 800d96e:	4619      	mov	r1, r3
 800d970:	f7f3 f95a 	bl	8000c28 <__aeabi_d2f>
 800d974:	4602      	mov	r2, r0
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	330b      	adds	r3, #11
 800d97a:	601a      	str	r2, [r3, #0]

	// CRC data
	motor_r->motor_recv_data.CRC16 = (uint16_t) data[15] | ((uint16_t) data[16] << 8);
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	330f      	adds	r3, #15
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	b21a      	sxth	r2, r3
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	3310      	adds	r3, #16
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	021b      	lsls	r3, r3, #8
 800d98c:	b21b      	sxth	r3, r3
 800d98e:	4313      	orrs	r3, r2
 800d990:	b21b      	sxth	r3, r3
 800d992:	b29a      	uxth	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8a3 201d 	strh.w	r2, [r3, #29]
	if (motor_r->motor_recv_data.CRC16 == crc_ccitt(0, (uint8_t*) &motor_r->motor_recv_data, 14))
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8b3 301d 	ldrh.w	r3, [r3, #29]
 800d9a0:	b29c      	uxth	r4, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	330f      	adds	r3, #15
 800d9a6:	220e      	movs	r2, #14
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	2000      	movs	r0, #0
 800d9ac:	f000 f876 	bl	800da9c <crc_ccitt>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	429c      	cmp	r4, r3
 800d9b4:	d105      	bne.n	800d9c2 <GO_Extract_Data+0x11a>
		return motor_r->correct = true;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	701a      	strb	r2, [r3, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	e004      	b.n	800d9cc <GO_Extract_Data+0x124>
	else
		return motor_r->correct = false;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	701a      	strb	r2, [r3, #0]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	781b      	ldrb	r3, [r3, #0]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd90      	pop	{r4, r7, pc}
 800d9d4:	f3af 8000 	nop.w
 800d9d8:	54442d18 	.word	0x54442d18
 800d9dc:	400921fb 	.word	0x400921fb
 800d9e0:	43800000 	.word	0x43800000
 800d9e4:	40600000 	.word	0x40600000
 800d9e8:	40d00000 	.word	0x40d00000

0800d9ec <GO_Motor_RecvData_Process>:
void GO_Get_Recv_Data(GOData *motor_r, uint8_t *buf) {
	memcpy(buf, &(motor_r->motor_recv_data), sizeof(MotorData_t));
}

char sss[30];
void GO_Motor_RecvData_Process(GO_Motor *obj, uint8_t *data, uint8_t len) {
 800d9ec:	b5b0      	push	{r4, r5, r7, lr}
 800d9ee:	b086      	sub	sp, #24
 800d9f0:	af02      	add	r7, sp, #8
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	71fb      	strb	r3, [r7, #7]
	GO_Extract_Data(&(obj->motor_data), data);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	3303      	adds	r3, #3
 800d9fe:	68b9      	ldr	r1, [r7, #8]
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff ff51 	bl	800d8a8 <GO_Extract_Data>

	sprintf(sss, "%.2f %.2f\n", obj->motor_data.W, obj->motor_data.Pos);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7f2 fdbb 	bl	8000588 <__aeabi_f2d>
 800da12:	4604      	mov	r4, r0
 800da14:	460d      	mov	r5, r1
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7f2 fdb3 	bl	8000588 <__aeabi_f2d>
 800da22:	4602      	mov	r2, r0
 800da24:	460b      	mov	r3, r1
 800da26:	e9cd 2300 	strd	r2, r3, [sp]
 800da2a:	4622      	mov	r2, r4
 800da2c:	462b      	mov	r3, r5
 800da2e:	490b      	ldr	r1, [pc, #44]	@ (800da5c <GO_Motor_RecvData_Process+0x70>)
 800da30:	480b      	ldr	r0, [pc, #44]	@ (800da60 <GO_Motor_RecvData_Process+0x74>)
 800da32:	f001 ff19 	bl	800f868 <siprintf>
	if (CDC_Transmit_FS((uint8_t*) sss, strlen(sss)) != USBD_OK) {
 800da36:	480a      	ldr	r0, [pc, #40]	@ (800da60 <GO_Motor_RecvData_Process+0x74>)
 800da38:	f7f2 fc3a 	bl	80002b0 <strlen>
 800da3c:	4603      	mov	r3, r0
 800da3e:	b29b      	uxth	r3, r3
 800da40:	4619      	mov	r1, r3
 800da42:	4807      	ldr	r0, [pc, #28]	@ (800da60 <GO_Motor_RecvData_Process+0x74>)
 800da44:	f7fe fb88 	bl	800c158 <CDC_Transmit_FS>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d001      	beq.n	800da52 <GO_Motor_RecvData_Process+0x66>
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		Error_Handler();
 800da4e:	f7f3 fd2e 	bl	80014ae <Error_Handler>
	}
}
 800da52:	bf00      	nop
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bdb0      	pop	{r4, r5, r7, pc}
 800da5a:	bf00      	nop
 800da5c:	08012220 	.word	0x08012220
 800da60:	20002514 	.word	0x20002514

0800da64 <crc_ccitt_byte>:
        0x2f72, 0x3efb, 0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232, 0x5ac5, 0x4b4c, 0x79d7, 0x685e,
        0x1ce1, 0x0d68, 0x3ff3, 0x2e7a, 0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1, 0x6b46, 0x7acf,
        0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9, 0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
        0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78 };

static uint16_t crc_ccitt_byte(uint16_t crc, const uint8_t c) {
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	4603      	mov	r3, r0
 800da6c:	460a      	mov	r2, r1
 800da6e:	80fb      	strh	r3, [r7, #6]
 800da70:	4613      	mov	r3, r2
 800da72:	717b      	strb	r3, [r7, #5]
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 800da74:	88fb      	ldrh	r3, [r7, #6]
 800da76:	0a1b      	lsrs	r3, r3, #8
 800da78:	b29a      	uxth	r2, r3
 800da7a:	88f9      	ldrh	r1, [r7, #6]
 800da7c:	797b      	ldrb	r3, [r7, #5]
 800da7e:	404b      	eors	r3, r1
 800da80:	b2db      	uxtb	r3, r3
 800da82:	4905      	ldr	r1, [pc, #20]	@ (800da98 <crc_ccitt_byte+0x34>)
 800da84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800da88:	4053      	eors	r3, r2
 800da8a:	b29b      	uxth	r3, r3
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr
 800da98:	0801224c 	.word	0x0801224c

0800da9c <crc_ccitt>:
 *	buffer
 *	@crc: previous CRC value
 *	@buffer: data pointer
 *	@len: number of bytes in the buffer
 */
uint16_t crc_ccitt(uint16_t crc, uint8_t const *buffer, size_t len) {
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	4603      	mov	r3, r0
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
 800daa8:	81fb      	strh	r3, [r7, #14]
	while (len--)
 800daaa:	e00a      	b.n	800dac2 <crc_ccitt+0x26>
		crc = crc_ccitt_byte(crc, *buffer++);
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	1c5a      	adds	r2, r3, #1
 800dab0:	60ba      	str	r2, [r7, #8]
 800dab2:	781a      	ldrb	r2, [r3, #0]
 800dab4:	89fb      	ldrh	r3, [r7, #14]
 800dab6:	4611      	mov	r1, r2
 800dab8:	4618      	mov	r0, r3
 800daba:	f7ff ffd3 	bl	800da64 <crc_ccitt_byte>
 800dabe:	4603      	mov	r3, r0
 800dac0:	81fb      	strh	r3, [r7, #14]
	while (len--)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	1e5a      	subs	r2, r3, #1
 800dac6:	607a      	str	r2, [r7, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d1ef      	bne.n	800daac <crc_ccitt+0x10>
	return crc;
 800dacc:	89fb      	ldrh	r3, [r7, #14]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
	...

0800dad8 <malloc>:
 800dad8:	4b02      	ldr	r3, [pc, #8]	@ (800dae4 <malloc+0xc>)
 800dada:	4601      	mov	r1, r0
 800dadc:	6818      	ldr	r0, [r3, #0]
 800dade:	f000 b825 	b.w	800db2c <_malloc_r>
 800dae2:	bf00      	nop
 800dae4:	20000290 	.word	0x20000290

0800dae8 <sbrk_aligned>:
 800dae8:	b570      	push	{r4, r5, r6, lr}
 800daea:	4e0f      	ldr	r6, [pc, #60]	@ (800db28 <sbrk_aligned+0x40>)
 800daec:	460c      	mov	r4, r1
 800daee:	6831      	ldr	r1, [r6, #0]
 800daf0:	4605      	mov	r5, r0
 800daf2:	b911      	cbnz	r1, 800dafa <sbrk_aligned+0x12>
 800daf4:	f001 ff6e 	bl	800f9d4 <_sbrk_r>
 800daf8:	6030      	str	r0, [r6, #0]
 800dafa:	4621      	mov	r1, r4
 800dafc:	4628      	mov	r0, r5
 800dafe:	f001 ff69 	bl	800f9d4 <_sbrk_r>
 800db02:	1c43      	adds	r3, r0, #1
 800db04:	d103      	bne.n	800db0e <sbrk_aligned+0x26>
 800db06:	f04f 34ff 	mov.w	r4, #4294967295
 800db0a:	4620      	mov	r0, r4
 800db0c:	bd70      	pop	{r4, r5, r6, pc}
 800db0e:	1cc4      	adds	r4, r0, #3
 800db10:	f024 0403 	bic.w	r4, r4, #3
 800db14:	42a0      	cmp	r0, r4
 800db16:	d0f8      	beq.n	800db0a <sbrk_aligned+0x22>
 800db18:	1a21      	subs	r1, r4, r0
 800db1a:	4628      	mov	r0, r5
 800db1c:	f001 ff5a 	bl	800f9d4 <_sbrk_r>
 800db20:	3001      	adds	r0, #1
 800db22:	d1f2      	bne.n	800db0a <sbrk_aligned+0x22>
 800db24:	e7ef      	b.n	800db06 <sbrk_aligned+0x1e>
 800db26:	bf00      	nop
 800db28:	20002534 	.word	0x20002534

0800db2c <_malloc_r>:
 800db2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db30:	1ccd      	adds	r5, r1, #3
 800db32:	f025 0503 	bic.w	r5, r5, #3
 800db36:	3508      	adds	r5, #8
 800db38:	2d0c      	cmp	r5, #12
 800db3a:	bf38      	it	cc
 800db3c:	250c      	movcc	r5, #12
 800db3e:	2d00      	cmp	r5, #0
 800db40:	4606      	mov	r6, r0
 800db42:	db01      	blt.n	800db48 <_malloc_r+0x1c>
 800db44:	42a9      	cmp	r1, r5
 800db46:	d904      	bls.n	800db52 <_malloc_r+0x26>
 800db48:	230c      	movs	r3, #12
 800db4a:	6033      	str	r3, [r6, #0]
 800db4c:	2000      	movs	r0, #0
 800db4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc28 <_malloc_r+0xfc>
 800db56:	f000 f869 	bl	800dc2c <__malloc_lock>
 800db5a:	f8d8 3000 	ldr.w	r3, [r8]
 800db5e:	461c      	mov	r4, r3
 800db60:	bb44      	cbnz	r4, 800dbb4 <_malloc_r+0x88>
 800db62:	4629      	mov	r1, r5
 800db64:	4630      	mov	r0, r6
 800db66:	f7ff ffbf 	bl	800dae8 <sbrk_aligned>
 800db6a:	1c43      	adds	r3, r0, #1
 800db6c:	4604      	mov	r4, r0
 800db6e:	d158      	bne.n	800dc22 <_malloc_r+0xf6>
 800db70:	f8d8 4000 	ldr.w	r4, [r8]
 800db74:	4627      	mov	r7, r4
 800db76:	2f00      	cmp	r7, #0
 800db78:	d143      	bne.n	800dc02 <_malloc_r+0xd6>
 800db7a:	2c00      	cmp	r4, #0
 800db7c:	d04b      	beq.n	800dc16 <_malloc_r+0xea>
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	4639      	mov	r1, r7
 800db82:	4630      	mov	r0, r6
 800db84:	eb04 0903 	add.w	r9, r4, r3
 800db88:	f001 ff24 	bl	800f9d4 <_sbrk_r>
 800db8c:	4581      	cmp	r9, r0
 800db8e:	d142      	bne.n	800dc16 <_malloc_r+0xea>
 800db90:	6821      	ldr	r1, [r4, #0]
 800db92:	1a6d      	subs	r5, r5, r1
 800db94:	4629      	mov	r1, r5
 800db96:	4630      	mov	r0, r6
 800db98:	f7ff ffa6 	bl	800dae8 <sbrk_aligned>
 800db9c:	3001      	adds	r0, #1
 800db9e:	d03a      	beq.n	800dc16 <_malloc_r+0xea>
 800dba0:	6823      	ldr	r3, [r4, #0]
 800dba2:	442b      	add	r3, r5
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	f8d8 3000 	ldr.w	r3, [r8]
 800dbaa:	685a      	ldr	r2, [r3, #4]
 800dbac:	bb62      	cbnz	r2, 800dc08 <_malloc_r+0xdc>
 800dbae:	f8c8 7000 	str.w	r7, [r8]
 800dbb2:	e00f      	b.n	800dbd4 <_malloc_r+0xa8>
 800dbb4:	6822      	ldr	r2, [r4, #0]
 800dbb6:	1b52      	subs	r2, r2, r5
 800dbb8:	d420      	bmi.n	800dbfc <_malloc_r+0xd0>
 800dbba:	2a0b      	cmp	r2, #11
 800dbbc:	d917      	bls.n	800dbee <_malloc_r+0xc2>
 800dbbe:	1961      	adds	r1, r4, r5
 800dbc0:	42a3      	cmp	r3, r4
 800dbc2:	6025      	str	r5, [r4, #0]
 800dbc4:	bf18      	it	ne
 800dbc6:	6059      	strne	r1, [r3, #4]
 800dbc8:	6863      	ldr	r3, [r4, #4]
 800dbca:	bf08      	it	eq
 800dbcc:	f8c8 1000 	streq.w	r1, [r8]
 800dbd0:	5162      	str	r2, [r4, r5]
 800dbd2:	604b      	str	r3, [r1, #4]
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f000 f82f 	bl	800dc38 <__malloc_unlock>
 800dbda:	f104 000b 	add.w	r0, r4, #11
 800dbde:	1d23      	adds	r3, r4, #4
 800dbe0:	f020 0007 	bic.w	r0, r0, #7
 800dbe4:	1ac2      	subs	r2, r0, r3
 800dbe6:	bf1c      	itt	ne
 800dbe8:	1a1b      	subne	r3, r3, r0
 800dbea:	50a3      	strne	r3, [r4, r2]
 800dbec:	e7af      	b.n	800db4e <_malloc_r+0x22>
 800dbee:	6862      	ldr	r2, [r4, #4]
 800dbf0:	42a3      	cmp	r3, r4
 800dbf2:	bf0c      	ite	eq
 800dbf4:	f8c8 2000 	streq.w	r2, [r8]
 800dbf8:	605a      	strne	r2, [r3, #4]
 800dbfa:	e7eb      	b.n	800dbd4 <_malloc_r+0xa8>
 800dbfc:	4623      	mov	r3, r4
 800dbfe:	6864      	ldr	r4, [r4, #4]
 800dc00:	e7ae      	b.n	800db60 <_malloc_r+0x34>
 800dc02:	463c      	mov	r4, r7
 800dc04:	687f      	ldr	r7, [r7, #4]
 800dc06:	e7b6      	b.n	800db76 <_malloc_r+0x4a>
 800dc08:	461a      	mov	r2, r3
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	42a3      	cmp	r3, r4
 800dc0e:	d1fb      	bne.n	800dc08 <_malloc_r+0xdc>
 800dc10:	2300      	movs	r3, #0
 800dc12:	6053      	str	r3, [r2, #4]
 800dc14:	e7de      	b.n	800dbd4 <_malloc_r+0xa8>
 800dc16:	230c      	movs	r3, #12
 800dc18:	6033      	str	r3, [r6, #0]
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	f000 f80c 	bl	800dc38 <__malloc_unlock>
 800dc20:	e794      	b.n	800db4c <_malloc_r+0x20>
 800dc22:	6005      	str	r5, [r0, #0]
 800dc24:	e7d6      	b.n	800dbd4 <_malloc_r+0xa8>
 800dc26:	bf00      	nop
 800dc28:	20002538 	.word	0x20002538

0800dc2c <__malloc_lock>:
 800dc2c:	4801      	ldr	r0, [pc, #4]	@ (800dc34 <__malloc_lock+0x8>)
 800dc2e:	f001 bf1e 	b.w	800fa6e <__retarget_lock_acquire_recursive>
 800dc32:	bf00      	nop
 800dc34:	2000267c 	.word	0x2000267c

0800dc38 <__malloc_unlock>:
 800dc38:	4801      	ldr	r0, [pc, #4]	@ (800dc40 <__malloc_unlock+0x8>)
 800dc3a:	f001 bf19 	b.w	800fa70 <__retarget_lock_release_recursive>
 800dc3e:	bf00      	nop
 800dc40:	2000267c 	.word	0x2000267c

0800dc44 <_realloc_r>:
 800dc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc48:	4680      	mov	r8, r0
 800dc4a:	4615      	mov	r5, r2
 800dc4c:	460c      	mov	r4, r1
 800dc4e:	b921      	cbnz	r1, 800dc5a <_realloc_r+0x16>
 800dc50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc54:	4611      	mov	r1, r2
 800dc56:	f7ff bf69 	b.w	800db2c <_malloc_r>
 800dc5a:	b92a      	cbnz	r2, 800dc68 <_realloc_r+0x24>
 800dc5c:	f002 fd90 	bl	8010780 <_free_r>
 800dc60:	2400      	movs	r4, #0
 800dc62:	4620      	mov	r0, r4
 800dc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc68:	f003 fdd2 	bl	8011810 <_malloc_usable_size_r>
 800dc6c:	4285      	cmp	r5, r0
 800dc6e:	4606      	mov	r6, r0
 800dc70:	d802      	bhi.n	800dc78 <_realloc_r+0x34>
 800dc72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dc76:	d8f4      	bhi.n	800dc62 <_realloc_r+0x1e>
 800dc78:	4629      	mov	r1, r5
 800dc7a:	4640      	mov	r0, r8
 800dc7c:	f7ff ff56 	bl	800db2c <_malloc_r>
 800dc80:	4607      	mov	r7, r0
 800dc82:	2800      	cmp	r0, #0
 800dc84:	d0ec      	beq.n	800dc60 <_realloc_r+0x1c>
 800dc86:	42b5      	cmp	r5, r6
 800dc88:	462a      	mov	r2, r5
 800dc8a:	4621      	mov	r1, r4
 800dc8c:	bf28      	it	cs
 800dc8e:	4632      	movcs	r2, r6
 800dc90:	f001 feef 	bl	800fa72 <memcpy>
 800dc94:	4621      	mov	r1, r4
 800dc96:	4640      	mov	r0, r8
 800dc98:	f002 fd72 	bl	8010780 <_free_r>
 800dc9c:	463c      	mov	r4, r7
 800dc9e:	e7e0      	b.n	800dc62 <_realloc_r+0x1e>

0800dca0 <sulp>:
 800dca0:	b570      	push	{r4, r5, r6, lr}
 800dca2:	4604      	mov	r4, r0
 800dca4:	460d      	mov	r5, r1
 800dca6:	ec45 4b10 	vmov	d0, r4, r5
 800dcaa:	4616      	mov	r6, r2
 800dcac:	f003 fc72 	bl	8011594 <__ulp>
 800dcb0:	ec51 0b10 	vmov	r0, r1, d0
 800dcb4:	b17e      	cbz	r6, 800dcd6 <sulp+0x36>
 800dcb6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dcba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	dd09      	ble.n	800dcd6 <sulp+0x36>
 800dcc2:	051b      	lsls	r3, r3, #20
 800dcc4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dcc8:	2400      	movs	r4, #0
 800dcca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dcce:	4622      	mov	r2, r4
 800dcd0:	462b      	mov	r3, r5
 800dcd2:	f7f2 fcb1 	bl	8000638 <__aeabi_dmul>
 800dcd6:	ec41 0b10 	vmov	d0, r0, r1
 800dcda:	bd70      	pop	{r4, r5, r6, pc}
 800dcdc:	0000      	movs	r0, r0
	...

0800dce0 <_strtod_l>:
 800dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce4:	b09f      	sub	sp, #124	@ 0x7c
 800dce6:	460c      	mov	r4, r1
 800dce8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dcea:	2200      	movs	r2, #0
 800dcec:	921a      	str	r2, [sp, #104]	@ 0x68
 800dcee:	9005      	str	r0, [sp, #20]
 800dcf0:	f04f 0a00 	mov.w	sl, #0
 800dcf4:	f04f 0b00 	mov.w	fp, #0
 800dcf8:	460a      	mov	r2, r1
 800dcfa:	9219      	str	r2, [sp, #100]	@ 0x64
 800dcfc:	7811      	ldrb	r1, [r2, #0]
 800dcfe:	292b      	cmp	r1, #43	@ 0x2b
 800dd00:	d04a      	beq.n	800dd98 <_strtod_l+0xb8>
 800dd02:	d838      	bhi.n	800dd76 <_strtod_l+0x96>
 800dd04:	290d      	cmp	r1, #13
 800dd06:	d832      	bhi.n	800dd6e <_strtod_l+0x8e>
 800dd08:	2908      	cmp	r1, #8
 800dd0a:	d832      	bhi.n	800dd72 <_strtod_l+0x92>
 800dd0c:	2900      	cmp	r1, #0
 800dd0e:	d03b      	beq.n	800dd88 <_strtod_l+0xa8>
 800dd10:	2200      	movs	r2, #0
 800dd12:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dd14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dd16:	782a      	ldrb	r2, [r5, #0]
 800dd18:	2a30      	cmp	r2, #48	@ 0x30
 800dd1a:	f040 80b3 	bne.w	800de84 <_strtod_l+0x1a4>
 800dd1e:	786a      	ldrb	r2, [r5, #1]
 800dd20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dd24:	2a58      	cmp	r2, #88	@ 0x58
 800dd26:	d16e      	bne.n	800de06 <_strtod_l+0x126>
 800dd28:	9302      	str	r3, [sp, #8]
 800dd2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd2c:	9301      	str	r3, [sp, #4]
 800dd2e:	ab1a      	add	r3, sp, #104	@ 0x68
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	4a8e      	ldr	r2, [pc, #568]	@ (800df6c <_strtod_l+0x28c>)
 800dd34:	9805      	ldr	r0, [sp, #20]
 800dd36:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dd38:	a919      	add	r1, sp, #100	@ 0x64
 800dd3a:	f002 fdd3 	bl	80108e4 <__gethex>
 800dd3e:	f010 060f 	ands.w	r6, r0, #15
 800dd42:	4604      	mov	r4, r0
 800dd44:	d005      	beq.n	800dd52 <_strtod_l+0x72>
 800dd46:	2e06      	cmp	r6, #6
 800dd48:	d128      	bne.n	800dd9c <_strtod_l+0xbc>
 800dd4a:	3501      	adds	r5, #1
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	9519      	str	r5, [sp, #100]	@ 0x64
 800dd50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	f040 858e 	bne.w	800e876 <_strtod_l+0xb96>
 800dd5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd5c:	b1cb      	cbz	r3, 800dd92 <_strtod_l+0xb2>
 800dd5e:	4652      	mov	r2, sl
 800dd60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dd64:	ec43 2b10 	vmov	d0, r2, r3
 800dd68:	b01f      	add	sp, #124	@ 0x7c
 800dd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd6e:	2920      	cmp	r1, #32
 800dd70:	d1ce      	bne.n	800dd10 <_strtod_l+0x30>
 800dd72:	3201      	adds	r2, #1
 800dd74:	e7c1      	b.n	800dcfa <_strtod_l+0x1a>
 800dd76:	292d      	cmp	r1, #45	@ 0x2d
 800dd78:	d1ca      	bne.n	800dd10 <_strtod_l+0x30>
 800dd7a:	2101      	movs	r1, #1
 800dd7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dd7e:	1c51      	adds	r1, r2, #1
 800dd80:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd82:	7852      	ldrb	r2, [r2, #1]
 800dd84:	2a00      	cmp	r2, #0
 800dd86:	d1c5      	bne.n	800dd14 <_strtod_l+0x34>
 800dd88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dd8a:	9419      	str	r4, [sp, #100]	@ 0x64
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f040 8570 	bne.w	800e872 <_strtod_l+0xb92>
 800dd92:	4652      	mov	r2, sl
 800dd94:	465b      	mov	r3, fp
 800dd96:	e7e5      	b.n	800dd64 <_strtod_l+0x84>
 800dd98:	2100      	movs	r1, #0
 800dd9a:	e7ef      	b.n	800dd7c <_strtod_l+0x9c>
 800dd9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dd9e:	b13a      	cbz	r2, 800ddb0 <_strtod_l+0xd0>
 800dda0:	2135      	movs	r1, #53	@ 0x35
 800dda2:	a81c      	add	r0, sp, #112	@ 0x70
 800dda4:	f003 fcf0 	bl	8011788 <__copybits>
 800dda8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ddaa:	9805      	ldr	r0, [sp, #20]
 800ddac:	f003 f8be 	bl	8010f2c <_Bfree>
 800ddb0:	3e01      	subs	r6, #1
 800ddb2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ddb4:	2e04      	cmp	r6, #4
 800ddb6:	d806      	bhi.n	800ddc6 <_strtod_l+0xe6>
 800ddb8:	e8df f006 	tbb	[pc, r6]
 800ddbc:	201d0314 	.word	0x201d0314
 800ddc0:	14          	.byte	0x14
 800ddc1:	00          	.byte	0x00
 800ddc2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ddc6:	05e1      	lsls	r1, r4, #23
 800ddc8:	bf48      	it	mi
 800ddca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ddce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ddd2:	0d1b      	lsrs	r3, r3, #20
 800ddd4:	051b      	lsls	r3, r3, #20
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d1bb      	bne.n	800dd52 <_strtod_l+0x72>
 800ddda:	f001 fe1d 	bl	800fa18 <__errno>
 800ddde:	2322      	movs	r3, #34	@ 0x22
 800dde0:	6003      	str	r3, [r0, #0]
 800dde2:	e7b6      	b.n	800dd52 <_strtod_l+0x72>
 800dde4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dde8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ddec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ddf0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ddf4:	e7e7      	b.n	800ddc6 <_strtod_l+0xe6>
 800ddf6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800df74 <_strtod_l+0x294>
 800ddfa:	e7e4      	b.n	800ddc6 <_strtod_l+0xe6>
 800ddfc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800de00:	f04f 3aff 	mov.w	sl, #4294967295
 800de04:	e7df      	b.n	800ddc6 <_strtod_l+0xe6>
 800de06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800de0c:	785b      	ldrb	r3, [r3, #1]
 800de0e:	2b30      	cmp	r3, #48	@ 0x30
 800de10:	d0f9      	beq.n	800de06 <_strtod_l+0x126>
 800de12:	2b00      	cmp	r3, #0
 800de14:	d09d      	beq.n	800dd52 <_strtod_l+0x72>
 800de16:	2301      	movs	r3, #1
 800de18:	9309      	str	r3, [sp, #36]	@ 0x24
 800de1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de1c:	930c      	str	r3, [sp, #48]	@ 0x30
 800de1e:	2300      	movs	r3, #0
 800de20:	9308      	str	r3, [sp, #32]
 800de22:	930a      	str	r3, [sp, #40]	@ 0x28
 800de24:	461f      	mov	r7, r3
 800de26:	220a      	movs	r2, #10
 800de28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800de2a:	7805      	ldrb	r5, [r0, #0]
 800de2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800de30:	b2d9      	uxtb	r1, r3
 800de32:	2909      	cmp	r1, #9
 800de34:	d928      	bls.n	800de88 <_strtod_l+0x1a8>
 800de36:	494e      	ldr	r1, [pc, #312]	@ (800df70 <_strtod_l+0x290>)
 800de38:	2201      	movs	r2, #1
 800de3a:	f001 fd80 	bl	800f93e <strncmp>
 800de3e:	2800      	cmp	r0, #0
 800de40:	d032      	beq.n	800dea8 <_strtod_l+0x1c8>
 800de42:	2000      	movs	r0, #0
 800de44:	462a      	mov	r2, r5
 800de46:	4681      	mov	r9, r0
 800de48:	463d      	mov	r5, r7
 800de4a:	4603      	mov	r3, r0
 800de4c:	2a65      	cmp	r2, #101	@ 0x65
 800de4e:	d001      	beq.n	800de54 <_strtod_l+0x174>
 800de50:	2a45      	cmp	r2, #69	@ 0x45
 800de52:	d114      	bne.n	800de7e <_strtod_l+0x19e>
 800de54:	b91d      	cbnz	r5, 800de5e <_strtod_l+0x17e>
 800de56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de58:	4302      	orrs	r2, r0
 800de5a:	d095      	beq.n	800dd88 <_strtod_l+0xa8>
 800de5c:	2500      	movs	r5, #0
 800de5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800de60:	1c62      	adds	r2, r4, #1
 800de62:	9219      	str	r2, [sp, #100]	@ 0x64
 800de64:	7862      	ldrb	r2, [r4, #1]
 800de66:	2a2b      	cmp	r2, #43	@ 0x2b
 800de68:	d077      	beq.n	800df5a <_strtod_l+0x27a>
 800de6a:	2a2d      	cmp	r2, #45	@ 0x2d
 800de6c:	d07b      	beq.n	800df66 <_strtod_l+0x286>
 800de6e:	f04f 0c00 	mov.w	ip, #0
 800de72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800de76:	2909      	cmp	r1, #9
 800de78:	f240 8082 	bls.w	800df80 <_strtod_l+0x2a0>
 800de7c:	9419      	str	r4, [sp, #100]	@ 0x64
 800de7e:	f04f 0800 	mov.w	r8, #0
 800de82:	e0a2      	b.n	800dfca <_strtod_l+0x2ea>
 800de84:	2300      	movs	r3, #0
 800de86:	e7c7      	b.n	800de18 <_strtod_l+0x138>
 800de88:	2f08      	cmp	r7, #8
 800de8a:	bfd5      	itete	le
 800de8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800de8e:	9908      	ldrgt	r1, [sp, #32]
 800de90:	fb02 3301 	mlale	r3, r2, r1, r3
 800de94:	fb02 3301 	mlagt	r3, r2, r1, r3
 800de98:	f100 0001 	add.w	r0, r0, #1
 800de9c:	bfd4      	ite	le
 800de9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800dea0:	9308      	strgt	r3, [sp, #32]
 800dea2:	3701      	adds	r7, #1
 800dea4:	9019      	str	r0, [sp, #100]	@ 0x64
 800dea6:	e7bf      	b.n	800de28 <_strtod_l+0x148>
 800dea8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800deaa:	1c5a      	adds	r2, r3, #1
 800deac:	9219      	str	r2, [sp, #100]	@ 0x64
 800deae:	785a      	ldrb	r2, [r3, #1]
 800deb0:	b37f      	cbz	r7, 800df12 <_strtod_l+0x232>
 800deb2:	4681      	mov	r9, r0
 800deb4:	463d      	mov	r5, r7
 800deb6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800deba:	2b09      	cmp	r3, #9
 800debc:	d912      	bls.n	800dee4 <_strtod_l+0x204>
 800debe:	2301      	movs	r3, #1
 800dec0:	e7c4      	b.n	800de4c <_strtod_l+0x16c>
 800dec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dec4:	1c5a      	adds	r2, r3, #1
 800dec6:	9219      	str	r2, [sp, #100]	@ 0x64
 800dec8:	785a      	ldrb	r2, [r3, #1]
 800deca:	3001      	adds	r0, #1
 800decc:	2a30      	cmp	r2, #48	@ 0x30
 800dece:	d0f8      	beq.n	800dec2 <_strtod_l+0x1e2>
 800ded0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ded4:	2b08      	cmp	r3, #8
 800ded6:	f200 84d3 	bhi.w	800e880 <_strtod_l+0xba0>
 800deda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dedc:	930c      	str	r3, [sp, #48]	@ 0x30
 800dede:	4681      	mov	r9, r0
 800dee0:	2000      	movs	r0, #0
 800dee2:	4605      	mov	r5, r0
 800dee4:	3a30      	subs	r2, #48	@ 0x30
 800dee6:	f100 0301 	add.w	r3, r0, #1
 800deea:	d02a      	beq.n	800df42 <_strtod_l+0x262>
 800deec:	4499      	add	r9, r3
 800deee:	eb00 0c05 	add.w	ip, r0, r5
 800def2:	462b      	mov	r3, r5
 800def4:	210a      	movs	r1, #10
 800def6:	4563      	cmp	r3, ip
 800def8:	d10d      	bne.n	800df16 <_strtod_l+0x236>
 800defa:	1c69      	adds	r1, r5, #1
 800defc:	4401      	add	r1, r0
 800defe:	4428      	add	r0, r5
 800df00:	2808      	cmp	r0, #8
 800df02:	dc16      	bgt.n	800df32 <_strtod_l+0x252>
 800df04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df06:	230a      	movs	r3, #10
 800df08:	fb03 2300 	mla	r3, r3, r0, r2
 800df0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800df0e:	2300      	movs	r3, #0
 800df10:	e018      	b.n	800df44 <_strtod_l+0x264>
 800df12:	4638      	mov	r0, r7
 800df14:	e7da      	b.n	800decc <_strtod_l+0x1ec>
 800df16:	2b08      	cmp	r3, #8
 800df18:	f103 0301 	add.w	r3, r3, #1
 800df1c:	dc03      	bgt.n	800df26 <_strtod_l+0x246>
 800df1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800df20:	434e      	muls	r6, r1
 800df22:	960a      	str	r6, [sp, #40]	@ 0x28
 800df24:	e7e7      	b.n	800def6 <_strtod_l+0x216>
 800df26:	2b10      	cmp	r3, #16
 800df28:	bfde      	ittt	le
 800df2a:	9e08      	ldrle	r6, [sp, #32]
 800df2c:	434e      	mulle	r6, r1
 800df2e:	9608      	strle	r6, [sp, #32]
 800df30:	e7e1      	b.n	800def6 <_strtod_l+0x216>
 800df32:	280f      	cmp	r0, #15
 800df34:	dceb      	bgt.n	800df0e <_strtod_l+0x22e>
 800df36:	9808      	ldr	r0, [sp, #32]
 800df38:	230a      	movs	r3, #10
 800df3a:	fb03 2300 	mla	r3, r3, r0, r2
 800df3e:	9308      	str	r3, [sp, #32]
 800df40:	e7e5      	b.n	800df0e <_strtod_l+0x22e>
 800df42:	4629      	mov	r1, r5
 800df44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df46:	1c50      	adds	r0, r2, #1
 800df48:	9019      	str	r0, [sp, #100]	@ 0x64
 800df4a:	7852      	ldrb	r2, [r2, #1]
 800df4c:	4618      	mov	r0, r3
 800df4e:	460d      	mov	r5, r1
 800df50:	e7b1      	b.n	800deb6 <_strtod_l+0x1d6>
 800df52:	f04f 0900 	mov.w	r9, #0
 800df56:	2301      	movs	r3, #1
 800df58:	e77d      	b.n	800de56 <_strtod_l+0x176>
 800df5a:	f04f 0c00 	mov.w	ip, #0
 800df5e:	1ca2      	adds	r2, r4, #2
 800df60:	9219      	str	r2, [sp, #100]	@ 0x64
 800df62:	78a2      	ldrb	r2, [r4, #2]
 800df64:	e785      	b.n	800de72 <_strtod_l+0x192>
 800df66:	f04f 0c01 	mov.w	ip, #1
 800df6a:	e7f8      	b.n	800df5e <_strtod_l+0x27e>
 800df6c:	08012464 	.word	0x08012464
 800df70:	0801244c 	.word	0x0801244c
 800df74:	7ff00000 	.word	0x7ff00000
 800df78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df7a:	1c51      	adds	r1, r2, #1
 800df7c:	9119      	str	r1, [sp, #100]	@ 0x64
 800df7e:	7852      	ldrb	r2, [r2, #1]
 800df80:	2a30      	cmp	r2, #48	@ 0x30
 800df82:	d0f9      	beq.n	800df78 <_strtod_l+0x298>
 800df84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800df88:	2908      	cmp	r1, #8
 800df8a:	f63f af78 	bhi.w	800de7e <_strtod_l+0x19e>
 800df8e:	3a30      	subs	r2, #48	@ 0x30
 800df90:	920e      	str	r2, [sp, #56]	@ 0x38
 800df92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df94:	920f      	str	r2, [sp, #60]	@ 0x3c
 800df96:	f04f 080a 	mov.w	r8, #10
 800df9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df9c:	1c56      	adds	r6, r2, #1
 800df9e:	9619      	str	r6, [sp, #100]	@ 0x64
 800dfa0:	7852      	ldrb	r2, [r2, #1]
 800dfa2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dfa6:	f1be 0f09 	cmp.w	lr, #9
 800dfaa:	d939      	bls.n	800e020 <_strtod_l+0x340>
 800dfac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dfae:	1a76      	subs	r6, r6, r1
 800dfb0:	2e08      	cmp	r6, #8
 800dfb2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dfb6:	dc03      	bgt.n	800dfc0 <_strtod_l+0x2e0>
 800dfb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dfba:	4588      	cmp	r8, r1
 800dfbc:	bfa8      	it	ge
 800dfbe:	4688      	movge	r8, r1
 800dfc0:	f1bc 0f00 	cmp.w	ip, #0
 800dfc4:	d001      	beq.n	800dfca <_strtod_l+0x2ea>
 800dfc6:	f1c8 0800 	rsb	r8, r8, #0
 800dfca:	2d00      	cmp	r5, #0
 800dfcc:	d14e      	bne.n	800e06c <_strtod_l+0x38c>
 800dfce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dfd0:	4308      	orrs	r0, r1
 800dfd2:	f47f aebe 	bne.w	800dd52 <_strtod_l+0x72>
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	f47f aed6 	bne.w	800dd88 <_strtod_l+0xa8>
 800dfdc:	2a69      	cmp	r2, #105	@ 0x69
 800dfde:	d028      	beq.n	800e032 <_strtod_l+0x352>
 800dfe0:	dc25      	bgt.n	800e02e <_strtod_l+0x34e>
 800dfe2:	2a49      	cmp	r2, #73	@ 0x49
 800dfe4:	d025      	beq.n	800e032 <_strtod_l+0x352>
 800dfe6:	2a4e      	cmp	r2, #78	@ 0x4e
 800dfe8:	f47f aece 	bne.w	800dd88 <_strtod_l+0xa8>
 800dfec:	499b      	ldr	r1, [pc, #620]	@ (800e25c <_strtod_l+0x57c>)
 800dfee:	a819      	add	r0, sp, #100	@ 0x64
 800dff0:	f002 fe9a 	bl	8010d28 <__match>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	f43f aec7 	beq.w	800dd88 <_strtod_l+0xa8>
 800dffa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	2b28      	cmp	r3, #40	@ 0x28
 800e000:	d12e      	bne.n	800e060 <_strtod_l+0x380>
 800e002:	4997      	ldr	r1, [pc, #604]	@ (800e260 <_strtod_l+0x580>)
 800e004:	aa1c      	add	r2, sp, #112	@ 0x70
 800e006:	a819      	add	r0, sp, #100	@ 0x64
 800e008:	f002 fea2 	bl	8010d50 <__hexnan>
 800e00c:	2805      	cmp	r0, #5
 800e00e:	d127      	bne.n	800e060 <_strtod_l+0x380>
 800e010:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e012:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e016:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e01a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e01e:	e698      	b.n	800dd52 <_strtod_l+0x72>
 800e020:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e022:	fb08 2101 	mla	r1, r8, r1, r2
 800e026:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e02a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e02c:	e7b5      	b.n	800df9a <_strtod_l+0x2ba>
 800e02e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e030:	e7da      	b.n	800dfe8 <_strtod_l+0x308>
 800e032:	498c      	ldr	r1, [pc, #560]	@ (800e264 <_strtod_l+0x584>)
 800e034:	a819      	add	r0, sp, #100	@ 0x64
 800e036:	f002 fe77 	bl	8010d28 <__match>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	f43f aea4 	beq.w	800dd88 <_strtod_l+0xa8>
 800e040:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e042:	4989      	ldr	r1, [pc, #548]	@ (800e268 <_strtod_l+0x588>)
 800e044:	3b01      	subs	r3, #1
 800e046:	a819      	add	r0, sp, #100	@ 0x64
 800e048:	9319      	str	r3, [sp, #100]	@ 0x64
 800e04a:	f002 fe6d 	bl	8010d28 <__match>
 800e04e:	b910      	cbnz	r0, 800e056 <_strtod_l+0x376>
 800e050:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e052:	3301      	adds	r3, #1
 800e054:	9319      	str	r3, [sp, #100]	@ 0x64
 800e056:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e278 <_strtod_l+0x598>
 800e05a:	f04f 0a00 	mov.w	sl, #0
 800e05e:	e678      	b.n	800dd52 <_strtod_l+0x72>
 800e060:	4882      	ldr	r0, [pc, #520]	@ (800e26c <_strtod_l+0x58c>)
 800e062:	f001 fd15 	bl	800fa90 <nan>
 800e066:	ec5b ab10 	vmov	sl, fp, d0
 800e06a:	e672      	b.n	800dd52 <_strtod_l+0x72>
 800e06c:	eba8 0309 	sub.w	r3, r8, r9
 800e070:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e072:	9309      	str	r3, [sp, #36]	@ 0x24
 800e074:	2f00      	cmp	r7, #0
 800e076:	bf08      	it	eq
 800e078:	462f      	moveq	r7, r5
 800e07a:	2d10      	cmp	r5, #16
 800e07c:	462c      	mov	r4, r5
 800e07e:	bfa8      	it	ge
 800e080:	2410      	movge	r4, #16
 800e082:	f7f2 fa5f 	bl	8000544 <__aeabi_ui2d>
 800e086:	2d09      	cmp	r5, #9
 800e088:	4682      	mov	sl, r0
 800e08a:	468b      	mov	fp, r1
 800e08c:	dc13      	bgt.n	800e0b6 <_strtod_l+0x3d6>
 800e08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e090:	2b00      	cmp	r3, #0
 800e092:	f43f ae5e 	beq.w	800dd52 <_strtod_l+0x72>
 800e096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e098:	dd78      	ble.n	800e18c <_strtod_l+0x4ac>
 800e09a:	2b16      	cmp	r3, #22
 800e09c:	dc5f      	bgt.n	800e15e <_strtod_l+0x47e>
 800e09e:	4974      	ldr	r1, [pc, #464]	@ (800e270 <_strtod_l+0x590>)
 800e0a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0a8:	4652      	mov	r2, sl
 800e0aa:	465b      	mov	r3, fp
 800e0ac:	f7f2 fac4 	bl	8000638 <__aeabi_dmul>
 800e0b0:	4682      	mov	sl, r0
 800e0b2:	468b      	mov	fp, r1
 800e0b4:	e64d      	b.n	800dd52 <_strtod_l+0x72>
 800e0b6:	4b6e      	ldr	r3, [pc, #440]	@ (800e270 <_strtod_l+0x590>)
 800e0b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e0bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e0c0:	f7f2 faba 	bl	8000638 <__aeabi_dmul>
 800e0c4:	4682      	mov	sl, r0
 800e0c6:	9808      	ldr	r0, [sp, #32]
 800e0c8:	468b      	mov	fp, r1
 800e0ca:	f7f2 fa3b 	bl	8000544 <__aeabi_ui2d>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	4650      	mov	r0, sl
 800e0d4:	4659      	mov	r1, fp
 800e0d6:	f7f2 f8f9 	bl	80002cc <__adddf3>
 800e0da:	2d0f      	cmp	r5, #15
 800e0dc:	4682      	mov	sl, r0
 800e0de:	468b      	mov	fp, r1
 800e0e0:	ddd5      	ble.n	800e08e <_strtod_l+0x3ae>
 800e0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0e4:	1b2c      	subs	r4, r5, r4
 800e0e6:	441c      	add	r4, r3
 800e0e8:	2c00      	cmp	r4, #0
 800e0ea:	f340 8096 	ble.w	800e21a <_strtod_l+0x53a>
 800e0ee:	f014 030f 	ands.w	r3, r4, #15
 800e0f2:	d00a      	beq.n	800e10a <_strtod_l+0x42a>
 800e0f4:	495e      	ldr	r1, [pc, #376]	@ (800e270 <_strtod_l+0x590>)
 800e0f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e0fa:	4652      	mov	r2, sl
 800e0fc:	465b      	mov	r3, fp
 800e0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e102:	f7f2 fa99 	bl	8000638 <__aeabi_dmul>
 800e106:	4682      	mov	sl, r0
 800e108:	468b      	mov	fp, r1
 800e10a:	f034 040f 	bics.w	r4, r4, #15
 800e10e:	d073      	beq.n	800e1f8 <_strtod_l+0x518>
 800e110:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e114:	dd48      	ble.n	800e1a8 <_strtod_l+0x4c8>
 800e116:	2400      	movs	r4, #0
 800e118:	46a0      	mov	r8, r4
 800e11a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e11c:	46a1      	mov	r9, r4
 800e11e:	9a05      	ldr	r2, [sp, #20]
 800e120:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e278 <_strtod_l+0x598>
 800e124:	2322      	movs	r3, #34	@ 0x22
 800e126:	6013      	str	r3, [r2, #0]
 800e128:	f04f 0a00 	mov.w	sl, #0
 800e12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e12e:	2b00      	cmp	r3, #0
 800e130:	f43f ae0f 	beq.w	800dd52 <_strtod_l+0x72>
 800e134:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e136:	9805      	ldr	r0, [sp, #20]
 800e138:	f002 fef8 	bl	8010f2c <_Bfree>
 800e13c:	9805      	ldr	r0, [sp, #20]
 800e13e:	4649      	mov	r1, r9
 800e140:	f002 fef4 	bl	8010f2c <_Bfree>
 800e144:	9805      	ldr	r0, [sp, #20]
 800e146:	4641      	mov	r1, r8
 800e148:	f002 fef0 	bl	8010f2c <_Bfree>
 800e14c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e14e:	9805      	ldr	r0, [sp, #20]
 800e150:	f002 feec 	bl	8010f2c <_Bfree>
 800e154:	9805      	ldr	r0, [sp, #20]
 800e156:	4621      	mov	r1, r4
 800e158:	f002 fee8 	bl	8010f2c <_Bfree>
 800e15c:	e5f9      	b.n	800dd52 <_strtod_l+0x72>
 800e15e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e160:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e164:	4293      	cmp	r3, r2
 800e166:	dbbc      	blt.n	800e0e2 <_strtod_l+0x402>
 800e168:	4c41      	ldr	r4, [pc, #260]	@ (800e270 <_strtod_l+0x590>)
 800e16a:	f1c5 050f 	rsb	r5, r5, #15
 800e16e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e172:	4652      	mov	r2, sl
 800e174:	465b      	mov	r3, fp
 800e176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e17a:	f7f2 fa5d 	bl	8000638 <__aeabi_dmul>
 800e17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e180:	1b5d      	subs	r5, r3, r5
 800e182:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e186:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e18a:	e78f      	b.n	800e0ac <_strtod_l+0x3cc>
 800e18c:	3316      	adds	r3, #22
 800e18e:	dba8      	blt.n	800e0e2 <_strtod_l+0x402>
 800e190:	4b37      	ldr	r3, [pc, #220]	@ (800e270 <_strtod_l+0x590>)
 800e192:	eba9 0808 	sub.w	r8, r9, r8
 800e196:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e19a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e19e:	4650      	mov	r0, sl
 800e1a0:	4659      	mov	r1, fp
 800e1a2:	f7f2 fb73 	bl	800088c <__aeabi_ddiv>
 800e1a6:	e783      	b.n	800e0b0 <_strtod_l+0x3d0>
 800e1a8:	4b32      	ldr	r3, [pc, #200]	@ (800e274 <_strtod_l+0x594>)
 800e1aa:	9308      	str	r3, [sp, #32]
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	1124      	asrs	r4, r4, #4
 800e1b0:	4650      	mov	r0, sl
 800e1b2:	4659      	mov	r1, fp
 800e1b4:	461e      	mov	r6, r3
 800e1b6:	2c01      	cmp	r4, #1
 800e1b8:	dc21      	bgt.n	800e1fe <_strtod_l+0x51e>
 800e1ba:	b10b      	cbz	r3, 800e1c0 <_strtod_l+0x4e0>
 800e1bc:	4682      	mov	sl, r0
 800e1be:	468b      	mov	fp, r1
 800e1c0:	492c      	ldr	r1, [pc, #176]	@ (800e274 <_strtod_l+0x594>)
 800e1c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e1c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e1ca:	4652      	mov	r2, sl
 800e1cc:	465b      	mov	r3, fp
 800e1ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1d2:	f7f2 fa31 	bl	8000638 <__aeabi_dmul>
 800e1d6:	4b28      	ldr	r3, [pc, #160]	@ (800e278 <_strtod_l+0x598>)
 800e1d8:	460a      	mov	r2, r1
 800e1da:	400b      	ands	r3, r1
 800e1dc:	4927      	ldr	r1, [pc, #156]	@ (800e27c <_strtod_l+0x59c>)
 800e1de:	428b      	cmp	r3, r1
 800e1e0:	4682      	mov	sl, r0
 800e1e2:	d898      	bhi.n	800e116 <_strtod_l+0x436>
 800e1e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e1e8:	428b      	cmp	r3, r1
 800e1ea:	bf86      	itte	hi
 800e1ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e280 <_strtod_l+0x5a0>
 800e1f0:	f04f 3aff 	movhi.w	sl, #4294967295
 800e1f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	9308      	str	r3, [sp, #32]
 800e1fc:	e07a      	b.n	800e2f4 <_strtod_l+0x614>
 800e1fe:	07e2      	lsls	r2, r4, #31
 800e200:	d505      	bpl.n	800e20e <_strtod_l+0x52e>
 800e202:	9b08      	ldr	r3, [sp, #32]
 800e204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e208:	f7f2 fa16 	bl	8000638 <__aeabi_dmul>
 800e20c:	2301      	movs	r3, #1
 800e20e:	9a08      	ldr	r2, [sp, #32]
 800e210:	3208      	adds	r2, #8
 800e212:	3601      	adds	r6, #1
 800e214:	1064      	asrs	r4, r4, #1
 800e216:	9208      	str	r2, [sp, #32]
 800e218:	e7cd      	b.n	800e1b6 <_strtod_l+0x4d6>
 800e21a:	d0ed      	beq.n	800e1f8 <_strtod_l+0x518>
 800e21c:	4264      	negs	r4, r4
 800e21e:	f014 020f 	ands.w	r2, r4, #15
 800e222:	d00a      	beq.n	800e23a <_strtod_l+0x55a>
 800e224:	4b12      	ldr	r3, [pc, #72]	@ (800e270 <_strtod_l+0x590>)
 800e226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e22a:	4650      	mov	r0, sl
 800e22c:	4659      	mov	r1, fp
 800e22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e232:	f7f2 fb2b 	bl	800088c <__aeabi_ddiv>
 800e236:	4682      	mov	sl, r0
 800e238:	468b      	mov	fp, r1
 800e23a:	1124      	asrs	r4, r4, #4
 800e23c:	d0dc      	beq.n	800e1f8 <_strtod_l+0x518>
 800e23e:	2c1f      	cmp	r4, #31
 800e240:	dd20      	ble.n	800e284 <_strtod_l+0x5a4>
 800e242:	2400      	movs	r4, #0
 800e244:	46a0      	mov	r8, r4
 800e246:	940a      	str	r4, [sp, #40]	@ 0x28
 800e248:	46a1      	mov	r9, r4
 800e24a:	9a05      	ldr	r2, [sp, #20]
 800e24c:	2322      	movs	r3, #34	@ 0x22
 800e24e:	f04f 0a00 	mov.w	sl, #0
 800e252:	f04f 0b00 	mov.w	fp, #0
 800e256:	6013      	str	r3, [r2, #0]
 800e258:	e768      	b.n	800e12c <_strtod_l+0x44c>
 800e25a:	bf00      	nop
 800e25c:	080124ad 	.word	0x080124ad
 800e260:	08012450 	.word	0x08012450
 800e264:	080124a5 	.word	0x080124a5
 800e268:	08012520 	.word	0x08012520
 800e26c:	0801251c 	.word	0x0801251c
 800e270:	08012698 	.word	0x08012698
 800e274:	08012670 	.word	0x08012670
 800e278:	7ff00000 	.word	0x7ff00000
 800e27c:	7ca00000 	.word	0x7ca00000
 800e280:	7fefffff 	.word	0x7fefffff
 800e284:	f014 0310 	ands.w	r3, r4, #16
 800e288:	bf18      	it	ne
 800e28a:	236a      	movne	r3, #106	@ 0x6a
 800e28c:	4ea9      	ldr	r6, [pc, #676]	@ (800e534 <_strtod_l+0x854>)
 800e28e:	9308      	str	r3, [sp, #32]
 800e290:	4650      	mov	r0, sl
 800e292:	4659      	mov	r1, fp
 800e294:	2300      	movs	r3, #0
 800e296:	07e2      	lsls	r2, r4, #31
 800e298:	d504      	bpl.n	800e2a4 <_strtod_l+0x5c4>
 800e29a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e29e:	f7f2 f9cb 	bl	8000638 <__aeabi_dmul>
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	1064      	asrs	r4, r4, #1
 800e2a6:	f106 0608 	add.w	r6, r6, #8
 800e2aa:	d1f4      	bne.n	800e296 <_strtod_l+0x5b6>
 800e2ac:	b10b      	cbz	r3, 800e2b2 <_strtod_l+0x5d2>
 800e2ae:	4682      	mov	sl, r0
 800e2b0:	468b      	mov	fp, r1
 800e2b2:	9b08      	ldr	r3, [sp, #32]
 800e2b4:	b1b3      	cbz	r3, 800e2e4 <_strtod_l+0x604>
 800e2b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e2ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	4659      	mov	r1, fp
 800e2c2:	dd0f      	ble.n	800e2e4 <_strtod_l+0x604>
 800e2c4:	2b1f      	cmp	r3, #31
 800e2c6:	dd55      	ble.n	800e374 <_strtod_l+0x694>
 800e2c8:	2b34      	cmp	r3, #52	@ 0x34
 800e2ca:	bfde      	ittt	le
 800e2cc:	f04f 33ff 	movle.w	r3, #4294967295
 800e2d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e2d4:	4093      	lslle	r3, r2
 800e2d6:	f04f 0a00 	mov.w	sl, #0
 800e2da:	bfcc      	ite	gt
 800e2dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e2e0:	ea03 0b01 	andle.w	fp, r3, r1
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	4650      	mov	r0, sl
 800e2ea:	4659      	mov	r1, fp
 800e2ec:	f7f2 fc0c 	bl	8000b08 <__aeabi_dcmpeq>
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	d1a6      	bne.n	800e242 <_strtod_l+0x562>
 800e2f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2f6:	9300      	str	r3, [sp, #0]
 800e2f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e2fa:	9805      	ldr	r0, [sp, #20]
 800e2fc:	462b      	mov	r3, r5
 800e2fe:	463a      	mov	r2, r7
 800e300:	f002 fe7c 	bl	8010ffc <__s2b>
 800e304:	900a      	str	r0, [sp, #40]	@ 0x28
 800e306:	2800      	cmp	r0, #0
 800e308:	f43f af05 	beq.w	800e116 <_strtod_l+0x436>
 800e30c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e30e:	2a00      	cmp	r2, #0
 800e310:	eba9 0308 	sub.w	r3, r9, r8
 800e314:	bfa8      	it	ge
 800e316:	2300      	movge	r3, #0
 800e318:	9312      	str	r3, [sp, #72]	@ 0x48
 800e31a:	2400      	movs	r4, #0
 800e31c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e320:	9316      	str	r3, [sp, #88]	@ 0x58
 800e322:	46a0      	mov	r8, r4
 800e324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e326:	9805      	ldr	r0, [sp, #20]
 800e328:	6859      	ldr	r1, [r3, #4]
 800e32a:	f002 fdbf 	bl	8010eac <_Balloc>
 800e32e:	4681      	mov	r9, r0
 800e330:	2800      	cmp	r0, #0
 800e332:	f43f aef4 	beq.w	800e11e <_strtod_l+0x43e>
 800e336:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e338:	691a      	ldr	r2, [r3, #16]
 800e33a:	3202      	adds	r2, #2
 800e33c:	f103 010c 	add.w	r1, r3, #12
 800e340:	0092      	lsls	r2, r2, #2
 800e342:	300c      	adds	r0, #12
 800e344:	f001 fb95 	bl	800fa72 <memcpy>
 800e348:	ec4b ab10 	vmov	d0, sl, fp
 800e34c:	9805      	ldr	r0, [sp, #20]
 800e34e:	aa1c      	add	r2, sp, #112	@ 0x70
 800e350:	a91b      	add	r1, sp, #108	@ 0x6c
 800e352:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e356:	f003 f98d 	bl	8011674 <__d2b>
 800e35a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e35c:	2800      	cmp	r0, #0
 800e35e:	f43f aede 	beq.w	800e11e <_strtod_l+0x43e>
 800e362:	9805      	ldr	r0, [sp, #20]
 800e364:	2101      	movs	r1, #1
 800e366:	f002 fedf 	bl	8011128 <__i2b>
 800e36a:	4680      	mov	r8, r0
 800e36c:	b948      	cbnz	r0, 800e382 <_strtod_l+0x6a2>
 800e36e:	f04f 0800 	mov.w	r8, #0
 800e372:	e6d4      	b.n	800e11e <_strtod_l+0x43e>
 800e374:	f04f 32ff 	mov.w	r2, #4294967295
 800e378:	fa02 f303 	lsl.w	r3, r2, r3
 800e37c:	ea03 0a0a 	and.w	sl, r3, sl
 800e380:	e7b0      	b.n	800e2e4 <_strtod_l+0x604>
 800e382:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e384:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e386:	2d00      	cmp	r5, #0
 800e388:	bfab      	itete	ge
 800e38a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e38c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e38e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e390:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e392:	bfac      	ite	ge
 800e394:	18ef      	addge	r7, r5, r3
 800e396:	1b5e      	sublt	r6, r3, r5
 800e398:	9b08      	ldr	r3, [sp, #32]
 800e39a:	1aed      	subs	r5, r5, r3
 800e39c:	4415      	add	r5, r2
 800e39e:	4b66      	ldr	r3, [pc, #408]	@ (800e538 <_strtod_l+0x858>)
 800e3a0:	3d01      	subs	r5, #1
 800e3a2:	429d      	cmp	r5, r3
 800e3a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e3a8:	da50      	bge.n	800e44c <_strtod_l+0x76c>
 800e3aa:	1b5b      	subs	r3, r3, r5
 800e3ac:	2b1f      	cmp	r3, #31
 800e3ae:	eba2 0203 	sub.w	r2, r2, r3
 800e3b2:	f04f 0101 	mov.w	r1, #1
 800e3b6:	dc3d      	bgt.n	800e434 <_strtod_l+0x754>
 800e3b8:	fa01 f303 	lsl.w	r3, r1, r3
 800e3bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e3be:	2300      	movs	r3, #0
 800e3c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e3c2:	18bd      	adds	r5, r7, r2
 800e3c4:	9b08      	ldr	r3, [sp, #32]
 800e3c6:	42af      	cmp	r7, r5
 800e3c8:	4416      	add	r6, r2
 800e3ca:	441e      	add	r6, r3
 800e3cc:	463b      	mov	r3, r7
 800e3ce:	bfa8      	it	ge
 800e3d0:	462b      	movge	r3, r5
 800e3d2:	42b3      	cmp	r3, r6
 800e3d4:	bfa8      	it	ge
 800e3d6:	4633      	movge	r3, r6
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	bfc2      	ittt	gt
 800e3dc:	1aed      	subgt	r5, r5, r3
 800e3de:	1af6      	subgt	r6, r6, r3
 800e3e0:	1aff      	subgt	r7, r7, r3
 800e3e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	dd16      	ble.n	800e416 <_strtod_l+0x736>
 800e3e8:	4641      	mov	r1, r8
 800e3ea:	9805      	ldr	r0, [sp, #20]
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	f002 ff5b 	bl	80112a8 <__pow5mult>
 800e3f2:	4680      	mov	r8, r0
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d0ba      	beq.n	800e36e <_strtod_l+0x68e>
 800e3f8:	4601      	mov	r1, r0
 800e3fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e3fc:	9805      	ldr	r0, [sp, #20]
 800e3fe:	f002 fea9 	bl	8011154 <__multiply>
 800e402:	900e      	str	r0, [sp, #56]	@ 0x38
 800e404:	2800      	cmp	r0, #0
 800e406:	f43f ae8a 	beq.w	800e11e <_strtod_l+0x43e>
 800e40a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e40c:	9805      	ldr	r0, [sp, #20]
 800e40e:	f002 fd8d 	bl	8010f2c <_Bfree>
 800e412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e414:	931a      	str	r3, [sp, #104]	@ 0x68
 800e416:	2d00      	cmp	r5, #0
 800e418:	dc1d      	bgt.n	800e456 <_strtod_l+0x776>
 800e41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	dd23      	ble.n	800e468 <_strtod_l+0x788>
 800e420:	4649      	mov	r1, r9
 800e422:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e424:	9805      	ldr	r0, [sp, #20]
 800e426:	f002 ff3f 	bl	80112a8 <__pow5mult>
 800e42a:	4681      	mov	r9, r0
 800e42c:	b9e0      	cbnz	r0, 800e468 <_strtod_l+0x788>
 800e42e:	f04f 0900 	mov.w	r9, #0
 800e432:	e674      	b.n	800e11e <_strtod_l+0x43e>
 800e434:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e438:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e43c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e440:	35e2      	adds	r5, #226	@ 0xe2
 800e442:	fa01 f305 	lsl.w	r3, r1, r5
 800e446:	9310      	str	r3, [sp, #64]	@ 0x40
 800e448:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e44a:	e7ba      	b.n	800e3c2 <_strtod_l+0x6e2>
 800e44c:	2300      	movs	r3, #0
 800e44e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e450:	2301      	movs	r3, #1
 800e452:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e454:	e7b5      	b.n	800e3c2 <_strtod_l+0x6e2>
 800e456:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e458:	9805      	ldr	r0, [sp, #20]
 800e45a:	462a      	mov	r2, r5
 800e45c:	f002 ff7e 	bl	801135c <__lshift>
 800e460:	901a      	str	r0, [sp, #104]	@ 0x68
 800e462:	2800      	cmp	r0, #0
 800e464:	d1d9      	bne.n	800e41a <_strtod_l+0x73a>
 800e466:	e65a      	b.n	800e11e <_strtod_l+0x43e>
 800e468:	2e00      	cmp	r6, #0
 800e46a:	dd07      	ble.n	800e47c <_strtod_l+0x79c>
 800e46c:	4649      	mov	r1, r9
 800e46e:	9805      	ldr	r0, [sp, #20]
 800e470:	4632      	mov	r2, r6
 800e472:	f002 ff73 	bl	801135c <__lshift>
 800e476:	4681      	mov	r9, r0
 800e478:	2800      	cmp	r0, #0
 800e47a:	d0d8      	beq.n	800e42e <_strtod_l+0x74e>
 800e47c:	2f00      	cmp	r7, #0
 800e47e:	dd08      	ble.n	800e492 <_strtod_l+0x7b2>
 800e480:	4641      	mov	r1, r8
 800e482:	9805      	ldr	r0, [sp, #20]
 800e484:	463a      	mov	r2, r7
 800e486:	f002 ff69 	bl	801135c <__lshift>
 800e48a:	4680      	mov	r8, r0
 800e48c:	2800      	cmp	r0, #0
 800e48e:	f43f ae46 	beq.w	800e11e <_strtod_l+0x43e>
 800e492:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e494:	9805      	ldr	r0, [sp, #20]
 800e496:	464a      	mov	r2, r9
 800e498:	f002 ffe8 	bl	801146c <__mdiff>
 800e49c:	4604      	mov	r4, r0
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	f43f ae3d 	beq.w	800e11e <_strtod_l+0x43e>
 800e4a4:	68c3      	ldr	r3, [r0, #12]
 800e4a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	60c3      	str	r3, [r0, #12]
 800e4ac:	4641      	mov	r1, r8
 800e4ae:	f002 ffc1 	bl	8011434 <__mcmp>
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	da46      	bge.n	800e544 <_strtod_l+0x864>
 800e4b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4b8:	ea53 030a 	orrs.w	r3, r3, sl
 800e4bc:	d16c      	bne.n	800e598 <_strtod_l+0x8b8>
 800e4be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d168      	bne.n	800e598 <_strtod_l+0x8b8>
 800e4c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4ca:	0d1b      	lsrs	r3, r3, #20
 800e4cc:	051b      	lsls	r3, r3, #20
 800e4ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e4d2:	d961      	bls.n	800e598 <_strtod_l+0x8b8>
 800e4d4:	6963      	ldr	r3, [r4, #20]
 800e4d6:	b913      	cbnz	r3, 800e4de <_strtod_l+0x7fe>
 800e4d8:	6923      	ldr	r3, [r4, #16]
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	dd5c      	ble.n	800e598 <_strtod_l+0x8b8>
 800e4de:	4621      	mov	r1, r4
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	9805      	ldr	r0, [sp, #20]
 800e4e4:	f002 ff3a 	bl	801135c <__lshift>
 800e4e8:	4641      	mov	r1, r8
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	f002 ffa2 	bl	8011434 <__mcmp>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	dd51      	ble.n	800e598 <_strtod_l+0x8b8>
 800e4f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4f8:	9a08      	ldr	r2, [sp, #32]
 800e4fa:	0d1b      	lsrs	r3, r3, #20
 800e4fc:	051b      	lsls	r3, r3, #20
 800e4fe:	2a00      	cmp	r2, #0
 800e500:	d06b      	beq.n	800e5da <_strtod_l+0x8fa>
 800e502:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e506:	d868      	bhi.n	800e5da <_strtod_l+0x8fa>
 800e508:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e50c:	f67f ae9d 	bls.w	800e24a <_strtod_l+0x56a>
 800e510:	4b0a      	ldr	r3, [pc, #40]	@ (800e53c <_strtod_l+0x85c>)
 800e512:	4650      	mov	r0, sl
 800e514:	4659      	mov	r1, fp
 800e516:	2200      	movs	r2, #0
 800e518:	f7f2 f88e 	bl	8000638 <__aeabi_dmul>
 800e51c:	4b08      	ldr	r3, [pc, #32]	@ (800e540 <_strtod_l+0x860>)
 800e51e:	400b      	ands	r3, r1
 800e520:	4682      	mov	sl, r0
 800e522:	468b      	mov	fp, r1
 800e524:	2b00      	cmp	r3, #0
 800e526:	f47f ae05 	bne.w	800e134 <_strtod_l+0x454>
 800e52a:	9a05      	ldr	r2, [sp, #20]
 800e52c:	2322      	movs	r3, #34	@ 0x22
 800e52e:	6013      	str	r3, [r2, #0]
 800e530:	e600      	b.n	800e134 <_strtod_l+0x454>
 800e532:	bf00      	nop
 800e534:	08012478 	.word	0x08012478
 800e538:	fffffc02 	.word	0xfffffc02
 800e53c:	39500000 	.word	0x39500000
 800e540:	7ff00000 	.word	0x7ff00000
 800e544:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e548:	d165      	bne.n	800e616 <_strtod_l+0x936>
 800e54a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e54c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e550:	b35a      	cbz	r2, 800e5aa <_strtod_l+0x8ca>
 800e552:	4a9f      	ldr	r2, [pc, #636]	@ (800e7d0 <_strtod_l+0xaf0>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d12b      	bne.n	800e5b0 <_strtod_l+0x8d0>
 800e558:	9b08      	ldr	r3, [sp, #32]
 800e55a:	4651      	mov	r1, sl
 800e55c:	b303      	cbz	r3, 800e5a0 <_strtod_l+0x8c0>
 800e55e:	4b9d      	ldr	r3, [pc, #628]	@ (800e7d4 <_strtod_l+0xaf4>)
 800e560:	465a      	mov	r2, fp
 800e562:	4013      	ands	r3, r2
 800e564:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e568:	f04f 32ff 	mov.w	r2, #4294967295
 800e56c:	d81b      	bhi.n	800e5a6 <_strtod_l+0x8c6>
 800e56e:	0d1b      	lsrs	r3, r3, #20
 800e570:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e574:	fa02 f303 	lsl.w	r3, r2, r3
 800e578:	4299      	cmp	r1, r3
 800e57a:	d119      	bne.n	800e5b0 <_strtod_l+0x8d0>
 800e57c:	4b96      	ldr	r3, [pc, #600]	@ (800e7d8 <_strtod_l+0xaf8>)
 800e57e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e580:	429a      	cmp	r2, r3
 800e582:	d102      	bne.n	800e58a <_strtod_l+0x8aa>
 800e584:	3101      	adds	r1, #1
 800e586:	f43f adca 	beq.w	800e11e <_strtod_l+0x43e>
 800e58a:	4b92      	ldr	r3, [pc, #584]	@ (800e7d4 <_strtod_l+0xaf4>)
 800e58c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e58e:	401a      	ands	r2, r3
 800e590:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e594:	f04f 0a00 	mov.w	sl, #0
 800e598:	9b08      	ldr	r3, [sp, #32]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d1b8      	bne.n	800e510 <_strtod_l+0x830>
 800e59e:	e5c9      	b.n	800e134 <_strtod_l+0x454>
 800e5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a4:	e7e8      	b.n	800e578 <_strtod_l+0x898>
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	e7e6      	b.n	800e578 <_strtod_l+0x898>
 800e5aa:	ea53 030a 	orrs.w	r3, r3, sl
 800e5ae:	d0a1      	beq.n	800e4f4 <_strtod_l+0x814>
 800e5b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e5b2:	b1db      	cbz	r3, 800e5ec <_strtod_l+0x90c>
 800e5b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5b6:	4213      	tst	r3, r2
 800e5b8:	d0ee      	beq.n	800e598 <_strtod_l+0x8b8>
 800e5ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5bc:	9a08      	ldr	r2, [sp, #32]
 800e5be:	4650      	mov	r0, sl
 800e5c0:	4659      	mov	r1, fp
 800e5c2:	b1bb      	cbz	r3, 800e5f4 <_strtod_l+0x914>
 800e5c4:	f7ff fb6c 	bl	800dca0 <sulp>
 800e5c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5cc:	ec53 2b10 	vmov	r2, r3, d0
 800e5d0:	f7f1 fe7c 	bl	80002cc <__adddf3>
 800e5d4:	4682      	mov	sl, r0
 800e5d6:	468b      	mov	fp, r1
 800e5d8:	e7de      	b.n	800e598 <_strtod_l+0x8b8>
 800e5da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e5de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e5e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e5e6:	f04f 3aff 	mov.w	sl, #4294967295
 800e5ea:	e7d5      	b.n	800e598 <_strtod_l+0x8b8>
 800e5ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e5ee:	ea13 0f0a 	tst.w	r3, sl
 800e5f2:	e7e1      	b.n	800e5b8 <_strtod_l+0x8d8>
 800e5f4:	f7ff fb54 	bl	800dca0 <sulp>
 800e5f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5fc:	ec53 2b10 	vmov	r2, r3, d0
 800e600:	f7f1 fe62 	bl	80002c8 <__aeabi_dsub>
 800e604:	2200      	movs	r2, #0
 800e606:	2300      	movs	r3, #0
 800e608:	4682      	mov	sl, r0
 800e60a:	468b      	mov	fp, r1
 800e60c:	f7f2 fa7c 	bl	8000b08 <__aeabi_dcmpeq>
 800e610:	2800      	cmp	r0, #0
 800e612:	d0c1      	beq.n	800e598 <_strtod_l+0x8b8>
 800e614:	e619      	b.n	800e24a <_strtod_l+0x56a>
 800e616:	4641      	mov	r1, r8
 800e618:	4620      	mov	r0, r4
 800e61a:	f003 f883 	bl	8011724 <__ratio>
 800e61e:	ec57 6b10 	vmov	r6, r7, d0
 800e622:	2200      	movs	r2, #0
 800e624:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e628:	4630      	mov	r0, r6
 800e62a:	4639      	mov	r1, r7
 800e62c:	f7f2 fa80 	bl	8000b30 <__aeabi_dcmple>
 800e630:	2800      	cmp	r0, #0
 800e632:	d06f      	beq.n	800e714 <_strtod_l+0xa34>
 800e634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e636:	2b00      	cmp	r3, #0
 800e638:	d17a      	bne.n	800e730 <_strtod_l+0xa50>
 800e63a:	f1ba 0f00 	cmp.w	sl, #0
 800e63e:	d158      	bne.n	800e6f2 <_strtod_l+0xa12>
 800e640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e646:	2b00      	cmp	r3, #0
 800e648:	d15a      	bne.n	800e700 <_strtod_l+0xa20>
 800e64a:	4b64      	ldr	r3, [pc, #400]	@ (800e7dc <_strtod_l+0xafc>)
 800e64c:	2200      	movs	r2, #0
 800e64e:	4630      	mov	r0, r6
 800e650:	4639      	mov	r1, r7
 800e652:	f7f2 fa63 	bl	8000b1c <__aeabi_dcmplt>
 800e656:	2800      	cmp	r0, #0
 800e658:	d159      	bne.n	800e70e <_strtod_l+0xa2e>
 800e65a:	4630      	mov	r0, r6
 800e65c:	4639      	mov	r1, r7
 800e65e:	4b60      	ldr	r3, [pc, #384]	@ (800e7e0 <_strtod_l+0xb00>)
 800e660:	2200      	movs	r2, #0
 800e662:	f7f1 ffe9 	bl	8000638 <__aeabi_dmul>
 800e666:	4606      	mov	r6, r0
 800e668:	460f      	mov	r7, r1
 800e66a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e66e:	9606      	str	r6, [sp, #24]
 800e670:	9307      	str	r3, [sp, #28]
 800e672:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e676:	4d57      	ldr	r5, [pc, #348]	@ (800e7d4 <_strtod_l+0xaf4>)
 800e678:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e67e:	401d      	ands	r5, r3
 800e680:	4b58      	ldr	r3, [pc, #352]	@ (800e7e4 <_strtod_l+0xb04>)
 800e682:	429d      	cmp	r5, r3
 800e684:	f040 80b2 	bne.w	800e7ec <_strtod_l+0xb0c>
 800e688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e68a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e68e:	ec4b ab10 	vmov	d0, sl, fp
 800e692:	f002 ff7f 	bl	8011594 <__ulp>
 800e696:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e69a:	ec51 0b10 	vmov	r0, r1, d0
 800e69e:	f7f1 ffcb 	bl	8000638 <__aeabi_dmul>
 800e6a2:	4652      	mov	r2, sl
 800e6a4:	465b      	mov	r3, fp
 800e6a6:	f7f1 fe11 	bl	80002cc <__adddf3>
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	4949      	ldr	r1, [pc, #292]	@ (800e7d4 <_strtod_l+0xaf4>)
 800e6ae:	4a4e      	ldr	r2, [pc, #312]	@ (800e7e8 <_strtod_l+0xb08>)
 800e6b0:	4019      	ands	r1, r3
 800e6b2:	4291      	cmp	r1, r2
 800e6b4:	4682      	mov	sl, r0
 800e6b6:	d942      	bls.n	800e73e <_strtod_l+0xa5e>
 800e6b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e6ba:	4b47      	ldr	r3, [pc, #284]	@ (800e7d8 <_strtod_l+0xaf8>)
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d103      	bne.n	800e6c8 <_strtod_l+0x9e8>
 800e6c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	f43f ad2b 	beq.w	800e11e <_strtod_l+0x43e>
 800e6c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e7d8 <_strtod_l+0xaf8>
 800e6cc:	f04f 3aff 	mov.w	sl, #4294967295
 800e6d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e6d2:	9805      	ldr	r0, [sp, #20]
 800e6d4:	f002 fc2a 	bl	8010f2c <_Bfree>
 800e6d8:	9805      	ldr	r0, [sp, #20]
 800e6da:	4649      	mov	r1, r9
 800e6dc:	f002 fc26 	bl	8010f2c <_Bfree>
 800e6e0:	9805      	ldr	r0, [sp, #20]
 800e6e2:	4641      	mov	r1, r8
 800e6e4:	f002 fc22 	bl	8010f2c <_Bfree>
 800e6e8:	9805      	ldr	r0, [sp, #20]
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	f002 fc1e 	bl	8010f2c <_Bfree>
 800e6f0:	e618      	b.n	800e324 <_strtod_l+0x644>
 800e6f2:	f1ba 0f01 	cmp.w	sl, #1
 800e6f6:	d103      	bne.n	800e700 <_strtod_l+0xa20>
 800e6f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f43f ada5 	beq.w	800e24a <_strtod_l+0x56a>
 800e700:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e7b0 <_strtod_l+0xad0>
 800e704:	4f35      	ldr	r7, [pc, #212]	@ (800e7dc <_strtod_l+0xafc>)
 800e706:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e70a:	2600      	movs	r6, #0
 800e70c:	e7b1      	b.n	800e672 <_strtod_l+0x992>
 800e70e:	4f34      	ldr	r7, [pc, #208]	@ (800e7e0 <_strtod_l+0xb00>)
 800e710:	2600      	movs	r6, #0
 800e712:	e7aa      	b.n	800e66a <_strtod_l+0x98a>
 800e714:	4b32      	ldr	r3, [pc, #200]	@ (800e7e0 <_strtod_l+0xb00>)
 800e716:	4630      	mov	r0, r6
 800e718:	4639      	mov	r1, r7
 800e71a:	2200      	movs	r2, #0
 800e71c:	f7f1 ff8c 	bl	8000638 <__aeabi_dmul>
 800e720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e722:	4606      	mov	r6, r0
 800e724:	460f      	mov	r7, r1
 800e726:	2b00      	cmp	r3, #0
 800e728:	d09f      	beq.n	800e66a <_strtod_l+0x98a>
 800e72a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e72e:	e7a0      	b.n	800e672 <_strtod_l+0x992>
 800e730:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e7b8 <_strtod_l+0xad8>
 800e734:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e738:	ec57 6b17 	vmov	r6, r7, d7
 800e73c:	e799      	b.n	800e672 <_strtod_l+0x992>
 800e73e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e742:	9b08      	ldr	r3, [sp, #32]
 800e744:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d1c1      	bne.n	800e6d0 <_strtod_l+0x9f0>
 800e74c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e750:	0d1b      	lsrs	r3, r3, #20
 800e752:	051b      	lsls	r3, r3, #20
 800e754:	429d      	cmp	r5, r3
 800e756:	d1bb      	bne.n	800e6d0 <_strtod_l+0x9f0>
 800e758:	4630      	mov	r0, r6
 800e75a:	4639      	mov	r1, r7
 800e75c:	f7f2 facc 	bl	8000cf8 <__aeabi_d2lz>
 800e760:	f7f1 ff3c 	bl	80005dc <__aeabi_l2d>
 800e764:	4602      	mov	r2, r0
 800e766:	460b      	mov	r3, r1
 800e768:	4630      	mov	r0, r6
 800e76a:	4639      	mov	r1, r7
 800e76c:	f7f1 fdac 	bl	80002c8 <__aeabi_dsub>
 800e770:	460b      	mov	r3, r1
 800e772:	4602      	mov	r2, r0
 800e774:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e778:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e77e:	ea46 060a 	orr.w	r6, r6, sl
 800e782:	431e      	orrs	r6, r3
 800e784:	d06f      	beq.n	800e866 <_strtod_l+0xb86>
 800e786:	a30e      	add	r3, pc, #56	@ (adr r3, 800e7c0 <_strtod_l+0xae0>)
 800e788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78c:	f7f2 f9c6 	bl	8000b1c <__aeabi_dcmplt>
 800e790:	2800      	cmp	r0, #0
 800e792:	f47f accf 	bne.w	800e134 <_strtod_l+0x454>
 800e796:	a30c      	add	r3, pc, #48	@ (adr r3, 800e7c8 <_strtod_l+0xae8>)
 800e798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e7a0:	f7f2 f9da 	bl	8000b58 <__aeabi_dcmpgt>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	d093      	beq.n	800e6d0 <_strtod_l+0x9f0>
 800e7a8:	e4c4      	b.n	800e134 <_strtod_l+0x454>
 800e7aa:	bf00      	nop
 800e7ac:	f3af 8000 	nop.w
 800e7b0:	00000000 	.word	0x00000000
 800e7b4:	bff00000 	.word	0xbff00000
 800e7b8:	00000000 	.word	0x00000000
 800e7bc:	3ff00000 	.word	0x3ff00000
 800e7c0:	94a03595 	.word	0x94a03595
 800e7c4:	3fdfffff 	.word	0x3fdfffff
 800e7c8:	35afe535 	.word	0x35afe535
 800e7cc:	3fe00000 	.word	0x3fe00000
 800e7d0:	000fffff 	.word	0x000fffff
 800e7d4:	7ff00000 	.word	0x7ff00000
 800e7d8:	7fefffff 	.word	0x7fefffff
 800e7dc:	3ff00000 	.word	0x3ff00000
 800e7e0:	3fe00000 	.word	0x3fe00000
 800e7e4:	7fe00000 	.word	0x7fe00000
 800e7e8:	7c9fffff 	.word	0x7c9fffff
 800e7ec:	9b08      	ldr	r3, [sp, #32]
 800e7ee:	b323      	cbz	r3, 800e83a <_strtod_l+0xb5a>
 800e7f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e7f4:	d821      	bhi.n	800e83a <_strtod_l+0xb5a>
 800e7f6:	a328      	add	r3, pc, #160	@ (adr r3, 800e898 <_strtod_l+0xbb8>)
 800e7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	4639      	mov	r1, r7
 800e800:	f7f2 f996 	bl	8000b30 <__aeabi_dcmple>
 800e804:	b1a0      	cbz	r0, 800e830 <_strtod_l+0xb50>
 800e806:	4639      	mov	r1, r7
 800e808:	4630      	mov	r0, r6
 800e80a:	f7f2 f9ed 	bl	8000be8 <__aeabi_d2uiz>
 800e80e:	2801      	cmp	r0, #1
 800e810:	bf38      	it	cc
 800e812:	2001      	movcc	r0, #1
 800e814:	f7f1 fe96 	bl	8000544 <__aeabi_ui2d>
 800e818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e81a:	4606      	mov	r6, r0
 800e81c:	460f      	mov	r7, r1
 800e81e:	b9fb      	cbnz	r3, 800e860 <_strtod_l+0xb80>
 800e820:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e824:	9014      	str	r0, [sp, #80]	@ 0x50
 800e826:	9315      	str	r3, [sp, #84]	@ 0x54
 800e828:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e82c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e830:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e832:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e836:	1b5b      	subs	r3, r3, r5
 800e838:	9311      	str	r3, [sp, #68]	@ 0x44
 800e83a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e83e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e842:	f002 fea7 	bl	8011594 <__ulp>
 800e846:	4650      	mov	r0, sl
 800e848:	ec53 2b10 	vmov	r2, r3, d0
 800e84c:	4659      	mov	r1, fp
 800e84e:	f7f1 fef3 	bl	8000638 <__aeabi_dmul>
 800e852:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e856:	f7f1 fd39 	bl	80002cc <__adddf3>
 800e85a:	4682      	mov	sl, r0
 800e85c:	468b      	mov	fp, r1
 800e85e:	e770      	b.n	800e742 <_strtod_l+0xa62>
 800e860:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e864:	e7e0      	b.n	800e828 <_strtod_l+0xb48>
 800e866:	a30e      	add	r3, pc, #56	@ (adr r3, 800e8a0 <_strtod_l+0xbc0>)
 800e868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86c:	f7f2 f956 	bl	8000b1c <__aeabi_dcmplt>
 800e870:	e798      	b.n	800e7a4 <_strtod_l+0xac4>
 800e872:	2300      	movs	r3, #0
 800e874:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e876:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e87a:	6013      	str	r3, [r2, #0]
 800e87c:	f7ff ba6d 	b.w	800dd5a <_strtod_l+0x7a>
 800e880:	2a65      	cmp	r2, #101	@ 0x65
 800e882:	f43f ab66 	beq.w	800df52 <_strtod_l+0x272>
 800e886:	2a45      	cmp	r2, #69	@ 0x45
 800e888:	f43f ab63 	beq.w	800df52 <_strtod_l+0x272>
 800e88c:	2301      	movs	r3, #1
 800e88e:	f7ff bb9e 	b.w	800dfce <_strtod_l+0x2ee>
 800e892:	bf00      	nop
 800e894:	f3af 8000 	nop.w
 800e898:	ffc00000 	.word	0xffc00000
 800e89c:	41dfffff 	.word	0x41dfffff
 800e8a0:	94a03595 	.word	0x94a03595
 800e8a4:	3fcfffff 	.word	0x3fcfffff

0800e8a8 <_strtod_r>:
 800e8a8:	4b01      	ldr	r3, [pc, #4]	@ (800e8b0 <_strtod_r+0x8>)
 800e8aa:	f7ff ba19 	b.w	800dce0 <_strtod_l>
 800e8ae:	bf00      	nop
 800e8b0:	20000124 	.word	0x20000124

0800e8b4 <__cvt>:
 800e8b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b8:	ec57 6b10 	vmov	r6, r7, d0
 800e8bc:	2f00      	cmp	r7, #0
 800e8be:	460c      	mov	r4, r1
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	463b      	mov	r3, r7
 800e8c4:	bfbb      	ittet	lt
 800e8c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e8ca:	461f      	movlt	r7, r3
 800e8cc:	2300      	movge	r3, #0
 800e8ce:	232d      	movlt	r3, #45	@ 0x2d
 800e8d0:	700b      	strb	r3, [r1, #0]
 800e8d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e8d8:	4691      	mov	r9, r2
 800e8da:	f023 0820 	bic.w	r8, r3, #32
 800e8de:	bfbc      	itt	lt
 800e8e0:	4632      	movlt	r2, r6
 800e8e2:	4616      	movlt	r6, r2
 800e8e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e8e8:	d005      	beq.n	800e8f6 <__cvt+0x42>
 800e8ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e8ee:	d100      	bne.n	800e8f2 <__cvt+0x3e>
 800e8f0:	3401      	adds	r4, #1
 800e8f2:	2102      	movs	r1, #2
 800e8f4:	e000      	b.n	800e8f8 <__cvt+0x44>
 800e8f6:	2103      	movs	r1, #3
 800e8f8:	ab03      	add	r3, sp, #12
 800e8fa:	9301      	str	r3, [sp, #4]
 800e8fc:	ab02      	add	r3, sp, #8
 800e8fe:	9300      	str	r3, [sp, #0]
 800e900:	ec47 6b10 	vmov	d0, r6, r7
 800e904:	4653      	mov	r3, sl
 800e906:	4622      	mov	r2, r4
 800e908:	f001 f976 	bl	800fbf8 <_dtoa_r>
 800e90c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e910:	4605      	mov	r5, r0
 800e912:	d119      	bne.n	800e948 <__cvt+0x94>
 800e914:	f019 0f01 	tst.w	r9, #1
 800e918:	d00e      	beq.n	800e938 <__cvt+0x84>
 800e91a:	eb00 0904 	add.w	r9, r0, r4
 800e91e:	2200      	movs	r2, #0
 800e920:	2300      	movs	r3, #0
 800e922:	4630      	mov	r0, r6
 800e924:	4639      	mov	r1, r7
 800e926:	f7f2 f8ef 	bl	8000b08 <__aeabi_dcmpeq>
 800e92a:	b108      	cbz	r0, 800e930 <__cvt+0x7c>
 800e92c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e930:	2230      	movs	r2, #48	@ 0x30
 800e932:	9b03      	ldr	r3, [sp, #12]
 800e934:	454b      	cmp	r3, r9
 800e936:	d31e      	bcc.n	800e976 <__cvt+0xc2>
 800e938:	9b03      	ldr	r3, [sp, #12]
 800e93a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e93c:	1b5b      	subs	r3, r3, r5
 800e93e:	4628      	mov	r0, r5
 800e940:	6013      	str	r3, [r2, #0]
 800e942:	b004      	add	sp, #16
 800e944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e94c:	eb00 0904 	add.w	r9, r0, r4
 800e950:	d1e5      	bne.n	800e91e <__cvt+0x6a>
 800e952:	7803      	ldrb	r3, [r0, #0]
 800e954:	2b30      	cmp	r3, #48	@ 0x30
 800e956:	d10a      	bne.n	800e96e <__cvt+0xba>
 800e958:	2200      	movs	r2, #0
 800e95a:	2300      	movs	r3, #0
 800e95c:	4630      	mov	r0, r6
 800e95e:	4639      	mov	r1, r7
 800e960:	f7f2 f8d2 	bl	8000b08 <__aeabi_dcmpeq>
 800e964:	b918      	cbnz	r0, 800e96e <__cvt+0xba>
 800e966:	f1c4 0401 	rsb	r4, r4, #1
 800e96a:	f8ca 4000 	str.w	r4, [sl]
 800e96e:	f8da 3000 	ldr.w	r3, [sl]
 800e972:	4499      	add	r9, r3
 800e974:	e7d3      	b.n	800e91e <__cvt+0x6a>
 800e976:	1c59      	adds	r1, r3, #1
 800e978:	9103      	str	r1, [sp, #12]
 800e97a:	701a      	strb	r2, [r3, #0]
 800e97c:	e7d9      	b.n	800e932 <__cvt+0x7e>

0800e97e <__exponent>:
 800e97e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e980:	2900      	cmp	r1, #0
 800e982:	bfba      	itte	lt
 800e984:	4249      	neglt	r1, r1
 800e986:	232d      	movlt	r3, #45	@ 0x2d
 800e988:	232b      	movge	r3, #43	@ 0x2b
 800e98a:	2909      	cmp	r1, #9
 800e98c:	7002      	strb	r2, [r0, #0]
 800e98e:	7043      	strb	r3, [r0, #1]
 800e990:	dd29      	ble.n	800e9e6 <__exponent+0x68>
 800e992:	f10d 0307 	add.w	r3, sp, #7
 800e996:	461d      	mov	r5, r3
 800e998:	270a      	movs	r7, #10
 800e99a:	461a      	mov	r2, r3
 800e99c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e9a0:	fb07 1416 	mls	r4, r7, r6, r1
 800e9a4:	3430      	adds	r4, #48	@ 0x30
 800e9a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	2c63      	cmp	r4, #99	@ 0x63
 800e9ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800e9b2:	4631      	mov	r1, r6
 800e9b4:	dcf1      	bgt.n	800e99a <__exponent+0x1c>
 800e9b6:	3130      	adds	r1, #48	@ 0x30
 800e9b8:	1e94      	subs	r4, r2, #2
 800e9ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e9be:	1c41      	adds	r1, r0, #1
 800e9c0:	4623      	mov	r3, r4
 800e9c2:	42ab      	cmp	r3, r5
 800e9c4:	d30a      	bcc.n	800e9dc <__exponent+0x5e>
 800e9c6:	f10d 0309 	add.w	r3, sp, #9
 800e9ca:	1a9b      	subs	r3, r3, r2
 800e9cc:	42ac      	cmp	r4, r5
 800e9ce:	bf88      	it	hi
 800e9d0:	2300      	movhi	r3, #0
 800e9d2:	3302      	adds	r3, #2
 800e9d4:	4403      	add	r3, r0
 800e9d6:	1a18      	subs	r0, r3, r0
 800e9d8:	b003      	add	sp, #12
 800e9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e9e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e9e4:	e7ed      	b.n	800e9c2 <__exponent+0x44>
 800e9e6:	2330      	movs	r3, #48	@ 0x30
 800e9e8:	3130      	adds	r1, #48	@ 0x30
 800e9ea:	7083      	strb	r3, [r0, #2]
 800e9ec:	70c1      	strb	r1, [r0, #3]
 800e9ee:	1d03      	adds	r3, r0, #4
 800e9f0:	e7f1      	b.n	800e9d6 <__exponent+0x58>
	...

0800e9f4 <_printf_float>:
 800e9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f8:	b08d      	sub	sp, #52	@ 0x34
 800e9fa:	460c      	mov	r4, r1
 800e9fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ea00:	4616      	mov	r6, r2
 800ea02:	461f      	mov	r7, r3
 800ea04:	4605      	mov	r5, r0
 800ea06:	f000 ffad 	bl	800f964 <_localeconv_r>
 800ea0a:	6803      	ldr	r3, [r0, #0]
 800ea0c:	9304      	str	r3, [sp, #16]
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7f1 fc4e 	bl	80002b0 <strlen>
 800ea14:	2300      	movs	r3, #0
 800ea16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea18:	f8d8 3000 	ldr.w	r3, [r8]
 800ea1c:	9005      	str	r0, [sp, #20]
 800ea1e:	3307      	adds	r3, #7
 800ea20:	f023 0307 	bic.w	r3, r3, #7
 800ea24:	f103 0208 	add.w	r2, r3, #8
 800ea28:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ea2c:	f8d4 b000 	ldr.w	fp, [r4]
 800ea30:	f8c8 2000 	str.w	r2, [r8]
 800ea34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ea3c:	9307      	str	r3, [sp, #28]
 800ea3e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ea46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea4a:	4b9c      	ldr	r3, [pc, #624]	@ (800ecbc <_printf_float+0x2c8>)
 800ea4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea50:	f7f2 f88c 	bl	8000b6c <__aeabi_dcmpun>
 800ea54:	bb70      	cbnz	r0, 800eab4 <_printf_float+0xc0>
 800ea56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea5a:	4b98      	ldr	r3, [pc, #608]	@ (800ecbc <_printf_float+0x2c8>)
 800ea5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea60:	f7f2 f866 	bl	8000b30 <__aeabi_dcmple>
 800ea64:	bb30      	cbnz	r0, 800eab4 <_printf_float+0xc0>
 800ea66:	2200      	movs	r2, #0
 800ea68:	2300      	movs	r3, #0
 800ea6a:	4640      	mov	r0, r8
 800ea6c:	4649      	mov	r1, r9
 800ea6e:	f7f2 f855 	bl	8000b1c <__aeabi_dcmplt>
 800ea72:	b110      	cbz	r0, 800ea7a <_printf_float+0x86>
 800ea74:	232d      	movs	r3, #45	@ 0x2d
 800ea76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea7a:	4a91      	ldr	r2, [pc, #580]	@ (800ecc0 <_printf_float+0x2cc>)
 800ea7c:	4b91      	ldr	r3, [pc, #580]	@ (800ecc4 <_printf_float+0x2d0>)
 800ea7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ea82:	bf94      	ite	ls
 800ea84:	4690      	movls	r8, r2
 800ea86:	4698      	movhi	r8, r3
 800ea88:	2303      	movs	r3, #3
 800ea8a:	6123      	str	r3, [r4, #16]
 800ea8c:	f02b 0304 	bic.w	r3, fp, #4
 800ea90:	6023      	str	r3, [r4, #0]
 800ea92:	f04f 0900 	mov.w	r9, #0
 800ea96:	9700      	str	r7, [sp, #0]
 800ea98:	4633      	mov	r3, r6
 800ea9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ea9c:	4621      	mov	r1, r4
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f000 f9d2 	bl	800ee48 <_printf_common>
 800eaa4:	3001      	adds	r0, #1
 800eaa6:	f040 808d 	bne.w	800ebc4 <_printf_float+0x1d0>
 800eaaa:	f04f 30ff 	mov.w	r0, #4294967295
 800eaae:	b00d      	add	sp, #52	@ 0x34
 800eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab4:	4642      	mov	r2, r8
 800eab6:	464b      	mov	r3, r9
 800eab8:	4640      	mov	r0, r8
 800eaba:	4649      	mov	r1, r9
 800eabc:	f7f2 f856 	bl	8000b6c <__aeabi_dcmpun>
 800eac0:	b140      	cbz	r0, 800ead4 <_printf_float+0xe0>
 800eac2:	464b      	mov	r3, r9
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	bfbc      	itt	lt
 800eac8:	232d      	movlt	r3, #45	@ 0x2d
 800eaca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800eace:	4a7e      	ldr	r2, [pc, #504]	@ (800ecc8 <_printf_float+0x2d4>)
 800ead0:	4b7e      	ldr	r3, [pc, #504]	@ (800eccc <_printf_float+0x2d8>)
 800ead2:	e7d4      	b.n	800ea7e <_printf_float+0x8a>
 800ead4:	6863      	ldr	r3, [r4, #4]
 800ead6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800eada:	9206      	str	r2, [sp, #24]
 800eadc:	1c5a      	adds	r2, r3, #1
 800eade:	d13b      	bne.n	800eb58 <_printf_float+0x164>
 800eae0:	2306      	movs	r3, #6
 800eae2:	6063      	str	r3, [r4, #4]
 800eae4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800eae8:	2300      	movs	r3, #0
 800eaea:	6022      	str	r2, [r4, #0]
 800eaec:	9303      	str	r3, [sp, #12]
 800eaee:	ab0a      	add	r3, sp, #40	@ 0x28
 800eaf0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800eaf4:	ab09      	add	r3, sp, #36	@ 0x24
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	6861      	ldr	r1, [r4, #4]
 800eafa:	ec49 8b10 	vmov	d0, r8, r9
 800eafe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800eb02:	4628      	mov	r0, r5
 800eb04:	f7ff fed6 	bl	800e8b4 <__cvt>
 800eb08:	9b06      	ldr	r3, [sp, #24]
 800eb0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb0c:	2b47      	cmp	r3, #71	@ 0x47
 800eb0e:	4680      	mov	r8, r0
 800eb10:	d129      	bne.n	800eb66 <_printf_float+0x172>
 800eb12:	1cc8      	adds	r0, r1, #3
 800eb14:	db02      	blt.n	800eb1c <_printf_float+0x128>
 800eb16:	6863      	ldr	r3, [r4, #4]
 800eb18:	4299      	cmp	r1, r3
 800eb1a:	dd41      	ble.n	800eba0 <_printf_float+0x1ac>
 800eb1c:	f1aa 0a02 	sub.w	sl, sl, #2
 800eb20:	fa5f fa8a 	uxtb.w	sl, sl
 800eb24:	3901      	subs	r1, #1
 800eb26:	4652      	mov	r2, sl
 800eb28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800eb2c:	9109      	str	r1, [sp, #36]	@ 0x24
 800eb2e:	f7ff ff26 	bl	800e97e <__exponent>
 800eb32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb34:	1813      	adds	r3, r2, r0
 800eb36:	2a01      	cmp	r2, #1
 800eb38:	4681      	mov	r9, r0
 800eb3a:	6123      	str	r3, [r4, #16]
 800eb3c:	dc02      	bgt.n	800eb44 <_printf_float+0x150>
 800eb3e:	6822      	ldr	r2, [r4, #0]
 800eb40:	07d2      	lsls	r2, r2, #31
 800eb42:	d501      	bpl.n	800eb48 <_printf_float+0x154>
 800eb44:	3301      	adds	r3, #1
 800eb46:	6123      	str	r3, [r4, #16]
 800eb48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d0a2      	beq.n	800ea96 <_printf_float+0xa2>
 800eb50:	232d      	movs	r3, #45	@ 0x2d
 800eb52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb56:	e79e      	b.n	800ea96 <_printf_float+0xa2>
 800eb58:	9a06      	ldr	r2, [sp, #24]
 800eb5a:	2a47      	cmp	r2, #71	@ 0x47
 800eb5c:	d1c2      	bne.n	800eae4 <_printf_float+0xf0>
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d1c0      	bne.n	800eae4 <_printf_float+0xf0>
 800eb62:	2301      	movs	r3, #1
 800eb64:	e7bd      	b.n	800eae2 <_printf_float+0xee>
 800eb66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eb6a:	d9db      	bls.n	800eb24 <_printf_float+0x130>
 800eb6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800eb70:	d118      	bne.n	800eba4 <_printf_float+0x1b0>
 800eb72:	2900      	cmp	r1, #0
 800eb74:	6863      	ldr	r3, [r4, #4]
 800eb76:	dd0b      	ble.n	800eb90 <_printf_float+0x19c>
 800eb78:	6121      	str	r1, [r4, #16]
 800eb7a:	b913      	cbnz	r3, 800eb82 <_printf_float+0x18e>
 800eb7c:	6822      	ldr	r2, [r4, #0]
 800eb7e:	07d0      	lsls	r0, r2, #31
 800eb80:	d502      	bpl.n	800eb88 <_printf_float+0x194>
 800eb82:	3301      	adds	r3, #1
 800eb84:	440b      	add	r3, r1
 800eb86:	6123      	str	r3, [r4, #16]
 800eb88:	65a1      	str	r1, [r4, #88]	@ 0x58
 800eb8a:	f04f 0900 	mov.w	r9, #0
 800eb8e:	e7db      	b.n	800eb48 <_printf_float+0x154>
 800eb90:	b913      	cbnz	r3, 800eb98 <_printf_float+0x1a4>
 800eb92:	6822      	ldr	r2, [r4, #0]
 800eb94:	07d2      	lsls	r2, r2, #31
 800eb96:	d501      	bpl.n	800eb9c <_printf_float+0x1a8>
 800eb98:	3302      	adds	r3, #2
 800eb9a:	e7f4      	b.n	800eb86 <_printf_float+0x192>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e7f2      	b.n	800eb86 <_printf_float+0x192>
 800eba0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800eba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eba6:	4299      	cmp	r1, r3
 800eba8:	db05      	blt.n	800ebb6 <_printf_float+0x1c2>
 800ebaa:	6823      	ldr	r3, [r4, #0]
 800ebac:	6121      	str	r1, [r4, #16]
 800ebae:	07d8      	lsls	r0, r3, #31
 800ebb0:	d5ea      	bpl.n	800eb88 <_printf_float+0x194>
 800ebb2:	1c4b      	adds	r3, r1, #1
 800ebb4:	e7e7      	b.n	800eb86 <_printf_float+0x192>
 800ebb6:	2900      	cmp	r1, #0
 800ebb8:	bfd4      	ite	le
 800ebba:	f1c1 0202 	rsble	r2, r1, #2
 800ebbe:	2201      	movgt	r2, #1
 800ebc0:	4413      	add	r3, r2
 800ebc2:	e7e0      	b.n	800eb86 <_printf_float+0x192>
 800ebc4:	6823      	ldr	r3, [r4, #0]
 800ebc6:	055a      	lsls	r2, r3, #21
 800ebc8:	d407      	bmi.n	800ebda <_printf_float+0x1e6>
 800ebca:	6923      	ldr	r3, [r4, #16]
 800ebcc:	4642      	mov	r2, r8
 800ebce:	4631      	mov	r1, r6
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	47b8      	blx	r7
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	d12b      	bne.n	800ec30 <_printf_float+0x23c>
 800ebd8:	e767      	b.n	800eaaa <_printf_float+0xb6>
 800ebda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ebde:	f240 80dd 	bls.w	800ed9c <_printf_float+0x3a8>
 800ebe2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	2300      	movs	r3, #0
 800ebea:	f7f1 ff8d 	bl	8000b08 <__aeabi_dcmpeq>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d033      	beq.n	800ec5a <_printf_float+0x266>
 800ebf2:	4a37      	ldr	r2, [pc, #220]	@ (800ecd0 <_printf_float+0x2dc>)
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	47b8      	blx	r7
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	f43f af54 	beq.w	800eaaa <_printf_float+0xb6>
 800ec02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ec06:	4543      	cmp	r3, r8
 800ec08:	db02      	blt.n	800ec10 <_printf_float+0x21c>
 800ec0a:	6823      	ldr	r3, [r4, #0]
 800ec0c:	07d8      	lsls	r0, r3, #31
 800ec0e:	d50f      	bpl.n	800ec30 <_printf_float+0x23c>
 800ec10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec14:	4631      	mov	r1, r6
 800ec16:	4628      	mov	r0, r5
 800ec18:	47b8      	blx	r7
 800ec1a:	3001      	adds	r0, #1
 800ec1c:	f43f af45 	beq.w	800eaaa <_printf_float+0xb6>
 800ec20:	f04f 0900 	mov.w	r9, #0
 800ec24:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec28:	f104 0a1a 	add.w	sl, r4, #26
 800ec2c:	45c8      	cmp	r8, r9
 800ec2e:	dc09      	bgt.n	800ec44 <_printf_float+0x250>
 800ec30:	6823      	ldr	r3, [r4, #0]
 800ec32:	079b      	lsls	r3, r3, #30
 800ec34:	f100 8103 	bmi.w	800ee3e <_printf_float+0x44a>
 800ec38:	68e0      	ldr	r0, [r4, #12]
 800ec3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec3c:	4298      	cmp	r0, r3
 800ec3e:	bfb8      	it	lt
 800ec40:	4618      	movlt	r0, r3
 800ec42:	e734      	b.n	800eaae <_printf_float+0xba>
 800ec44:	2301      	movs	r3, #1
 800ec46:	4652      	mov	r2, sl
 800ec48:	4631      	mov	r1, r6
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	47b8      	blx	r7
 800ec4e:	3001      	adds	r0, #1
 800ec50:	f43f af2b 	beq.w	800eaaa <_printf_float+0xb6>
 800ec54:	f109 0901 	add.w	r9, r9, #1
 800ec58:	e7e8      	b.n	800ec2c <_printf_float+0x238>
 800ec5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	dc39      	bgt.n	800ecd4 <_printf_float+0x2e0>
 800ec60:	4a1b      	ldr	r2, [pc, #108]	@ (800ecd0 <_printf_float+0x2dc>)
 800ec62:	2301      	movs	r3, #1
 800ec64:	4631      	mov	r1, r6
 800ec66:	4628      	mov	r0, r5
 800ec68:	47b8      	blx	r7
 800ec6a:	3001      	adds	r0, #1
 800ec6c:	f43f af1d 	beq.w	800eaaa <_printf_float+0xb6>
 800ec70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ec74:	ea59 0303 	orrs.w	r3, r9, r3
 800ec78:	d102      	bne.n	800ec80 <_printf_float+0x28c>
 800ec7a:	6823      	ldr	r3, [r4, #0]
 800ec7c:	07d9      	lsls	r1, r3, #31
 800ec7e:	d5d7      	bpl.n	800ec30 <_printf_float+0x23c>
 800ec80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec84:	4631      	mov	r1, r6
 800ec86:	4628      	mov	r0, r5
 800ec88:	47b8      	blx	r7
 800ec8a:	3001      	adds	r0, #1
 800ec8c:	f43f af0d 	beq.w	800eaaa <_printf_float+0xb6>
 800ec90:	f04f 0a00 	mov.w	sl, #0
 800ec94:	f104 0b1a 	add.w	fp, r4, #26
 800ec98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec9a:	425b      	negs	r3, r3
 800ec9c:	4553      	cmp	r3, sl
 800ec9e:	dc01      	bgt.n	800eca4 <_printf_float+0x2b0>
 800eca0:	464b      	mov	r3, r9
 800eca2:	e793      	b.n	800ebcc <_printf_float+0x1d8>
 800eca4:	2301      	movs	r3, #1
 800eca6:	465a      	mov	r2, fp
 800eca8:	4631      	mov	r1, r6
 800ecaa:	4628      	mov	r0, r5
 800ecac:	47b8      	blx	r7
 800ecae:	3001      	adds	r0, #1
 800ecb0:	f43f aefb 	beq.w	800eaaa <_printf_float+0xb6>
 800ecb4:	f10a 0a01 	add.w	sl, sl, #1
 800ecb8:	e7ee      	b.n	800ec98 <_printf_float+0x2a4>
 800ecba:	bf00      	nop
 800ecbc:	7fefffff 	.word	0x7fefffff
 800ecc0:	080124a0 	.word	0x080124a0
 800ecc4:	080124a4 	.word	0x080124a4
 800ecc8:	080124a8 	.word	0x080124a8
 800eccc:	080124ac 	.word	0x080124ac
 800ecd0:	080124b0 	.word	0x080124b0
 800ecd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ecd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ecda:	4553      	cmp	r3, sl
 800ecdc:	bfa8      	it	ge
 800ecde:	4653      	movge	r3, sl
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	4699      	mov	r9, r3
 800ece4:	dc36      	bgt.n	800ed54 <_printf_float+0x360>
 800ece6:	f04f 0b00 	mov.w	fp, #0
 800ecea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ecee:	f104 021a 	add.w	r2, r4, #26
 800ecf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ecf4:	9306      	str	r3, [sp, #24]
 800ecf6:	eba3 0309 	sub.w	r3, r3, r9
 800ecfa:	455b      	cmp	r3, fp
 800ecfc:	dc31      	bgt.n	800ed62 <_printf_float+0x36e>
 800ecfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed00:	459a      	cmp	sl, r3
 800ed02:	dc3a      	bgt.n	800ed7a <_printf_float+0x386>
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	07da      	lsls	r2, r3, #31
 800ed08:	d437      	bmi.n	800ed7a <_printf_float+0x386>
 800ed0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed0c:	ebaa 0903 	sub.w	r9, sl, r3
 800ed10:	9b06      	ldr	r3, [sp, #24]
 800ed12:	ebaa 0303 	sub.w	r3, sl, r3
 800ed16:	4599      	cmp	r9, r3
 800ed18:	bfa8      	it	ge
 800ed1a:	4699      	movge	r9, r3
 800ed1c:	f1b9 0f00 	cmp.w	r9, #0
 800ed20:	dc33      	bgt.n	800ed8a <_printf_float+0x396>
 800ed22:	f04f 0800 	mov.w	r8, #0
 800ed26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed2a:	f104 0b1a 	add.w	fp, r4, #26
 800ed2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed30:	ebaa 0303 	sub.w	r3, sl, r3
 800ed34:	eba3 0309 	sub.w	r3, r3, r9
 800ed38:	4543      	cmp	r3, r8
 800ed3a:	f77f af79 	ble.w	800ec30 <_printf_float+0x23c>
 800ed3e:	2301      	movs	r3, #1
 800ed40:	465a      	mov	r2, fp
 800ed42:	4631      	mov	r1, r6
 800ed44:	4628      	mov	r0, r5
 800ed46:	47b8      	blx	r7
 800ed48:	3001      	adds	r0, #1
 800ed4a:	f43f aeae 	beq.w	800eaaa <_printf_float+0xb6>
 800ed4e:	f108 0801 	add.w	r8, r8, #1
 800ed52:	e7ec      	b.n	800ed2e <_printf_float+0x33a>
 800ed54:	4642      	mov	r2, r8
 800ed56:	4631      	mov	r1, r6
 800ed58:	4628      	mov	r0, r5
 800ed5a:	47b8      	blx	r7
 800ed5c:	3001      	adds	r0, #1
 800ed5e:	d1c2      	bne.n	800ece6 <_printf_float+0x2f2>
 800ed60:	e6a3      	b.n	800eaaa <_printf_float+0xb6>
 800ed62:	2301      	movs	r3, #1
 800ed64:	4631      	mov	r1, r6
 800ed66:	4628      	mov	r0, r5
 800ed68:	9206      	str	r2, [sp, #24]
 800ed6a:	47b8      	blx	r7
 800ed6c:	3001      	adds	r0, #1
 800ed6e:	f43f ae9c 	beq.w	800eaaa <_printf_float+0xb6>
 800ed72:	9a06      	ldr	r2, [sp, #24]
 800ed74:	f10b 0b01 	add.w	fp, fp, #1
 800ed78:	e7bb      	b.n	800ecf2 <_printf_float+0x2fe>
 800ed7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed7e:	4631      	mov	r1, r6
 800ed80:	4628      	mov	r0, r5
 800ed82:	47b8      	blx	r7
 800ed84:	3001      	adds	r0, #1
 800ed86:	d1c0      	bne.n	800ed0a <_printf_float+0x316>
 800ed88:	e68f      	b.n	800eaaa <_printf_float+0xb6>
 800ed8a:	9a06      	ldr	r2, [sp, #24]
 800ed8c:	464b      	mov	r3, r9
 800ed8e:	4442      	add	r2, r8
 800ed90:	4631      	mov	r1, r6
 800ed92:	4628      	mov	r0, r5
 800ed94:	47b8      	blx	r7
 800ed96:	3001      	adds	r0, #1
 800ed98:	d1c3      	bne.n	800ed22 <_printf_float+0x32e>
 800ed9a:	e686      	b.n	800eaaa <_printf_float+0xb6>
 800ed9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eda0:	f1ba 0f01 	cmp.w	sl, #1
 800eda4:	dc01      	bgt.n	800edaa <_printf_float+0x3b6>
 800eda6:	07db      	lsls	r3, r3, #31
 800eda8:	d536      	bpl.n	800ee18 <_printf_float+0x424>
 800edaa:	2301      	movs	r3, #1
 800edac:	4642      	mov	r2, r8
 800edae:	4631      	mov	r1, r6
 800edb0:	4628      	mov	r0, r5
 800edb2:	47b8      	blx	r7
 800edb4:	3001      	adds	r0, #1
 800edb6:	f43f ae78 	beq.w	800eaaa <_printf_float+0xb6>
 800edba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edbe:	4631      	mov	r1, r6
 800edc0:	4628      	mov	r0, r5
 800edc2:	47b8      	blx	r7
 800edc4:	3001      	adds	r0, #1
 800edc6:	f43f ae70 	beq.w	800eaaa <_printf_float+0xb6>
 800edca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800edce:	2200      	movs	r2, #0
 800edd0:	2300      	movs	r3, #0
 800edd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edd6:	f7f1 fe97 	bl	8000b08 <__aeabi_dcmpeq>
 800edda:	b9c0      	cbnz	r0, 800ee0e <_printf_float+0x41a>
 800eddc:	4653      	mov	r3, sl
 800edde:	f108 0201 	add.w	r2, r8, #1
 800ede2:	4631      	mov	r1, r6
 800ede4:	4628      	mov	r0, r5
 800ede6:	47b8      	blx	r7
 800ede8:	3001      	adds	r0, #1
 800edea:	d10c      	bne.n	800ee06 <_printf_float+0x412>
 800edec:	e65d      	b.n	800eaaa <_printf_float+0xb6>
 800edee:	2301      	movs	r3, #1
 800edf0:	465a      	mov	r2, fp
 800edf2:	4631      	mov	r1, r6
 800edf4:	4628      	mov	r0, r5
 800edf6:	47b8      	blx	r7
 800edf8:	3001      	adds	r0, #1
 800edfa:	f43f ae56 	beq.w	800eaaa <_printf_float+0xb6>
 800edfe:	f108 0801 	add.w	r8, r8, #1
 800ee02:	45d0      	cmp	r8, sl
 800ee04:	dbf3      	blt.n	800edee <_printf_float+0x3fa>
 800ee06:	464b      	mov	r3, r9
 800ee08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ee0c:	e6df      	b.n	800ebce <_printf_float+0x1da>
 800ee0e:	f04f 0800 	mov.w	r8, #0
 800ee12:	f104 0b1a 	add.w	fp, r4, #26
 800ee16:	e7f4      	b.n	800ee02 <_printf_float+0x40e>
 800ee18:	2301      	movs	r3, #1
 800ee1a:	4642      	mov	r2, r8
 800ee1c:	e7e1      	b.n	800ede2 <_printf_float+0x3ee>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	464a      	mov	r2, r9
 800ee22:	4631      	mov	r1, r6
 800ee24:	4628      	mov	r0, r5
 800ee26:	47b8      	blx	r7
 800ee28:	3001      	adds	r0, #1
 800ee2a:	f43f ae3e 	beq.w	800eaaa <_printf_float+0xb6>
 800ee2e:	f108 0801 	add.w	r8, r8, #1
 800ee32:	68e3      	ldr	r3, [r4, #12]
 800ee34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee36:	1a5b      	subs	r3, r3, r1
 800ee38:	4543      	cmp	r3, r8
 800ee3a:	dcf0      	bgt.n	800ee1e <_printf_float+0x42a>
 800ee3c:	e6fc      	b.n	800ec38 <_printf_float+0x244>
 800ee3e:	f04f 0800 	mov.w	r8, #0
 800ee42:	f104 0919 	add.w	r9, r4, #25
 800ee46:	e7f4      	b.n	800ee32 <_printf_float+0x43e>

0800ee48 <_printf_common>:
 800ee48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee4c:	4616      	mov	r6, r2
 800ee4e:	4698      	mov	r8, r3
 800ee50:	688a      	ldr	r2, [r1, #8]
 800ee52:	690b      	ldr	r3, [r1, #16]
 800ee54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	bfb8      	it	lt
 800ee5c:	4613      	movlt	r3, r2
 800ee5e:	6033      	str	r3, [r6, #0]
 800ee60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ee64:	4607      	mov	r7, r0
 800ee66:	460c      	mov	r4, r1
 800ee68:	b10a      	cbz	r2, 800ee6e <_printf_common+0x26>
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	6033      	str	r3, [r6, #0]
 800ee6e:	6823      	ldr	r3, [r4, #0]
 800ee70:	0699      	lsls	r1, r3, #26
 800ee72:	bf42      	ittt	mi
 800ee74:	6833      	ldrmi	r3, [r6, #0]
 800ee76:	3302      	addmi	r3, #2
 800ee78:	6033      	strmi	r3, [r6, #0]
 800ee7a:	6825      	ldr	r5, [r4, #0]
 800ee7c:	f015 0506 	ands.w	r5, r5, #6
 800ee80:	d106      	bne.n	800ee90 <_printf_common+0x48>
 800ee82:	f104 0a19 	add.w	sl, r4, #25
 800ee86:	68e3      	ldr	r3, [r4, #12]
 800ee88:	6832      	ldr	r2, [r6, #0]
 800ee8a:	1a9b      	subs	r3, r3, r2
 800ee8c:	42ab      	cmp	r3, r5
 800ee8e:	dc26      	bgt.n	800eede <_printf_common+0x96>
 800ee90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ee94:	6822      	ldr	r2, [r4, #0]
 800ee96:	3b00      	subs	r3, #0
 800ee98:	bf18      	it	ne
 800ee9a:	2301      	movne	r3, #1
 800ee9c:	0692      	lsls	r2, r2, #26
 800ee9e:	d42b      	bmi.n	800eef8 <_printf_common+0xb0>
 800eea0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eea4:	4641      	mov	r1, r8
 800eea6:	4638      	mov	r0, r7
 800eea8:	47c8      	blx	r9
 800eeaa:	3001      	adds	r0, #1
 800eeac:	d01e      	beq.n	800eeec <_printf_common+0xa4>
 800eeae:	6823      	ldr	r3, [r4, #0]
 800eeb0:	6922      	ldr	r2, [r4, #16]
 800eeb2:	f003 0306 	and.w	r3, r3, #6
 800eeb6:	2b04      	cmp	r3, #4
 800eeb8:	bf02      	ittt	eq
 800eeba:	68e5      	ldreq	r5, [r4, #12]
 800eebc:	6833      	ldreq	r3, [r6, #0]
 800eebe:	1aed      	subeq	r5, r5, r3
 800eec0:	68a3      	ldr	r3, [r4, #8]
 800eec2:	bf0c      	ite	eq
 800eec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eec8:	2500      	movne	r5, #0
 800eeca:	4293      	cmp	r3, r2
 800eecc:	bfc4      	itt	gt
 800eece:	1a9b      	subgt	r3, r3, r2
 800eed0:	18ed      	addgt	r5, r5, r3
 800eed2:	2600      	movs	r6, #0
 800eed4:	341a      	adds	r4, #26
 800eed6:	42b5      	cmp	r5, r6
 800eed8:	d11a      	bne.n	800ef10 <_printf_common+0xc8>
 800eeda:	2000      	movs	r0, #0
 800eedc:	e008      	b.n	800eef0 <_printf_common+0xa8>
 800eede:	2301      	movs	r3, #1
 800eee0:	4652      	mov	r2, sl
 800eee2:	4641      	mov	r1, r8
 800eee4:	4638      	mov	r0, r7
 800eee6:	47c8      	blx	r9
 800eee8:	3001      	adds	r0, #1
 800eeea:	d103      	bne.n	800eef4 <_printf_common+0xac>
 800eeec:	f04f 30ff 	mov.w	r0, #4294967295
 800eef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eef4:	3501      	adds	r5, #1
 800eef6:	e7c6      	b.n	800ee86 <_printf_common+0x3e>
 800eef8:	18e1      	adds	r1, r4, r3
 800eefa:	1c5a      	adds	r2, r3, #1
 800eefc:	2030      	movs	r0, #48	@ 0x30
 800eefe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ef02:	4422      	add	r2, r4
 800ef04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ef08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ef0c:	3302      	adds	r3, #2
 800ef0e:	e7c7      	b.n	800eea0 <_printf_common+0x58>
 800ef10:	2301      	movs	r3, #1
 800ef12:	4622      	mov	r2, r4
 800ef14:	4641      	mov	r1, r8
 800ef16:	4638      	mov	r0, r7
 800ef18:	47c8      	blx	r9
 800ef1a:	3001      	adds	r0, #1
 800ef1c:	d0e6      	beq.n	800eeec <_printf_common+0xa4>
 800ef1e:	3601      	adds	r6, #1
 800ef20:	e7d9      	b.n	800eed6 <_printf_common+0x8e>
	...

0800ef24 <_printf_i>:
 800ef24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef28:	7e0f      	ldrb	r7, [r1, #24]
 800ef2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ef2c:	2f78      	cmp	r7, #120	@ 0x78
 800ef2e:	4691      	mov	r9, r2
 800ef30:	4680      	mov	r8, r0
 800ef32:	460c      	mov	r4, r1
 800ef34:	469a      	mov	sl, r3
 800ef36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ef3a:	d807      	bhi.n	800ef4c <_printf_i+0x28>
 800ef3c:	2f62      	cmp	r7, #98	@ 0x62
 800ef3e:	d80a      	bhi.n	800ef56 <_printf_i+0x32>
 800ef40:	2f00      	cmp	r7, #0
 800ef42:	f000 80d2 	beq.w	800f0ea <_printf_i+0x1c6>
 800ef46:	2f58      	cmp	r7, #88	@ 0x58
 800ef48:	f000 80b9 	beq.w	800f0be <_printf_i+0x19a>
 800ef4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ef54:	e03a      	b.n	800efcc <_printf_i+0xa8>
 800ef56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ef5a:	2b15      	cmp	r3, #21
 800ef5c:	d8f6      	bhi.n	800ef4c <_printf_i+0x28>
 800ef5e:	a101      	add	r1, pc, #4	@ (adr r1, 800ef64 <_printf_i+0x40>)
 800ef60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef64:	0800efbd 	.word	0x0800efbd
 800ef68:	0800efd1 	.word	0x0800efd1
 800ef6c:	0800ef4d 	.word	0x0800ef4d
 800ef70:	0800ef4d 	.word	0x0800ef4d
 800ef74:	0800ef4d 	.word	0x0800ef4d
 800ef78:	0800ef4d 	.word	0x0800ef4d
 800ef7c:	0800efd1 	.word	0x0800efd1
 800ef80:	0800ef4d 	.word	0x0800ef4d
 800ef84:	0800ef4d 	.word	0x0800ef4d
 800ef88:	0800ef4d 	.word	0x0800ef4d
 800ef8c:	0800ef4d 	.word	0x0800ef4d
 800ef90:	0800f0d1 	.word	0x0800f0d1
 800ef94:	0800effb 	.word	0x0800effb
 800ef98:	0800f08b 	.word	0x0800f08b
 800ef9c:	0800ef4d 	.word	0x0800ef4d
 800efa0:	0800ef4d 	.word	0x0800ef4d
 800efa4:	0800f0f3 	.word	0x0800f0f3
 800efa8:	0800ef4d 	.word	0x0800ef4d
 800efac:	0800effb 	.word	0x0800effb
 800efb0:	0800ef4d 	.word	0x0800ef4d
 800efb4:	0800ef4d 	.word	0x0800ef4d
 800efb8:	0800f093 	.word	0x0800f093
 800efbc:	6833      	ldr	r3, [r6, #0]
 800efbe:	1d1a      	adds	r2, r3, #4
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	6032      	str	r2, [r6, #0]
 800efc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800efc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800efcc:	2301      	movs	r3, #1
 800efce:	e09d      	b.n	800f10c <_printf_i+0x1e8>
 800efd0:	6833      	ldr	r3, [r6, #0]
 800efd2:	6820      	ldr	r0, [r4, #0]
 800efd4:	1d19      	adds	r1, r3, #4
 800efd6:	6031      	str	r1, [r6, #0]
 800efd8:	0606      	lsls	r6, r0, #24
 800efda:	d501      	bpl.n	800efe0 <_printf_i+0xbc>
 800efdc:	681d      	ldr	r5, [r3, #0]
 800efde:	e003      	b.n	800efe8 <_printf_i+0xc4>
 800efe0:	0645      	lsls	r5, r0, #25
 800efe2:	d5fb      	bpl.n	800efdc <_printf_i+0xb8>
 800efe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800efe8:	2d00      	cmp	r5, #0
 800efea:	da03      	bge.n	800eff4 <_printf_i+0xd0>
 800efec:	232d      	movs	r3, #45	@ 0x2d
 800efee:	426d      	negs	r5, r5
 800eff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eff4:	4859      	ldr	r0, [pc, #356]	@ (800f15c <_printf_i+0x238>)
 800eff6:	230a      	movs	r3, #10
 800eff8:	e011      	b.n	800f01e <_printf_i+0xfa>
 800effa:	6821      	ldr	r1, [r4, #0]
 800effc:	6833      	ldr	r3, [r6, #0]
 800effe:	0608      	lsls	r0, r1, #24
 800f000:	f853 5b04 	ldr.w	r5, [r3], #4
 800f004:	d402      	bmi.n	800f00c <_printf_i+0xe8>
 800f006:	0649      	lsls	r1, r1, #25
 800f008:	bf48      	it	mi
 800f00a:	b2ad      	uxthmi	r5, r5
 800f00c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f00e:	4853      	ldr	r0, [pc, #332]	@ (800f15c <_printf_i+0x238>)
 800f010:	6033      	str	r3, [r6, #0]
 800f012:	bf14      	ite	ne
 800f014:	230a      	movne	r3, #10
 800f016:	2308      	moveq	r3, #8
 800f018:	2100      	movs	r1, #0
 800f01a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f01e:	6866      	ldr	r6, [r4, #4]
 800f020:	60a6      	str	r6, [r4, #8]
 800f022:	2e00      	cmp	r6, #0
 800f024:	bfa2      	ittt	ge
 800f026:	6821      	ldrge	r1, [r4, #0]
 800f028:	f021 0104 	bicge.w	r1, r1, #4
 800f02c:	6021      	strge	r1, [r4, #0]
 800f02e:	b90d      	cbnz	r5, 800f034 <_printf_i+0x110>
 800f030:	2e00      	cmp	r6, #0
 800f032:	d04b      	beq.n	800f0cc <_printf_i+0x1a8>
 800f034:	4616      	mov	r6, r2
 800f036:	fbb5 f1f3 	udiv	r1, r5, r3
 800f03a:	fb03 5711 	mls	r7, r3, r1, r5
 800f03e:	5dc7      	ldrb	r7, [r0, r7]
 800f040:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f044:	462f      	mov	r7, r5
 800f046:	42bb      	cmp	r3, r7
 800f048:	460d      	mov	r5, r1
 800f04a:	d9f4      	bls.n	800f036 <_printf_i+0x112>
 800f04c:	2b08      	cmp	r3, #8
 800f04e:	d10b      	bne.n	800f068 <_printf_i+0x144>
 800f050:	6823      	ldr	r3, [r4, #0]
 800f052:	07df      	lsls	r7, r3, #31
 800f054:	d508      	bpl.n	800f068 <_printf_i+0x144>
 800f056:	6923      	ldr	r3, [r4, #16]
 800f058:	6861      	ldr	r1, [r4, #4]
 800f05a:	4299      	cmp	r1, r3
 800f05c:	bfde      	ittt	le
 800f05e:	2330      	movle	r3, #48	@ 0x30
 800f060:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f064:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f068:	1b92      	subs	r2, r2, r6
 800f06a:	6122      	str	r2, [r4, #16]
 800f06c:	f8cd a000 	str.w	sl, [sp]
 800f070:	464b      	mov	r3, r9
 800f072:	aa03      	add	r2, sp, #12
 800f074:	4621      	mov	r1, r4
 800f076:	4640      	mov	r0, r8
 800f078:	f7ff fee6 	bl	800ee48 <_printf_common>
 800f07c:	3001      	adds	r0, #1
 800f07e:	d14a      	bne.n	800f116 <_printf_i+0x1f2>
 800f080:	f04f 30ff 	mov.w	r0, #4294967295
 800f084:	b004      	add	sp, #16
 800f086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f08a:	6823      	ldr	r3, [r4, #0]
 800f08c:	f043 0320 	orr.w	r3, r3, #32
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	4833      	ldr	r0, [pc, #204]	@ (800f160 <_printf_i+0x23c>)
 800f094:	2778      	movs	r7, #120	@ 0x78
 800f096:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f09a:	6823      	ldr	r3, [r4, #0]
 800f09c:	6831      	ldr	r1, [r6, #0]
 800f09e:	061f      	lsls	r7, r3, #24
 800f0a0:	f851 5b04 	ldr.w	r5, [r1], #4
 800f0a4:	d402      	bmi.n	800f0ac <_printf_i+0x188>
 800f0a6:	065f      	lsls	r7, r3, #25
 800f0a8:	bf48      	it	mi
 800f0aa:	b2ad      	uxthmi	r5, r5
 800f0ac:	6031      	str	r1, [r6, #0]
 800f0ae:	07d9      	lsls	r1, r3, #31
 800f0b0:	bf44      	itt	mi
 800f0b2:	f043 0320 	orrmi.w	r3, r3, #32
 800f0b6:	6023      	strmi	r3, [r4, #0]
 800f0b8:	b11d      	cbz	r5, 800f0c2 <_printf_i+0x19e>
 800f0ba:	2310      	movs	r3, #16
 800f0bc:	e7ac      	b.n	800f018 <_printf_i+0xf4>
 800f0be:	4827      	ldr	r0, [pc, #156]	@ (800f15c <_printf_i+0x238>)
 800f0c0:	e7e9      	b.n	800f096 <_printf_i+0x172>
 800f0c2:	6823      	ldr	r3, [r4, #0]
 800f0c4:	f023 0320 	bic.w	r3, r3, #32
 800f0c8:	6023      	str	r3, [r4, #0]
 800f0ca:	e7f6      	b.n	800f0ba <_printf_i+0x196>
 800f0cc:	4616      	mov	r6, r2
 800f0ce:	e7bd      	b.n	800f04c <_printf_i+0x128>
 800f0d0:	6833      	ldr	r3, [r6, #0]
 800f0d2:	6825      	ldr	r5, [r4, #0]
 800f0d4:	6961      	ldr	r1, [r4, #20]
 800f0d6:	1d18      	adds	r0, r3, #4
 800f0d8:	6030      	str	r0, [r6, #0]
 800f0da:	062e      	lsls	r6, r5, #24
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	d501      	bpl.n	800f0e4 <_printf_i+0x1c0>
 800f0e0:	6019      	str	r1, [r3, #0]
 800f0e2:	e002      	b.n	800f0ea <_printf_i+0x1c6>
 800f0e4:	0668      	lsls	r0, r5, #25
 800f0e6:	d5fb      	bpl.n	800f0e0 <_printf_i+0x1bc>
 800f0e8:	8019      	strh	r1, [r3, #0]
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	6123      	str	r3, [r4, #16]
 800f0ee:	4616      	mov	r6, r2
 800f0f0:	e7bc      	b.n	800f06c <_printf_i+0x148>
 800f0f2:	6833      	ldr	r3, [r6, #0]
 800f0f4:	1d1a      	adds	r2, r3, #4
 800f0f6:	6032      	str	r2, [r6, #0]
 800f0f8:	681e      	ldr	r6, [r3, #0]
 800f0fa:	6862      	ldr	r2, [r4, #4]
 800f0fc:	2100      	movs	r1, #0
 800f0fe:	4630      	mov	r0, r6
 800f100:	f7f1 f886 	bl	8000210 <memchr>
 800f104:	b108      	cbz	r0, 800f10a <_printf_i+0x1e6>
 800f106:	1b80      	subs	r0, r0, r6
 800f108:	6060      	str	r0, [r4, #4]
 800f10a:	6863      	ldr	r3, [r4, #4]
 800f10c:	6123      	str	r3, [r4, #16]
 800f10e:	2300      	movs	r3, #0
 800f110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f114:	e7aa      	b.n	800f06c <_printf_i+0x148>
 800f116:	6923      	ldr	r3, [r4, #16]
 800f118:	4632      	mov	r2, r6
 800f11a:	4649      	mov	r1, r9
 800f11c:	4640      	mov	r0, r8
 800f11e:	47d0      	blx	sl
 800f120:	3001      	adds	r0, #1
 800f122:	d0ad      	beq.n	800f080 <_printf_i+0x15c>
 800f124:	6823      	ldr	r3, [r4, #0]
 800f126:	079b      	lsls	r3, r3, #30
 800f128:	d413      	bmi.n	800f152 <_printf_i+0x22e>
 800f12a:	68e0      	ldr	r0, [r4, #12]
 800f12c:	9b03      	ldr	r3, [sp, #12]
 800f12e:	4298      	cmp	r0, r3
 800f130:	bfb8      	it	lt
 800f132:	4618      	movlt	r0, r3
 800f134:	e7a6      	b.n	800f084 <_printf_i+0x160>
 800f136:	2301      	movs	r3, #1
 800f138:	4632      	mov	r2, r6
 800f13a:	4649      	mov	r1, r9
 800f13c:	4640      	mov	r0, r8
 800f13e:	47d0      	blx	sl
 800f140:	3001      	adds	r0, #1
 800f142:	d09d      	beq.n	800f080 <_printf_i+0x15c>
 800f144:	3501      	adds	r5, #1
 800f146:	68e3      	ldr	r3, [r4, #12]
 800f148:	9903      	ldr	r1, [sp, #12]
 800f14a:	1a5b      	subs	r3, r3, r1
 800f14c:	42ab      	cmp	r3, r5
 800f14e:	dcf2      	bgt.n	800f136 <_printf_i+0x212>
 800f150:	e7eb      	b.n	800f12a <_printf_i+0x206>
 800f152:	2500      	movs	r5, #0
 800f154:	f104 0619 	add.w	r6, r4, #25
 800f158:	e7f5      	b.n	800f146 <_printf_i+0x222>
 800f15a:	bf00      	nop
 800f15c:	080124b2 	.word	0x080124b2
 800f160:	080124c3 	.word	0x080124c3

0800f164 <_scanf_float>:
 800f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f168:	b087      	sub	sp, #28
 800f16a:	4617      	mov	r7, r2
 800f16c:	9303      	str	r3, [sp, #12]
 800f16e:	688b      	ldr	r3, [r1, #8]
 800f170:	1e5a      	subs	r2, r3, #1
 800f172:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f176:	bf81      	itttt	hi
 800f178:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f17c:	eb03 0b05 	addhi.w	fp, r3, r5
 800f180:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f184:	608b      	strhi	r3, [r1, #8]
 800f186:	680b      	ldr	r3, [r1, #0]
 800f188:	460a      	mov	r2, r1
 800f18a:	f04f 0500 	mov.w	r5, #0
 800f18e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f192:	f842 3b1c 	str.w	r3, [r2], #28
 800f196:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f19a:	4680      	mov	r8, r0
 800f19c:	460c      	mov	r4, r1
 800f19e:	bf98      	it	ls
 800f1a0:	f04f 0b00 	movls.w	fp, #0
 800f1a4:	9201      	str	r2, [sp, #4]
 800f1a6:	4616      	mov	r6, r2
 800f1a8:	46aa      	mov	sl, r5
 800f1aa:	46a9      	mov	r9, r5
 800f1ac:	9502      	str	r5, [sp, #8]
 800f1ae:	68a2      	ldr	r2, [r4, #8]
 800f1b0:	b152      	cbz	r2, 800f1c8 <_scanf_float+0x64>
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	2b4e      	cmp	r3, #78	@ 0x4e
 800f1b8:	d864      	bhi.n	800f284 <_scanf_float+0x120>
 800f1ba:	2b40      	cmp	r3, #64	@ 0x40
 800f1bc:	d83c      	bhi.n	800f238 <_scanf_float+0xd4>
 800f1be:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f1c2:	b2c8      	uxtb	r0, r1
 800f1c4:	280e      	cmp	r0, #14
 800f1c6:	d93a      	bls.n	800f23e <_scanf_float+0xda>
 800f1c8:	f1b9 0f00 	cmp.w	r9, #0
 800f1cc:	d003      	beq.n	800f1d6 <_scanf_float+0x72>
 800f1ce:	6823      	ldr	r3, [r4, #0]
 800f1d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f1d4:	6023      	str	r3, [r4, #0]
 800f1d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1da:	f1ba 0f01 	cmp.w	sl, #1
 800f1de:	f200 8117 	bhi.w	800f410 <_scanf_float+0x2ac>
 800f1e2:	9b01      	ldr	r3, [sp, #4]
 800f1e4:	429e      	cmp	r6, r3
 800f1e6:	f200 8108 	bhi.w	800f3fa <_scanf_float+0x296>
 800f1ea:	2001      	movs	r0, #1
 800f1ec:	b007      	add	sp, #28
 800f1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f1f6:	2a0d      	cmp	r2, #13
 800f1f8:	d8e6      	bhi.n	800f1c8 <_scanf_float+0x64>
 800f1fa:	a101      	add	r1, pc, #4	@ (adr r1, 800f200 <_scanf_float+0x9c>)
 800f1fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f200:	0800f347 	.word	0x0800f347
 800f204:	0800f1c9 	.word	0x0800f1c9
 800f208:	0800f1c9 	.word	0x0800f1c9
 800f20c:	0800f1c9 	.word	0x0800f1c9
 800f210:	0800f3a7 	.word	0x0800f3a7
 800f214:	0800f37f 	.word	0x0800f37f
 800f218:	0800f1c9 	.word	0x0800f1c9
 800f21c:	0800f1c9 	.word	0x0800f1c9
 800f220:	0800f355 	.word	0x0800f355
 800f224:	0800f1c9 	.word	0x0800f1c9
 800f228:	0800f1c9 	.word	0x0800f1c9
 800f22c:	0800f1c9 	.word	0x0800f1c9
 800f230:	0800f1c9 	.word	0x0800f1c9
 800f234:	0800f30d 	.word	0x0800f30d
 800f238:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f23c:	e7db      	b.n	800f1f6 <_scanf_float+0x92>
 800f23e:	290e      	cmp	r1, #14
 800f240:	d8c2      	bhi.n	800f1c8 <_scanf_float+0x64>
 800f242:	a001      	add	r0, pc, #4	@ (adr r0, 800f248 <_scanf_float+0xe4>)
 800f244:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f248:	0800f2fd 	.word	0x0800f2fd
 800f24c:	0800f1c9 	.word	0x0800f1c9
 800f250:	0800f2fd 	.word	0x0800f2fd
 800f254:	0800f393 	.word	0x0800f393
 800f258:	0800f1c9 	.word	0x0800f1c9
 800f25c:	0800f2a5 	.word	0x0800f2a5
 800f260:	0800f2e3 	.word	0x0800f2e3
 800f264:	0800f2e3 	.word	0x0800f2e3
 800f268:	0800f2e3 	.word	0x0800f2e3
 800f26c:	0800f2e3 	.word	0x0800f2e3
 800f270:	0800f2e3 	.word	0x0800f2e3
 800f274:	0800f2e3 	.word	0x0800f2e3
 800f278:	0800f2e3 	.word	0x0800f2e3
 800f27c:	0800f2e3 	.word	0x0800f2e3
 800f280:	0800f2e3 	.word	0x0800f2e3
 800f284:	2b6e      	cmp	r3, #110	@ 0x6e
 800f286:	d809      	bhi.n	800f29c <_scanf_float+0x138>
 800f288:	2b60      	cmp	r3, #96	@ 0x60
 800f28a:	d8b2      	bhi.n	800f1f2 <_scanf_float+0x8e>
 800f28c:	2b54      	cmp	r3, #84	@ 0x54
 800f28e:	d07b      	beq.n	800f388 <_scanf_float+0x224>
 800f290:	2b59      	cmp	r3, #89	@ 0x59
 800f292:	d199      	bne.n	800f1c8 <_scanf_float+0x64>
 800f294:	2d07      	cmp	r5, #7
 800f296:	d197      	bne.n	800f1c8 <_scanf_float+0x64>
 800f298:	2508      	movs	r5, #8
 800f29a:	e02c      	b.n	800f2f6 <_scanf_float+0x192>
 800f29c:	2b74      	cmp	r3, #116	@ 0x74
 800f29e:	d073      	beq.n	800f388 <_scanf_float+0x224>
 800f2a0:	2b79      	cmp	r3, #121	@ 0x79
 800f2a2:	e7f6      	b.n	800f292 <_scanf_float+0x12e>
 800f2a4:	6821      	ldr	r1, [r4, #0]
 800f2a6:	05c8      	lsls	r0, r1, #23
 800f2a8:	d51b      	bpl.n	800f2e2 <_scanf_float+0x17e>
 800f2aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f2ae:	6021      	str	r1, [r4, #0]
 800f2b0:	f109 0901 	add.w	r9, r9, #1
 800f2b4:	f1bb 0f00 	cmp.w	fp, #0
 800f2b8:	d003      	beq.n	800f2c2 <_scanf_float+0x15e>
 800f2ba:	3201      	adds	r2, #1
 800f2bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2c0:	60a2      	str	r2, [r4, #8]
 800f2c2:	68a3      	ldr	r3, [r4, #8]
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	60a3      	str	r3, [r4, #8]
 800f2c8:	6923      	ldr	r3, [r4, #16]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	6123      	str	r3, [r4, #16]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	3b01      	subs	r3, #1
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	607b      	str	r3, [r7, #4]
 800f2d6:	f340 8087 	ble.w	800f3e8 <_scanf_float+0x284>
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	603b      	str	r3, [r7, #0]
 800f2e0:	e765      	b.n	800f1ae <_scanf_float+0x4a>
 800f2e2:	eb1a 0105 	adds.w	r1, sl, r5
 800f2e6:	f47f af6f 	bne.w	800f1c8 <_scanf_float+0x64>
 800f2ea:	6822      	ldr	r2, [r4, #0]
 800f2ec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f2f0:	6022      	str	r2, [r4, #0]
 800f2f2:	460d      	mov	r5, r1
 800f2f4:	468a      	mov	sl, r1
 800f2f6:	f806 3b01 	strb.w	r3, [r6], #1
 800f2fa:	e7e2      	b.n	800f2c2 <_scanf_float+0x15e>
 800f2fc:	6822      	ldr	r2, [r4, #0]
 800f2fe:	0610      	lsls	r0, r2, #24
 800f300:	f57f af62 	bpl.w	800f1c8 <_scanf_float+0x64>
 800f304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f308:	6022      	str	r2, [r4, #0]
 800f30a:	e7f4      	b.n	800f2f6 <_scanf_float+0x192>
 800f30c:	f1ba 0f00 	cmp.w	sl, #0
 800f310:	d10e      	bne.n	800f330 <_scanf_float+0x1cc>
 800f312:	f1b9 0f00 	cmp.w	r9, #0
 800f316:	d10e      	bne.n	800f336 <_scanf_float+0x1d2>
 800f318:	6822      	ldr	r2, [r4, #0]
 800f31a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f31e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f322:	d108      	bne.n	800f336 <_scanf_float+0x1d2>
 800f324:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f328:	6022      	str	r2, [r4, #0]
 800f32a:	f04f 0a01 	mov.w	sl, #1
 800f32e:	e7e2      	b.n	800f2f6 <_scanf_float+0x192>
 800f330:	f1ba 0f02 	cmp.w	sl, #2
 800f334:	d055      	beq.n	800f3e2 <_scanf_float+0x27e>
 800f336:	2d01      	cmp	r5, #1
 800f338:	d002      	beq.n	800f340 <_scanf_float+0x1dc>
 800f33a:	2d04      	cmp	r5, #4
 800f33c:	f47f af44 	bne.w	800f1c8 <_scanf_float+0x64>
 800f340:	3501      	adds	r5, #1
 800f342:	b2ed      	uxtb	r5, r5
 800f344:	e7d7      	b.n	800f2f6 <_scanf_float+0x192>
 800f346:	f1ba 0f01 	cmp.w	sl, #1
 800f34a:	f47f af3d 	bne.w	800f1c8 <_scanf_float+0x64>
 800f34e:	f04f 0a02 	mov.w	sl, #2
 800f352:	e7d0      	b.n	800f2f6 <_scanf_float+0x192>
 800f354:	b97d      	cbnz	r5, 800f376 <_scanf_float+0x212>
 800f356:	f1b9 0f00 	cmp.w	r9, #0
 800f35a:	f47f af38 	bne.w	800f1ce <_scanf_float+0x6a>
 800f35e:	6822      	ldr	r2, [r4, #0]
 800f360:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f364:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f368:	f040 8108 	bne.w	800f57c <_scanf_float+0x418>
 800f36c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f370:	6022      	str	r2, [r4, #0]
 800f372:	2501      	movs	r5, #1
 800f374:	e7bf      	b.n	800f2f6 <_scanf_float+0x192>
 800f376:	2d03      	cmp	r5, #3
 800f378:	d0e2      	beq.n	800f340 <_scanf_float+0x1dc>
 800f37a:	2d05      	cmp	r5, #5
 800f37c:	e7de      	b.n	800f33c <_scanf_float+0x1d8>
 800f37e:	2d02      	cmp	r5, #2
 800f380:	f47f af22 	bne.w	800f1c8 <_scanf_float+0x64>
 800f384:	2503      	movs	r5, #3
 800f386:	e7b6      	b.n	800f2f6 <_scanf_float+0x192>
 800f388:	2d06      	cmp	r5, #6
 800f38a:	f47f af1d 	bne.w	800f1c8 <_scanf_float+0x64>
 800f38e:	2507      	movs	r5, #7
 800f390:	e7b1      	b.n	800f2f6 <_scanf_float+0x192>
 800f392:	6822      	ldr	r2, [r4, #0]
 800f394:	0591      	lsls	r1, r2, #22
 800f396:	f57f af17 	bpl.w	800f1c8 <_scanf_float+0x64>
 800f39a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f39e:	6022      	str	r2, [r4, #0]
 800f3a0:	f8cd 9008 	str.w	r9, [sp, #8]
 800f3a4:	e7a7      	b.n	800f2f6 <_scanf_float+0x192>
 800f3a6:	6822      	ldr	r2, [r4, #0]
 800f3a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f3ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f3b0:	d006      	beq.n	800f3c0 <_scanf_float+0x25c>
 800f3b2:	0550      	lsls	r0, r2, #21
 800f3b4:	f57f af08 	bpl.w	800f1c8 <_scanf_float+0x64>
 800f3b8:	f1b9 0f00 	cmp.w	r9, #0
 800f3bc:	f000 80de 	beq.w	800f57c <_scanf_float+0x418>
 800f3c0:	0591      	lsls	r1, r2, #22
 800f3c2:	bf58      	it	pl
 800f3c4:	9902      	ldrpl	r1, [sp, #8]
 800f3c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f3ca:	bf58      	it	pl
 800f3cc:	eba9 0101 	subpl.w	r1, r9, r1
 800f3d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f3d4:	bf58      	it	pl
 800f3d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f3da:	6022      	str	r2, [r4, #0]
 800f3dc:	f04f 0900 	mov.w	r9, #0
 800f3e0:	e789      	b.n	800f2f6 <_scanf_float+0x192>
 800f3e2:	f04f 0a03 	mov.w	sl, #3
 800f3e6:	e786      	b.n	800f2f6 <_scanf_float+0x192>
 800f3e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f3ec:	4639      	mov	r1, r7
 800f3ee:	4640      	mov	r0, r8
 800f3f0:	4798      	blx	r3
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	f43f aedb 	beq.w	800f1ae <_scanf_float+0x4a>
 800f3f8:	e6e6      	b.n	800f1c8 <_scanf_float+0x64>
 800f3fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f3fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f402:	463a      	mov	r2, r7
 800f404:	4640      	mov	r0, r8
 800f406:	4798      	blx	r3
 800f408:	6923      	ldr	r3, [r4, #16]
 800f40a:	3b01      	subs	r3, #1
 800f40c:	6123      	str	r3, [r4, #16]
 800f40e:	e6e8      	b.n	800f1e2 <_scanf_float+0x7e>
 800f410:	1e6b      	subs	r3, r5, #1
 800f412:	2b06      	cmp	r3, #6
 800f414:	d824      	bhi.n	800f460 <_scanf_float+0x2fc>
 800f416:	2d02      	cmp	r5, #2
 800f418:	d836      	bhi.n	800f488 <_scanf_float+0x324>
 800f41a:	9b01      	ldr	r3, [sp, #4]
 800f41c:	429e      	cmp	r6, r3
 800f41e:	f67f aee4 	bls.w	800f1ea <_scanf_float+0x86>
 800f422:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f426:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f42a:	463a      	mov	r2, r7
 800f42c:	4640      	mov	r0, r8
 800f42e:	4798      	blx	r3
 800f430:	6923      	ldr	r3, [r4, #16]
 800f432:	3b01      	subs	r3, #1
 800f434:	6123      	str	r3, [r4, #16]
 800f436:	e7f0      	b.n	800f41a <_scanf_float+0x2b6>
 800f438:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f43c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f440:	463a      	mov	r2, r7
 800f442:	4640      	mov	r0, r8
 800f444:	4798      	blx	r3
 800f446:	6923      	ldr	r3, [r4, #16]
 800f448:	3b01      	subs	r3, #1
 800f44a:	6123      	str	r3, [r4, #16]
 800f44c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f450:	fa5f fa8a 	uxtb.w	sl, sl
 800f454:	f1ba 0f02 	cmp.w	sl, #2
 800f458:	d1ee      	bne.n	800f438 <_scanf_float+0x2d4>
 800f45a:	3d03      	subs	r5, #3
 800f45c:	b2ed      	uxtb	r5, r5
 800f45e:	1b76      	subs	r6, r6, r5
 800f460:	6823      	ldr	r3, [r4, #0]
 800f462:	05da      	lsls	r2, r3, #23
 800f464:	d530      	bpl.n	800f4c8 <_scanf_float+0x364>
 800f466:	055b      	lsls	r3, r3, #21
 800f468:	d511      	bpl.n	800f48e <_scanf_float+0x32a>
 800f46a:	9b01      	ldr	r3, [sp, #4]
 800f46c:	429e      	cmp	r6, r3
 800f46e:	f67f aebc 	bls.w	800f1ea <_scanf_float+0x86>
 800f472:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f476:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f47a:	463a      	mov	r2, r7
 800f47c:	4640      	mov	r0, r8
 800f47e:	4798      	blx	r3
 800f480:	6923      	ldr	r3, [r4, #16]
 800f482:	3b01      	subs	r3, #1
 800f484:	6123      	str	r3, [r4, #16]
 800f486:	e7f0      	b.n	800f46a <_scanf_float+0x306>
 800f488:	46aa      	mov	sl, r5
 800f48a:	46b3      	mov	fp, r6
 800f48c:	e7de      	b.n	800f44c <_scanf_float+0x2e8>
 800f48e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f492:	6923      	ldr	r3, [r4, #16]
 800f494:	2965      	cmp	r1, #101	@ 0x65
 800f496:	f103 33ff 	add.w	r3, r3, #4294967295
 800f49a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f49e:	6123      	str	r3, [r4, #16]
 800f4a0:	d00c      	beq.n	800f4bc <_scanf_float+0x358>
 800f4a2:	2945      	cmp	r1, #69	@ 0x45
 800f4a4:	d00a      	beq.n	800f4bc <_scanf_float+0x358>
 800f4a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4aa:	463a      	mov	r2, r7
 800f4ac:	4640      	mov	r0, r8
 800f4ae:	4798      	blx	r3
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	1eb5      	subs	r5, r6, #2
 800f4ba:	6123      	str	r3, [r4, #16]
 800f4bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4c0:	463a      	mov	r2, r7
 800f4c2:	4640      	mov	r0, r8
 800f4c4:	4798      	blx	r3
 800f4c6:	462e      	mov	r6, r5
 800f4c8:	6822      	ldr	r2, [r4, #0]
 800f4ca:	f012 0210 	ands.w	r2, r2, #16
 800f4ce:	d001      	beq.n	800f4d4 <_scanf_float+0x370>
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	e68b      	b.n	800f1ec <_scanf_float+0x88>
 800f4d4:	7032      	strb	r2, [r6, #0]
 800f4d6:	6823      	ldr	r3, [r4, #0]
 800f4d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f4dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4e0:	d11c      	bne.n	800f51c <_scanf_float+0x3b8>
 800f4e2:	9b02      	ldr	r3, [sp, #8]
 800f4e4:	454b      	cmp	r3, r9
 800f4e6:	eba3 0209 	sub.w	r2, r3, r9
 800f4ea:	d123      	bne.n	800f534 <_scanf_float+0x3d0>
 800f4ec:	9901      	ldr	r1, [sp, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	4640      	mov	r0, r8
 800f4f2:	f7ff f9d9 	bl	800e8a8 <_strtod_r>
 800f4f6:	9b03      	ldr	r3, [sp, #12]
 800f4f8:	6821      	ldr	r1, [r4, #0]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f011 0f02 	tst.w	r1, #2
 800f500:	ec57 6b10 	vmov	r6, r7, d0
 800f504:	f103 0204 	add.w	r2, r3, #4
 800f508:	d01f      	beq.n	800f54a <_scanf_float+0x3e6>
 800f50a:	9903      	ldr	r1, [sp, #12]
 800f50c:	600a      	str	r2, [r1, #0]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	e9c3 6700 	strd	r6, r7, [r3]
 800f514:	68e3      	ldr	r3, [r4, #12]
 800f516:	3301      	adds	r3, #1
 800f518:	60e3      	str	r3, [r4, #12]
 800f51a:	e7d9      	b.n	800f4d0 <_scanf_float+0x36c>
 800f51c:	9b04      	ldr	r3, [sp, #16]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d0e4      	beq.n	800f4ec <_scanf_float+0x388>
 800f522:	9905      	ldr	r1, [sp, #20]
 800f524:	230a      	movs	r3, #10
 800f526:	3101      	adds	r1, #1
 800f528:	4640      	mov	r0, r8
 800f52a:	f002 f9f3 	bl	8011914 <_strtol_r>
 800f52e:	9b04      	ldr	r3, [sp, #16]
 800f530:	9e05      	ldr	r6, [sp, #20]
 800f532:	1ac2      	subs	r2, r0, r3
 800f534:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f538:	429e      	cmp	r6, r3
 800f53a:	bf28      	it	cs
 800f53c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f540:	4910      	ldr	r1, [pc, #64]	@ (800f584 <_scanf_float+0x420>)
 800f542:	4630      	mov	r0, r6
 800f544:	f000 f990 	bl	800f868 <siprintf>
 800f548:	e7d0      	b.n	800f4ec <_scanf_float+0x388>
 800f54a:	f011 0f04 	tst.w	r1, #4
 800f54e:	9903      	ldr	r1, [sp, #12]
 800f550:	600a      	str	r2, [r1, #0]
 800f552:	d1dc      	bne.n	800f50e <_scanf_float+0x3aa>
 800f554:	681d      	ldr	r5, [r3, #0]
 800f556:	4632      	mov	r2, r6
 800f558:	463b      	mov	r3, r7
 800f55a:	4630      	mov	r0, r6
 800f55c:	4639      	mov	r1, r7
 800f55e:	f7f1 fb05 	bl	8000b6c <__aeabi_dcmpun>
 800f562:	b128      	cbz	r0, 800f570 <_scanf_float+0x40c>
 800f564:	4808      	ldr	r0, [pc, #32]	@ (800f588 <_scanf_float+0x424>)
 800f566:	f000 fa9b 	bl	800faa0 <nanf>
 800f56a:	ed85 0a00 	vstr	s0, [r5]
 800f56e:	e7d1      	b.n	800f514 <_scanf_float+0x3b0>
 800f570:	4630      	mov	r0, r6
 800f572:	4639      	mov	r1, r7
 800f574:	f7f1 fb58 	bl	8000c28 <__aeabi_d2f>
 800f578:	6028      	str	r0, [r5, #0]
 800f57a:	e7cb      	b.n	800f514 <_scanf_float+0x3b0>
 800f57c:	f04f 0900 	mov.w	r9, #0
 800f580:	e629      	b.n	800f1d6 <_scanf_float+0x72>
 800f582:	bf00      	nop
 800f584:	080124d4 	.word	0x080124d4
 800f588:	0801251c 	.word	0x0801251c

0800f58c <__sflush_r>:
 800f58c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f594:	0716      	lsls	r6, r2, #28
 800f596:	4605      	mov	r5, r0
 800f598:	460c      	mov	r4, r1
 800f59a:	d454      	bmi.n	800f646 <__sflush_r+0xba>
 800f59c:	684b      	ldr	r3, [r1, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	dc02      	bgt.n	800f5a8 <__sflush_r+0x1c>
 800f5a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	dd48      	ble.n	800f63a <__sflush_r+0xae>
 800f5a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5aa:	2e00      	cmp	r6, #0
 800f5ac:	d045      	beq.n	800f63a <__sflush_r+0xae>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f5b4:	682f      	ldr	r7, [r5, #0]
 800f5b6:	6a21      	ldr	r1, [r4, #32]
 800f5b8:	602b      	str	r3, [r5, #0]
 800f5ba:	d030      	beq.n	800f61e <__sflush_r+0x92>
 800f5bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f5be:	89a3      	ldrh	r3, [r4, #12]
 800f5c0:	0759      	lsls	r1, r3, #29
 800f5c2:	d505      	bpl.n	800f5d0 <__sflush_r+0x44>
 800f5c4:	6863      	ldr	r3, [r4, #4]
 800f5c6:	1ad2      	subs	r2, r2, r3
 800f5c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f5ca:	b10b      	cbz	r3, 800f5d0 <__sflush_r+0x44>
 800f5cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f5ce:	1ad2      	subs	r2, r2, r3
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5d4:	6a21      	ldr	r1, [r4, #32]
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	47b0      	blx	r6
 800f5da:	1c43      	adds	r3, r0, #1
 800f5dc:	89a3      	ldrh	r3, [r4, #12]
 800f5de:	d106      	bne.n	800f5ee <__sflush_r+0x62>
 800f5e0:	6829      	ldr	r1, [r5, #0]
 800f5e2:	291d      	cmp	r1, #29
 800f5e4:	d82b      	bhi.n	800f63e <__sflush_r+0xb2>
 800f5e6:	4a2a      	ldr	r2, [pc, #168]	@ (800f690 <__sflush_r+0x104>)
 800f5e8:	410a      	asrs	r2, r1
 800f5ea:	07d6      	lsls	r6, r2, #31
 800f5ec:	d427      	bmi.n	800f63e <__sflush_r+0xb2>
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	6062      	str	r2, [r4, #4]
 800f5f2:	04d9      	lsls	r1, r3, #19
 800f5f4:	6922      	ldr	r2, [r4, #16]
 800f5f6:	6022      	str	r2, [r4, #0]
 800f5f8:	d504      	bpl.n	800f604 <__sflush_r+0x78>
 800f5fa:	1c42      	adds	r2, r0, #1
 800f5fc:	d101      	bne.n	800f602 <__sflush_r+0x76>
 800f5fe:	682b      	ldr	r3, [r5, #0]
 800f600:	b903      	cbnz	r3, 800f604 <__sflush_r+0x78>
 800f602:	6560      	str	r0, [r4, #84]	@ 0x54
 800f604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f606:	602f      	str	r7, [r5, #0]
 800f608:	b1b9      	cbz	r1, 800f63a <__sflush_r+0xae>
 800f60a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f60e:	4299      	cmp	r1, r3
 800f610:	d002      	beq.n	800f618 <__sflush_r+0x8c>
 800f612:	4628      	mov	r0, r5
 800f614:	f001 f8b4 	bl	8010780 <_free_r>
 800f618:	2300      	movs	r3, #0
 800f61a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f61c:	e00d      	b.n	800f63a <__sflush_r+0xae>
 800f61e:	2301      	movs	r3, #1
 800f620:	4628      	mov	r0, r5
 800f622:	47b0      	blx	r6
 800f624:	4602      	mov	r2, r0
 800f626:	1c50      	adds	r0, r2, #1
 800f628:	d1c9      	bne.n	800f5be <__sflush_r+0x32>
 800f62a:	682b      	ldr	r3, [r5, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d0c6      	beq.n	800f5be <__sflush_r+0x32>
 800f630:	2b1d      	cmp	r3, #29
 800f632:	d001      	beq.n	800f638 <__sflush_r+0xac>
 800f634:	2b16      	cmp	r3, #22
 800f636:	d11e      	bne.n	800f676 <__sflush_r+0xea>
 800f638:	602f      	str	r7, [r5, #0]
 800f63a:	2000      	movs	r0, #0
 800f63c:	e022      	b.n	800f684 <__sflush_r+0xf8>
 800f63e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f642:	b21b      	sxth	r3, r3
 800f644:	e01b      	b.n	800f67e <__sflush_r+0xf2>
 800f646:	690f      	ldr	r7, [r1, #16]
 800f648:	2f00      	cmp	r7, #0
 800f64a:	d0f6      	beq.n	800f63a <__sflush_r+0xae>
 800f64c:	0793      	lsls	r3, r2, #30
 800f64e:	680e      	ldr	r6, [r1, #0]
 800f650:	bf08      	it	eq
 800f652:	694b      	ldreq	r3, [r1, #20]
 800f654:	600f      	str	r7, [r1, #0]
 800f656:	bf18      	it	ne
 800f658:	2300      	movne	r3, #0
 800f65a:	eba6 0807 	sub.w	r8, r6, r7
 800f65e:	608b      	str	r3, [r1, #8]
 800f660:	f1b8 0f00 	cmp.w	r8, #0
 800f664:	dde9      	ble.n	800f63a <__sflush_r+0xae>
 800f666:	6a21      	ldr	r1, [r4, #32]
 800f668:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f66a:	4643      	mov	r3, r8
 800f66c:	463a      	mov	r2, r7
 800f66e:	4628      	mov	r0, r5
 800f670:	47b0      	blx	r6
 800f672:	2800      	cmp	r0, #0
 800f674:	dc08      	bgt.n	800f688 <__sflush_r+0xfc>
 800f676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f67a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f67e:	81a3      	strh	r3, [r4, #12]
 800f680:	f04f 30ff 	mov.w	r0, #4294967295
 800f684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f688:	4407      	add	r7, r0
 800f68a:	eba8 0800 	sub.w	r8, r8, r0
 800f68e:	e7e7      	b.n	800f660 <__sflush_r+0xd4>
 800f690:	dfbffffe 	.word	0xdfbffffe

0800f694 <_fflush_r>:
 800f694:	b538      	push	{r3, r4, r5, lr}
 800f696:	690b      	ldr	r3, [r1, #16]
 800f698:	4605      	mov	r5, r0
 800f69a:	460c      	mov	r4, r1
 800f69c:	b913      	cbnz	r3, 800f6a4 <_fflush_r+0x10>
 800f69e:	2500      	movs	r5, #0
 800f6a0:	4628      	mov	r0, r5
 800f6a2:	bd38      	pop	{r3, r4, r5, pc}
 800f6a4:	b118      	cbz	r0, 800f6ae <_fflush_r+0x1a>
 800f6a6:	6a03      	ldr	r3, [r0, #32]
 800f6a8:	b90b      	cbnz	r3, 800f6ae <_fflush_r+0x1a>
 800f6aa:	f000 f8a7 	bl	800f7fc <__sinit>
 800f6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d0f3      	beq.n	800f69e <_fflush_r+0xa>
 800f6b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6b8:	07d0      	lsls	r0, r2, #31
 800f6ba:	d404      	bmi.n	800f6c6 <_fflush_r+0x32>
 800f6bc:	0599      	lsls	r1, r3, #22
 800f6be:	d402      	bmi.n	800f6c6 <_fflush_r+0x32>
 800f6c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6c2:	f000 f9d4 	bl	800fa6e <__retarget_lock_acquire_recursive>
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	4621      	mov	r1, r4
 800f6ca:	f7ff ff5f 	bl	800f58c <__sflush_r>
 800f6ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6d0:	07da      	lsls	r2, r3, #31
 800f6d2:	4605      	mov	r5, r0
 800f6d4:	d4e4      	bmi.n	800f6a0 <_fflush_r+0xc>
 800f6d6:	89a3      	ldrh	r3, [r4, #12]
 800f6d8:	059b      	lsls	r3, r3, #22
 800f6da:	d4e1      	bmi.n	800f6a0 <_fflush_r+0xc>
 800f6dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6de:	f000 f9c7 	bl	800fa70 <__retarget_lock_release_recursive>
 800f6e2:	e7dd      	b.n	800f6a0 <_fflush_r+0xc>

0800f6e4 <std>:
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	b510      	push	{r4, lr}
 800f6e8:	4604      	mov	r4, r0
 800f6ea:	e9c0 3300 	strd	r3, r3, [r0]
 800f6ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f6f2:	6083      	str	r3, [r0, #8]
 800f6f4:	8181      	strh	r1, [r0, #12]
 800f6f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800f6f8:	81c2      	strh	r2, [r0, #14]
 800f6fa:	6183      	str	r3, [r0, #24]
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	2208      	movs	r2, #8
 800f700:	305c      	adds	r0, #92	@ 0x5c
 800f702:	f000 f914 	bl	800f92e <memset>
 800f706:	4b0d      	ldr	r3, [pc, #52]	@ (800f73c <std+0x58>)
 800f708:	6263      	str	r3, [r4, #36]	@ 0x24
 800f70a:	4b0d      	ldr	r3, [pc, #52]	@ (800f740 <std+0x5c>)
 800f70c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f70e:	4b0d      	ldr	r3, [pc, #52]	@ (800f744 <std+0x60>)
 800f710:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f712:	4b0d      	ldr	r3, [pc, #52]	@ (800f748 <std+0x64>)
 800f714:	6323      	str	r3, [r4, #48]	@ 0x30
 800f716:	4b0d      	ldr	r3, [pc, #52]	@ (800f74c <std+0x68>)
 800f718:	6224      	str	r4, [r4, #32]
 800f71a:	429c      	cmp	r4, r3
 800f71c:	d006      	beq.n	800f72c <std+0x48>
 800f71e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f722:	4294      	cmp	r4, r2
 800f724:	d002      	beq.n	800f72c <std+0x48>
 800f726:	33d0      	adds	r3, #208	@ 0xd0
 800f728:	429c      	cmp	r4, r3
 800f72a:	d105      	bne.n	800f738 <std+0x54>
 800f72c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f734:	f000 b99a 	b.w	800fa6c <__retarget_lock_init_recursive>
 800f738:	bd10      	pop	{r4, pc}
 800f73a:	bf00      	nop
 800f73c:	0800f8a9 	.word	0x0800f8a9
 800f740:	0800f8cb 	.word	0x0800f8cb
 800f744:	0800f903 	.word	0x0800f903
 800f748:	0800f927 	.word	0x0800f927
 800f74c:	2000253c 	.word	0x2000253c

0800f750 <stdio_exit_handler>:
 800f750:	4a02      	ldr	r2, [pc, #8]	@ (800f75c <stdio_exit_handler+0xc>)
 800f752:	4903      	ldr	r1, [pc, #12]	@ (800f760 <stdio_exit_handler+0x10>)
 800f754:	4803      	ldr	r0, [pc, #12]	@ (800f764 <stdio_exit_handler+0x14>)
 800f756:	f000 b869 	b.w	800f82c <_fwalk_sglue>
 800f75a:	bf00      	nop
 800f75c:	20000118 	.word	0x20000118
 800f760:	0800f695 	.word	0x0800f695
 800f764:	20000294 	.word	0x20000294

0800f768 <cleanup_stdio>:
 800f768:	6841      	ldr	r1, [r0, #4]
 800f76a:	4b0c      	ldr	r3, [pc, #48]	@ (800f79c <cleanup_stdio+0x34>)
 800f76c:	4299      	cmp	r1, r3
 800f76e:	b510      	push	{r4, lr}
 800f770:	4604      	mov	r4, r0
 800f772:	d001      	beq.n	800f778 <cleanup_stdio+0x10>
 800f774:	f7ff ff8e 	bl	800f694 <_fflush_r>
 800f778:	68a1      	ldr	r1, [r4, #8]
 800f77a:	4b09      	ldr	r3, [pc, #36]	@ (800f7a0 <cleanup_stdio+0x38>)
 800f77c:	4299      	cmp	r1, r3
 800f77e:	d002      	beq.n	800f786 <cleanup_stdio+0x1e>
 800f780:	4620      	mov	r0, r4
 800f782:	f7ff ff87 	bl	800f694 <_fflush_r>
 800f786:	68e1      	ldr	r1, [r4, #12]
 800f788:	4b06      	ldr	r3, [pc, #24]	@ (800f7a4 <cleanup_stdio+0x3c>)
 800f78a:	4299      	cmp	r1, r3
 800f78c:	d004      	beq.n	800f798 <cleanup_stdio+0x30>
 800f78e:	4620      	mov	r0, r4
 800f790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f794:	f7ff bf7e 	b.w	800f694 <_fflush_r>
 800f798:	bd10      	pop	{r4, pc}
 800f79a:	bf00      	nop
 800f79c:	2000253c 	.word	0x2000253c
 800f7a0:	200025a4 	.word	0x200025a4
 800f7a4:	2000260c 	.word	0x2000260c

0800f7a8 <global_stdio_init.part.0>:
 800f7a8:	b510      	push	{r4, lr}
 800f7aa:	4b0b      	ldr	r3, [pc, #44]	@ (800f7d8 <global_stdio_init.part.0+0x30>)
 800f7ac:	4c0b      	ldr	r4, [pc, #44]	@ (800f7dc <global_stdio_init.part.0+0x34>)
 800f7ae:	4a0c      	ldr	r2, [pc, #48]	@ (800f7e0 <global_stdio_init.part.0+0x38>)
 800f7b0:	601a      	str	r2, [r3, #0]
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	2104      	movs	r1, #4
 800f7b8:	f7ff ff94 	bl	800f6e4 <std>
 800f7bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	2109      	movs	r1, #9
 800f7c4:	f7ff ff8e 	bl	800f6e4 <std>
 800f7c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f7cc:	2202      	movs	r2, #2
 800f7ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7d2:	2112      	movs	r1, #18
 800f7d4:	f7ff bf86 	b.w	800f6e4 <std>
 800f7d8:	20002674 	.word	0x20002674
 800f7dc:	2000253c 	.word	0x2000253c
 800f7e0:	0800f751 	.word	0x0800f751

0800f7e4 <__sfp_lock_acquire>:
 800f7e4:	4801      	ldr	r0, [pc, #4]	@ (800f7ec <__sfp_lock_acquire+0x8>)
 800f7e6:	f000 b942 	b.w	800fa6e <__retarget_lock_acquire_recursive>
 800f7ea:	bf00      	nop
 800f7ec:	2000267d 	.word	0x2000267d

0800f7f0 <__sfp_lock_release>:
 800f7f0:	4801      	ldr	r0, [pc, #4]	@ (800f7f8 <__sfp_lock_release+0x8>)
 800f7f2:	f000 b93d 	b.w	800fa70 <__retarget_lock_release_recursive>
 800f7f6:	bf00      	nop
 800f7f8:	2000267d 	.word	0x2000267d

0800f7fc <__sinit>:
 800f7fc:	b510      	push	{r4, lr}
 800f7fe:	4604      	mov	r4, r0
 800f800:	f7ff fff0 	bl	800f7e4 <__sfp_lock_acquire>
 800f804:	6a23      	ldr	r3, [r4, #32]
 800f806:	b11b      	cbz	r3, 800f810 <__sinit+0x14>
 800f808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f80c:	f7ff bff0 	b.w	800f7f0 <__sfp_lock_release>
 800f810:	4b04      	ldr	r3, [pc, #16]	@ (800f824 <__sinit+0x28>)
 800f812:	6223      	str	r3, [r4, #32]
 800f814:	4b04      	ldr	r3, [pc, #16]	@ (800f828 <__sinit+0x2c>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d1f5      	bne.n	800f808 <__sinit+0xc>
 800f81c:	f7ff ffc4 	bl	800f7a8 <global_stdio_init.part.0>
 800f820:	e7f2      	b.n	800f808 <__sinit+0xc>
 800f822:	bf00      	nop
 800f824:	0800f769 	.word	0x0800f769
 800f828:	20002674 	.word	0x20002674

0800f82c <_fwalk_sglue>:
 800f82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f830:	4607      	mov	r7, r0
 800f832:	4688      	mov	r8, r1
 800f834:	4614      	mov	r4, r2
 800f836:	2600      	movs	r6, #0
 800f838:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f83c:	f1b9 0901 	subs.w	r9, r9, #1
 800f840:	d505      	bpl.n	800f84e <_fwalk_sglue+0x22>
 800f842:	6824      	ldr	r4, [r4, #0]
 800f844:	2c00      	cmp	r4, #0
 800f846:	d1f7      	bne.n	800f838 <_fwalk_sglue+0xc>
 800f848:	4630      	mov	r0, r6
 800f84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f84e:	89ab      	ldrh	r3, [r5, #12]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d907      	bls.n	800f864 <_fwalk_sglue+0x38>
 800f854:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f858:	3301      	adds	r3, #1
 800f85a:	d003      	beq.n	800f864 <_fwalk_sglue+0x38>
 800f85c:	4629      	mov	r1, r5
 800f85e:	4638      	mov	r0, r7
 800f860:	47c0      	blx	r8
 800f862:	4306      	orrs	r6, r0
 800f864:	3568      	adds	r5, #104	@ 0x68
 800f866:	e7e9      	b.n	800f83c <_fwalk_sglue+0x10>

0800f868 <siprintf>:
 800f868:	b40e      	push	{r1, r2, r3}
 800f86a:	b500      	push	{lr}
 800f86c:	b09c      	sub	sp, #112	@ 0x70
 800f86e:	ab1d      	add	r3, sp, #116	@ 0x74
 800f870:	9002      	str	r0, [sp, #8]
 800f872:	9006      	str	r0, [sp, #24]
 800f874:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f878:	4809      	ldr	r0, [pc, #36]	@ (800f8a0 <siprintf+0x38>)
 800f87a:	9107      	str	r1, [sp, #28]
 800f87c:	9104      	str	r1, [sp, #16]
 800f87e:	4909      	ldr	r1, [pc, #36]	@ (800f8a4 <siprintf+0x3c>)
 800f880:	f853 2b04 	ldr.w	r2, [r3], #4
 800f884:	9105      	str	r1, [sp, #20]
 800f886:	6800      	ldr	r0, [r0, #0]
 800f888:	9301      	str	r3, [sp, #4]
 800f88a:	a902      	add	r1, sp, #8
 800f88c:	f002 f8ac 	bl	80119e8 <_svfiprintf_r>
 800f890:	9b02      	ldr	r3, [sp, #8]
 800f892:	2200      	movs	r2, #0
 800f894:	701a      	strb	r2, [r3, #0]
 800f896:	b01c      	add	sp, #112	@ 0x70
 800f898:	f85d eb04 	ldr.w	lr, [sp], #4
 800f89c:	b003      	add	sp, #12
 800f89e:	4770      	bx	lr
 800f8a0:	20000290 	.word	0x20000290
 800f8a4:	ffff0208 	.word	0xffff0208

0800f8a8 <__sread>:
 800f8a8:	b510      	push	{r4, lr}
 800f8aa:	460c      	mov	r4, r1
 800f8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8b0:	f000 f87e 	bl	800f9b0 <_read_r>
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	bfab      	itete	ge
 800f8b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f8ba:	89a3      	ldrhlt	r3, [r4, #12]
 800f8bc:	181b      	addge	r3, r3, r0
 800f8be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f8c2:	bfac      	ite	ge
 800f8c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f8c6:	81a3      	strhlt	r3, [r4, #12]
 800f8c8:	bd10      	pop	{r4, pc}

0800f8ca <__swrite>:
 800f8ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ce:	461f      	mov	r7, r3
 800f8d0:	898b      	ldrh	r3, [r1, #12]
 800f8d2:	05db      	lsls	r3, r3, #23
 800f8d4:	4605      	mov	r5, r0
 800f8d6:	460c      	mov	r4, r1
 800f8d8:	4616      	mov	r6, r2
 800f8da:	d505      	bpl.n	800f8e8 <__swrite+0x1e>
 800f8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8e0:	2302      	movs	r3, #2
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f000 f852 	bl	800f98c <_lseek_r>
 800f8e8:	89a3      	ldrh	r3, [r4, #12]
 800f8ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f8f2:	81a3      	strh	r3, [r4, #12]
 800f8f4:	4632      	mov	r2, r6
 800f8f6:	463b      	mov	r3, r7
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8fe:	f000 b879 	b.w	800f9f4 <_write_r>

0800f902 <__sseek>:
 800f902:	b510      	push	{r4, lr}
 800f904:	460c      	mov	r4, r1
 800f906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f90a:	f000 f83f 	bl	800f98c <_lseek_r>
 800f90e:	1c43      	adds	r3, r0, #1
 800f910:	89a3      	ldrh	r3, [r4, #12]
 800f912:	bf15      	itete	ne
 800f914:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f916:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f91a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f91e:	81a3      	strheq	r3, [r4, #12]
 800f920:	bf18      	it	ne
 800f922:	81a3      	strhne	r3, [r4, #12]
 800f924:	bd10      	pop	{r4, pc}

0800f926 <__sclose>:
 800f926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f92a:	f000 b81f 	b.w	800f96c <_close_r>

0800f92e <memset>:
 800f92e:	4402      	add	r2, r0
 800f930:	4603      	mov	r3, r0
 800f932:	4293      	cmp	r3, r2
 800f934:	d100      	bne.n	800f938 <memset+0xa>
 800f936:	4770      	bx	lr
 800f938:	f803 1b01 	strb.w	r1, [r3], #1
 800f93c:	e7f9      	b.n	800f932 <memset+0x4>

0800f93e <strncmp>:
 800f93e:	b510      	push	{r4, lr}
 800f940:	b16a      	cbz	r2, 800f95e <strncmp+0x20>
 800f942:	3901      	subs	r1, #1
 800f944:	1884      	adds	r4, r0, r2
 800f946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f94a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f94e:	429a      	cmp	r2, r3
 800f950:	d103      	bne.n	800f95a <strncmp+0x1c>
 800f952:	42a0      	cmp	r0, r4
 800f954:	d001      	beq.n	800f95a <strncmp+0x1c>
 800f956:	2a00      	cmp	r2, #0
 800f958:	d1f5      	bne.n	800f946 <strncmp+0x8>
 800f95a:	1ad0      	subs	r0, r2, r3
 800f95c:	bd10      	pop	{r4, pc}
 800f95e:	4610      	mov	r0, r2
 800f960:	e7fc      	b.n	800f95c <strncmp+0x1e>
	...

0800f964 <_localeconv_r>:
 800f964:	4800      	ldr	r0, [pc, #0]	@ (800f968 <_localeconv_r+0x4>)
 800f966:	4770      	bx	lr
 800f968:	20000214 	.word	0x20000214

0800f96c <_close_r>:
 800f96c:	b538      	push	{r3, r4, r5, lr}
 800f96e:	4d06      	ldr	r5, [pc, #24]	@ (800f988 <_close_r+0x1c>)
 800f970:	2300      	movs	r3, #0
 800f972:	4604      	mov	r4, r0
 800f974:	4608      	mov	r0, r1
 800f976:	602b      	str	r3, [r5, #0]
 800f978:	f7f1 ff1e 	bl	80017b8 <_close>
 800f97c:	1c43      	adds	r3, r0, #1
 800f97e:	d102      	bne.n	800f986 <_close_r+0x1a>
 800f980:	682b      	ldr	r3, [r5, #0]
 800f982:	b103      	cbz	r3, 800f986 <_close_r+0x1a>
 800f984:	6023      	str	r3, [r4, #0]
 800f986:	bd38      	pop	{r3, r4, r5, pc}
 800f988:	20002678 	.word	0x20002678

0800f98c <_lseek_r>:
 800f98c:	b538      	push	{r3, r4, r5, lr}
 800f98e:	4d07      	ldr	r5, [pc, #28]	@ (800f9ac <_lseek_r+0x20>)
 800f990:	4604      	mov	r4, r0
 800f992:	4608      	mov	r0, r1
 800f994:	4611      	mov	r1, r2
 800f996:	2200      	movs	r2, #0
 800f998:	602a      	str	r2, [r5, #0]
 800f99a:	461a      	mov	r2, r3
 800f99c:	f7f1 ff33 	bl	8001806 <_lseek>
 800f9a0:	1c43      	adds	r3, r0, #1
 800f9a2:	d102      	bne.n	800f9aa <_lseek_r+0x1e>
 800f9a4:	682b      	ldr	r3, [r5, #0]
 800f9a6:	b103      	cbz	r3, 800f9aa <_lseek_r+0x1e>
 800f9a8:	6023      	str	r3, [r4, #0]
 800f9aa:	bd38      	pop	{r3, r4, r5, pc}
 800f9ac:	20002678 	.word	0x20002678

0800f9b0 <_read_r>:
 800f9b0:	b538      	push	{r3, r4, r5, lr}
 800f9b2:	4d07      	ldr	r5, [pc, #28]	@ (800f9d0 <_read_r+0x20>)
 800f9b4:	4604      	mov	r4, r0
 800f9b6:	4608      	mov	r0, r1
 800f9b8:	4611      	mov	r1, r2
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	602a      	str	r2, [r5, #0]
 800f9be:	461a      	mov	r2, r3
 800f9c0:	f7f1 fec1 	bl	8001746 <_read>
 800f9c4:	1c43      	adds	r3, r0, #1
 800f9c6:	d102      	bne.n	800f9ce <_read_r+0x1e>
 800f9c8:	682b      	ldr	r3, [r5, #0]
 800f9ca:	b103      	cbz	r3, 800f9ce <_read_r+0x1e>
 800f9cc:	6023      	str	r3, [r4, #0]
 800f9ce:	bd38      	pop	{r3, r4, r5, pc}
 800f9d0:	20002678 	.word	0x20002678

0800f9d4 <_sbrk_r>:
 800f9d4:	b538      	push	{r3, r4, r5, lr}
 800f9d6:	4d06      	ldr	r5, [pc, #24]	@ (800f9f0 <_sbrk_r+0x1c>)
 800f9d8:	2300      	movs	r3, #0
 800f9da:	4604      	mov	r4, r0
 800f9dc:	4608      	mov	r0, r1
 800f9de:	602b      	str	r3, [r5, #0]
 800f9e0:	f7f1 ff1e 	bl	8001820 <_sbrk>
 800f9e4:	1c43      	adds	r3, r0, #1
 800f9e6:	d102      	bne.n	800f9ee <_sbrk_r+0x1a>
 800f9e8:	682b      	ldr	r3, [r5, #0]
 800f9ea:	b103      	cbz	r3, 800f9ee <_sbrk_r+0x1a>
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	bd38      	pop	{r3, r4, r5, pc}
 800f9f0:	20002678 	.word	0x20002678

0800f9f4 <_write_r>:
 800f9f4:	b538      	push	{r3, r4, r5, lr}
 800f9f6:	4d07      	ldr	r5, [pc, #28]	@ (800fa14 <_write_r+0x20>)
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	4608      	mov	r0, r1
 800f9fc:	4611      	mov	r1, r2
 800f9fe:	2200      	movs	r2, #0
 800fa00:	602a      	str	r2, [r5, #0]
 800fa02:	461a      	mov	r2, r3
 800fa04:	f7f1 febc 	bl	8001780 <_write>
 800fa08:	1c43      	adds	r3, r0, #1
 800fa0a:	d102      	bne.n	800fa12 <_write_r+0x1e>
 800fa0c:	682b      	ldr	r3, [r5, #0]
 800fa0e:	b103      	cbz	r3, 800fa12 <_write_r+0x1e>
 800fa10:	6023      	str	r3, [r4, #0]
 800fa12:	bd38      	pop	{r3, r4, r5, pc}
 800fa14:	20002678 	.word	0x20002678

0800fa18 <__errno>:
 800fa18:	4b01      	ldr	r3, [pc, #4]	@ (800fa20 <__errno+0x8>)
 800fa1a:	6818      	ldr	r0, [r3, #0]
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	20000290 	.word	0x20000290

0800fa24 <__libc_init_array>:
 800fa24:	b570      	push	{r4, r5, r6, lr}
 800fa26:	4d0d      	ldr	r5, [pc, #52]	@ (800fa5c <__libc_init_array+0x38>)
 800fa28:	4c0d      	ldr	r4, [pc, #52]	@ (800fa60 <__libc_init_array+0x3c>)
 800fa2a:	1b64      	subs	r4, r4, r5
 800fa2c:	10a4      	asrs	r4, r4, #2
 800fa2e:	2600      	movs	r6, #0
 800fa30:	42a6      	cmp	r6, r4
 800fa32:	d109      	bne.n	800fa48 <__libc_init_array+0x24>
 800fa34:	4d0b      	ldr	r5, [pc, #44]	@ (800fa64 <__libc_init_array+0x40>)
 800fa36:	4c0c      	ldr	r4, [pc, #48]	@ (800fa68 <__libc_init_array+0x44>)
 800fa38:	f002 fbb6 	bl	80121a8 <_init>
 800fa3c:	1b64      	subs	r4, r4, r5
 800fa3e:	10a4      	asrs	r4, r4, #2
 800fa40:	2600      	movs	r6, #0
 800fa42:	42a6      	cmp	r6, r4
 800fa44:	d105      	bne.n	800fa52 <__libc_init_array+0x2e>
 800fa46:	bd70      	pop	{r4, r5, r6, pc}
 800fa48:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa4c:	4798      	blx	r3
 800fa4e:	3601      	adds	r6, #1
 800fa50:	e7ee      	b.n	800fa30 <__libc_init_array+0xc>
 800fa52:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa56:	4798      	blx	r3
 800fa58:	3601      	adds	r6, #1
 800fa5a:	e7f2      	b.n	800fa42 <__libc_init_array+0x1e>
 800fa5c:	0801287c 	.word	0x0801287c
 800fa60:	0801287c 	.word	0x0801287c
 800fa64:	0801287c 	.word	0x0801287c
 800fa68:	08012880 	.word	0x08012880

0800fa6c <__retarget_lock_init_recursive>:
 800fa6c:	4770      	bx	lr

0800fa6e <__retarget_lock_acquire_recursive>:
 800fa6e:	4770      	bx	lr

0800fa70 <__retarget_lock_release_recursive>:
 800fa70:	4770      	bx	lr

0800fa72 <memcpy>:
 800fa72:	440a      	add	r2, r1
 800fa74:	4291      	cmp	r1, r2
 800fa76:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa7a:	d100      	bne.n	800fa7e <memcpy+0xc>
 800fa7c:	4770      	bx	lr
 800fa7e:	b510      	push	{r4, lr}
 800fa80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa88:	4291      	cmp	r1, r2
 800fa8a:	d1f9      	bne.n	800fa80 <memcpy+0xe>
 800fa8c:	bd10      	pop	{r4, pc}
	...

0800fa90 <nan>:
 800fa90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fa98 <nan+0x8>
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop
 800fa98:	00000000 	.word	0x00000000
 800fa9c:	7ff80000 	.word	0x7ff80000

0800faa0 <nanf>:
 800faa0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800faa8 <nanf+0x8>
 800faa4:	4770      	bx	lr
 800faa6:	bf00      	nop
 800faa8:	7fc00000 	.word	0x7fc00000

0800faac <__assert_func>:
 800faac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800faae:	4614      	mov	r4, r2
 800fab0:	461a      	mov	r2, r3
 800fab2:	4b09      	ldr	r3, [pc, #36]	@ (800fad8 <__assert_func+0x2c>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4605      	mov	r5, r0
 800fab8:	68d8      	ldr	r0, [r3, #12]
 800faba:	b954      	cbnz	r4, 800fad2 <__assert_func+0x26>
 800fabc:	4b07      	ldr	r3, [pc, #28]	@ (800fadc <__assert_func+0x30>)
 800fabe:	461c      	mov	r4, r3
 800fac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fac4:	9100      	str	r1, [sp, #0]
 800fac6:	462b      	mov	r3, r5
 800fac8:	4905      	ldr	r1, [pc, #20]	@ (800fae0 <__assert_func+0x34>)
 800faca:	f002 f889 	bl	8011be0 <fiprintf>
 800face:	f002 f937 	bl	8011d40 <abort>
 800fad2:	4b04      	ldr	r3, [pc, #16]	@ (800fae4 <__assert_func+0x38>)
 800fad4:	e7f4      	b.n	800fac0 <__assert_func+0x14>
 800fad6:	bf00      	nop
 800fad8:	20000290 	.word	0x20000290
 800fadc:	0801251c 	.word	0x0801251c
 800fae0:	080124ee 	.word	0x080124ee
 800fae4:	080124e1 	.word	0x080124e1

0800fae8 <quorem>:
 800fae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faec:	6903      	ldr	r3, [r0, #16]
 800faee:	690c      	ldr	r4, [r1, #16]
 800faf0:	42a3      	cmp	r3, r4
 800faf2:	4607      	mov	r7, r0
 800faf4:	db7e      	blt.n	800fbf4 <quorem+0x10c>
 800faf6:	3c01      	subs	r4, #1
 800faf8:	f101 0814 	add.w	r8, r1, #20
 800fafc:	00a3      	lsls	r3, r4, #2
 800fafe:	f100 0514 	add.w	r5, r0, #20
 800fb02:	9300      	str	r3, [sp, #0]
 800fb04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb08:	9301      	str	r3, [sp, #4]
 800fb0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb12:	3301      	adds	r3, #1
 800fb14:	429a      	cmp	r2, r3
 800fb16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb1a:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb1e:	d32e      	bcc.n	800fb7e <quorem+0x96>
 800fb20:	f04f 0a00 	mov.w	sl, #0
 800fb24:	46c4      	mov	ip, r8
 800fb26:	46ae      	mov	lr, r5
 800fb28:	46d3      	mov	fp, sl
 800fb2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fb2e:	b298      	uxth	r0, r3
 800fb30:	fb06 a000 	mla	r0, r6, r0, sl
 800fb34:	0c02      	lsrs	r2, r0, #16
 800fb36:	0c1b      	lsrs	r3, r3, #16
 800fb38:	fb06 2303 	mla	r3, r6, r3, r2
 800fb3c:	f8de 2000 	ldr.w	r2, [lr]
 800fb40:	b280      	uxth	r0, r0
 800fb42:	b292      	uxth	r2, r2
 800fb44:	1a12      	subs	r2, r2, r0
 800fb46:	445a      	add	r2, fp
 800fb48:	f8de 0000 	ldr.w	r0, [lr]
 800fb4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fb56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fb5a:	b292      	uxth	r2, r2
 800fb5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fb60:	45e1      	cmp	r9, ip
 800fb62:	f84e 2b04 	str.w	r2, [lr], #4
 800fb66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fb6a:	d2de      	bcs.n	800fb2a <quorem+0x42>
 800fb6c:	9b00      	ldr	r3, [sp, #0]
 800fb6e:	58eb      	ldr	r3, [r5, r3]
 800fb70:	b92b      	cbnz	r3, 800fb7e <quorem+0x96>
 800fb72:	9b01      	ldr	r3, [sp, #4]
 800fb74:	3b04      	subs	r3, #4
 800fb76:	429d      	cmp	r5, r3
 800fb78:	461a      	mov	r2, r3
 800fb7a:	d32f      	bcc.n	800fbdc <quorem+0xf4>
 800fb7c:	613c      	str	r4, [r7, #16]
 800fb7e:	4638      	mov	r0, r7
 800fb80:	f001 fc58 	bl	8011434 <__mcmp>
 800fb84:	2800      	cmp	r0, #0
 800fb86:	db25      	blt.n	800fbd4 <quorem+0xec>
 800fb88:	4629      	mov	r1, r5
 800fb8a:	2000      	movs	r0, #0
 800fb8c:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb90:	f8d1 c000 	ldr.w	ip, [r1]
 800fb94:	fa1f fe82 	uxth.w	lr, r2
 800fb98:	fa1f f38c 	uxth.w	r3, ip
 800fb9c:	eba3 030e 	sub.w	r3, r3, lr
 800fba0:	4403      	add	r3, r0
 800fba2:	0c12      	lsrs	r2, r2, #16
 800fba4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fba8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbb2:	45c1      	cmp	r9, r8
 800fbb4:	f841 3b04 	str.w	r3, [r1], #4
 800fbb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fbbc:	d2e6      	bcs.n	800fb8c <quorem+0xa4>
 800fbbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbc6:	b922      	cbnz	r2, 800fbd2 <quorem+0xea>
 800fbc8:	3b04      	subs	r3, #4
 800fbca:	429d      	cmp	r5, r3
 800fbcc:	461a      	mov	r2, r3
 800fbce:	d30b      	bcc.n	800fbe8 <quorem+0x100>
 800fbd0:	613c      	str	r4, [r7, #16]
 800fbd2:	3601      	adds	r6, #1
 800fbd4:	4630      	mov	r0, r6
 800fbd6:	b003      	add	sp, #12
 800fbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbdc:	6812      	ldr	r2, [r2, #0]
 800fbde:	3b04      	subs	r3, #4
 800fbe0:	2a00      	cmp	r2, #0
 800fbe2:	d1cb      	bne.n	800fb7c <quorem+0x94>
 800fbe4:	3c01      	subs	r4, #1
 800fbe6:	e7c6      	b.n	800fb76 <quorem+0x8e>
 800fbe8:	6812      	ldr	r2, [r2, #0]
 800fbea:	3b04      	subs	r3, #4
 800fbec:	2a00      	cmp	r2, #0
 800fbee:	d1ef      	bne.n	800fbd0 <quorem+0xe8>
 800fbf0:	3c01      	subs	r4, #1
 800fbf2:	e7ea      	b.n	800fbca <quorem+0xe2>
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	e7ee      	b.n	800fbd6 <quorem+0xee>

0800fbf8 <_dtoa_r>:
 800fbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfc:	69c7      	ldr	r7, [r0, #28]
 800fbfe:	b099      	sub	sp, #100	@ 0x64
 800fc00:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fc04:	ec55 4b10 	vmov	r4, r5, d0
 800fc08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fc0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fc0c:	4683      	mov	fp, r0
 800fc0e:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fc12:	b97f      	cbnz	r7, 800fc34 <_dtoa_r+0x3c>
 800fc14:	2010      	movs	r0, #16
 800fc16:	f7fd ff5f 	bl	800dad8 <malloc>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	f8cb 001c 	str.w	r0, [fp, #28]
 800fc20:	b920      	cbnz	r0, 800fc2c <_dtoa_r+0x34>
 800fc22:	4ba7      	ldr	r3, [pc, #668]	@ (800fec0 <_dtoa_r+0x2c8>)
 800fc24:	21ef      	movs	r1, #239	@ 0xef
 800fc26:	48a7      	ldr	r0, [pc, #668]	@ (800fec4 <_dtoa_r+0x2cc>)
 800fc28:	f7ff ff40 	bl	800faac <__assert_func>
 800fc2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fc30:	6007      	str	r7, [r0, #0]
 800fc32:	60c7      	str	r7, [r0, #12]
 800fc34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fc38:	6819      	ldr	r1, [r3, #0]
 800fc3a:	b159      	cbz	r1, 800fc54 <_dtoa_r+0x5c>
 800fc3c:	685a      	ldr	r2, [r3, #4]
 800fc3e:	604a      	str	r2, [r1, #4]
 800fc40:	2301      	movs	r3, #1
 800fc42:	4093      	lsls	r3, r2
 800fc44:	608b      	str	r3, [r1, #8]
 800fc46:	4658      	mov	r0, fp
 800fc48:	f001 f970 	bl	8010f2c <_Bfree>
 800fc4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fc50:	2200      	movs	r2, #0
 800fc52:	601a      	str	r2, [r3, #0]
 800fc54:	1e2b      	subs	r3, r5, #0
 800fc56:	bfb9      	ittee	lt
 800fc58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fc5c:	9303      	strlt	r3, [sp, #12]
 800fc5e:	2300      	movge	r3, #0
 800fc60:	6033      	strge	r3, [r6, #0]
 800fc62:	9f03      	ldr	r7, [sp, #12]
 800fc64:	4b98      	ldr	r3, [pc, #608]	@ (800fec8 <_dtoa_r+0x2d0>)
 800fc66:	bfbc      	itt	lt
 800fc68:	2201      	movlt	r2, #1
 800fc6a:	6032      	strlt	r2, [r6, #0]
 800fc6c:	43bb      	bics	r3, r7
 800fc6e:	d112      	bne.n	800fc96 <_dtoa_r+0x9e>
 800fc70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fc72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fc76:	6013      	str	r3, [r2, #0]
 800fc78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fc7c:	4323      	orrs	r3, r4
 800fc7e:	f000 854d 	beq.w	801071c <_dtoa_r+0xb24>
 800fc82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fc84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fedc <_dtoa_r+0x2e4>
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f000 854f 	beq.w	801072c <_dtoa_r+0xb34>
 800fc8e:	f10a 0303 	add.w	r3, sl, #3
 800fc92:	f000 bd49 	b.w	8010728 <_dtoa_r+0xb30>
 800fc96:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	ec51 0b17 	vmov	r0, r1, d7
 800fca0:	2300      	movs	r3, #0
 800fca2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fca6:	f7f0 ff2f 	bl	8000b08 <__aeabi_dcmpeq>
 800fcaa:	4680      	mov	r8, r0
 800fcac:	b158      	cbz	r0, 800fcc6 <_dtoa_r+0xce>
 800fcae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	6013      	str	r3, [r2, #0]
 800fcb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fcb6:	b113      	cbz	r3, 800fcbe <_dtoa_r+0xc6>
 800fcb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fcba:	4b84      	ldr	r3, [pc, #528]	@ (800fecc <_dtoa_r+0x2d4>)
 800fcbc:	6013      	str	r3, [r2, #0]
 800fcbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fee0 <_dtoa_r+0x2e8>
 800fcc2:	f000 bd33 	b.w	801072c <_dtoa_r+0xb34>
 800fcc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fcca:	aa16      	add	r2, sp, #88	@ 0x58
 800fccc:	a917      	add	r1, sp, #92	@ 0x5c
 800fcce:	4658      	mov	r0, fp
 800fcd0:	f001 fcd0 	bl	8011674 <__d2b>
 800fcd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fcd8:	4681      	mov	r9, r0
 800fcda:	2e00      	cmp	r6, #0
 800fcdc:	d077      	beq.n	800fdce <_dtoa_r+0x1d6>
 800fcde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fce0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fcec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fcf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fcf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	4b74      	ldr	r3, [pc, #464]	@ (800fed0 <_dtoa_r+0x2d8>)
 800fcfe:	f7f0 fae3 	bl	80002c8 <__aeabi_dsub>
 800fd02:	a369      	add	r3, pc, #420	@ (adr r3, 800fea8 <_dtoa_r+0x2b0>)
 800fd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd08:	f7f0 fc96 	bl	8000638 <__aeabi_dmul>
 800fd0c:	a368      	add	r3, pc, #416	@ (adr r3, 800feb0 <_dtoa_r+0x2b8>)
 800fd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd12:	f7f0 fadb 	bl	80002cc <__adddf3>
 800fd16:	4604      	mov	r4, r0
 800fd18:	4630      	mov	r0, r6
 800fd1a:	460d      	mov	r5, r1
 800fd1c:	f7f0 fc22 	bl	8000564 <__aeabi_i2d>
 800fd20:	a365      	add	r3, pc, #404	@ (adr r3, 800feb8 <_dtoa_r+0x2c0>)
 800fd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd26:	f7f0 fc87 	bl	8000638 <__aeabi_dmul>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	460b      	mov	r3, r1
 800fd2e:	4620      	mov	r0, r4
 800fd30:	4629      	mov	r1, r5
 800fd32:	f7f0 facb 	bl	80002cc <__adddf3>
 800fd36:	4604      	mov	r4, r0
 800fd38:	460d      	mov	r5, r1
 800fd3a:	f7f0 ff2d 	bl	8000b98 <__aeabi_d2iz>
 800fd3e:	2200      	movs	r2, #0
 800fd40:	4607      	mov	r7, r0
 800fd42:	2300      	movs	r3, #0
 800fd44:	4620      	mov	r0, r4
 800fd46:	4629      	mov	r1, r5
 800fd48:	f7f0 fee8 	bl	8000b1c <__aeabi_dcmplt>
 800fd4c:	b140      	cbz	r0, 800fd60 <_dtoa_r+0x168>
 800fd4e:	4638      	mov	r0, r7
 800fd50:	f7f0 fc08 	bl	8000564 <__aeabi_i2d>
 800fd54:	4622      	mov	r2, r4
 800fd56:	462b      	mov	r3, r5
 800fd58:	f7f0 fed6 	bl	8000b08 <__aeabi_dcmpeq>
 800fd5c:	b900      	cbnz	r0, 800fd60 <_dtoa_r+0x168>
 800fd5e:	3f01      	subs	r7, #1
 800fd60:	2f16      	cmp	r7, #22
 800fd62:	d851      	bhi.n	800fe08 <_dtoa_r+0x210>
 800fd64:	4b5b      	ldr	r3, [pc, #364]	@ (800fed4 <_dtoa_r+0x2dc>)
 800fd66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd72:	f7f0 fed3 	bl	8000b1c <__aeabi_dcmplt>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	d048      	beq.n	800fe0c <_dtoa_r+0x214>
 800fd7a:	3f01      	subs	r7, #1
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	9312      	str	r3, [sp, #72]	@ 0x48
 800fd80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fd82:	1b9b      	subs	r3, r3, r6
 800fd84:	1e5a      	subs	r2, r3, #1
 800fd86:	bf44      	itt	mi
 800fd88:	f1c3 0801 	rsbmi	r8, r3, #1
 800fd8c:	2300      	movmi	r3, #0
 800fd8e:	9208      	str	r2, [sp, #32]
 800fd90:	bf54      	ite	pl
 800fd92:	f04f 0800 	movpl.w	r8, #0
 800fd96:	9308      	strmi	r3, [sp, #32]
 800fd98:	2f00      	cmp	r7, #0
 800fd9a:	db39      	blt.n	800fe10 <_dtoa_r+0x218>
 800fd9c:	9b08      	ldr	r3, [sp, #32]
 800fd9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fda0:	443b      	add	r3, r7
 800fda2:	9308      	str	r3, [sp, #32]
 800fda4:	2300      	movs	r3, #0
 800fda6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fda8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdaa:	2b09      	cmp	r3, #9
 800fdac:	d864      	bhi.n	800fe78 <_dtoa_r+0x280>
 800fdae:	2b05      	cmp	r3, #5
 800fdb0:	bfc4      	itt	gt
 800fdb2:	3b04      	subgt	r3, #4
 800fdb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fdb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdb8:	f1a3 0302 	sub.w	r3, r3, #2
 800fdbc:	bfcc      	ite	gt
 800fdbe:	2400      	movgt	r4, #0
 800fdc0:	2401      	movle	r4, #1
 800fdc2:	2b03      	cmp	r3, #3
 800fdc4:	d863      	bhi.n	800fe8e <_dtoa_r+0x296>
 800fdc6:	e8df f003 	tbb	[pc, r3]
 800fdca:	372a      	.short	0x372a
 800fdcc:	5535      	.short	0x5535
 800fdce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fdd2:	441e      	add	r6, r3
 800fdd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fdd8:	2b20      	cmp	r3, #32
 800fdda:	bfc1      	itttt	gt
 800fddc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fde0:	409f      	lslgt	r7, r3
 800fde2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fde6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fdea:	bfd6      	itet	le
 800fdec:	f1c3 0320 	rsble	r3, r3, #32
 800fdf0:	ea47 0003 	orrgt.w	r0, r7, r3
 800fdf4:	fa04 f003 	lslle.w	r0, r4, r3
 800fdf8:	f7f0 fba4 	bl	8000544 <__aeabi_ui2d>
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fe02:	3e01      	subs	r6, #1
 800fe04:	9214      	str	r2, [sp, #80]	@ 0x50
 800fe06:	e777      	b.n	800fcf8 <_dtoa_r+0x100>
 800fe08:	2301      	movs	r3, #1
 800fe0a:	e7b8      	b.n	800fd7e <_dtoa_r+0x186>
 800fe0c:	9012      	str	r0, [sp, #72]	@ 0x48
 800fe0e:	e7b7      	b.n	800fd80 <_dtoa_r+0x188>
 800fe10:	427b      	negs	r3, r7
 800fe12:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe14:	2300      	movs	r3, #0
 800fe16:	eba8 0807 	sub.w	r8, r8, r7
 800fe1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fe1c:	e7c4      	b.n	800fda8 <_dtoa_r+0x1b0>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	dc35      	bgt.n	800fe94 <_dtoa_r+0x29c>
 800fe28:	2301      	movs	r3, #1
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	9307      	str	r3, [sp, #28]
 800fe2e:	461a      	mov	r2, r3
 800fe30:	920e      	str	r2, [sp, #56]	@ 0x38
 800fe32:	e00b      	b.n	800fe4c <_dtoa_r+0x254>
 800fe34:	2301      	movs	r3, #1
 800fe36:	e7f3      	b.n	800fe20 <_dtoa_r+0x228>
 800fe38:	2300      	movs	r3, #0
 800fe3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe3e:	18fb      	adds	r3, r7, r3
 800fe40:	9300      	str	r3, [sp, #0]
 800fe42:	3301      	adds	r3, #1
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	9307      	str	r3, [sp, #28]
 800fe48:	bfb8      	it	lt
 800fe4a:	2301      	movlt	r3, #1
 800fe4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fe50:	2100      	movs	r1, #0
 800fe52:	2204      	movs	r2, #4
 800fe54:	f102 0514 	add.w	r5, r2, #20
 800fe58:	429d      	cmp	r5, r3
 800fe5a:	d91f      	bls.n	800fe9c <_dtoa_r+0x2a4>
 800fe5c:	6041      	str	r1, [r0, #4]
 800fe5e:	4658      	mov	r0, fp
 800fe60:	f001 f824 	bl	8010eac <_Balloc>
 800fe64:	4682      	mov	sl, r0
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d13c      	bne.n	800fee4 <_dtoa_r+0x2ec>
 800fe6a:	4b1b      	ldr	r3, [pc, #108]	@ (800fed8 <_dtoa_r+0x2e0>)
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	f240 11af 	movw	r1, #431	@ 0x1af
 800fe72:	e6d8      	b.n	800fc26 <_dtoa_r+0x2e>
 800fe74:	2301      	movs	r3, #1
 800fe76:	e7e0      	b.n	800fe3a <_dtoa_r+0x242>
 800fe78:	2401      	movs	r4, #1
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fe80:	f04f 33ff 	mov.w	r3, #4294967295
 800fe84:	9300      	str	r3, [sp, #0]
 800fe86:	9307      	str	r3, [sp, #28]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	2312      	movs	r3, #18
 800fe8c:	e7d0      	b.n	800fe30 <_dtoa_r+0x238>
 800fe8e:	2301      	movs	r3, #1
 800fe90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe92:	e7f5      	b.n	800fe80 <_dtoa_r+0x288>
 800fe94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe96:	9300      	str	r3, [sp, #0]
 800fe98:	9307      	str	r3, [sp, #28]
 800fe9a:	e7d7      	b.n	800fe4c <_dtoa_r+0x254>
 800fe9c:	3101      	adds	r1, #1
 800fe9e:	0052      	lsls	r2, r2, #1
 800fea0:	e7d8      	b.n	800fe54 <_dtoa_r+0x25c>
 800fea2:	bf00      	nop
 800fea4:	f3af 8000 	nop.w
 800fea8:	636f4361 	.word	0x636f4361
 800feac:	3fd287a7 	.word	0x3fd287a7
 800feb0:	8b60c8b3 	.word	0x8b60c8b3
 800feb4:	3fc68a28 	.word	0x3fc68a28
 800feb8:	509f79fb 	.word	0x509f79fb
 800febc:	3fd34413 	.word	0x3fd34413
 800fec0:	0801252a 	.word	0x0801252a
 800fec4:	08012541 	.word	0x08012541
 800fec8:	7ff00000 	.word	0x7ff00000
 800fecc:	080124b1 	.word	0x080124b1
 800fed0:	3ff80000 	.word	0x3ff80000
 800fed4:	08012698 	.word	0x08012698
 800fed8:	08012599 	.word	0x08012599
 800fedc:	08012526 	.word	0x08012526
 800fee0:	080124b0 	.word	0x080124b0
 800fee4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fee8:	6018      	str	r0, [r3, #0]
 800feea:	9b07      	ldr	r3, [sp, #28]
 800feec:	2b0e      	cmp	r3, #14
 800feee:	f200 80a4 	bhi.w	801003a <_dtoa_r+0x442>
 800fef2:	2c00      	cmp	r4, #0
 800fef4:	f000 80a1 	beq.w	801003a <_dtoa_r+0x442>
 800fef8:	2f00      	cmp	r7, #0
 800fefa:	dd33      	ble.n	800ff64 <_dtoa_r+0x36c>
 800fefc:	4bad      	ldr	r3, [pc, #692]	@ (80101b4 <_dtoa_r+0x5bc>)
 800fefe:	f007 020f 	and.w	r2, r7, #15
 800ff02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff06:	ed93 7b00 	vldr	d7, [r3]
 800ff0a:	05f8      	lsls	r0, r7, #23
 800ff0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ff10:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ff14:	d516      	bpl.n	800ff44 <_dtoa_r+0x34c>
 800ff16:	4ba8      	ldr	r3, [pc, #672]	@ (80101b8 <_dtoa_r+0x5c0>)
 800ff18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff20:	f7f0 fcb4 	bl	800088c <__aeabi_ddiv>
 800ff24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff28:	f004 040f 	and.w	r4, r4, #15
 800ff2c:	2603      	movs	r6, #3
 800ff2e:	4da2      	ldr	r5, [pc, #648]	@ (80101b8 <_dtoa_r+0x5c0>)
 800ff30:	b954      	cbnz	r4, 800ff48 <_dtoa_r+0x350>
 800ff32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff3a:	f7f0 fca7 	bl	800088c <__aeabi_ddiv>
 800ff3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff42:	e028      	b.n	800ff96 <_dtoa_r+0x39e>
 800ff44:	2602      	movs	r6, #2
 800ff46:	e7f2      	b.n	800ff2e <_dtoa_r+0x336>
 800ff48:	07e1      	lsls	r1, r4, #31
 800ff4a:	d508      	bpl.n	800ff5e <_dtoa_r+0x366>
 800ff4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ff54:	f7f0 fb70 	bl	8000638 <__aeabi_dmul>
 800ff58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff5c:	3601      	adds	r6, #1
 800ff5e:	1064      	asrs	r4, r4, #1
 800ff60:	3508      	adds	r5, #8
 800ff62:	e7e5      	b.n	800ff30 <_dtoa_r+0x338>
 800ff64:	f000 80d2 	beq.w	801010c <_dtoa_r+0x514>
 800ff68:	427c      	negs	r4, r7
 800ff6a:	4b92      	ldr	r3, [pc, #584]	@ (80101b4 <_dtoa_r+0x5bc>)
 800ff6c:	4d92      	ldr	r5, [pc, #584]	@ (80101b8 <_dtoa_r+0x5c0>)
 800ff6e:	f004 020f 	and.w	r2, r4, #15
 800ff72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff7e:	f7f0 fb5b 	bl	8000638 <__aeabi_dmul>
 800ff82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff86:	1124      	asrs	r4, r4, #4
 800ff88:	2300      	movs	r3, #0
 800ff8a:	2602      	movs	r6, #2
 800ff8c:	2c00      	cmp	r4, #0
 800ff8e:	f040 80b2 	bne.w	80100f6 <_dtoa_r+0x4fe>
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d1d3      	bne.n	800ff3e <_dtoa_r+0x346>
 800ff96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ff98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f000 80b7 	beq.w	8010110 <_dtoa_r+0x518>
 800ffa2:	4b86      	ldr	r3, [pc, #536]	@ (80101bc <_dtoa_r+0x5c4>)
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	4629      	mov	r1, r5
 800ffaa:	f7f0 fdb7 	bl	8000b1c <__aeabi_dcmplt>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	f000 80ae 	beq.w	8010110 <_dtoa_r+0x518>
 800ffb4:	9b07      	ldr	r3, [sp, #28]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	f000 80aa 	beq.w	8010110 <_dtoa_r+0x518>
 800ffbc:	9b00      	ldr	r3, [sp, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	dd37      	ble.n	8010032 <_dtoa_r+0x43a>
 800ffc2:	1e7b      	subs	r3, r7, #1
 800ffc4:	9304      	str	r3, [sp, #16]
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	4b7d      	ldr	r3, [pc, #500]	@ (80101c0 <_dtoa_r+0x5c8>)
 800ffca:	2200      	movs	r2, #0
 800ffcc:	4629      	mov	r1, r5
 800ffce:	f7f0 fb33 	bl	8000638 <__aeabi_dmul>
 800ffd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffd6:	9c00      	ldr	r4, [sp, #0]
 800ffd8:	3601      	adds	r6, #1
 800ffda:	4630      	mov	r0, r6
 800ffdc:	f7f0 fac2 	bl	8000564 <__aeabi_i2d>
 800ffe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffe4:	f7f0 fb28 	bl	8000638 <__aeabi_dmul>
 800ffe8:	4b76      	ldr	r3, [pc, #472]	@ (80101c4 <_dtoa_r+0x5cc>)
 800ffea:	2200      	movs	r2, #0
 800ffec:	f7f0 f96e 	bl	80002cc <__adddf3>
 800fff0:	4605      	mov	r5, r0
 800fff2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fff6:	2c00      	cmp	r4, #0
 800fff8:	f040 808d 	bne.w	8010116 <_dtoa_r+0x51e>
 800fffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010000:	4b71      	ldr	r3, [pc, #452]	@ (80101c8 <_dtoa_r+0x5d0>)
 8010002:	2200      	movs	r2, #0
 8010004:	f7f0 f960 	bl	80002c8 <__aeabi_dsub>
 8010008:	4602      	mov	r2, r0
 801000a:	460b      	mov	r3, r1
 801000c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010010:	462a      	mov	r2, r5
 8010012:	4633      	mov	r3, r6
 8010014:	f7f0 fda0 	bl	8000b58 <__aeabi_dcmpgt>
 8010018:	2800      	cmp	r0, #0
 801001a:	f040 828b 	bne.w	8010534 <_dtoa_r+0x93c>
 801001e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010022:	462a      	mov	r2, r5
 8010024:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010028:	f7f0 fd78 	bl	8000b1c <__aeabi_dcmplt>
 801002c:	2800      	cmp	r0, #0
 801002e:	f040 8128 	bne.w	8010282 <_dtoa_r+0x68a>
 8010032:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010036:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801003a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801003c:	2b00      	cmp	r3, #0
 801003e:	f2c0 815a 	blt.w	80102f6 <_dtoa_r+0x6fe>
 8010042:	2f0e      	cmp	r7, #14
 8010044:	f300 8157 	bgt.w	80102f6 <_dtoa_r+0x6fe>
 8010048:	4b5a      	ldr	r3, [pc, #360]	@ (80101b4 <_dtoa_r+0x5bc>)
 801004a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801004e:	ed93 7b00 	vldr	d7, [r3]
 8010052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010054:	2b00      	cmp	r3, #0
 8010056:	ed8d 7b00 	vstr	d7, [sp]
 801005a:	da03      	bge.n	8010064 <_dtoa_r+0x46c>
 801005c:	9b07      	ldr	r3, [sp, #28]
 801005e:	2b00      	cmp	r3, #0
 8010060:	f340 8101 	ble.w	8010266 <_dtoa_r+0x66e>
 8010064:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010068:	4656      	mov	r6, sl
 801006a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801006e:	4620      	mov	r0, r4
 8010070:	4629      	mov	r1, r5
 8010072:	f7f0 fc0b 	bl	800088c <__aeabi_ddiv>
 8010076:	f7f0 fd8f 	bl	8000b98 <__aeabi_d2iz>
 801007a:	4680      	mov	r8, r0
 801007c:	f7f0 fa72 	bl	8000564 <__aeabi_i2d>
 8010080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010084:	f7f0 fad8 	bl	8000638 <__aeabi_dmul>
 8010088:	4602      	mov	r2, r0
 801008a:	460b      	mov	r3, r1
 801008c:	4620      	mov	r0, r4
 801008e:	4629      	mov	r1, r5
 8010090:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010094:	f7f0 f918 	bl	80002c8 <__aeabi_dsub>
 8010098:	f806 4b01 	strb.w	r4, [r6], #1
 801009c:	9d07      	ldr	r5, [sp, #28]
 801009e:	eba6 040a 	sub.w	r4, r6, sl
 80100a2:	42a5      	cmp	r5, r4
 80100a4:	4602      	mov	r2, r0
 80100a6:	460b      	mov	r3, r1
 80100a8:	f040 8117 	bne.w	80102da <_dtoa_r+0x6e2>
 80100ac:	f7f0 f90e 	bl	80002cc <__adddf3>
 80100b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100b4:	4604      	mov	r4, r0
 80100b6:	460d      	mov	r5, r1
 80100b8:	f7f0 fd4e 	bl	8000b58 <__aeabi_dcmpgt>
 80100bc:	2800      	cmp	r0, #0
 80100be:	f040 80f9 	bne.w	80102b4 <_dtoa_r+0x6bc>
 80100c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100c6:	4620      	mov	r0, r4
 80100c8:	4629      	mov	r1, r5
 80100ca:	f7f0 fd1d 	bl	8000b08 <__aeabi_dcmpeq>
 80100ce:	b118      	cbz	r0, 80100d8 <_dtoa_r+0x4e0>
 80100d0:	f018 0f01 	tst.w	r8, #1
 80100d4:	f040 80ee 	bne.w	80102b4 <_dtoa_r+0x6bc>
 80100d8:	4649      	mov	r1, r9
 80100da:	4658      	mov	r0, fp
 80100dc:	f000 ff26 	bl	8010f2c <_Bfree>
 80100e0:	2300      	movs	r3, #0
 80100e2:	7033      	strb	r3, [r6, #0]
 80100e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80100e6:	3701      	adds	r7, #1
 80100e8:	601f      	str	r7, [r3, #0]
 80100ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	f000 831d 	beq.w	801072c <_dtoa_r+0xb34>
 80100f2:	601e      	str	r6, [r3, #0]
 80100f4:	e31a      	b.n	801072c <_dtoa_r+0xb34>
 80100f6:	07e2      	lsls	r2, r4, #31
 80100f8:	d505      	bpl.n	8010106 <_dtoa_r+0x50e>
 80100fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80100fe:	f7f0 fa9b 	bl	8000638 <__aeabi_dmul>
 8010102:	3601      	adds	r6, #1
 8010104:	2301      	movs	r3, #1
 8010106:	1064      	asrs	r4, r4, #1
 8010108:	3508      	adds	r5, #8
 801010a:	e73f      	b.n	800ff8c <_dtoa_r+0x394>
 801010c:	2602      	movs	r6, #2
 801010e:	e742      	b.n	800ff96 <_dtoa_r+0x39e>
 8010110:	9c07      	ldr	r4, [sp, #28]
 8010112:	9704      	str	r7, [sp, #16]
 8010114:	e761      	b.n	800ffda <_dtoa_r+0x3e2>
 8010116:	4b27      	ldr	r3, [pc, #156]	@ (80101b4 <_dtoa_r+0x5bc>)
 8010118:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801011a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801011e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010122:	4454      	add	r4, sl
 8010124:	2900      	cmp	r1, #0
 8010126:	d053      	beq.n	80101d0 <_dtoa_r+0x5d8>
 8010128:	4928      	ldr	r1, [pc, #160]	@ (80101cc <_dtoa_r+0x5d4>)
 801012a:	2000      	movs	r0, #0
 801012c:	f7f0 fbae 	bl	800088c <__aeabi_ddiv>
 8010130:	4633      	mov	r3, r6
 8010132:	462a      	mov	r2, r5
 8010134:	f7f0 f8c8 	bl	80002c8 <__aeabi_dsub>
 8010138:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801013c:	4656      	mov	r6, sl
 801013e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010142:	f7f0 fd29 	bl	8000b98 <__aeabi_d2iz>
 8010146:	4605      	mov	r5, r0
 8010148:	f7f0 fa0c 	bl	8000564 <__aeabi_i2d>
 801014c:	4602      	mov	r2, r0
 801014e:	460b      	mov	r3, r1
 8010150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010154:	f7f0 f8b8 	bl	80002c8 <__aeabi_dsub>
 8010158:	3530      	adds	r5, #48	@ 0x30
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010162:	f806 5b01 	strb.w	r5, [r6], #1
 8010166:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801016a:	f7f0 fcd7 	bl	8000b1c <__aeabi_dcmplt>
 801016e:	2800      	cmp	r0, #0
 8010170:	d171      	bne.n	8010256 <_dtoa_r+0x65e>
 8010172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010176:	4911      	ldr	r1, [pc, #68]	@ (80101bc <_dtoa_r+0x5c4>)
 8010178:	2000      	movs	r0, #0
 801017a:	f7f0 f8a5 	bl	80002c8 <__aeabi_dsub>
 801017e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010182:	f7f0 fccb 	bl	8000b1c <__aeabi_dcmplt>
 8010186:	2800      	cmp	r0, #0
 8010188:	f040 8095 	bne.w	80102b6 <_dtoa_r+0x6be>
 801018c:	42a6      	cmp	r6, r4
 801018e:	f43f af50 	beq.w	8010032 <_dtoa_r+0x43a>
 8010192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010196:	4b0a      	ldr	r3, [pc, #40]	@ (80101c0 <_dtoa_r+0x5c8>)
 8010198:	2200      	movs	r2, #0
 801019a:	f7f0 fa4d 	bl	8000638 <__aeabi_dmul>
 801019e:	4b08      	ldr	r3, [pc, #32]	@ (80101c0 <_dtoa_r+0x5c8>)
 80101a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80101a4:	2200      	movs	r2, #0
 80101a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101aa:	f7f0 fa45 	bl	8000638 <__aeabi_dmul>
 80101ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101b2:	e7c4      	b.n	801013e <_dtoa_r+0x546>
 80101b4:	08012698 	.word	0x08012698
 80101b8:	08012670 	.word	0x08012670
 80101bc:	3ff00000 	.word	0x3ff00000
 80101c0:	40240000 	.word	0x40240000
 80101c4:	401c0000 	.word	0x401c0000
 80101c8:	40140000 	.word	0x40140000
 80101cc:	3fe00000 	.word	0x3fe00000
 80101d0:	4631      	mov	r1, r6
 80101d2:	4628      	mov	r0, r5
 80101d4:	f7f0 fa30 	bl	8000638 <__aeabi_dmul>
 80101d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80101dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80101de:	4656      	mov	r6, sl
 80101e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101e4:	f7f0 fcd8 	bl	8000b98 <__aeabi_d2iz>
 80101e8:	4605      	mov	r5, r0
 80101ea:	f7f0 f9bb 	bl	8000564 <__aeabi_i2d>
 80101ee:	4602      	mov	r2, r0
 80101f0:	460b      	mov	r3, r1
 80101f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101f6:	f7f0 f867 	bl	80002c8 <__aeabi_dsub>
 80101fa:	3530      	adds	r5, #48	@ 0x30
 80101fc:	f806 5b01 	strb.w	r5, [r6], #1
 8010200:	4602      	mov	r2, r0
 8010202:	460b      	mov	r3, r1
 8010204:	42a6      	cmp	r6, r4
 8010206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801020a:	f04f 0200 	mov.w	r2, #0
 801020e:	d124      	bne.n	801025a <_dtoa_r+0x662>
 8010210:	4bac      	ldr	r3, [pc, #688]	@ (80104c4 <_dtoa_r+0x8cc>)
 8010212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010216:	f7f0 f859 	bl	80002cc <__adddf3>
 801021a:	4602      	mov	r2, r0
 801021c:	460b      	mov	r3, r1
 801021e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010222:	f7f0 fc99 	bl	8000b58 <__aeabi_dcmpgt>
 8010226:	2800      	cmp	r0, #0
 8010228:	d145      	bne.n	80102b6 <_dtoa_r+0x6be>
 801022a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801022e:	49a5      	ldr	r1, [pc, #660]	@ (80104c4 <_dtoa_r+0x8cc>)
 8010230:	2000      	movs	r0, #0
 8010232:	f7f0 f849 	bl	80002c8 <__aeabi_dsub>
 8010236:	4602      	mov	r2, r0
 8010238:	460b      	mov	r3, r1
 801023a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801023e:	f7f0 fc6d 	bl	8000b1c <__aeabi_dcmplt>
 8010242:	2800      	cmp	r0, #0
 8010244:	f43f aef5 	beq.w	8010032 <_dtoa_r+0x43a>
 8010248:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801024a:	1e73      	subs	r3, r6, #1
 801024c:	9315      	str	r3, [sp, #84]	@ 0x54
 801024e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010252:	2b30      	cmp	r3, #48	@ 0x30
 8010254:	d0f8      	beq.n	8010248 <_dtoa_r+0x650>
 8010256:	9f04      	ldr	r7, [sp, #16]
 8010258:	e73e      	b.n	80100d8 <_dtoa_r+0x4e0>
 801025a:	4b9b      	ldr	r3, [pc, #620]	@ (80104c8 <_dtoa_r+0x8d0>)
 801025c:	f7f0 f9ec 	bl	8000638 <__aeabi_dmul>
 8010260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010264:	e7bc      	b.n	80101e0 <_dtoa_r+0x5e8>
 8010266:	d10c      	bne.n	8010282 <_dtoa_r+0x68a>
 8010268:	4b98      	ldr	r3, [pc, #608]	@ (80104cc <_dtoa_r+0x8d4>)
 801026a:	2200      	movs	r2, #0
 801026c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010270:	f7f0 f9e2 	bl	8000638 <__aeabi_dmul>
 8010274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010278:	f7f0 fc64 	bl	8000b44 <__aeabi_dcmpge>
 801027c:	2800      	cmp	r0, #0
 801027e:	f000 8157 	beq.w	8010530 <_dtoa_r+0x938>
 8010282:	2400      	movs	r4, #0
 8010284:	4625      	mov	r5, r4
 8010286:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010288:	43db      	mvns	r3, r3
 801028a:	9304      	str	r3, [sp, #16]
 801028c:	4656      	mov	r6, sl
 801028e:	2700      	movs	r7, #0
 8010290:	4621      	mov	r1, r4
 8010292:	4658      	mov	r0, fp
 8010294:	f000 fe4a 	bl	8010f2c <_Bfree>
 8010298:	2d00      	cmp	r5, #0
 801029a:	d0dc      	beq.n	8010256 <_dtoa_r+0x65e>
 801029c:	b12f      	cbz	r7, 80102aa <_dtoa_r+0x6b2>
 801029e:	42af      	cmp	r7, r5
 80102a0:	d003      	beq.n	80102aa <_dtoa_r+0x6b2>
 80102a2:	4639      	mov	r1, r7
 80102a4:	4658      	mov	r0, fp
 80102a6:	f000 fe41 	bl	8010f2c <_Bfree>
 80102aa:	4629      	mov	r1, r5
 80102ac:	4658      	mov	r0, fp
 80102ae:	f000 fe3d 	bl	8010f2c <_Bfree>
 80102b2:	e7d0      	b.n	8010256 <_dtoa_r+0x65e>
 80102b4:	9704      	str	r7, [sp, #16]
 80102b6:	4633      	mov	r3, r6
 80102b8:	461e      	mov	r6, r3
 80102ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102be:	2a39      	cmp	r2, #57	@ 0x39
 80102c0:	d107      	bne.n	80102d2 <_dtoa_r+0x6da>
 80102c2:	459a      	cmp	sl, r3
 80102c4:	d1f8      	bne.n	80102b8 <_dtoa_r+0x6c0>
 80102c6:	9a04      	ldr	r2, [sp, #16]
 80102c8:	3201      	adds	r2, #1
 80102ca:	9204      	str	r2, [sp, #16]
 80102cc:	2230      	movs	r2, #48	@ 0x30
 80102ce:	f88a 2000 	strb.w	r2, [sl]
 80102d2:	781a      	ldrb	r2, [r3, #0]
 80102d4:	3201      	adds	r2, #1
 80102d6:	701a      	strb	r2, [r3, #0]
 80102d8:	e7bd      	b.n	8010256 <_dtoa_r+0x65e>
 80102da:	4b7b      	ldr	r3, [pc, #492]	@ (80104c8 <_dtoa_r+0x8d0>)
 80102dc:	2200      	movs	r2, #0
 80102de:	f7f0 f9ab 	bl	8000638 <__aeabi_dmul>
 80102e2:	2200      	movs	r2, #0
 80102e4:	2300      	movs	r3, #0
 80102e6:	4604      	mov	r4, r0
 80102e8:	460d      	mov	r5, r1
 80102ea:	f7f0 fc0d 	bl	8000b08 <__aeabi_dcmpeq>
 80102ee:	2800      	cmp	r0, #0
 80102f0:	f43f aebb 	beq.w	801006a <_dtoa_r+0x472>
 80102f4:	e6f0      	b.n	80100d8 <_dtoa_r+0x4e0>
 80102f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80102f8:	2a00      	cmp	r2, #0
 80102fa:	f000 80db 	beq.w	80104b4 <_dtoa_r+0x8bc>
 80102fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010300:	2a01      	cmp	r2, #1
 8010302:	f300 80bf 	bgt.w	8010484 <_dtoa_r+0x88c>
 8010306:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010308:	2a00      	cmp	r2, #0
 801030a:	f000 80b7 	beq.w	801047c <_dtoa_r+0x884>
 801030e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010312:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010314:	4646      	mov	r6, r8
 8010316:	9a08      	ldr	r2, [sp, #32]
 8010318:	2101      	movs	r1, #1
 801031a:	441a      	add	r2, r3
 801031c:	4658      	mov	r0, fp
 801031e:	4498      	add	r8, r3
 8010320:	9208      	str	r2, [sp, #32]
 8010322:	f000 ff01 	bl	8011128 <__i2b>
 8010326:	4605      	mov	r5, r0
 8010328:	b15e      	cbz	r6, 8010342 <_dtoa_r+0x74a>
 801032a:	9b08      	ldr	r3, [sp, #32]
 801032c:	2b00      	cmp	r3, #0
 801032e:	dd08      	ble.n	8010342 <_dtoa_r+0x74a>
 8010330:	42b3      	cmp	r3, r6
 8010332:	9a08      	ldr	r2, [sp, #32]
 8010334:	bfa8      	it	ge
 8010336:	4633      	movge	r3, r6
 8010338:	eba8 0803 	sub.w	r8, r8, r3
 801033c:	1af6      	subs	r6, r6, r3
 801033e:	1ad3      	subs	r3, r2, r3
 8010340:	9308      	str	r3, [sp, #32]
 8010342:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010344:	b1f3      	cbz	r3, 8010384 <_dtoa_r+0x78c>
 8010346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010348:	2b00      	cmp	r3, #0
 801034a:	f000 80b7 	beq.w	80104bc <_dtoa_r+0x8c4>
 801034e:	b18c      	cbz	r4, 8010374 <_dtoa_r+0x77c>
 8010350:	4629      	mov	r1, r5
 8010352:	4622      	mov	r2, r4
 8010354:	4658      	mov	r0, fp
 8010356:	f000 ffa7 	bl	80112a8 <__pow5mult>
 801035a:	464a      	mov	r2, r9
 801035c:	4601      	mov	r1, r0
 801035e:	4605      	mov	r5, r0
 8010360:	4658      	mov	r0, fp
 8010362:	f000 fef7 	bl	8011154 <__multiply>
 8010366:	4649      	mov	r1, r9
 8010368:	9004      	str	r0, [sp, #16]
 801036a:	4658      	mov	r0, fp
 801036c:	f000 fdde 	bl	8010f2c <_Bfree>
 8010370:	9b04      	ldr	r3, [sp, #16]
 8010372:	4699      	mov	r9, r3
 8010374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010376:	1b1a      	subs	r2, r3, r4
 8010378:	d004      	beq.n	8010384 <_dtoa_r+0x78c>
 801037a:	4649      	mov	r1, r9
 801037c:	4658      	mov	r0, fp
 801037e:	f000 ff93 	bl	80112a8 <__pow5mult>
 8010382:	4681      	mov	r9, r0
 8010384:	2101      	movs	r1, #1
 8010386:	4658      	mov	r0, fp
 8010388:	f000 fece 	bl	8011128 <__i2b>
 801038c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801038e:	4604      	mov	r4, r0
 8010390:	2b00      	cmp	r3, #0
 8010392:	f000 81cf 	beq.w	8010734 <_dtoa_r+0xb3c>
 8010396:	461a      	mov	r2, r3
 8010398:	4601      	mov	r1, r0
 801039a:	4658      	mov	r0, fp
 801039c:	f000 ff84 	bl	80112a8 <__pow5mult>
 80103a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	4604      	mov	r4, r0
 80103a6:	f300 8095 	bgt.w	80104d4 <_dtoa_r+0x8dc>
 80103aa:	9b02      	ldr	r3, [sp, #8]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	f040 8087 	bne.w	80104c0 <_dtoa_r+0x8c8>
 80103b2:	9b03      	ldr	r3, [sp, #12]
 80103b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	f040 8089 	bne.w	80104d0 <_dtoa_r+0x8d8>
 80103be:	9b03      	ldr	r3, [sp, #12]
 80103c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80103c4:	0d1b      	lsrs	r3, r3, #20
 80103c6:	051b      	lsls	r3, r3, #20
 80103c8:	b12b      	cbz	r3, 80103d6 <_dtoa_r+0x7de>
 80103ca:	9b08      	ldr	r3, [sp, #32]
 80103cc:	3301      	adds	r3, #1
 80103ce:	9308      	str	r3, [sp, #32]
 80103d0:	f108 0801 	add.w	r8, r8, #1
 80103d4:	2301      	movs	r3, #1
 80103d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80103d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f000 81b0 	beq.w	8010740 <_dtoa_r+0xb48>
 80103e0:	6923      	ldr	r3, [r4, #16]
 80103e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80103e6:	6918      	ldr	r0, [r3, #16]
 80103e8:	f000 fe52 	bl	8011090 <__hi0bits>
 80103ec:	f1c0 0020 	rsb	r0, r0, #32
 80103f0:	9b08      	ldr	r3, [sp, #32]
 80103f2:	4418      	add	r0, r3
 80103f4:	f010 001f 	ands.w	r0, r0, #31
 80103f8:	d077      	beq.n	80104ea <_dtoa_r+0x8f2>
 80103fa:	f1c0 0320 	rsb	r3, r0, #32
 80103fe:	2b04      	cmp	r3, #4
 8010400:	dd6b      	ble.n	80104da <_dtoa_r+0x8e2>
 8010402:	9b08      	ldr	r3, [sp, #32]
 8010404:	f1c0 001c 	rsb	r0, r0, #28
 8010408:	4403      	add	r3, r0
 801040a:	4480      	add	r8, r0
 801040c:	4406      	add	r6, r0
 801040e:	9308      	str	r3, [sp, #32]
 8010410:	f1b8 0f00 	cmp.w	r8, #0
 8010414:	dd05      	ble.n	8010422 <_dtoa_r+0x82a>
 8010416:	4649      	mov	r1, r9
 8010418:	4642      	mov	r2, r8
 801041a:	4658      	mov	r0, fp
 801041c:	f000 ff9e 	bl	801135c <__lshift>
 8010420:	4681      	mov	r9, r0
 8010422:	9b08      	ldr	r3, [sp, #32]
 8010424:	2b00      	cmp	r3, #0
 8010426:	dd05      	ble.n	8010434 <_dtoa_r+0x83c>
 8010428:	4621      	mov	r1, r4
 801042a:	461a      	mov	r2, r3
 801042c:	4658      	mov	r0, fp
 801042e:	f000 ff95 	bl	801135c <__lshift>
 8010432:	4604      	mov	r4, r0
 8010434:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010436:	2b00      	cmp	r3, #0
 8010438:	d059      	beq.n	80104ee <_dtoa_r+0x8f6>
 801043a:	4621      	mov	r1, r4
 801043c:	4648      	mov	r0, r9
 801043e:	f000 fff9 	bl	8011434 <__mcmp>
 8010442:	2800      	cmp	r0, #0
 8010444:	da53      	bge.n	80104ee <_dtoa_r+0x8f6>
 8010446:	1e7b      	subs	r3, r7, #1
 8010448:	9304      	str	r3, [sp, #16]
 801044a:	4649      	mov	r1, r9
 801044c:	2300      	movs	r3, #0
 801044e:	220a      	movs	r2, #10
 8010450:	4658      	mov	r0, fp
 8010452:	f000 fd8d 	bl	8010f70 <__multadd>
 8010456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010458:	4681      	mov	r9, r0
 801045a:	2b00      	cmp	r3, #0
 801045c:	f000 8172 	beq.w	8010744 <_dtoa_r+0xb4c>
 8010460:	2300      	movs	r3, #0
 8010462:	4629      	mov	r1, r5
 8010464:	220a      	movs	r2, #10
 8010466:	4658      	mov	r0, fp
 8010468:	f000 fd82 	bl	8010f70 <__multadd>
 801046c:	9b00      	ldr	r3, [sp, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	4605      	mov	r5, r0
 8010472:	dc67      	bgt.n	8010544 <_dtoa_r+0x94c>
 8010474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010476:	2b02      	cmp	r3, #2
 8010478:	dc41      	bgt.n	80104fe <_dtoa_r+0x906>
 801047a:	e063      	b.n	8010544 <_dtoa_r+0x94c>
 801047c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801047e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010482:	e746      	b.n	8010312 <_dtoa_r+0x71a>
 8010484:	9b07      	ldr	r3, [sp, #28]
 8010486:	1e5c      	subs	r4, r3, #1
 8010488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801048a:	42a3      	cmp	r3, r4
 801048c:	bfbf      	itttt	lt
 801048e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010490:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010492:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010494:	1ae3      	sublt	r3, r4, r3
 8010496:	bfb4      	ite	lt
 8010498:	18d2      	addlt	r2, r2, r3
 801049a:	1b1c      	subge	r4, r3, r4
 801049c:	9b07      	ldr	r3, [sp, #28]
 801049e:	bfbc      	itt	lt
 80104a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80104a2:	2400      	movlt	r4, #0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	bfb5      	itete	lt
 80104a8:	eba8 0603 	sublt.w	r6, r8, r3
 80104ac:	9b07      	ldrge	r3, [sp, #28]
 80104ae:	2300      	movlt	r3, #0
 80104b0:	4646      	movge	r6, r8
 80104b2:	e730      	b.n	8010316 <_dtoa_r+0x71e>
 80104b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80104b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80104b8:	4646      	mov	r6, r8
 80104ba:	e735      	b.n	8010328 <_dtoa_r+0x730>
 80104bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80104be:	e75c      	b.n	801037a <_dtoa_r+0x782>
 80104c0:	2300      	movs	r3, #0
 80104c2:	e788      	b.n	80103d6 <_dtoa_r+0x7de>
 80104c4:	3fe00000 	.word	0x3fe00000
 80104c8:	40240000 	.word	0x40240000
 80104cc:	40140000 	.word	0x40140000
 80104d0:	9b02      	ldr	r3, [sp, #8]
 80104d2:	e780      	b.n	80103d6 <_dtoa_r+0x7de>
 80104d4:	2300      	movs	r3, #0
 80104d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80104d8:	e782      	b.n	80103e0 <_dtoa_r+0x7e8>
 80104da:	d099      	beq.n	8010410 <_dtoa_r+0x818>
 80104dc:	9a08      	ldr	r2, [sp, #32]
 80104de:	331c      	adds	r3, #28
 80104e0:	441a      	add	r2, r3
 80104e2:	4498      	add	r8, r3
 80104e4:	441e      	add	r6, r3
 80104e6:	9208      	str	r2, [sp, #32]
 80104e8:	e792      	b.n	8010410 <_dtoa_r+0x818>
 80104ea:	4603      	mov	r3, r0
 80104ec:	e7f6      	b.n	80104dc <_dtoa_r+0x8e4>
 80104ee:	9b07      	ldr	r3, [sp, #28]
 80104f0:	9704      	str	r7, [sp, #16]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	dc20      	bgt.n	8010538 <_dtoa_r+0x940>
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104fa:	2b02      	cmp	r3, #2
 80104fc:	dd1e      	ble.n	801053c <_dtoa_r+0x944>
 80104fe:	9b00      	ldr	r3, [sp, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	f47f aec0 	bne.w	8010286 <_dtoa_r+0x68e>
 8010506:	4621      	mov	r1, r4
 8010508:	2205      	movs	r2, #5
 801050a:	4658      	mov	r0, fp
 801050c:	f000 fd30 	bl	8010f70 <__multadd>
 8010510:	4601      	mov	r1, r0
 8010512:	4604      	mov	r4, r0
 8010514:	4648      	mov	r0, r9
 8010516:	f000 ff8d 	bl	8011434 <__mcmp>
 801051a:	2800      	cmp	r0, #0
 801051c:	f77f aeb3 	ble.w	8010286 <_dtoa_r+0x68e>
 8010520:	4656      	mov	r6, sl
 8010522:	2331      	movs	r3, #49	@ 0x31
 8010524:	f806 3b01 	strb.w	r3, [r6], #1
 8010528:	9b04      	ldr	r3, [sp, #16]
 801052a:	3301      	adds	r3, #1
 801052c:	9304      	str	r3, [sp, #16]
 801052e:	e6ae      	b.n	801028e <_dtoa_r+0x696>
 8010530:	9c07      	ldr	r4, [sp, #28]
 8010532:	9704      	str	r7, [sp, #16]
 8010534:	4625      	mov	r5, r4
 8010536:	e7f3      	b.n	8010520 <_dtoa_r+0x928>
 8010538:	9b07      	ldr	r3, [sp, #28]
 801053a:	9300      	str	r3, [sp, #0]
 801053c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801053e:	2b00      	cmp	r3, #0
 8010540:	f000 8104 	beq.w	801074c <_dtoa_r+0xb54>
 8010544:	2e00      	cmp	r6, #0
 8010546:	dd05      	ble.n	8010554 <_dtoa_r+0x95c>
 8010548:	4629      	mov	r1, r5
 801054a:	4632      	mov	r2, r6
 801054c:	4658      	mov	r0, fp
 801054e:	f000 ff05 	bl	801135c <__lshift>
 8010552:	4605      	mov	r5, r0
 8010554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010556:	2b00      	cmp	r3, #0
 8010558:	d05a      	beq.n	8010610 <_dtoa_r+0xa18>
 801055a:	6869      	ldr	r1, [r5, #4]
 801055c:	4658      	mov	r0, fp
 801055e:	f000 fca5 	bl	8010eac <_Balloc>
 8010562:	4606      	mov	r6, r0
 8010564:	b928      	cbnz	r0, 8010572 <_dtoa_r+0x97a>
 8010566:	4b84      	ldr	r3, [pc, #528]	@ (8010778 <_dtoa_r+0xb80>)
 8010568:	4602      	mov	r2, r0
 801056a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801056e:	f7ff bb5a 	b.w	800fc26 <_dtoa_r+0x2e>
 8010572:	692a      	ldr	r2, [r5, #16]
 8010574:	3202      	adds	r2, #2
 8010576:	0092      	lsls	r2, r2, #2
 8010578:	f105 010c 	add.w	r1, r5, #12
 801057c:	300c      	adds	r0, #12
 801057e:	f7ff fa78 	bl	800fa72 <memcpy>
 8010582:	2201      	movs	r2, #1
 8010584:	4631      	mov	r1, r6
 8010586:	4658      	mov	r0, fp
 8010588:	f000 fee8 	bl	801135c <__lshift>
 801058c:	f10a 0301 	add.w	r3, sl, #1
 8010590:	9307      	str	r3, [sp, #28]
 8010592:	9b00      	ldr	r3, [sp, #0]
 8010594:	4453      	add	r3, sl
 8010596:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010598:	9b02      	ldr	r3, [sp, #8]
 801059a:	f003 0301 	and.w	r3, r3, #1
 801059e:	462f      	mov	r7, r5
 80105a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80105a2:	4605      	mov	r5, r0
 80105a4:	9b07      	ldr	r3, [sp, #28]
 80105a6:	4621      	mov	r1, r4
 80105a8:	3b01      	subs	r3, #1
 80105aa:	4648      	mov	r0, r9
 80105ac:	9300      	str	r3, [sp, #0]
 80105ae:	f7ff fa9b 	bl	800fae8 <quorem>
 80105b2:	4639      	mov	r1, r7
 80105b4:	9002      	str	r0, [sp, #8]
 80105b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80105ba:	4648      	mov	r0, r9
 80105bc:	f000 ff3a 	bl	8011434 <__mcmp>
 80105c0:	462a      	mov	r2, r5
 80105c2:	9008      	str	r0, [sp, #32]
 80105c4:	4621      	mov	r1, r4
 80105c6:	4658      	mov	r0, fp
 80105c8:	f000 ff50 	bl	801146c <__mdiff>
 80105cc:	68c2      	ldr	r2, [r0, #12]
 80105ce:	4606      	mov	r6, r0
 80105d0:	bb02      	cbnz	r2, 8010614 <_dtoa_r+0xa1c>
 80105d2:	4601      	mov	r1, r0
 80105d4:	4648      	mov	r0, r9
 80105d6:	f000 ff2d 	bl	8011434 <__mcmp>
 80105da:	4602      	mov	r2, r0
 80105dc:	4631      	mov	r1, r6
 80105de:	4658      	mov	r0, fp
 80105e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80105e2:	f000 fca3 	bl	8010f2c <_Bfree>
 80105e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80105ea:	9e07      	ldr	r6, [sp, #28]
 80105ec:	ea43 0102 	orr.w	r1, r3, r2
 80105f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105f2:	4319      	orrs	r1, r3
 80105f4:	d110      	bne.n	8010618 <_dtoa_r+0xa20>
 80105f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80105fa:	d029      	beq.n	8010650 <_dtoa_r+0xa58>
 80105fc:	9b08      	ldr	r3, [sp, #32]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	dd02      	ble.n	8010608 <_dtoa_r+0xa10>
 8010602:	9b02      	ldr	r3, [sp, #8]
 8010604:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010608:	9b00      	ldr	r3, [sp, #0]
 801060a:	f883 8000 	strb.w	r8, [r3]
 801060e:	e63f      	b.n	8010290 <_dtoa_r+0x698>
 8010610:	4628      	mov	r0, r5
 8010612:	e7bb      	b.n	801058c <_dtoa_r+0x994>
 8010614:	2201      	movs	r2, #1
 8010616:	e7e1      	b.n	80105dc <_dtoa_r+0x9e4>
 8010618:	9b08      	ldr	r3, [sp, #32]
 801061a:	2b00      	cmp	r3, #0
 801061c:	db04      	blt.n	8010628 <_dtoa_r+0xa30>
 801061e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010620:	430b      	orrs	r3, r1
 8010622:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010624:	430b      	orrs	r3, r1
 8010626:	d120      	bne.n	801066a <_dtoa_r+0xa72>
 8010628:	2a00      	cmp	r2, #0
 801062a:	dded      	ble.n	8010608 <_dtoa_r+0xa10>
 801062c:	4649      	mov	r1, r9
 801062e:	2201      	movs	r2, #1
 8010630:	4658      	mov	r0, fp
 8010632:	f000 fe93 	bl	801135c <__lshift>
 8010636:	4621      	mov	r1, r4
 8010638:	4681      	mov	r9, r0
 801063a:	f000 fefb 	bl	8011434 <__mcmp>
 801063e:	2800      	cmp	r0, #0
 8010640:	dc03      	bgt.n	801064a <_dtoa_r+0xa52>
 8010642:	d1e1      	bne.n	8010608 <_dtoa_r+0xa10>
 8010644:	f018 0f01 	tst.w	r8, #1
 8010648:	d0de      	beq.n	8010608 <_dtoa_r+0xa10>
 801064a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801064e:	d1d8      	bne.n	8010602 <_dtoa_r+0xa0a>
 8010650:	9a00      	ldr	r2, [sp, #0]
 8010652:	2339      	movs	r3, #57	@ 0x39
 8010654:	7013      	strb	r3, [r2, #0]
 8010656:	4633      	mov	r3, r6
 8010658:	461e      	mov	r6, r3
 801065a:	3b01      	subs	r3, #1
 801065c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010660:	2a39      	cmp	r2, #57	@ 0x39
 8010662:	d052      	beq.n	801070a <_dtoa_r+0xb12>
 8010664:	3201      	adds	r2, #1
 8010666:	701a      	strb	r2, [r3, #0]
 8010668:	e612      	b.n	8010290 <_dtoa_r+0x698>
 801066a:	2a00      	cmp	r2, #0
 801066c:	dd07      	ble.n	801067e <_dtoa_r+0xa86>
 801066e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010672:	d0ed      	beq.n	8010650 <_dtoa_r+0xa58>
 8010674:	9a00      	ldr	r2, [sp, #0]
 8010676:	f108 0301 	add.w	r3, r8, #1
 801067a:	7013      	strb	r3, [r2, #0]
 801067c:	e608      	b.n	8010290 <_dtoa_r+0x698>
 801067e:	9b07      	ldr	r3, [sp, #28]
 8010680:	9a07      	ldr	r2, [sp, #28]
 8010682:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010688:	4293      	cmp	r3, r2
 801068a:	d028      	beq.n	80106de <_dtoa_r+0xae6>
 801068c:	4649      	mov	r1, r9
 801068e:	2300      	movs	r3, #0
 8010690:	220a      	movs	r2, #10
 8010692:	4658      	mov	r0, fp
 8010694:	f000 fc6c 	bl	8010f70 <__multadd>
 8010698:	42af      	cmp	r7, r5
 801069a:	4681      	mov	r9, r0
 801069c:	f04f 0300 	mov.w	r3, #0
 80106a0:	f04f 020a 	mov.w	r2, #10
 80106a4:	4639      	mov	r1, r7
 80106a6:	4658      	mov	r0, fp
 80106a8:	d107      	bne.n	80106ba <_dtoa_r+0xac2>
 80106aa:	f000 fc61 	bl	8010f70 <__multadd>
 80106ae:	4607      	mov	r7, r0
 80106b0:	4605      	mov	r5, r0
 80106b2:	9b07      	ldr	r3, [sp, #28]
 80106b4:	3301      	adds	r3, #1
 80106b6:	9307      	str	r3, [sp, #28]
 80106b8:	e774      	b.n	80105a4 <_dtoa_r+0x9ac>
 80106ba:	f000 fc59 	bl	8010f70 <__multadd>
 80106be:	4629      	mov	r1, r5
 80106c0:	4607      	mov	r7, r0
 80106c2:	2300      	movs	r3, #0
 80106c4:	220a      	movs	r2, #10
 80106c6:	4658      	mov	r0, fp
 80106c8:	f000 fc52 	bl	8010f70 <__multadd>
 80106cc:	4605      	mov	r5, r0
 80106ce:	e7f0      	b.n	80106b2 <_dtoa_r+0xaba>
 80106d0:	9b00      	ldr	r3, [sp, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	bfcc      	ite	gt
 80106d6:	461e      	movgt	r6, r3
 80106d8:	2601      	movle	r6, #1
 80106da:	4456      	add	r6, sl
 80106dc:	2700      	movs	r7, #0
 80106de:	4649      	mov	r1, r9
 80106e0:	2201      	movs	r2, #1
 80106e2:	4658      	mov	r0, fp
 80106e4:	f000 fe3a 	bl	801135c <__lshift>
 80106e8:	4621      	mov	r1, r4
 80106ea:	4681      	mov	r9, r0
 80106ec:	f000 fea2 	bl	8011434 <__mcmp>
 80106f0:	2800      	cmp	r0, #0
 80106f2:	dcb0      	bgt.n	8010656 <_dtoa_r+0xa5e>
 80106f4:	d102      	bne.n	80106fc <_dtoa_r+0xb04>
 80106f6:	f018 0f01 	tst.w	r8, #1
 80106fa:	d1ac      	bne.n	8010656 <_dtoa_r+0xa5e>
 80106fc:	4633      	mov	r3, r6
 80106fe:	461e      	mov	r6, r3
 8010700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010704:	2a30      	cmp	r2, #48	@ 0x30
 8010706:	d0fa      	beq.n	80106fe <_dtoa_r+0xb06>
 8010708:	e5c2      	b.n	8010290 <_dtoa_r+0x698>
 801070a:	459a      	cmp	sl, r3
 801070c:	d1a4      	bne.n	8010658 <_dtoa_r+0xa60>
 801070e:	9b04      	ldr	r3, [sp, #16]
 8010710:	3301      	adds	r3, #1
 8010712:	9304      	str	r3, [sp, #16]
 8010714:	2331      	movs	r3, #49	@ 0x31
 8010716:	f88a 3000 	strb.w	r3, [sl]
 801071a:	e5b9      	b.n	8010290 <_dtoa_r+0x698>
 801071c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801071e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801077c <_dtoa_r+0xb84>
 8010722:	b11b      	cbz	r3, 801072c <_dtoa_r+0xb34>
 8010724:	f10a 0308 	add.w	r3, sl, #8
 8010728:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801072a:	6013      	str	r3, [r2, #0]
 801072c:	4650      	mov	r0, sl
 801072e:	b019      	add	sp, #100	@ 0x64
 8010730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010736:	2b01      	cmp	r3, #1
 8010738:	f77f ae37 	ble.w	80103aa <_dtoa_r+0x7b2>
 801073c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801073e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010740:	2001      	movs	r0, #1
 8010742:	e655      	b.n	80103f0 <_dtoa_r+0x7f8>
 8010744:	9b00      	ldr	r3, [sp, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	f77f aed6 	ble.w	80104f8 <_dtoa_r+0x900>
 801074c:	4656      	mov	r6, sl
 801074e:	4621      	mov	r1, r4
 8010750:	4648      	mov	r0, r9
 8010752:	f7ff f9c9 	bl	800fae8 <quorem>
 8010756:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801075a:	f806 8b01 	strb.w	r8, [r6], #1
 801075e:	9b00      	ldr	r3, [sp, #0]
 8010760:	eba6 020a 	sub.w	r2, r6, sl
 8010764:	4293      	cmp	r3, r2
 8010766:	ddb3      	ble.n	80106d0 <_dtoa_r+0xad8>
 8010768:	4649      	mov	r1, r9
 801076a:	2300      	movs	r3, #0
 801076c:	220a      	movs	r2, #10
 801076e:	4658      	mov	r0, fp
 8010770:	f000 fbfe 	bl	8010f70 <__multadd>
 8010774:	4681      	mov	r9, r0
 8010776:	e7ea      	b.n	801074e <_dtoa_r+0xb56>
 8010778:	08012599 	.word	0x08012599
 801077c:	0801251d 	.word	0x0801251d

08010780 <_free_r>:
 8010780:	b538      	push	{r3, r4, r5, lr}
 8010782:	4605      	mov	r5, r0
 8010784:	2900      	cmp	r1, #0
 8010786:	d041      	beq.n	801080c <_free_r+0x8c>
 8010788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801078c:	1f0c      	subs	r4, r1, #4
 801078e:	2b00      	cmp	r3, #0
 8010790:	bfb8      	it	lt
 8010792:	18e4      	addlt	r4, r4, r3
 8010794:	f7fd fa4a 	bl	800dc2c <__malloc_lock>
 8010798:	4a1d      	ldr	r2, [pc, #116]	@ (8010810 <_free_r+0x90>)
 801079a:	6813      	ldr	r3, [r2, #0]
 801079c:	b933      	cbnz	r3, 80107ac <_free_r+0x2c>
 801079e:	6063      	str	r3, [r4, #4]
 80107a0:	6014      	str	r4, [r2, #0]
 80107a2:	4628      	mov	r0, r5
 80107a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107a8:	f7fd ba46 	b.w	800dc38 <__malloc_unlock>
 80107ac:	42a3      	cmp	r3, r4
 80107ae:	d908      	bls.n	80107c2 <_free_r+0x42>
 80107b0:	6820      	ldr	r0, [r4, #0]
 80107b2:	1821      	adds	r1, r4, r0
 80107b4:	428b      	cmp	r3, r1
 80107b6:	bf01      	itttt	eq
 80107b8:	6819      	ldreq	r1, [r3, #0]
 80107ba:	685b      	ldreq	r3, [r3, #4]
 80107bc:	1809      	addeq	r1, r1, r0
 80107be:	6021      	streq	r1, [r4, #0]
 80107c0:	e7ed      	b.n	801079e <_free_r+0x1e>
 80107c2:	461a      	mov	r2, r3
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	b10b      	cbz	r3, 80107cc <_free_r+0x4c>
 80107c8:	42a3      	cmp	r3, r4
 80107ca:	d9fa      	bls.n	80107c2 <_free_r+0x42>
 80107cc:	6811      	ldr	r1, [r2, #0]
 80107ce:	1850      	adds	r0, r2, r1
 80107d0:	42a0      	cmp	r0, r4
 80107d2:	d10b      	bne.n	80107ec <_free_r+0x6c>
 80107d4:	6820      	ldr	r0, [r4, #0]
 80107d6:	4401      	add	r1, r0
 80107d8:	1850      	adds	r0, r2, r1
 80107da:	4283      	cmp	r3, r0
 80107dc:	6011      	str	r1, [r2, #0]
 80107de:	d1e0      	bne.n	80107a2 <_free_r+0x22>
 80107e0:	6818      	ldr	r0, [r3, #0]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	6053      	str	r3, [r2, #4]
 80107e6:	4408      	add	r0, r1
 80107e8:	6010      	str	r0, [r2, #0]
 80107ea:	e7da      	b.n	80107a2 <_free_r+0x22>
 80107ec:	d902      	bls.n	80107f4 <_free_r+0x74>
 80107ee:	230c      	movs	r3, #12
 80107f0:	602b      	str	r3, [r5, #0]
 80107f2:	e7d6      	b.n	80107a2 <_free_r+0x22>
 80107f4:	6820      	ldr	r0, [r4, #0]
 80107f6:	1821      	adds	r1, r4, r0
 80107f8:	428b      	cmp	r3, r1
 80107fa:	bf04      	itt	eq
 80107fc:	6819      	ldreq	r1, [r3, #0]
 80107fe:	685b      	ldreq	r3, [r3, #4]
 8010800:	6063      	str	r3, [r4, #4]
 8010802:	bf04      	itt	eq
 8010804:	1809      	addeq	r1, r1, r0
 8010806:	6021      	streq	r1, [r4, #0]
 8010808:	6054      	str	r4, [r2, #4]
 801080a:	e7ca      	b.n	80107a2 <_free_r+0x22>
 801080c:	bd38      	pop	{r3, r4, r5, pc}
 801080e:	bf00      	nop
 8010810:	20002538 	.word	0x20002538

08010814 <rshift>:
 8010814:	6903      	ldr	r3, [r0, #16]
 8010816:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801081a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801081e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010822:	f100 0414 	add.w	r4, r0, #20
 8010826:	dd45      	ble.n	80108b4 <rshift+0xa0>
 8010828:	f011 011f 	ands.w	r1, r1, #31
 801082c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010830:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010834:	d10c      	bne.n	8010850 <rshift+0x3c>
 8010836:	f100 0710 	add.w	r7, r0, #16
 801083a:	4629      	mov	r1, r5
 801083c:	42b1      	cmp	r1, r6
 801083e:	d334      	bcc.n	80108aa <rshift+0x96>
 8010840:	1a9b      	subs	r3, r3, r2
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	1eea      	subs	r2, r5, #3
 8010846:	4296      	cmp	r6, r2
 8010848:	bf38      	it	cc
 801084a:	2300      	movcc	r3, #0
 801084c:	4423      	add	r3, r4
 801084e:	e015      	b.n	801087c <rshift+0x68>
 8010850:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010854:	f1c1 0820 	rsb	r8, r1, #32
 8010858:	40cf      	lsrs	r7, r1
 801085a:	f105 0e04 	add.w	lr, r5, #4
 801085e:	46a1      	mov	r9, r4
 8010860:	4576      	cmp	r6, lr
 8010862:	46f4      	mov	ip, lr
 8010864:	d815      	bhi.n	8010892 <rshift+0x7e>
 8010866:	1a9a      	subs	r2, r3, r2
 8010868:	0092      	lsls	r2, r2, #2
 801086a:	3a04      	subs	r2, #4
 801086c:	3501      	adds	r5, #1
 801086e:	42ae      	cmp	r6, r5
 8010870:	bf38      	it	cc
 8010872:	2200      	movcc	r2, #0
 8010874:	18a3      	adds	r3, r4, r2
 8010876:	50a7      	str	r7, [r4, r2]
 8010878:	b107      	cbz	r7, 801087c <rshift+0x68>
 801087a:	3304      	adds	r3, #4
 801087c:	1b1a      	subs	r2, r3, r4
 801087e:	42a3      	cmp	r3, r4
 8010880:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010884:	bf08      	it	eq
 8010886:	2300      	moveq	r3, #0
 8010888:	6102      	str	r2, [r0, #16]
 801088a:	bf08      	it	eq
 801088c:	6143      	streq	r3, [r0, #20]
 801088e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010892:	f8dc c000 	ldr.w	ip, [ip]
 8010896:	fa0c fc08 	lsl.w	ip, ip, r8
 801089a:	ea4c 0707 	orr.w	r7, ip, r7
 801089e:	f849 7b04 	str.w	r7, [r9], #4
 80108a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80108a6:	40cf      	lsrs	r7, r1
 80108a8:	e7da      	b.n	8010860 <rshift+0x4c>
 80108aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80108ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80108b2:	e7c3      	b.n	801083c <rshift+0x28>
 80108b4:	4623      	mov	r3, r4
 80108b6:	e7e1      	b.n	801087c <rshift+0x68>

080108b8 <__hexdig_fun>:
 80108b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80108bc:	2b09      	cmp	r3, #9
 80108be:	d802      	bhi.n	80108c6 <__hexdig_fun+0xe>
 80108c0:	3820      	subs	r0, #32
 80108c2:	b2c0      	uxtb	r0, r0
 80108c4:	4770      	bx	lr
 80108c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80108ca:	2b05      	cmp	r3, #5
 80108cc:	d801      	bhi.n	80108d2 <__hexdig_fun+0x1a>
 80108ce:	3847      	subs	r0, #71	@ 0x47
 80108d0:	e7f7      	b.n	80108c2 <__hexdig_fun+0xa>
 80108d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80108d6:	2b05      	cmp	r3, #5
 80108d8:	d801      	bhi.n	80108de <__hexdig_fun+0x26>
 80108da:	3827      	subs	r0, #39	@ 0x27
 80108dc:	e7f1      	b.n	80108c2 <__hexdig_fun+0xa>
 80108de:	2000      	movs	r0, #0
 80108e0:	4770      	bx	lr
	...

080108e4 <__gethex>:
 80108e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e8:	b085      	sub	sp, #20
 80108ea:	468a      	mov	sl, r1
 80108ec:	9302      	str	r3, [sp, #8]
 80108ee:	680b      	ldr	r3, [r1, #0]
 80108f0:	9001      	str	r0, [sp, #4]
 80108f2:	4690      	mov	r8, r2
 80108f4:	1c9c      	adds	r4, r3, #2
 80108f6:	46a1      	mov	r9, r4
 80108f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80108fc:	2830      	cmp	r0, #48	@ 0x30
 80108fe:	d0fa      	beq.n	80108f6 <__gethex+0x12>
 8010900:	eba9 0303 	sub.w	r3, r9, r3
 8010904:	f1a3 0b02 	sub.w	fp, r3, #2
 8010908:	f7ff ffd6 	bl	80108b8 <__hexdig_fun>
 801090c:	4605      	mov	r5, r0
 801090e:	2800      	cmp	r0, #0
 8010910:	d168      	bne.n	80109e4 <__gethex+0x100>
 8010912:	49a0      	ldr	r1, [pc, #640]	@ (8010b94 <__gethex+0x2b0>)
 8010914:	2201      	movs	r2, #1
 8010916:	4648      	mov	r0, r9
 8010918:	f7ff f811 	bl	800f93e <strncmp>
 801091c:	4607      	mov	r7, r0
 801091e:	2800      	cmp	r0, #0
 8010920:	d167      	bne.n	80109f2 <__gethex+0x10e>
 8010922:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010926:	4626      	mov	r6, r4
 8010928:	f7ff ffc6 	bl	80108b8 <__hexdig_fun>
 801092c:	2800      	cmp	r0, #0
 801092e:	d062      	beq.n	80109f6 <__gethex+0x112>
 8010930:	4623      	mov	r3, r4
 8010932:	7818      	ldrb	r0, [r3, #0]
 8010934:	2830      	cmp	r0, #48	@ 0x30
 8010936:	4699      	mov	r9, r3
 8010938:	f103 0301 	add.w	r3, r3, #1
 801093c:	d0f9      	beq.n	8010932 <__gethex+0x4e>
 801093e:	f7ff ffbb 	bl	80108b8 <__hexdig_fun>
 8010942:	fab0 f580 	clz	r5, r0
 8010946:	096d      	lsrs	r5, r5, #5
 8010948:	f04f 0b01 	mov.w	fp, #1
 801094c:	464a      	mov	r2, r9
 801094e:	4616      	mov	r6, r2
 8010950:	3201      	adds	r2, #1
 8010952:	7830      	ldrb	r0, [r6, #0]
 8010954:	f7ff ffb0 	bl	80108b8 <__hexdig_fun>
 8010958:	2800      	cmp	r0, #0
 801095a:	d1f8      	bne.n	801094e <__gethex+0x6a>
 801095c:	498d      	ldr	r1, [pc, #564]	@ (8010b94 <__gethex+0x2b0>)
 801095e:	2201      	movs	r2, #1
 8010960:	4630      	mov	r0, r6
 8010962:	f7fe ffec 	bl	800f93e <strncmp>
 8010966:	2800      	cmp	r0, #0
 8010968:	d13f      	bne.n	80109ea <__gethex+0x106>
 801096a:	b944      	cbnz	r4, 801097e <__gethex+0x9a>
 801096c:	1c74      	adds	r4, r6, #1
 801096e:	4622      	mov	r2, r4
 8010970:	4616      	mov	r6, r2
 8010972:	3201      	adds	r2, #1
 8010974:	7830      	ldrb	r0, [r6, #0]
 8010976:	f7ff ff9f 	bl	80108b8 <__hexdig_fun>
 801097a:	2800      	cmp	r0, #0
 801097c:	d1f8      	bne.n	8010970 <__gethex+0x8c>
 801097e:	1ba4      	subs	r4, r4, r6
 8010980:	00a7      	lsls	r7, r4, #2
 8010982:	7833      	ldrb	r3, [r6, #0]
 8010984:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010988:	2b50      	cmp	r3, #80	@ 0x50
 801098a:	d13e      	bne.n	8010a0a <__gethex+0x126>
 801098c:	7873      	ldrb	r3, [r6, #1]
 801098e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010990:	d033      	beq.n	80109fa <__gethex+0x116>
 8010992:	2b2d      	cmp	r3, #45	@ 0x2d
 8010994:	d034      	beq.n	8010a00 <__gethex+0x11c>
 8010996:	1c71      	adds	r1, r6, #1
 8010998:	2400      	movs	r4, #0
 801099a:	7808      	ldrb	r0, [r1, #0]
 801099c:	f7ff ff8c 	bl	80108b8 <__hexdig_fun>
 80109a0:	1e43      	subs	r3, r0, #1
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	2b18      	cmp	r3, #24
 80109a6:	d830      	bhi.n	8010a0a <__gethex+0x126>
 80109a8:	f1a0 0210 	sub.w	r2, r0, #16
 80109ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80109b0:	f7ff ff82 	bl	80108b8 <__hexdig_fun>
 80109b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80109b8:	fa5f fc8c 	uxtb.w	ip, ip
 80109bc:	f1bc 0f18 	cmp.w	ip, #24
 80109c0:	f04f 030a 	mov.w	r3, #10
 80109c4:	d91e      	bls.n	8010a04 <__gethex+0x120>
 80109c6:	b104      	cbz	r4, 80109ca <__gethex+0xe6>
 80109c8:	4252      	negs	r2, r2
 80109ca:	4417      	add	r7, r2
 80109cc:	f8ca 1000 	str.w	r1, [sl]
 80109d0:	b1ed      	cbz	r5, 8010a0e <__gethex+0x12a>
 80109d2:	f1bb 0f00 	cmp.w	fp, #0
 80109d6:	bf0c      	ite	eq
 80109d8:	2506      	moveq	r5, #6
 80109da:	2500      	movne	r5, #0
 80109dc:	4628      	mov	r0, r5
 80109de:	b005      	add	sp, #20
 80109e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109e4:	2500      	movs	r5, #0
 80109e6:	462c      	mov	r4, r5
 80109e8:	e7b0      	b.n	801094c <__gethex+0x68>
 80109ea:	2c00      	cmp	r4, #0
 80109ec:	d1c7      	bne.n	801097e <__gethex+0x9a>
 80109ee:	4627      	mov	r7, r4
 80109f0:	e7c7      	b.n	8010982 <__gethex+0x9e>
 80109f2:	464e      	mov	r6, r9
 80109f4:	462f      	mov	r7, r5
 80109f6:	2501      	movs	r5, #1
 80109f8:	e7c3      	b.n	8010982 <__gethex+0x9e>
 80109fa:	2400      	movs	r4, #0
 80109fc:	1cb1      	adds	r1, r6, #2
 80109fe:	e7cc      	b.n	801099a <__gethex+0xb6>
 8010a00:	2401      	movs	r4, #1
 8010a02:	e7fb      	b.n	80109fc <__gethex+0x118>
 8010a04:	fb03 0002 	mla	r0, r3, r2, r0
 8010a08:	e7ce      	b.n	80109a8 <__gethex+0xc4>
 8010a0a:	4631      	mov	r1, r6
 8010a0c:	e7de      	b.n	80109cc <__gethex+0xe8>
 8010a0e:	eba6 0309 	sub.w	r3, r6, r9
 8010a12:	3b01      	subs	r3, #1
 8010a14:	4629      	mov	r1, r5
 8010a16:	2b07      	cmp	r3, #7
 8010a18:	dc0a      	bgt.n	8010a30 <__gethex+0x14c>
 8010a1a:	9801      	ldr	r0, [sp, #4]
 8010a1c:	f000 fa46 	bl	8010eac <_Balloc>
 8010a20:	4604      	mov	r4, r0
 8010a22:	b940      	cbnz	r0, 8010a36 <__gethex+0x152>
 8010a24:	4b5c      	ldr	r3, [pc, #368]	@ (8010b98 <__gethex+0x2b4>)
 8010a26:	4602      	mov	r2, r0
 8010a28:	21e4      	movs	r1, #228	@ 0xe4
 8010a2a:	485c      	ldr	r0, [pc, #368]	@ (8010b9c <__gethex+0x2b8>)
 8010a2c:	f7ff f83e 	bl	800faac <__assert_func>
 8010a30:	3101      	adds	r1, #1
 8010a32:	105b      	asrs	r3, r3, #1
 8010a34:	e7ef      	b.n	8010a16 <__gethex+0x132>
 8010a36:	f100 0a14 	add.w	sl, r0, #20
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	4655      	mov	r5, sl
 8010a3e:	469b      	mov	fp, r3
 8010a40:	45b1      	cmp	r9, r6
 8010a42:	d337      	bcc.n	8010ab4 <__gethex+0x1d0>
 8010a44:	f845 bb04 	str.w	fp, [r5], #4
 8010a48:	eba5 050a 	sub.w	r5, r5, sl
 8010a4c:	10ad      	asrs	r5, r5, #2
 8010a4e:	6125      	str	r5, [r4, #16]
 8010a50:	4658      	mov	r0, fp
 8010a52:	f000 fb1d 	bl	8011090 <__hi0bits>
 8010a56:	016d      	lsls	r5, r5, #5
 8010a58:	f8d8 6000 	ldr.w	r6, [r8]
 8010a5c:	1a2d      	subs	r5, r5, r0
 8010a5e:	42b5      	cmp	r5, r6
 8010a60:	dd54      	ble.n	8010b0c <__gethex+0x228>
 8010a62:	1bad      	subs	r5, r5, r6
 8010a64:	4629      	mov	r1, r5
 8010a66:	4620      	mov	r0, r4
 8010a68:	f000 feb1 	bl	80117ce <__any_on>
 8010a6c:	4681      	mov	r9, r0
 8010a6e:	b178      	cbz	r0, 8010a90 <__gethex+0x1ac>
 8010a70:	1e6b      	subs	r3, r5, #1
 8010a72:	1159      	asrs	r1, r3, #5
 8010a74:	f003 021f 	and.w	r2, r3, #31
 8010a78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010a7c:	f04f 0901 	mov.w	r9, #1
 8010a80:	fa09 f202 	lsl.w	r2, r9, r2
 8010a84:	420a      	tst	r2, r1
 8010a86:	d003      	beq.n	8010a90 <__gethex+0x1ac>
 8010a88:	454b      	cmp	r3, r9
 8010a8a:	dc36      	bgt.n	8010afa <__gethex+0x216>
 8010a8c:	f04f 0902 	mov.w	r9, #2
 8010a90:	4629      	mov	r1, r5
 8010a92:	4620      	mov	r0, r4
 8010a94:	f7ff febe 	bl	8010814 <rshift>
 8010a98:	442f      	add	r7, r5
 8010a9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a9e:	42bb      	cmp	r3, r7
 8010aa0:	da42      	bge.n	8010b28 <__gethex+0x244>
 8010aa2:	9801      	ldr	r0, [sp, #4]
 8010aa4:	4621      	mov	r1, r4
 8010aa6:	f000 fa41 	bl	8010f2c <_Bfree>
 8010aaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010aac:	2300      	movs	r3, #0
 8010aae:	6013      	str	r3, [r2, #0]
 8010ab0:	25a3      	movs	r5, #163	@ 0xa3
 8010ab2:	e793      	b.n	80109dc <__gethex+0xf8>
 8010ab4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010ab8:	2a2e      	cmp	r2, #46	@ 0x2e
 8010aba:	d012      	beq.n	8010ae2 <__gethex+0x1fe>
 8010abc:	2b20      	cmp	r3, #32
 8010abe:	d104      	bne.n	8010aca <__gethex+0x1e6>
 8010ac0:	f845 bb04 	str.w	fp, [r5], #4
 8010ac4:	f04f 0b00 	mov.w	fp, #0
 8010ac8:	465b      	mov	r3, fp
 8010aca:	7830      	ldrb	r0, [r6, #0]
 8010acc:	9303      	str	r3, [sp, #12]
 8010ace:	f7ff fef3 	bl	80108b8 <__hexdig_fun>
 8010ad2:	9b03      	ldr	r3, [sp, #12]
 8010ad4:	f000 000f 	and.w	r0, r0, #15
 8010ad8:	4098      	lsls	r0, r3
 8010ada:	ea4b 0b00 	orr.w	fp, fp, r0
 8010ade:	3304      	adds	r3, #4
 8010ae0:	e7ae      	b.n	8010a40 <__gethex+0x15c>
 8010ae2:	45b1      	cmp	r9, r6
 8010ae4:	d8ea      	bhi.n	8010abc <__gethex+0x1d8>
 8010ae6:	492b      	ldr	r1, [pc, #172]	@ (8010b94 <__gethex+0x2b0>)
 8010ae8:	9303      	str	r3, [sp, #12]
 8010aea:	2201      	movs	r2, #1
 8010aec:	4630      	mov	r0, r6
 8010aee:	f7fe ff26 	bl	800f93e <strncmp>
 8010af2:	9b03      	ldr	r3, [sp, #12]
 8010af4:	2800      	cmp	r0, #0
 8010af6:	d1e1      	bne.n	8010abc <__gethex+0x1d8>
 8010af8:	e7a2      	b.n	8010a40 <__gethex+0x15c>
 8010afa:	1ea9      	subs	r1, r5, #2
 8010afc:	4620      	mov	r0, r4
 8010afe:	f000 fe66 	bl	80117ce <__any_on>
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d0c2      	beq.n	8010a8c <__gethex+0x1a8>
 8010b06:	f04f 0903 	mov.w	r9, #3
 8010b0a:	e7c1      	b.n	8010a90 <__gethex+0x1ac>
 8010b0c:	da09      	bge.n	8010b22 <__gethex+0x23e>
 8010b0e:	1b75      	subs	r5, r6, r5
 8010b10:	4621      	mov	r1, r4
 8010b12:	9801      	ldr	r0, [sp, #4]
 8010b14:	462a      	mov	r2, r5
 8010b16:	f000 fc21 	bl	801135c <__lshift>
 8010b1a:	1b7f      	subs	r7, r7, r5
 8010b1c:	4604      	mov	r4, r0
 8010b1e:	f100 0a14 	add.w	sl, r0, #20
 8010b22:	f04f 0900 	mov.w	r9, #0
 8010b26:	e7b8      	b.n	8010a9a <__gethex+0x1b6>
 8010b28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010b2c:	42bd      	cmp	r5, r7
 8010b2e:	dd6f      	ble.n	8010c10 <__gethex+0x32c>
 8010b30:	1bed      	subs	r5, r5, r7
 8010b32:	42ae      	cmp	r6, r5
 8010b34:	dc34      	bgt.n	8010ba0 <__gethex+0x2bc>
 8010b36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b3a:	2b02      	cmp	r3, #2
 8010b3c:	d022      	beq.n	8010b84 <__gethex+0x2a0>
 8010b3e:	2b03      	cmp	r3, #3
 8010b40:	d024      	beq.n	8010b8c <__gethex+0x2a8>
 8010b42:	2b01      	cmp	r3, #1
 8010b44:	d115      	bne.n	8010b72 <__gethex+0x28e>
 8010b46:	42ae      	cmp	r6, r5
 8010b48:	d113      	bne.n	8010b72 <__gethex+0x28e>
 8010b4a:	2e01      	cmp	r6, #1
 8010b4c:	d10b      	bne.n	8010b66 <__gethex+0x282>
 8010b4e:	9a02      	ldr	r2, [sp, #8]
 8010b50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010b54:	6013      	str	r3, [r2, #0]
 8010b56:	2301      	movs	r3, #1
 8010b58:	6123      	str	r3, [r4, #16]
 8010b5a:	f8ca 3000 	str.w	r3, [sl]
 8010b5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b60:	2562      	movs	r5, #98	@ 0x62
 8010b62:	601c      	str	r4, [r3, #0]
 8010b64:	e73a      	b.n	80109dc <__gethex+0xf8>
 8010b66:	1e71      	subs	r1, r6, #1
 8010b68:	4620      	mov	r0, r4
 8010b6a:	f000 fe30 	bl	80117ce <__any_on>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d1ed      	bne.n	8010b4e <__gethex+0x26a>
 8010b72:	9801      	ldr	r0, [sp, #4]
 8010b74:	4621      	mov	r1, r4
 8010b76:	f000 f9d9 	bl	8010f2c <_Bfree>
 8010b7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	6013      	str	r3, [r2, #0]
 8010b80:	2550      	movs	r5, #80	@ 0x50
 8010b82:	e72b      	b.n	80109dc <__gethex+0xf8>
 8010b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d1f3      	bne.n	8010b72 <__gethex+0x28e>
 8010b8a:	e7e0      	b.n	8010b4e <__gethex+0x26a>
 8010b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1dd      	bne.n	8010b4e <__gethex+0x26a>
 8010b92:	e7ee      	b.n	8010b72 <__gethex+0x28e>
 8010b94:	0801244c 	.word	0x0801244c
 8010b98:	08012599 	.word	0x08012599
 8010b9c:	080125aa 	.word	0x080125aa
 8010ba0:	1e6f      	subs	r7, r5, #1
 8010ba2:	f1b9 0f00 	cmp.w	r9, #0
 8010ba6:	d130      	bne.n	8010c0a <__gethex+0x326>
 8010ba8:	b127      	cbz	r7, 8010bb4 <__gethex+0x2d0>
 8010baa:	4639      	mov	r1, r7
 8010bac:	4620      	mov	r0, r4
 8010bae:	f000 fe0e 	bl	80117ce <__any_on>
 8010bb2:	4681      	mov	r9, r0
 8010bb4:	117a      	asrs	r2, r7, #5
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010bbc:	f007 071f 	and.w	r7, r7, #31
 8010bc0:	40bb      	lsls	r3, r7
 8010bc2:	4213      	tst	r3, r2
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	bf18      	it	ne
 8010bca:	f049 0902 	orrne.w	r9, r9, #2
 8010bce:	f7ff fe21 	bl	8010814 <rshift>
 8010bd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010bd6:	1b76      	subs	r6, r6, r5
 8010bd8:	2502      	movs	r5, #2
 8010bda:	f1b9 0f00 	cmp.w	r9, #0
 8010bde:	d047      	beq.n	8010c70 <__gethex+0x38c>
 8010be0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010be4:	2b02      	cmp	r3, #2
 8010be6:	d015      	beq.n	8010c14 <__gethex+0x330>
 8010be8:	2b03      	cmp	r3, #3
 8010bea:	d017      	beq.n	8010c1c <__gethex+0x338>
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d109      	bne.n	8010c04 <__gethex+0x320>
 8010bf0:	f019 0f02 	tst.w	r9, #2
 8010bf4:	d006      	beq.n	8010c04 <__gethex+0x320>
 8010bf6:	f8da 3000 	ldr.w	r3, [sl]
 8010bfa:	ea49 0903 	orr.w	r9, r9, r3
 8010bfe:	f019 0f01 	tst.w	r9, #1
 8010c02:	d10e      	bne.n	8010c22 <__gethex+0x33e>
 8010c04:	f045 0510 	orr.w	r5, r5, #16
 8010c08:	e032      	b.n	8010c70 <__gethex+0x38c>
 8010c0a:	f04f 0901 	mov.w	r9, #1
 8010c0e:	e7d1      	b.n	8010bb4 <__gethex+0x2d0>
 8010c10:	2501      	movs	r5, #1
 8010c12:	e7e2      	b.n	8010bda <__gethex+0x2f6>
 8010c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c16:	f1c3 0301 	rsb	r3, r3, #1
 8010c1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d0f0      	beq.n	8010c04 <__gethex+0x320>
 8010c22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010c26:	f104 0314 	add.w	r3, r4, #20
 8010c2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010c2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010c32:	f04f 0c00 	mov.w	ip, #0
 8010c36:	4618      	mov	r0, r3
 8010c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010c40:	d01b      	beq.n	8010c7a <__gethex+0x396>
 8010c42:	3201      	adds	r2, #1
 8010c44:	6002      	str	r2, [r0, #0]
 8010c46:	2d02      	cmp	r5, #2
 8010c48:	f104 0314 	add.w	r3, r4, #20
 8010c4c:	d13c      	bne.n	8010cc8 <__gethex+0x3e4>
 8010c4e:	f8d8 2000 	ldr.w	r2, [r8]
 8010c52:	3a01      	subs	r2, #1
 8010c54:	42b2      	cmp	r2, r6
 8010c56:	d109      	bne.n	8010c6c <__gethex+0x388>
 8010c58:	1171      	asrs	r1, r6, #5
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c60:	f006 061f 	and.w	r6, r6, #31
 8010c64:	fa02 f606 	lsl.w	r6, r2, r6
 8010c68:	421e      	tst	r6, r3
 8010c6a:	d13a      	bne.n	8010ce2 <__gethex+0x3fe>
 8010c6c:	f045 0520 	orr.w	r5, r5, #32
 8010c70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c72:	601c      	str	r4, [r3, #0]
 8010c74:	9b02      	ldr	r3, [sp, #8]
 8010c76:	601f      	str	r7, [r3, #0]
 8010c78:	e6b0      	b.n	80109dc <__gethex+0xf8>
 8010c7a:	4299      	cmp	r1, r3
 8010c7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010c80:	d8d9      	bhi.n	8010c36 <__gethex+0x352>
 8010c82:	68a3      	ldr	r3, [r4, #8]
 8010c84:	459b      	cmp	fp, r3
 8010c86:	db17      	blt.n	8010cb8 <__gethex+0x3d4>
 8010c88:	6861      	ldr	r1, [r4, #4]
 8010c8a:	9801      	ldr	r0, [sp, #4]
 8010c8c:	3101      	adds	r1, #1
 8010c8e:	f000 f90d 	bl	8010eac <_Balloc>
 8010c92:	4681      	mov	r9, r0
 8010c94:	b918      	cbnz	r0, 8010c9e <__gethex+0x3ba>
 8010c96:	4b1a      	ldr	r3, [pc, #104]	@ (8010d00 <__gethex+0x41c>)
 8010c98:	4602      	mov	r2, r0
 8010c9a:	2184      	movs	r1, #132	@ 0x84
 8010c9c:	e6c5      	b.n	8010a2a <__gethex+0x146>
 8010c9e:	6922      	ldr	r2, [r4, #16]
 8010ca0:	3202      	adds	r2, #2
 8010ca2:	f104 010c 	add.w	r1, r4, #12
 8010ca6:	0092      	lsls	r2, r2, #2
 8010ca8:	300c      	adds	r0, #12
 8010caa:	f7fe fee2 	bl	800fa72 <memcpy>
 8010cae:	4621      	mov	r1, r4
 8010cb0:	9801      	ldr	r0, [sp, #4]
 8010cb2:	f000 f93b 	bl	8010f2c <_Bfree>
 8010cb6:	464c      	mov	r4, r9
 8010cb8:	6923      	ldr	r3, [r4, #16]
 8010cba:	1c5a      	adds	r2, r3, #1
 8010cbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010cc0:	6122      	str	r2, [r4, #16]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	615a      	str	r2, [r3, #20]
 8010cc6:	e7be      	b.n	8010c46 <__gethex+0x362>
 8010cc8:	6922      	ldr	r2, [r4, #16]
 8010cca:	455a      	cmp	r2, fp
 8010ccc:	dd0b      	ble.n	8010ce6 <__gethex+0x402>
 8010cce:	2101      	movs	r1, #1
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	f7ff fd9f 	bl	8010814 <rshift>
 8010cd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cda:	3701      	adds	r7, #1
 8010cdc:	42bb      	cmp	r3, r7
 8010cde:	f6ff aee0 	blt.w	8010aa2 <__gethex+0x1be>
 8010ce2:	2501      	movs	r5, #1
 8010ce4:	e7c2      	b.n	8010c6c <__gethex+0x388>
 8010ce6:	f016 061f 	ands.w	r6, r6, #31
 8010cea:	d0fa      	beq.n	8010ce2 <__gethex+0x3fe>
 8010cec:	4453      	add	r3, sl
 8010cee:	f1c6 0620 	rsb	r6, r6, #32
 8010cf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010cf6:	f000 f9cb 	bl	8011090 <__hi0bits>
 8010cfa:	42b0      	cmp	r0, r6
 8010cfc:	dbe7      	blt.n	8010cce <__gethex+0x3ea>
 8010cfe:	e7f0      	b.n	8010ce2 <__gethex+0x3fe>
 8010d00:	08012599 	.word	0x08012599

08010d04 <L_shift>:
 8010d04:	f1c2 0208 	rsb	r2, r2, #8
 8010d08:	0092      	lsls	r2, r2, #2
 8010d0a:	b570      	push	{r4, r5, r6, lr}
 8010d0c:	f1c2 0620 	rsb	r6, r2, #32
 8010d10:	6843      	ldr	r3, [r0, #4]
 8010d12:	6804      	ldr	r4, [r0, #0]
 8010d14:	fa03 f506 	lsl.w	r5, r3, r6
 8010d18:	432c      	orrs	r4, r5
 8010d1a:	40d3      	lsrs	r3, r2
 8010d1c:	6004      	str	r4, [r0, #0]
 8010d1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010d22:	4288      	cmp	r0, r1
 8010d24:	d3f4      	bcc.n	8010d10 <L_shift+0xc>
 8010d26:	bd70      	pop	{r4, r5, r6, pc}

08010d28 <__match>:
 8010d28:	b530      	push	{r4, r5, lr}
 8010d2a:	6803      	ldr	r3, [r0, #0]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d32:	b914      	cbnz	r4, 8010d3a <__match+0x12>
 8010d34:	6003      	str	r3, [r0, #0]
 8010d36:	2001      	movs	r0, #1
 8010d38:	bd30      	pop	{r4, r5, pc}
 8010d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010d42:	2d19      	cmp	r5, #25
 8010d44:	bf98      	it	ls
 8010d46:	3220      	addls	r2, #32
 8010d48:	42a2      	cmp	r2, r4
 8010d4a:	d0f0      	beq.n	8010d2e <__match+0x6>
 8010d4c:	2000      	movs	r0, #0
 8010d4e:	e7f3      	b.n	8010d38 <__match+0x10>

08010d50 <__hexnan>:
 8010d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d54:	680b      	ldr	r3, [r1, #0]
 8010d56:	6801      	ldr	r1, [r0, #0]
 8010d58:	115e      	asrs	r6, r3, #5
 8010d5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010d5e:	f013 031f 	ands.w	r3, r3, #31
 8010d62:	b087      	sub	sp, #28
 8010d64:	bf18      	it	ne
 8010d66:	3604      	addne	r6, #4
 8010d68:	2500      	movs	r5, #0
 8010d6a:	1f37      	subs	r7, r6, #4
 8010d6c:	4682      	mov	sl, r0
 8010d6e:	4690      	mov	r8, r2
 8010d70:	9301      	str	r3, [sp, #4]
 8010d72:	f846 5c04 	str.w	r5, [r6, #-4]
 8010d76:	46b9      	mov	r9, r7
 8010d78:	463c      	mov	r4, r7
 8010d7a:	9502      	str	r5, [sp, #8]
 8010d7c:	46ab      	mov	fp, r5
 8010d7e:	784a      	ldrb	r2, [r1, #1]
 8010d80:	1c4b      	adds	r3, r1, #1
 8010d82:	9303      	str	r3, [sp, #12]
 8010d84:	b342      	cbz	r2, 8010dd8 <__hexnan+0x88>
 8010d86:	4610      	mov	r0, r2
 8010d88:	9105      	str	r1, [sp, #20]
 8010d8a:	9204      	str	r2, [sp, #16]
 8010d8c:	f7ff fd94 	bl	80108b8 <__hexdig_fun>
 8010d90:	2800      	cmp	r0, #0
 8010d92:	d151      	bne.n	8010e38 <__hexnan+0xe8>
 8010d94:	9a04      	ldr	r2, [sp, #16]
 8010d96:	9905      	ldr	r1, [sp, #20]
 8010d98:	2a20      	cmp	r2, #32
 8010d9a:	d818      	bhi.n	8010dce <__hexnan+0x7e>
 8010d9c:	9b02      	ldr	r3, [sp, #8]
 8010d9e:	459b      	cmp	fp, r3
 8010da0:	dd13      	ble.n	8010dca <__hexnan+0x7a>
 8010da2:	454c      	cmp	r4, r9
 8010da4:	d206      	bcs.n	8010db4 <__hexnan+0x64>
 8010da6:	2d07      	cmp	r5, #7
 8010da8:	dc04      	bgt.n	8010db4 <__hexnan+0x64>
 8010daa:	462a      	mov	r2, r5
 8010dac:	4649      	mov	r1, r9
 8010dae:	4620      	mov	r0, r4
 8010db0:	f7ff ffa8 	bl	8010d04 <L_shift>
 8010db4:	4544      	cmp	r4, r8
 8010db6:	d952      	bls.n	8010e5e <__hexnan+0x10e>
 8010db8:	2300      	movs	r3, #0
 8010dba:	f1a4 0904 	sub.w	r9, r4, #4
 8010dbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8010dc2:	f8cd b008 	str.w	fp, [sp, #8]
 8010dc6:	464c      	mov	r4, r9
 8010dc8:	461d      	mov	r5, r3
 8010dca:	9903      	ldr	r1, [sp, #12]
 8010dcc:	e7d7      	b.n	8010d7e <__hexnan+0x2e>
 8010dce:	2a29      	cmp	r2, #41	@ 0x29
 8010dd0:	d157      	bne.n	8010e82 <__hexnan+0x132>
 8010dd2:	3102      	adds	r1, #2
 8010dd4:	f8ca 1000 	str.w	r1, [sl]
 8010dd8:	f1bb 0f00 	cmp.w	fp, #0
 8010ddc:	d051      	beq.n	8010e82 <__hexnan+0x132>
 8010dde:	454c      	cmp	r4, r9
 8010de0:	d206      	bcs.n	8010df0 <__hexnan+0xa0>
 8010de2:	2d07      	cmp	r5, #7
 8010de4:	dc04      	bgt.n	8010df0 <__hexnan+0xa0>
 8010de6:	462a      	mov	r2, r5
 8010de8:	4649      	mov	r1, r9
 8010dea:	4620      	mov	r0, r4
 8010dec:	f7ff ff8a 	bl	8010d04 <L_shift>
 8010df0:	4544      	cmp	r4, r8
 8010df2:	d936      	bls.n	8010e62 <__hexnan+0x112>
 8010df4:	f1a8 0204 	sub.w	r2, r8, #4
 8010df8:	4623      	mov	r3, r4
 8010dfa:	f853 1b04 	ldr.w	r1, [r3], #4
 8010dfe:	f842 1f04 	str.w	r1, [r2, #4]!
 8010e02:	429f      	cmp	r7, r3
 8010e04:	d2f9      	bcs.n	8010dfa <__hexnan+0xaa>
 8010e06:	1b3b      	subs	r3, r7, r4
 8010e08:	f023 0303 	bic.w	r3, r3, #3
 8010e0c:	3304      	adds	r3, #4
 8010e0e:	3401      	adds	r4, #1
 8010e10:	3e03      	subs	r6, #3
 8010e12:	42b4      	cmp	r4, r6
 8010e14:	bf88      	it	hi
 8010e16:	2304      	movhi	r3, #4
 8010e18:	4443      	add	r3, r8
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f843 2b04 	str.w	r2, [r3], #4
 8010e20:	429f      	cmp	r7, r3
 8010e22:	d2fb      	bcs.n	8010e1c <__hexnan+0xcc>
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	b91b      	cbnz	r3, 8010e30 <__hexnan+0xe0>
 8010e28:	4547      	cmp	r7, r8
 8010e2a:	d128      	bne.n	8010e7e <__hexnan+0x12e>
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	603b      	str	r3, [r7, #0]
 8010e30:	2005      	movs	r0, #5
 8010e32:	b007      	add	sp, #28
 8010e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e38:	3501      	adds	r5, #1
 8010e3a:	2d08      	cmp	r5, #8
 8010e3c:	f10b 0b01 	add.w	fp, fp, #1
 8010e40:	dd06      	ble.n	8010e50 <__hexnan+0x100>
 8010e42:	4544      	cmp	r4, r8
 8010e44:	d9c1      	bls.n	8010dca <__hexnan+0x7a>
 8010e46:	2300      	movs	r3, #0
 8010e48:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e4c:	2501      	movs	r5, #1
 8010e4e:	3c04      	subs	r4, #4
 8010e50:	6822      	ldr	r2, [r4, #0]
 8010e52:	f000 000f 	and.w	r0, r0, #15
 8010e56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010e5a:	6020      	str	r0, [r4, #0]
 8010e5c:	e7b5      	b.n	8010dca <__hexnan+0x7a>
 8010e5e:	2508      	movs	r5, #8
 8010e60:	e7b3      	b.n	8010dca <__hexnan+0x7a>
 8010e62:	9b01      	ldr	r3, [sp, #4]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d0dd      	beq.n	8010e24 <__hexnan+0xd4>
 8010e68:	f1c3 0320 	rsb	r3, r3, #32
 8010e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8010e70:	40da      	lsrs	r2, r3
 8010e72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010e76:	4013      	ands	r3, r2
 8010e78:	f846 3c04 	str.w	r3, [r6, #-4]
 8010e7c:	e7d2      	b.n	8010e24 <__hexnan+0xd4>
 8010e7e:	3f04      	subs	r7, #4
 8010e80:	e7d0      	b.n	8010e24 <__hexnan+0xd4>
 8010e82:	2004      	movs	r0, #4
 8010e84:	e7d5      	b.n	8010e32 <__hexnan+0xe2>

08010e86 <__ascii_mbtowc>:
 8010e86:	b082      	sub	sp, #8
 8010e88:	b901      	cbnz	r1, 8010e8c <__ascii_mbtowc+0x6>
 8010e8a:	a901      	add	r1, sp, #4
 8010e8c:	b142      	cbz	r2, 8010ea0 <__ascii_mbtowc+0x1a>
 8010e8e:	b14b      	cbz	r3, 8010ea4 <__ascii_mbtowc+0x1e>
 8010e90:	7813      	ldrb	r3, [r2, #0]
 8010e92:	600b      	str	r3, [r1, #0]
 8010e94:	7812      	ldrb	r2, [r2, #0]
 8010e96:	1e10      	subs	r0, r2, #0
 8010e98:	bf18      	it	ne
 8010e9a:	2001      	movne	r0, #1
 8010e9c:	b002      	add	sp, #8
 8010e9e:	4770      	bx	lr
 8010ea0:	4610      	mov	r0, r2
 8010ea2:	e7fb      	b.n	8010e9c <__ascii_mbtowc+0x16>
 8010ea4:	f06f 0001 	mvn.w	r0, #1
 8010ea8:	e7f8      	b.n	8010e9c <__ascii_mbtowc+0x16>
	...

08010eac <_Balloc>:
 8010eac:	b570      	push	{r4, r5, r6, lr}
 8010eae:	69c6      	ldr	r6, [r0, #28]
 8010eb0:	4604      	mov	r4, r0
 8010eb2:	460d      	mov	r5, r1
 8010eb4:	b976      	cbnz	r6, 8010ed4 <_Balloc+0x28>
 8010eb6:	2010      	movs	r0, #16
 8010eb8:	f7fc fe0e 	bl	800dad8 <malloc>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	61e0      	str	r0, [r4, #28]
 8010ec0:	b920      	cbnz	r0, 8010ecc <_Balloc+0x20>
 8010ec2:	4b18      	ldr	r3, [pc, #96]	@ (8010f24 <_Balloc+0x78>)
 8010ec4:	4818      	ldr	r0, [pc, #96]	@ (8010f28 <_Balloc+0x7c>)
 8010ec6:	216b      	movs	r1, #107	@ 0x6b
 8010ec8:	f7fe fdf0 	bl	800faac <__assert_func>
 8010ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ed0:	6006      	str	r6, [r0, #0]
 8010ed2:	60c6      	str	r6, [r0, #12]
 8010ed4:	69e6      	ldr	r6, [r4, #28]
 8010ed6:	68f3      	ldr	r3, [r6, #12]
 8010ed8:	b183      	cbz	r3, 8010efc <_Balloc+0x50>
 8010eda:	69e3      	ldr	r3, [r4, #28]
 8010edc:	68db      	ldr	r3, [r3, #12]
 8010ede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010ee2:	b9b8      	cbnz	r0, 8010f14 <_Balloc+0x68>
 8010ee4:	2101      	movs	r1, #1
 8010ee6:	fa01 f605 	lsl.w	r6, r1, r5
 8010eea:	1d72      	adds	r2, r6, #5
 8010eec:	0092      	lsls	r2, r2, #2
 8010eee:	4620      	mov	r0, r4
 8010ef0:	f000 ff2d 	bl	8011d4e <_calloc_r>
 8010ef4:	b160      	cbz	r0, 8010f10 <_Balloc+0x64>
 8010ef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010efa:	e00e      	b.n	8010f1a <_Balloc+0x6e>
 8010efc:	2221      	movs	r2, #33	@ 0x21
 8010efe:	2104      	movs	r1, #4
 8010f00:	4620      	mov	r0, r4
 8010f02:	f000 ff24 	bl	8011d4e <_calloc_r>
 8010f06:	69e3      	ldr	r3, [r4, #28]
 8010f08:	60f0      	str	r0, [r6, #12]
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d1e4      	bne.n	8010eda <_Balloc+0x2e>
 8010f10:	2000      	movs	r0, #0
 8010f12:	bd70      	pop	{r4, r5, r6, pc}
 8010f14:	6802      	ldr	r2, [r0, #0]
 8010f16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010f20:	e7f7      	b.n	8010f12 <_Balloc+0x66>
 8010f22:	bf00      	nop
 8010f24:	0801252a 	.word	0x0801252a
 8010f28:	0801260a 	.word	0x0801260a

08010f2c <_Bfree>:
 8010f2c:	b570      	push	{r4, r5, r6, lr}
 8010f2e:	69c6      	ldr	r6, [r0, #28]
 8010f30:	4605      	mov	r5, r0
 8010f32:	460c      	mov	r4, r1
 8010f34:	b976      	cbnz	r6, 8010f54 <_Bfree+0x28>
 8010f36:	2010      	movs	r0, #16
 8010f38:	f7fc fdce 	bl	800dad8 <malloc>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	61e8      	str	r0, [r5, #28]
 8010f40:	b920      	cbnz	r0, 8010f4c <_Bfree+0x20>
 8010f42:	4b09      	ldr	r3, [pc, #36]	@ (8010f68 <_Bfree+0x3c>)
 8010f44:	4809      	ldr	r0, [pc, #36]	@ (8010f6c <_Bfree+0x40>)
 8010f46:	218f      	movs	r1, #143	@ 0x8f
 8010f48:	f7fe fdb0 	bl	800faac <__assert_func>
 8010f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f50:	6006      	str	r6, [r0, #0]
 8010f52:	60c6      	str	r6, [r0, #12]
 8010f54:	b13c      	cbz	r4, 8010f66 <_Bfree+0x3a>
 8010f56:	69eb      	ldr	r3, [r5, #28]
 8010f58:	6862      	ldr	r2, [r4, #4]
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f60:	6021      	str	r1, [r4, #0]
 8010f62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010f66:	bd70      	pop	{r4, r5, r6, pc}
 8010f68:	0801252a 	.word	0x0801252a
 8010f6c:	0801260a 	.word	0x0801260a

08010f70 <__multadd>:
 8010f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f74:	690d      	ldr	r5, [r1, #16]
 8010f76:	4607      	mov	r7, r0
 8010f78:	460c      	mov	r4, r1
 8010f7a:	461e      	mov	r6, r3
 8010f7c:	f101 0c14 	add.w	ip, r1, #20
 8010f80:	2000      	movs	r0, #0
 8010f82:	f8dc 3000 	ldr.w	r3, [ip]
 8010f86:	b299      	uxth	r1, r3
 8010f88:	fb02 6101 	mla	r1, r2, r1, r6
 8010f8c:	0c1e      	lsrs	r6, r3, #16
 8010f8e:	0c0b      	lsrs	r3, r1, #16
 8010f90:	fb02 3306 	mla	r3, r2, r6, r3
 8010f94:	b289      	uxth	r1, r1
 8010f96:	3001      	adds	r0, #1
 8010f98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010f9c:	4285      	cmp	r5, r0
 8010f9e:	f84c 1b04 	str.w	r1, [ip], #4
 8010fa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010fa6:	dcec      	bgt.n	8010f82 <__multadd+0x12>
 8010fa8:	b30e      	cbz	r6, 8010fee <__multadd+0x7e>
 8010faa:	68a3      	ldr	r3, [r4, #8]
 8010fac:	42ab      	cmp	r3, r5
 8010fae:	dc19      	bgt.n	8010fe4 <__multadd+0x74>
 8010fb0:	6861      	ldr	r1, [r4, #4]
 8010fb2:	4638      	mov	r0, r7
 8010fb4:	3101      	adds	r1, #1
 8010fb6:	f7ff ff79 	bl	8010eac <_Balloc>
 8010fba:	4680      	mov	r8, r0
 8010fbc:	b928      	cbnz	r0, 8010fca <__multadd+0x5a>
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8010ff4 <__multadd+0x84>)
 8010fc2:	480d      	ldr	r0, [pc, #52]	@ (8010ff8 <__multadd+0x88>)
 8010fc4:	21ba      	movs	r1, #186	@ 0xba
 8010fc6:	f7fe fd71 	bl	800faac <__assert_func>
 8010fca:	6922      	ldr	r2, [r4, #16]
 8010fcc:	3202      	adds	r2, #2
 8010fce:	f104 010c 	add.w	r1, r4, #12
 8010fd2:	0092      	lsls	r2, r2, #2
 8010fd4:	300c      	adds	r0, #12
 8010fd6:	f7fe fd4c 	bl	800fa72 <memcpy>
 8010fda:	4621      	mov	r1, r4
 8010fdc:	4638      	mov	r0, r7
 8010fde:	f7ff ffa5 	bl	8010f2c <_Bfree>
 8010fe2:	4644      	mov	r4, r8
 8010fe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010fe8:	3501      	adds	r5, #1
 8010fea:	615e      	str	r6, [r3, #20]
 8010fec:	6125      	str	r5, [r4, #16]
 8010fee:	4620      	mov	r0, r4
 8010ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ff4:	08012599 	.word	0x08012599
 8010ff8:	0801260a 	.word	0x0801260a

08010ffc <__s2b>:
 8010ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011000:	460c      	mov	r4, r1
 8011002:	4615      	mov	r5, r2
 8011004:	461f      	mov	r7, r3
 8011006:	2209      	movs	r2, #9
 8011008:	3308      	adds	r3, #8
 801100a:	4606      	mov	r6, r0
 801100c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011010:	2100      	movs	r1, #0
 8011012:	2201      	movs	r2, #1
 8011014:	429a      	cmp	r2, r3
 8011016:	db09      	blt.n	801102c <__s2b+0x30>
 8011018:	4630      	mov	r0, r6
 801101a:	f7ff ff47 	bl	8010eac <_Balloc>
 801101e:	b940      	cbnz	r0, 8011032 <__s2b+0x36>
 8011020:	4602      	mov	r2, r0
 8011022:	4b19      	ldr	r3, [pc, #100]	@ (8011088 <__s2b+0x8c>)
 8011024:	4819      	ldr	r0, [pc, #100]	@ (801108c <__s2b+0x90>)
 8011026:	21d3      	movs	r1, #211	@ 0xd3
 8011028:	f7fe fd40 	bl	800faac <__assert_func>
 801102c:	0052      	lsls	r2, r2, #1
 801102e:	3101      	adds	r1, #1
 8011030:	e7f0      	b.n	8011014 <__s2b+0x18>
 8011032:	9b08      	ldr	r3, [sp, #32]
 8011034:	6143      	str	r3, [r0, #20]
 8011036:	2d09      	cmp	r5, #9
 8011038:	f04f 0301 	mov.w	r3, #1
 801103c:	6103      	str	r3, [r0, #16]
 801103e:	dd16      	ble.n	801106e <__s2b+0x72>
 8011040:	f104 0909 	add.w	r9, r4, #9
 8011044:	46c8      	mov	r8, r9
 8011046:	442c      	add	r4, r5
 8011048:	f818 3b01 	ldrb.w	r3, [r8], #1
 801104c:	4601      	mov	r1, r0
 801104e:	3b30      	subs	r3, #48	@ 0x30
 8011050:	220a      	movs	r2, #10
 8011052:	4630      	mov	r0, r6
 8011054:	f7ff ff8c 	bl	8010f70 <__multadd>
 8011058:	45a0      	cmp	r8, r4
 801105a:	d1f5      	bne.n	8011048 <__s2b+0x4c>
 801105c:	f1a5 0408 	sub.w	r4, r5, #8
 8011060:	444c      	add	r4, r9
 8011062:	1b2d      	subs	r5, r5, r4
 8011064:	1963      	adds	r3, r4, r5
 8011066:	42bb      	cmp	r3, r7
 8011068:	db04      	blt.n	8011074 <__s2b+0x78>
 801106a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801106e:	340a      	adds	r4, #10
 8011070:	2509      	movs	r5, #9
 8011072:	e7f6      	b.n	8011062 <__s2b+0x66>
 8011074:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011078:	4601      	mov	r1, r0
 801107a:	3b30      	subs	r3, #48	@ 0x30
 801107c:	220a      	movs	r2, #10
 801107e:	4630      	mov	r0, r6
 8011080:	f7ff ff76 	bl	8010f70 <__multadd>
 8011084:	e7ee      	b.n	8011064 <__s2b+0x68>
 8011086:	bf00      	nop
 8011088:	08012599 	.word	0x08012599
 801108c:	0801260a 	.word	0x0801260a

08011090 <__hi0bits>:
 8011090:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011094:	4603      	mov	r3, r0
 8011096:	bf36      	itet	cc
 8011098:	0403      	lslcc	r3, r0, #16
 801109a:	2000      	movcs	r0, #0
 801109c:	2010      	movcc	r0, #16
 801109e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80110a2:	bf3c      	itt	cc
 80110a4:	021b      	lslcc	r3, r3, #8
 80110a6:	3008      	addcc	r0, #8
 80110a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80110ac:	bf3c      	itt	cc
 80110ae:	011b      	lslcc	r3, r3, #4
 80110b0:	3004      	addcc	r0, #4
 80110b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80110b6:	bf3c      	itt	cc
 80110b8:	009b      	lslcc	r3, r3, #2
 80110ba:	3002      	addcc	r0, #2
 80110bc:	2b00      	cmp	r3, #0
 80110be:	db05      	blt.n	80110cc <__hi0bits+0x3c>
 80110c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80110c4:	f100 0001 	add.w	r0, r0, #1
 80110c8:	bf08      	it	eq
 80110ca:	2020      	moveq	r0, #32
 80110cc:	4770      	bx	lr

080110ce <__lo0bits>:
 80110ce:	6803      	ldr	r3, [r0, #0]
 80110d0:	4602      	mov	r2, r0
 80110d2:	f013 0007 	ands.w	r0, r3, #7
 80110d6:	d00b      	beq.n	80110f0 <__lo0bits+0x22>
 80110d8:	07d9      	lsls	r1, r3, #31
 80110da:	d421      	bmi.n	8011120 <__lo0bits+0x52>
 80110dc:	0798      	lsls	r0, r3, #30
 80110de:	bf49      	itett	mi
 80110e0:	085b      	lsrmi	r3, r3, #1
 80110e2:	089b      	lsrpl	r3, r3, #2
 80110e4:	2001      	movmi	r0, #1
 80110e6:	6013      	strmi	r3, [r2, #0]
 80110e8:	bf5c      	itt	pl
 80110ea:	6013      	strpl	r3, [r2, #0]
 80110ec:	2002      	movpl	r0, #2
 80110ee:	4770      	bx	lr
 80110f0:	b299      	uxth	r1, r3
 80110f2:	b909      	cbnz	r1, 80110f8 <__lo0bits+0x2a>
 80110f4:	0c1b      	lsrs	r3, r3, #16
 80110f6:	2010      	movs	r0, #16
 80110f8:	b2d9      	uxtb	r1, r3
 80110fa:	b909      	cbnz	r1, 8011100 <__lo0bits+0x32>
 80110fc:	3008      	adds	r0, #8
 80110fe:	0a1b      	lsrs	r3, r3, #8
 8011100:	0719      	lsls	r1, r3, #28
 8011102:	bf04      	itt	eq
 8011104:	091b      	lsreq	r3, r3, #4
 8011106:	3004      	addeq	r0, #4
 8011108:	0799      	lsls	r1, r3, #30
 801110a:	bf04      	itt	eq
 801110c:	089b      	lsreq	r3, r3, #2
 801110e:	3002      	addeq	r0, #2
 8011110:	07d9      	lsls	r1, r3, #31
 8011112:	d403      	bmi.n	801111c <__lo0bits+0x4e>
 8011114:	085b      	lsrs	r3, r3, #1
 8011116:	f100 0001 	add.w	r0, r0, #1
 801111a:	d003      	beq.n	8011124 <__lo0bits+0x56>
 801111c:	6013      	str	r3, [r2, #0]
 801111e:	4770      	bx	lr
 8011120:	2000      	movs	r0, #0
 8011122:	4770      	bx	lr
 8011124:	2020      	movs	r0, #32
 8011126:	4770      	bx	lr

08011128 <__i2b>:
 8011128:	b510      	push	{r4, lr}
 801112a:	460c      	mov	r4, r1
 801112c:	2101      	movs	r1, #1
 801112e:	f7ff febd 	bl	8010eac <_Balloc>
 8011132:	4602      	mov	r2, r0
 8011134:	b928      	cbnz	r0, 8011142 <__i2b+0x1a>
 8011136:	4b05      	ldr	r3, [pc, #20]	@ (801114c <__i2b+0x24>)
 8011138:	4805      	ldr	r0, [pc, #20]	@ (8011150 <__i2b+0x28>)
 801113a:	f240 1145 	movw	r1, #325	@ 0x145
 801113e:	f7fe fcb5 	bl	800faac <__assert_func>
 8011142:	2301      	movs	r3, #1
 8011144:	6144      	str	r4, [r0, #20]
 8011146:	6103      	str	r3, [r0, #16]
 8011148:	bd10      	pop	{r4, pc}
 801114a:	bf00      	nop
 801114c:	08012599 	.word	0x08012599
 8011150:	0801260a 	.word	0x0801260a

08011154 <__multiply>:
 8011154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011158:	4614      	mov	r4, r2
 801115a:	690a      	ldr	r2, [r1, #16]
 801115c:	6923      	ldr	r3, [r4, #16]
 801115e:	429a      	cmp	r2, r3
 8011160:	bfa8      	it	ge
 8011162:	4623      	movge	r3, r4
 8011164:	460f      	mov	r7, r1
 8011166:	bfa4      	itt	ge
 8011168:	460c      	movge	r4, r1
 801116a:	461f      	movge	r7, r3
 801116c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011170:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011174:	68a3      	ldr	r3, [r4, #8]
 8011176:	6861      	ldr	r1, [r4, #4]
 8011178:	eb0a 0609 	add.w	r6, sl, r9
 801117c:	42b3      	cmp	r3, r6
 801117e:	b085      	sub	sp, #20
 8011180:	bfb8      	it	lt
 8011182:	3101      	addlt	r1, #1
 8011184:	f7ff fe92 	bl	8010eac <_Balloc>
 8011188:	b930      	cbnz	r0, 8011198 <__multiply+0x44>
 801118a:	4602      	mov	r2, r0
 801118c:	4b44      	ldr	r3, [pc, #272]	@ (80112a0 <__multiply+0x14c>)
 801118e:	4845      	ldr	r0, [pc, #276]	@ (80112a4 <__multiply+0x150>)
 8011190:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011194:	f7fe fc8a 	bl	800faac <__assert_func>
 8011198:	f100 0514 	add.w	r5, r0, #20
 801119c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80111a0:	462b      	mov	r3, r5
 80111a2:	2200      	movs	r2, #0
 80111a4:	4543      	cmp	r3, r8
 80111a6:	d321      	bcc.n	80111ec <__multiply+0x98>
 80111a8:	f107 0114 	add.w	r1, r7, #20
 80111ac:	f104 0214 	add.w	r2, r4, #20
 80111b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80111b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80111b8:	9302      	str	r3, [sp, #8]
 80111ba:	1b13      	subs	r3, r2, r4
 80111bc:	3b15      	subs	r3, #21
 80111be:	f023 0303 	bic.w	r3, r3, #3
 80111c2:	3304      	adds	r3, #4
 80111c4:	f104 0715 	add.w	r7, r4, #21
 80111c8:	42ba      	cmp	r2, r7
 80111ca:	bf38      	it	cc
 80111cc:	2304      	movcc	r3, #4
 80111ce:	9301      	str	r3, [sp, #4]
 80111d0:	9b02      	ldr	r3, [sp, #8]
 80111d2:	9103      	str	r1, [sp, #12]
 80111d4:	428b      	cmp	r3, r1
 80111d6:	d80c      	bhi.n	80111f2 <__multiply+0x9e>
 80111d8:	2e00      	cmp	r6, #0
 80111da:	dd03      	ble.n	80111e4 <__multiply+0x90>
 80111dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d05b      	beq.n	801129c <__multiply+0x148>
 80111e4:	6106      	str	r6, [r0, #16]
 80111e6:	b005      	add	sp, #20
 80111e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ec:	f843 2b04 	str.w	r2, [r3], #4
 80111f0:	e7d8      	b.n	80111a4 <__multiply+0x50>
 80111f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80111f6:	f1ba 0f00 	cmp.w	sl, #0
 80111fa:	d024      	beq.n	8011246 <__multiply+0xf2>
 80111fc:	f104 0e14 	add.w	lr, r4, #20
 8011200:	46a9      	mov	r9, r5
 8011202:	f04f 0c00 	mov.w	ip, #0
 8011206:	f85e 7b04 	ldr.w	r7, [lr], #4
 801120a:	f8d9 3000 	ldr.w	r3, [r9]
 801120e:	fa1f fb87 	uxth.w	fp, r7
 8011212:	b29b      	uxth	r3, r3
 8011214:	fb0a 330b 	mla	r3, sl, fp, r3
 8011218:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801121c:	f8d9 7000 	ldr.w	r7, [r9]
 8011220:	4463      	add	r3, ip
 8011222:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011226:	fb0a c70b 	mla	r7, sl, fp, ip
 801122a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801122e:	b29b      	uxth	r3, r3
 8011230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011234:	4572      	cmp	r2, lr
 8011236:	f849 3b04 	str.w	r3, [r9], #4
 801123a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801123e:	d8e2      	bhi.n	8011206 <__multiply+0xb2>
 8011240:	9b01      	ldr	r3, [sp, #4]
 8011242:	f845 c003 	str.w	ip, [r5, r3]
 8011246:	9b03      	ldr	r3, [sp, #12]
 8011248:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801124c:	3104      	adds	r1, #4
 801124e:	f1b9 0f00 	cmp.w	r9, #0
 8011252:	d021      	beq.n	8011298 <__multiply+0x144>
 8011254:	682b      	ldr	r3, [r5, #0]
 8011256:	f104 0c14 	add.w	ip, r4, #20
 801125a:	46ae      	mov	lr, r5
 801125c:	f04f 0a00 	mov.w	sl, #0
 8011260:	f8bc b000 	ldrh.w	fp, [ip]
 8011264:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011268:	fb09 770b 	mla	r7, r9, fp, r7
 801126c:	4457      	add	r7, sl
 801126e:	b29b      	uxth	r3, r3
 8011270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011274:	f84e 3b04 	str.w	r3, [lr], #4
 8011278:	f85c 3b04 	ldr.w	r3, [ip], #4
 801127c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011280:	f8be 3000 	ldrh.w	r3, [lr]
 8011284:	fb09 330a 	mla	r3, r9, sl, r3
 8011288:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801128c:	4562      	cmp	r2, ip
 801128e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011292:	d8e5      	bhi.n	8011260 <__multiply+0x10c>
 8011294:	9f01      	ldr	r7, [sp, #4]
 8011296:	51eb      	str	r3, [r5, r7]
 8011298:	3504      	adds	r5, #4
 801129a:	e799      	b.n	80111d0 <__multiply+0x7c>
 801129c:	3e01      	subs	r6, #1
 801129e:	e79b      	b.n	80111d8 <__multiply+0x84>
 80112a0:	08012599 	.word	0x08012599
 80112a4:	0801260a 	.word	0x0801260a

080112a8 <__pow5mult>:
 80112a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112ac:	4615      	mov	r5, r2
 80112ae:	f012 0203 	ands.w	r2, r2, #3
 80112b2:	4607      	mov	r7, r0
 80112b4:	460e      	mov	r6, r1
 80112b6:	d007      	beq.n	80112c8 <__pow5mult+0x20>
 80112b8:	4c25      	ldr	r4, [pc, #148]	@ (8011350 <__pow5mult+0xa8>)
 80112ba:	3a01      	subs	r2, #1
 80112bc:	2300      	movs	r3, #0
 80112be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80112c2:	f7ff fe55 	bl	8010f70 <__multadd>
 80112c6:	4606      	mov	r6, r0
 80112c8:	10ad      	asrs	r5, r5, #2
 80112ca:	d03d      	beq.n	8011348 <__pow5mult+0xa0>
 80112cc:	69fc      	ldr	r4, [r7, #28]
 80112ce:	b97c      	cbnz	r4, 80112f0 <__pow5mult+0x48>
 80112d0:	2010      	movs	r0, #16
 80112d2:	f7fc fc01 	bl	800dad8 <malloc>
 80112d6:	4602      	mov	r2, r0
 80112d8:	61f8      	str	r0, [r7, #28]
 80112da:	b928      	cbnz	r0, 80112e8 <__pow5mult+0x40>
 80112dc:	4b1d      	ldr	r3, [pc, #116]	@ (8011354 <__pow5mult+0xac>)
 80112de:	481e      	ldr	r0, [pc, #120]	@ (8011358 <__pow5mult+0xb0>)
 80112e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80112e4:	f7fe fbe2 	bl	800faac <__assert_func>
 80112e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80112ec:	6004      	str	r4, [r0, #0]
 80112ee:	60c4      	str	r4, [r0, #12]
 80112f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80112f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80112f8:	b94c      	cbnz	r4, 801130e <__pow5mult+0x66>
 80112fa:	f240 2171 	movw	r1, #625	@ 0x271
 80112fe:	4638      	mov	r0, r7
 8011300:	f7ff ff12 	bl	8011128 <__i2b>
 8011304:	2300      	movs	r3, #0
 8011306:	f8c8 0008 	str.w	r0, [r8, #8]
 801130a:	4604      	mov	r4, r0
 801130c:	6003      	str	r3, [r0, #0]
 801130e:	f04f 0900 	mov.w	r9, #0
 8011312:	07eb      	lsls	r3, r5, #31
 8011314:	d50a      	bpl.n	801132c <__pow5mult+0x84>
 8011316:	4631      	mov	r1, r6
 8011318:	4622      	mov	r2, r4
 801131a:	4638      	mov	r0, r7
 801131c:	f7ff ff1a 	bl	8011154 <__multiply>
 8011320:	4631      	mov	r1, r6
 8011322:	4680      	mov	r8, r0
 8011324:	4638      	mov	r0, r7
 8011326:	f7ff fe01 	bl	8010f2c <_Bfree>
 801132a:	4646      	mov	r6, r8
 801132c:	106d      	asrs	r5, r5, #1
 801132e:	d00b      	beq.n	8011348 <__pow5mult+0xa0>
 8011330:	6820      	ldr	r0, [r4, #0]
 8011332:	b938      	cbnz	r0, 8011344 <__pow5mult+0x9c>
 8011334:	4622      	mov	r2, r4
 8011336:	4621      	mov	r1, r4
 8011338:	4638      	mov	r0, r7
 801133a:	f7ff ff0b 	bl	8011154 <__multiply>
 801133e:	6020      	str	r0, [r4, #0]
 8011340:	f8c0 9000 	str.w	r9, [r0]
 8011344:	4604      	mov	r4, r0
 8011346:	e7e4      	b.n	8011312 <__pow5mult+0x6a>
 8011348:	4630      	mov	r0, r6
 801134a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801134e:	bf00      	nop
 8011350:	08012664 	.word	0x08012664
 8011354:	0801252a 	.word	0x0801252a
 8011358:	0801260a 	.word	0x0801260a

0801135c <__lshift>:
 801135c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011360:	460c      	mov	r4, r1
 8011362:	6849      	ldr	r1, [r1, #4]
 8011364:	6923      	ldr	r3, [r4, #16]
 8011366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801136a:	68a3      	ldr	r3, [r4, #8]
 801136c:	4607      	mov	r7, r0
 801136e:	4691      	mov	r9, r2
 8011370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011374:	f108 0601 	add.w	r6, r8, #1
 8011378:	42b3      	cmp	r3, r6
 801137a:	db0b      	blt.n	8011394 <__lshift+0x38>
 801137c:	4638      	mov	r0, r7
 801137e:	f7ff fd95 	bl	8010eac <_Balloc>
 8011382:	4605      	mov	r5, r0
 8011384:	b948      	cbnz	r0, 801139a <__lshift+0x3e>
 8011386:	4602      	mov	r2, r0
 8011388:	4b28      	ldr	r3, [pc, #160]	@ (801142c <__lshift+0xd0>)
 801138a:	4829      	ldr	r0, [pc, #164]	@ (8011430 <__lshift+0xd4>)
 801138c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011390:	f7fe fb8c 	bl	800faac <__assert_func>
 8011394:	3101      	adds	r1, #1
 8011396:	005b      	lsls	r3, r3, #1
 8011398:	e7ee      	b.n	8011378 <__lshift+0x1c>
 801139a:	2300      	movs	r3, #0
 801139c:	f100 0114 	add.w	r1, r0, #20
 80113a0:	f100 0210 	add.w	r2, r0, #16
 80113a4:	4618      	mov	r0, r3
 80113a6:	4553      	cmp	r3, sl
 80113a8:	db33      	blt.n	8011412 <__lshift+0xb6>
 80113aa:	6920      	ldr	r0, [r4, #16]
 80113ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80113b0:	f104 0314 	add.w	r3, r4, #20
 80113b4:	f019 091f 	ands.w	r9, r9, #31
 80113b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80113bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80113c0:	d02b      	beq.n	801141a <__lshift+0xbe>
 80113c2:	f1c9 0e20 	rsb	lr, r9, #32
 80113c6:	468a      	mov	sl, r1
 80113c8:	2200      	movs	r2, #0
 80113ca:	6818      	ldr	r0, [r3, #0]
 80113cc:	fa00 f009 	lsl.w	r0, r0, r9
 80113d0:	4310      	orrs	r0, r2
 80113d2:	f84a 0b04 	str.w	r0, [sl], #4
 80113d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80113da:	459c      	cmp	ip, r3
 80113dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80113e0:	d8f3      	bhi.n	80113ca <__lshift+0x6e>
 80113e2:	ebac 0304 	sub.w	r3, ip, r4
 80113e6:	3b15      	subs	r3, #21
 80113e8:	f023 0303 	bic.w	r3, r3, #3
 80113ec:	3304      	adds	r3, #4
 80113ee:	f104 0015 	add.w	r0, r4, #21
 80113f2:	4584      	cmp	ip, r0
 80113f4:	bf38      	it	cc
 80113f6:	2304      	movcc	r3, #4
 80113f8:	50ca      	str	r2, [r1, r3]
 80113fa:	b10a      	cbz	r2, 8011400 <__lshift+0xa4>
 80113fc:	f108 0602 	add.w	r6, r8, #2
 8011400:	3e01      	subs	r6, #1
 8011402:	4638      	mov	r0, r7
 8011404:	612e      	str	r6, [r5, #16]
 8011406:	4621      	mov	r1, r4
 8011408:	f7ff fd90 	bl	8010f2c <_Bfree>
 801140c:	4628      	mov	r0, r5
 801140e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011412:	f842 0f04 	str.w	r0, [r2, #4]!
 8011416:	3301      	adds	r3, #1
 8011418:	e7c5      	b.n	80113a6 <__lshift+0x4a>
 801141a:	3904      	subs	r1, #4
 801141c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011420:	f841 2f04 	str.w	r2, [r1, #4]!
 8011424:	459c      	cmp	ip, r3
 8011426:	d8f9      	bhi.n	801141c <__lshift+0xc0>
 8011428:	e7ea      	b.n	8011400 <__lshift+0xa4>
 801142a:	bf00      	nop
 801142c:	08012599 	.word	0x08012599
 8011430:	0801260a 	.word	0x0801260a

08011434 <__mcmp>:
 8011434:	690a      	ldr	r2, [r1, #16]
 8011436:	4603      	mov	r3, r0
 8011438:	6900      	ldr	r0, [r0, #16]
 801143a:	1a80      	subs	r0, r0, r2
 801143c:	b530      	push	{r4, r5, lr}
 801143e:	d10e      	bne.n	801145e <__mcmp+0x2a>
 8011440:	3314      	adds	r3, #20
 8011442:	3114      	adds	r1, #20
 8011444:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011448:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801144c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011454:	4295      	cmp	r5, r2
 8011456:	d003      	beq.n	8011460 <__mcmp+0x2c>
 8011458:	d205      	bcs.n	8011466 <__mcmp+0x32>
 801145a:	f04f 30ff 	mov.w	r0, #4294967295
 801145e:	bd30      	pop	{r4, r5, pc}
 8011460:	42a3      	cmp	r3, r4
 8011462:	d3f3      	bcc.n	801144c <__mcmp+0x18>
 8011464:	e7fb      	b.n	801145e <__mcmp+0x2a>
 8011466:	2001      	movs	r0, #1
 8011468:	e7f9      	b.n	801145e <__mcmp+0x2a>
	...

0801146c <__mdiff>:
 801146c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011470:	4689      	mov	r9, r1
 8011472:	4606      	mov	r6, r0
 8011474:	4611      	mov	r1, r2
 8011476:	4648      	mov	r0, r9
 8011478:	4614      	mov	r4, r2
 801147a:	f7ff ffdb 	bl	8011434 <__mcmp>
 801147e:	1e05      	subs	r5, r0, #0
 8011480:	d112      	bne.n	80114a8 <__mdiff+0x3c>
 8011482:	4629      	mov	r1, r5
 8011484:	4630      	mov	r0, r6
 8011486:	f7ff fd11 	bl	8010eac <_Balloc>
 801148a:	4602      	mov	r2, r0
 801148c:	b928      	cbnz	r0, 801149a <__mdiff+0x2e>
 801148e:	4b3f      	ldr	r3, [pc, #252]	@ (801158c <__mdiff+0x120>)
 8011490:	f240 2137 	movw	r1, #567	@ 0x237
 8011494:	483e      	ldr	r0, [pc, #248]	@ (8011590 <__mdiff+0x124>)
 8011496:	f7fe fb09 	bl	800faac <__assert_func>
 801149a:	2301      	movs	r3, #1
 801149c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80114a0:	4610      	mov	r0, r2
 80114a2:	b003      	add	sp, #12
 80114a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a8:	bfbc      	itt	lt
 80114aa:	464b      	movlt	r3, r9
 80114ac:	46a1      	movlt	r9, r4
 80114ae:	4630      	mov	r0, r6
 80114b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80114b4:	bfba      	itte	lt
 80114b6:	461c      	movlt	r4, r3
 80114b8:	2501      	movlt	r5, #1
 80114ba:	2500      	movge	r5, #0
 80114bc:	f7ff fcf6 	bl	8010eac <_Balloc>
 80114c0:	4602      	mov	r2, r0
 80114c2:	b918      	cbnz	r0, 80114cc <__mdiff+0x60>
 80114c4:	4b31      	ldr	r3, [pc, #196]	@ (801158c <__mdiff+0x120>)
 80114c6:	f240 2145 	movw	r1, #581	@ 0x245
 80114ca:	e7e3      	b.n	8011494 <__mdiff+0x28>
 80114cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80114d0:	6926      	ldr	r6, [r4, #16]
 80114d2:	60c5      	str	r5, [r0, #12]
 80114d4:	f109 0310 	add.w	r3, r9, #16
 80114d8:	f109 0514 	add.w	r5, r9, #20
 80114dc:	f104 0e14 	add.w	lr, r4, #20
 80114e0:	f100 0b14 	add.w	fp, r0, #20
 80114e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80114e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80114ec:	9301      	str	r3, [sp, #4]
 80114ee:	46d9      	mov	r9, fp
 80114f0:	f04f 0c00 	mov.w	ip, #0
 80114f4:	9b01      	ldr	r3, [sp, #4]
 80114f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80114fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80114fe:	9301      	str	r3, [sp, #4]
 8011500:	fa1f f38a 	uxth.w	r3, sl
 8011504:	4619      	mov	r1, r3
 8011506:	b283      	uxth	r3, r0
 8011508:	1acb      	subs	r3, r1, r3
 801150a:	0c00      	lsrs	r0, r0, #16
 801150c:	4463      	add	r3, ip
 801150e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011512:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011516:	b29b      	uxth	r3, r3
 8011518:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801151c:	4576      	cmp	r6, lr
 801151e:	f849 3b04 	str.w	r3, [r9], #4
 8011522:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011526:	d8e5      	bhi.n	80114f4 <__mdiff+0x88>
 8011528:	1b33      	subs	r3, r6, r4
 801152a:	3b15      	subs	r3, #21
 801152c:	f023 0303 	bic.w	r3, r3, #3
 8011530:	3415      	adds	r4, #21
 8011532:	3304      	adds	r3, #4
 8011534:	42a6      	cmp	r6, r4
 8011536:	bf38      	it	cc
 8011538:	2304      	movcc	r3, #4
 801153a:	441d      	add	r5, r3
 801153c:	445b      	add	r3, fp
 801153e:	461e      	mov	r6, r3
 8011540:	462c      	mov	r4, r5
 8011542:	4544      	cmp	r4, r8
 8011544:	d30e      	bcc.n	8011564 <__mdiff+0xf8>
 8011546:	f108 0103 	add.w	r1, r8, #3
 801154a:	1b49      	subs	r1, r1, r5
 801154c:	f021 0103 	bic.w	r1, r1, #3
 8011550:	3d03      	subs	r5, #3
 8011552:	45a8      	cmp	r8, r5
 8011554:	bf38      	it	cc
 8011556:	2100      	movcc	r1, #0
 8011558:	440b      	add	r3, r1
 801155a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801155e:	b191      	cbz	r1, 8011586 <__mdiff+0x11a>
 8011560:	6117      	str	r7, [r2, #16]
 8011562:	e79d      	b.n	80114a0 <__mdiff+0x34>
 8011564:	f854 1b04 	ldr.w	r1, [r4], #4
 8011568:	46e6      	mov	lr, ip
 801156a:	0c08      	lsrs	r0, r1, #16
 801156c:	fa1c fc81 	uxtah	ip, ip, r1
 8011570:	4471      	add	r1, lr
 8011572:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011576:	b289      	uxth	r1, r1
 8011578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801157c:	f846 1b04 	str.w	r1, [r6], #4
 8011580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011584:	e7dd      	b.n	8011542 <__mdiff+0xd6>
 8011586:	3f01      	subs	r7, #1
 8011588:	e7e7      	b.n	801155a <__mdiff+0xee>
 801158a:	bf00      	nop
 801158c:	08012599 	.word	0x08012599
 8011590:	0801260a 	.word	0x0801260a

08011594 <__ulp>:
 8011594:	b082      	sub	sp, #8
 8011596:	ed8d 0b00 	vstr	d0, [sp]
 801159a:	9a01      	ldr	r2, [sp, #4]
 801159c:	4b0f      	ldr	r3, [pc, #60]	@ (80115dc <__ulp+0x48>)
 801159e:	4013      	ands	r3, r2
 80115a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	dc08      	bgt.n	80115ba <__ulp+0x26>
 80115a8:	425b      	negs	r3, r3
 80115aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80115ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 80115b2:	da04      	bge.n	80115be <__ulp+0x2a>
 80115b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80115b8:	4113      	asrs	r3, r2
 80115ba:	2200      	movs	r2, #0
 80115bc:	e008      	b.n	80115d0 <__ulp+0x3c>
 80115be:	f1a2 0314 	sub.w	r3, r2, #20
 80115c2:	2b1e      	cmp	r3, #30
 80115c4:	bfda      	itte	le
 80115c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80115ca:	40da      	lsrle	r2, r3
 80115cc:	2201      	movgt	r2, #1
 80115ce:	2300      	movs	r3, #0
 80115d0:	4619      	mov	r1, r3
 80115d2:	4610      	mov	r0, r2
 80115d4:	ec41 0b10 	vmov	d0, r0, r1
 80115d8:	b002      	add	sp, #8
 80115da:	4770      	bx	lr
 80115dc:	7ff00000 	.word	0x7ff00000

080115e0 <__b2d>:
 80115e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e4:	6906      	ldr	r6, [r0, #16]
 80115e6:	f100 0814 	add.w	r8, r0, #20
 80115ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80115ee:	1f37      	subs	r7, r6, #4
 80115f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80115f4:	4610      	mov	r0, r2
 80115f6:	f7ff fd4b 	bl	8011090 <__hi0bits>
 80115fa:	f1c0 0320 	rsb	r3, r0, #32
 80115fe:	280a      	cmp	r0, #10
 8011600:	600b      	str	r3, [r1, #0]
 8011602:	491b      	ldr	r1, [pc, #108]	@ (8011670 <__b2d+0x90>)
 8011604:	dc15      	bgt.n	8011632 <__b2d+0x52>
 8011606:	f1c0 0c0b 	rsb	ip, r0, #11
 801160a:	fa22 f30c 	lsr.w	r3, r2, ip
 801160e:	45b8      	cmp	r8, r7
 8011610:	ea43 0501 	orr.w	r5, r3, r1
 8011614:	bf34      	ite	cc
 8011616:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801161a:	2300      	movcs	r3, #0
 801161c:	3015      	adds	r0, #21
 801161e:	fa02 f000 	lsl.w	r0, r2, r0
 8011622:	fa23 f30c 	lsr.w	r3, r3, ip
 8011626:	4303      	orrs	r3, r0
 8011628:	461c      	mov	r4, r3
 801162a:	ec45 4b10 	vmov	d0, r4, r5
 801162e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011632:	45b8      	cmp	r8, r7
 8011634:	bf3a      	itte	cc
 8011636:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801163a:	f1a6 0708 	subcc.w	r7, r6, #8
 801163e:	2300      	movcs	r3, #0
 8011640:	380b      	subs	r0, #11
 8011642:	d012      	beq.n	801166a <__b2d+0x8a>
 8011644:	f1c0 0120 	rsb	r1, r0, #32
 8011648:	fa23 f401 	lsr.w	r4, r3, r1
 801164c:	4082      	lsls	r2, r0
 801164e:	4322      	orrs	r2, r4
 8011650:	4547      	cmp	r7, r8
 8011652:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011656:	bf8c      	ite	hi
 8011658:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801165c:	2200      	movls	r2, #0
 801165e:	4083      	lsls	r3, r0
 8011660:	40ca      	lsrs	r2, r1
 8011662:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011666:	4313      	orrs	r3, r2
 8011668:	e7de      	b.n	8011628 <__b2d+0x48>
 801166a:	ea42 0501 	orr.w	r5, r2, r1
 801166e:	e7db      	b.n	8011628 <__b2d+0x48>
 8011670:	3ff00000 	.word	0x3ff00000

08011674 <__d2b>:
 8011674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011678:	460f      	mov	r7, r1
 801167a:	2101      	movs	r1, #1
 801167c:	ec59 8b10 	vmov	r8, r9, d0
 8011680:	4616      	mov	r6, r2
 8011682:	f7ff fc13 	bl	8010eac <_Balloc>
 8011686:	4604      	mov	r4, r0
 8011688:	b930      	cbnz	r0, 8011698 <__d2b+0x24>
 801168a:	4602      	mov	r2, r0
 801168c:	4b23      	ldr	r3, [pc, #140]	@ (801171c <__d2b+0xa8>)
 801168e:	4824      	ldr	r0, [pc, #144]	@ (8011720 <__d2b+0xac>)
 8011690:	f240 310f 	movw	r1, #783	@ 0x30f
 8011694:	f7fe fa0a 	bl	800faac <__assert_func>
 8011698:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801169c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80116a0:	b10d      	cbz	r5, 80116a6 <__d2b+0x32>
 80116a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80116a6:	9301      	str	r3, [sp, #4]
 80116a8:	f1b8 0300 	subs.w	r3, r8, #0
 80116ac:	d023      	beq.n	80116f6 <__d2b+0x82>
 80116ae:	4668      	mov	r0, sp
 80116b0:	9300      	str	r3, [sp, #0]
 80116b2:	f7ff fd0c 	bl	80110ce <__lo0bits>
 80116b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80116ba:	b1d0      	cbz	r0, 80116f2 <__d2b+0x7e>
 80116bc:	f1c0 0320 	rsb	r3, r0, #32
 80116c0:	fa02 f303 	lsl.w	r3, r2, r3
 80116c4:	430b      	orrs	r3, r1
 80116c6:	40c2      	lsrs	r2, r0
 80116c8:	6163      	str	r3, [r4, #20]
 80116ca:	9201      	str	r2, [sp, #4]
 80116cc:	9b01      	ldr	r3, [sp, #4]
 80116ce:	61a3      	str	r3, [r4, #24]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	bf0c      	ite	eq
 80116d4:	2201      	moveq	r2, #1
 80116d6:	2202      	movne	r2, #2
 80116d8:	6122      	str	r2, [r4, #16]
 80116da:	b1a5      	cbz	r5, 8011706 <__d2b+0x92>
 80116dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80116e0:	4405      	add	r5, r0
 80116e2:	603d      	str	r5, [r7, #0]
 80116e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80116e8:	6030      	str	r0, [r6, #0]
 80116ea:	4620      	mov	r0, r4
 80116ec:	b003      	add	sp, #12
 80116ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116f2:	6161      	str	r1, [r4, #20]
 80116f4:	e7ea      	b.n	80116cc <__d2b+0x58>
 80116f6:	a801      	add	r0, sp, #4
 80116f8:	f7ff fce9 	bl	80110ce <__lo0bits>
 80116fc:	9b01      	ldr	r3, [sp, #4]
 80116fe:	6163      	str	r3, [r4, #20]
 8011700:	3020      	adds	r0, #32
 8011702:	2201      	movs	r2, #1
 8011704:	e7e8      	b.n	80116d8 <__d2b+0x64>
 8011706:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801170a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801170e:	6038      	str	r0, [r7, #0]
 8011710:	6918      	ldr	r0, [r3, #16]
 8011712:	f7ff fcbd 	bl	8011090 <__hi0bits>
 8011716:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801171a:	e7e5      	b.n	80116e8 <__d2b+0x74>
 801171c:	08012599 	.word	0x08012599
 8011720:	0801260a 	.word	0x0801260a

08011724 <__ratio>:
 8011724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011728:	b085      	sub	sp, #20
 801172a:	e9cd 1000 	strd	r1, r0, [sp]
 801172e:	a902      	add	r1, sp, #8
 8011730:	f7ff ff56 	bl	80115e0 <__b2d>
 8011734:	9800      	ldr	r0, [sp, #0]
 8011736:	a903      	add	r1, sp, #12
 8011738:	ec55 4b10 	vmov	r4, r5, d0
 801173c:	f7ff ff50 	bl	80115e0 <__b2d>
 8011740:	9b01      	ldr	r3, [sp, #4]
 8011742:	6919      	ldr	r1, [r3, #16]
 8011744:	9b00      	ldr	r3, [sp, #0]
 8011746:	691b      	ldr	r3, [r3, #16]
 8011748:	1ac9      	subs	r1, r1, r3
 801174a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801174e:	1a9b      	subs	r3, r3, r2
 8011750:	ec5b ab10 	vmov	sl, fp, d0
 8011754:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011758:	2b00      	cmp	r3, #0
 801175a:	bfce      	itee	gt
 801175c:	462a      	movgt	r2, r5
 801175e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011762:	465a      	movle	r2, fp
 8011764:	462f      	mov	r7, r5
 8011766:	46d9      	mov	r9, fp
 8011768:	bfcc      	ite	gt
 801176a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801176e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011772:	464b      	mov	r3, r9
 8011774:	4652      	mov	r2, sl
 8011776:	4620      	mov	r0, r4
 8011778:	4639      	mov	r1, r7
 801177a:	f7ef f887 	bl	800088c <__aeabi_ddiv>
 801177e:	ec41 0b10 	vmov	d0, r0, r1
 8011782:	b005      	add	sp, #20
 8011784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011788 <__copybits>:
 8011788:	3901      	subs	r1, #1
 801178a:	b570      	push	{r4, r5, r6, lr}
 801178c:	1149      	asrs	r1, r1, #5
 801178e:	6914      	ldr	r4, [r2, #16]
 8011790:	3101      	adds	r1, #1
 8011792:	f102 0314 	add.w	r3, r2, #20
 8011796:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801179a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801179e:	1f05      	subs	r5, r0, #4
 80117a0:	42a3      	cmp	r3, r4
 80117a2:	d30c      	bcc.n	80117be <__copybits+0x36>
 80117a4:	1aa3      	subs	r3, r4, r2
 80117a6:	3b11      	subs	r3, #17
 80117a8:	f023 0303 	bic.w	r3, r3, #3
 80117ac:	3211      	adds	r2, #17
 80117ae:	42a2      	cmp	r2, r4
 80117b0:	bf88      	it	hi
 80117b2:	2300      	movhi	r3, #0
 80117b4:	4418      	add	r0, r3
 80117b6:	2300      	movs	r3, #0
 80117b8:	4288      	cmp	r0, r1
 80117ba:	d305      	bcc.n	80117c8 <__copybits+0x40>
 80117bc:	bd70      	pop	{r4, r5, r6, pc}
 80117be:	f853 6b04 	ldr.w	r6, [r3], #4
 80117c2:	f845 6f04 	str.w	r6, [r5, #4]!
 80117c6:	e7eb      	b.n	80117a0 <__copybits+0x18>
 80117c8:	f840 3b04 	str.w	r3, [r0], #4
 80117cc:	e7f4      	b.n	80117b8 <__copybits+0x30>

080117ce <__any_on>:
 80117ce:	f100 0214 	add.w	r2, r0, #20
 80117d2:	6900      	ldr	r0, [r0, #16]
 80117d4:	114b      	asrs	r3, r1, #5
 80117d6:	4298      	cmp	r0, r3
 80117d8:	b510      	push	{r4, lr}
 80117da:	db11      	blt.n	8011800 <__any_on+0x32>
 80117dc:	dd0a      	ble.n	80117f4 <__any_on+0x26>
 80117de:	f011 011f 	ands.w	r1, r1, #31
 80117e2:	d007      	beq.n	80117f4 <__any_on+0x26>
 80117e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80117e8:	fa24 f001 	lsr.w	r0, r4, r1
 80117ec:	fa00 f101 	lsl.w	r1, r0, r1
 80117f0:	428c      	cmp	r4, r1
 80117f2:	d10b      	bne.n	801180c <__any_on+0x3e>
 80117f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d803      	bhi.n	8011804 <__any_on+0x36>
 80117fc:	2000      	movs	r0, #0
 80117fe:	bd10      	pop	{r4, pc}
 8011800:	4603      	mov	r3, r0
 8011802:	e7f7      	b.n	80117f4 <__any_on+0x26>
 8011804:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011808:	2900      	cmp	r1, #0
 801180a:	d0f5      	beq.n	80117f8 <__any_on+0x2a>
 801180c:	2001      	movs	r0, #1
 801180e:	e7f6      	b.n	80117fe <__any_on+0x30>

08011810 <_malloc_usable_size_r>:
 8011810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011814:	1f18      	subs	r0, r3, #4
 8011816:	2b00      	cmp	r3, #0
 8011818:	bfbc      	itt	lt
 801181a:	580b      	ldrlt	r3, [r1, r0]
 801181c:	18c0      	addlt	r0, r0, r3
 801181e:	4770      	bx	lr

08011820 <_strtol_l.constprop.0>:
 8011820:	2b24      	cmp	r3, #36	@ 0x24
 8011822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011826:	4686      	mov	lr, r0
 8011828:	4690      	mov	r8, r2
 801182a:	d801      	bhi.n	8011830 <_strtol_l.constprop.0+0x10>
 801182c:	2b01      	cmp	r3, #1
 801182e:	d106      	bne.n	801183e <_strtol_l.constprop.0+0x1e>
 8011830:	f7fe f8f2 	bl	800fa18 <__errno>
 8011834:	2316      	movs	r3, #22
 8011836:	6003      	str	r3, [r0, #0]
 8011838:	2000      	movs	r0, #0
 801183a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801183e:	4834      	ldr	r0, [pc, #208]	@ (8011910 <_strtol_l.constprop.0+0xf0>)
 8011840:	460d      	mov	r5, r1
 8011842:	462a      	mov	r2, r5
 8011844:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011848:	5d06      	ldrb	r6, [r0, r4]
 801184a:	f016 0608 	ands.w	r6, r6, #8
 801184e:	d1f8      	bne.n	8011842 <_strtol_l.constprop.0+0x22>
 8011850:	2c2d      	cmp	r4, #45	@ 0x2d
 8011852:	d12d      	bne.n	80118b0 <_strtol_l.constprop.0+0x90>
 8011854:	782c      	ldrb	r4, [r5, #0]
 8011856:	2601      	movs	r6, #1
 8011858:	1c95      	adds	r5, r2, #2
 801185a:	f033 0210 	bics.w	r2, r3, #16
 801185e:	d109      	bne.n	8011874 <_strtol_l.constprop.0+0x54>
 8011860:	2c30      	cmp	r4, #48	@ 0x30
 8011862:	d12a      	bne.n	80118ba <_strtol_l.constprop.0+0x9a>
 8011864:	782a      	ldrb	r2, [r5, #0]
 8011866:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801186a:	2a58      	cmp	r2, #88	@ 0x58
 801186c:	d125      	bne.n	80118ba <_strtol_l.constprop.0+0x9a>
 801186e:	786c      	ldrb	r4, [r5, #1]
 8011870:	2310      	movs	r3, #16
 8011872:	3502      	adds	r5, #2
 8011874:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011878:	f10c 3cff 	add.w	ip, ip, #4294967295
 801187c:	2200      	movs	r2, #0
 801187e:	fbbc f9f3 	udiv	r9, ip, r3
 8011882:	4610      	mov	r0, r2
 8011884:	fb03 ca19 	mls	sl, r3, r9, ip
 8011888:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801188c:	2f09      	cmp	r7, #9
 801188e:	d81b      	bhi.n	80118c8 <_strtol_l.constprop.0+0xa8>
 8011890:	463c      	mov	r4, r7
 8011892:	42a3      	cmp	r3, r4
 8011894:	dd27      	ble.n	80118e6 <_strtol_l.constprop.0+0xc6>
 8011896:	1c57      	adds	r7, r2, #1
 8011898:	d007      	beq.n	80118aa <_strtol_l.constprop.0+0x8a>
 801189a:	4581      	cmp	r9, r0
 801189c:	d320      	bcc.n	80118e0 <_strtol_l.constprop.0+0xc0>
 801189e:	d101      	bne.n	80118a4 <_strtol_l.constprop.0+0x84>
 80118a0:	45a2      	cmp	sl, r4
 80118a2:	db1d      	blt.n	80118e0 <_strtol_l.constprop.0+0xc0>
 80118a4:	fb00 4003 	mla	r0, r0, r3, r4
 80118a8:	2201      	movs	r2, #1
 80118aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118ae:	e7eb      	b.n	8011888 <_strtol_l.constprop.0+0x68>
 80118b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80118b2:	bf04      	itt	eq
 80118b4:	782c      	ldrbeq	r4, [r5, #0]
 80118b6:	1c95      	addeq	r5, r2, #2
 80118b8:	e7cf      	b.n	801185a <_strtol_l.constprop.0+0x3a>
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d1da      	bne.n	8011874 <_strtol_l.constprop.0+0x54>
 80118be:	2c30      	cmp	r4, #48	@ 0x30
 80118c0:	bf0c      	ite	eq
 80118c2:	2308      	moveq	r3, #8
 80118c4:	230a      	movne	r3, #10
 80118c6:	e7d5      	b.n	8011874 <_strtol_l.constprop.0+0x54>
 80118c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80118cc:	2f19      	cmp	r7, #25
 80118ce:	d801      	bhi.n	80118d4 <_strtol_l.constprop.0+0xb4>
 80118d0:	3c37      	subs	r4, #55	@ 0x37
 80118d2:	e7de      	b.n	8011892 <_strtol_l.constprop.0+0x72>
 80118d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80118d8:	2f19      	cmp	r7, #25
 80118da:	d804      	bhi.n	80118e6 <_strtol_l.constprop.0+0xc6>
 80118dc:	3c57      	subs	r4, #87	@ 0x57
 80118de:	e7d8      	b.n	8011892 <_strtol_l.constprop.0+0x72>
 80118e0:	f04f 32ff 	mov.w	r2, #4294967295
 80118e4:	e7e1      	b.n	80118aa <_strtol_l.constprop.0+0x8a>
 80118e6:	1c53      	adds	r3, r2, #1
 80118e8:	d108      	bne.n	80118fc <_strtol_l.constprop.0+0xdc>
 80118ea:	2322      	movs	r3, #34	@ 0x22
 80118ec:	f8ce 3000 	str.w	r3, [lr]
 80118f0:	4660      	mov	r0, ip
 80118f2:	f1b8 0f00 	cmp.w	r8, #0
 80118f6:	d0a0      	beq.n	801183a <_strtol_l.constprop.0+0x1a>
 80118f8:	1e69      	subs	r1, r5, #1
 80118fa:	e006      	b.n	801190a <_strtol_l.constprop.0+0xea>
 80118fc:	b106      	cbz	r6, 8011900 <_strtol_l.constprop.0+0xe0>
 80118fe:	4240      	negs	r0, r0
 8011900:	f1b8 0f00 	cmp.w	r8, #0
 8011904:	d099      	beq.n	801183a <_strtol_l.constprop.0+0x1a>
 8011906:	2a00      	cmp	r2, #0
 8011908:	d1f6      	bne.n	80118f8 <_strtol_l.constprop.0+0xd8>
 801190a:	f8c8 1000 	str.w	r1, [r8]
 801190e:	e794      	b.n	801183a <_strtol_l.constprop.0+0x1a>
 8011910:	08012761 	.word	0x08012761

08011914 <_strtol_r>:
 8011914:	f7ff bf84 	b.w	8011820 <_strtol_l.constprop.0>

08011918 <__ascii_wctomb>:
 8011918:	4603      	mov	r3, r0
 801191a:	4608      	mov	r0, r1
 801191c:	b141      	cbz	r1, 8011930 <__ascii_wctomb+0x18>
 801191e:	2aff      	cmp	r2, #255	@ 0xff
 8011920:	d904      	bls.n	801192c <__ascii_wctomb+0x14>
 8011922:	228a      	movs	r2, #138	@ 0x8a
 8011924:	601a      	str	r2, [r3, #0]
 8011926:	f04f 30ff 	mov.w	r0, #4294967295
 801192a:	4770      	bx	lr
 801192c:	700a      	strb	r2, [r1, #0]
 801192e:	2001      	movs	r0, #1
 8011930:	4770      	bx	lr

08011932 <__ssputs_r>:
 8011932:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011936:	688e      	ldr	r6, [r1, #8]
 8011938:	461f      	mov	r7, r3
 801193a:	42be      	cmp	r6, r7
 801193c:	680b      	ldr	r3, [r1, #0]
 801193e:	4682      	mov	sl, r0
 8011940:	460c      	mov	r4, r1
 8011942:	4690      	mov	r8, r2
 8011944:	d82d      	bhi.n	80119a2 <__ssputs_r+0x70>
 8011946:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801194a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801194e:	d026      	beq.n	801199e <__ssputs_r+0x6c>
 8011950:	6965      	ldr	r5, [r4, #20]
 8011952:	6909      	ldr	r1, [r1, #16]
 8011954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011958:	eba3 0901 	sub.w	r9, r3, r1
 801195c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011960:	1c7b      	adds	r3, r7, #1
 8011962:	444b      	add	r3, r9
 8011964:	106d      	asrs	r5, r5, #1
 8011966:	429d      	cmp	r5, r3
 8011968:	bf38      	it	cc
 801196a:	461d      	movcc	r5, r3
 801196c:	0553      	lsls	r3, r2, #21
 801196e:	d527      	bpl.n	80119c0 <__ssputs_r+0x8e>
 8011970:	4629      	mov	r1, r5
 8011972:	f7fc f8db 	bl	800db2c <_malloc_r>
 8011976:	4606      	mov	r6, r0
 8011978:	b360      	cbz	r0, 80119d4 <__ssputs_r+0xa2>
 801197a:	6921      	ldr	r1, [r4, #16]
 801197c:	464a      	mov	r2, r9
 801197e:	f7fe f878 	bl	800fa72 <memcpy>
 8011982:	89a3      	ldrh	r3, [r4, #12]
 8011984:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801198c:	81a3      	strh	r3, [r4, #12]
 801198e:	6126      	str	r6, [r4, #16]
 8011990:	6165      	str	r5, [r4, #20]
 8011992:	444e      	add	r6, r9
 8011994:	eba5 0509 	sub.w	r5, r5, r9
 8011998:	6026      	str	r6, [r4, #0]
 801199a:	60a5      	str	r5, [r4, #8]
 801199c:	463e      	mov	r6, r7
 801199e:	42be      	cmp	r6, r7
 80119a0:	d900      	bls.n	80119a4 <__ssputs_r+0x72>
 80119a2:	463e      	mov	r6, r7
 80119a4:	6820      	ldr	r0, [r4, #0]
 80119a6:	4632      	mov	r2, r6
 80119a8:	4641      	mov	r1, r8
 80119aa:	f000 f98d 	bl	8011cc8 <memmove>
 80119ae:	68a3      	ldr	r3, [r4, #8]
 80119b0:	1b9b      	subs	r3, r3, r6
 80119b2:	60a3      	str	r3, [r4, #8]
 80119b4:	6823      	ldr	r3, [r4, #0]
 80119b6:	4433      	add	r3, r6
 80119b8:	6023      	str	r3, [r4, #0]
 80119ba:	2000      	movs	r0, #0
 80119bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119c0:	462a      	mov	r2, r5
 80119c2:	f7fc f93f 	bl	800dc44 <_realloc_r>
 80119c6:	4606      	mov	r6, r0
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d1e0      	bne.n	801198e <__ssputs_r+0x5c>
 80119cc:	6921      	ldr	r1, [r4, #16]
 80119ce:	4650      	mov	r0, sl
 80119d0:	f7fe fed6 	bl	8010780 <_free_r>
 80119d4:	230c      	movs	r3, #12
 80119d6:	f8ca 3000 	str.w	r3, [sl]
 80119da:	89a3      	ldrh	r3, [r4, #12]
 80119dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119e0:	81a3      	strh	r3, [r4, #12]
 80119e2:	f04f 30ff 	mov.w	r0, #4294967295
 80119e6:	e7e9      	b.n	80119bc <__ssputs_r+0x8a>

080119e8 <_svfiprintf_r>:
 80119e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ec:	4698      	mov	r8, r3
 80119ee:	898b      	ldrh	r3, [r1, #12]
 80119f0:	061b      	lsls	r3, r3, #24
 80119f2:	b09d      	sub	sp, #116	@ 0x74
 80119f4:	4607      	mov	r7, r0
 80119f6:	460d      	mov	r5, r1
 80119f8:	4614      	mov	r4, r2
 80119fa:	d510      	bpl.n	8011a1e <_svfiprintf_r+0x36>
 80119fc:	690b      	ldr	r3, [r1, #16]
 80119fe:	b973      	cbnz	r3, 8011a1e <_svfiprintf_r+0x36>
 8011a00:	2140      	movs	r1, #64	@ 0x40
 8011a02:	f7fc f893 	bl	800db2c <_malloc_r>
 8011a06:	6028      	str	r0, [r5, #0]
 8011a08:	6128      	str	r0, [r5, #16]
 8011a0a:	b930      	cbnz	r0, 8011a1a <_svfiprintf_r+0x32>
 8011a0c:	230c      	movs	r3, #12
 8011a0e:	603b      	str	r3, [r7, #0]
 8011a10:	f04f 30ff 	mov.w	r0, #4294967295
 8011a14:	b01d      	add	sp, #116	@ 0x74
 8011a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a1a:	2340      	movs	r3, #64	@ 0x40
 8011a1c:	616b      	str	r3, [r5, #20]
 8011a1e:	2300      	movs	r3, #0
 8011a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a22:	2320      	movs	r3, #32
 8011a24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a28:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a2c:	2330      	movs	r3, #48	@ 0x30
 8011a2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011bcc <_svfiprintf_r+0x1e4>
 8011a32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a36:	f04f 0901 	mov.w	r9, #1
 8011a3a:	4623      	mov	r3, r4
 8011a3c:	469a      	mov	sl, r3
 8011a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a42:	b10a      	cbz	r2, 8011a48 <_svfiprintf_r+0x60>
 8011a44:	2a25      	cmp	r2, #37	@ 0x25
 8011a46:	d1f9      	bne.n	8011a3c <_svfiprintf_r+0x54>
 8011a48:	ebba 0b04 	subs.w	fp, sl, r4
 8011a4c:	d00b      	beq.n	8011a66 <_svfiprintf_r+0x7e>
 8011a4e:	465b      	mov	r3, fp
 8011a50:	4622      	mov	r2, r4
 8011a52:	4629      	mov	r1, r5
 8011a54:	4638      	mov	r0, r7
 8011a56:	f7ff ff6c 	bl	8011932 <__ssputs_r>
 8011a5a:	3001      	adds	r0, #1
 8011a5c:	f000 80a7 	beq.w	8011bae <_svfiprintf_r+0x1c6>
 8011a60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a62:	445a      	add	r2, fp
 8011a64:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a66:	f89a 3000 	ldrb.w	r3, [sl]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	f000 809f 	beq.w	8011bae <_svfiprintf_r+0x1c6>
 8011a70:	2300      	movs	r3, #0
 8011a72:	f04f 32ff 	mov.w	r2, #4294967295
 8011a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a7a:	f10a 0a01 	add.w	sl, sl, #1
 8011a7e:	9304      	str	r3, [sp, #16]
 8011a80:	9307      	str	r3, [sp, #28]
 8011a82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a86:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a88:	4654      	mov	r4, sl
 8011a8a:	2205      	movs	r2, #5
 8011a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a90:	484e      	ldr	r0, [pc, #312]	@ (8011bcc <_svfiprintf_r+0x1e4>)
 8011a92:	f7ee fbbd 	bl	8000210 <memchr>
 8011a96:	9a04      	ldr	r2, [sp, #16]
 8011a98:	b9d8      	cbnz	r0, 8011ad2 <_svfiprintf_r+0xea>
 8011a9a:	06d0      	lsls	r0, r2, #27
 8011a9c:	bf44      	itt	mi
 8011a9e:	2320      	movmi	r3, #32
 8011aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011aa4:	0711      	lsls	r1, r2, #28
 8011aa6:	bf44      	itt	mi
 8011aa8:	232b      	movmi	r3, #43	@ 0x2b
 8011aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011aae:	f89a 3000 	ldrb.w	r3, [sl]
 8011ab2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ab4:	d015      	beq.n	8011ae2 <_svfiprintf_r+0xfa>
 8011ab6:	9a07      	ldr	r2, [sp, #28]
 8011ab8:	4654      	mov	r4, sl
 8011aba:	2000      	movs	r0, #0
 8011abc:	f04f 0c0a 	mov.w	ip, #10
 8011ac0:	4621      	mov	r1, r4
 8011ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ac6:	3b30      	subs	r3, #48	@ 0x30
 8011ac8:	2b09      	cmp	r3, #9
 8011aca:	d94b      	bls.n	8011b64 <_svfiprintf_r+0x17c>
 8011acc:	b1b0      	cbz	r0, 8011afc <_svfiprintf_r+0x114>
 8011ace:	9207      	str	r2, [sp, #28]
 8011ad0:	e014      	b.n	8011afc <_svfiprintf_r+0x114>
 8011ad2:	eba0 0308 	sub.w	r3, r0, r8
 8011ad6:	fa09 f303 	lsl.w	r3, r9, r3
 8011ada:	4313      	orrs	r3, r2
 8011adc:	9304      	str	r3, [sp, #16]
 8011ade:	46a2      	mov	sl, r4
 8011ae0:	e7d2      	b.n	8011a88 <_svfiprintf_r+0xa0>
 8011ae2:	9b03      	ldr	r3, [sp, #12]
 8011ae4:	1d19      	adds	r1, r3, #4
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	9103      	str	r1, [sp, #12]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	bfbb      	ittet	lt
 8011aee:	425b      	neglt	r3, r3
 8011af0:	f042 0202 	orrlt.w	r2, r2, #2
 8011af4:	9307      	strge	r3, [sp, #28]
 8011af6:	9307      	strlt	r3, [sp, #28]
 8011af8:	bfb8      	it	lt
 8011afa:	9204      	strlt	r2, [sp, #16]
 8011afc:	7823      	ldrb	r3, [r4, #0]
 8011afe:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b00:	d10a      	bne.n	8011b18 <_svfiprintf_r+0x130>
 8011b02:	7863      	ldrb	r3, [r4, #1]
 8011b04:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b06:	d132      	bne.n	8011b6e <_svfiprintf_r+0x186>
 8011b08:	9b03      	ldr	r3, [sp, #12]
 8011b0a:	1d1a      	adds	r2, r3, #4
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	9203      	str	r2, [sp, #12]
 8011b10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b14:	3402      	adds	r4, #2
 8011b16:	9305      	str	r3, [sp, #20]
 8011b18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011bdc <_svfiprintf_r+0x1f4>
 8011b1c:	7821      	ldrb	r1, [r4, #0]
 8011b1e:	2203      	movs	r2, #3
 8011b20:	4650      	mov	r0, sl
 8011b22:	f7ee fb75 	bl	8000210 <memchr>
 8011b26:	b138      	cbz	r0, 8011b38 <_svfiprintf_r+0x150>
 8011b28:	9b04      	ldr	r3, [sp, #16]
 8011b2a:	eba0 000a 	sub.w	r0, r0, sl
 8011b2e:	2240      	movs	r2, #64	@ 0x40
 8011b30:	4082      	lsls	r2, r0
 8011b32:	4313      	orrs	r3, r2
 8011b34:	3401      	adds	r4, #1
 8011b36:	9304      	str	r3, [sp, #16]
 8011b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b3c:	4824      	ldr	r0, [pc, #144]	@ (8011bd0 <_svfiprintf_r+0x1e8>)
 8011b3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b42:	2206      	movs	r2, #6
 8011b44:	f7ee fb64 	bl	8000210 <memchr>
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	d036      	beq.n	8011bba <_svfiprintf_r+0x1d2>
 8011b4c:	4b21      	ldr	r3, [pc, #132]	@ (8011bd4 <_svfiprintf_r+0x1ec>)
 8011b4e:	bb1b      	cbnz	r3, 8011b98 <_svfiprintf_r+0x1b0>
 8011b50:	9b03      	ldr	r3, [sp, #12]
 8011b52:	3307      	adds	r3, #7
 8011b54:	f023 0307 	bic.w	r3, r3, #7
 8011b58:	3308      	adds	r3, #8
 8011b5a:	9303      	str	r3, [sp, #12]
 8011b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b5e:	4433      	add	r3, r6
 8011b60:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b62:	e76a      	b.n	8011a3a <_svfiprintf_r+0x52>
 8011b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b68:	460c      	mov	r4, r1
 8011b6a:	2001      	movs	r0, #1
 8011b6c:	e7a8      	b.n	8011ac0 <_svfiprintf_r+0xd8>
 8011b6e:	2300      	movs	r3, #0
 8011b70:	3401      	adds	r4, #1
 8011b72:	9305      	str	r3, [sp, #20]
 8011b74:	4619      	mov	r1, r3
 8011b76:	f04f 0c0a 	mov.w	ip, #10
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b80:	3a30      	subs	r2, #48	@ 0x30
 8011b82:	2a09      	cmp	r2, #9
 8011b84:	d903      	bls.n	8011b8e <_svfiprintf_r+0x1a6>
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d0c6      	beq.n	8011b18 <_svfiprintf_r+0x130>
 8011b8a:	9105      	str	r1, [sp, #20]
 8011b8c:	e7c4      	b.n	8011b18 <_svfiprintf_r+0x130>
 8011b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b92:	4604      	mov	r4, r0
 8011b94:	2301      	movs	r3, #1
 8011b96:	e7f0      	b.n	8011b7a <_svfiprintf_r+0x192>
 8011b98:	ab03      	add	r3, sp, #12
 8011b9a:	9300      	str	r3, [sp, #0]
 8011b9c:	462a      	mov	r2, r5
 8011b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8011bd8 <_svfiprintf_r+0x1f0>)
 8011ba0:	a904      	add	r1, sp, #16
 8011ba2:	4638      	mov	r0, r7
 8011ba4:	f7fc ff26 	bl	800e9f4 <_printf_float>
 8011ba8:	1c42      	adds	r2, r0, #1
 8011baa:	4606      	mov	r6, r0
 8011bac:	d1d6      	bne.n	8011b5c <_svfiprintf_r+0x174>
 8011bae:	89ab      	ldrh	r3, [r5, #12]
 8011bb0:	065b      	lsls	r3, r3, #25
 8011bb2:	f53f af2d 	bmi.w	8011a10 <_svfiprintf_r+0x28>
 8011bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bb8:	e72c      	b.n	8011a14 <_svfiprintf_r+0x2c>
 8011bba:	ab03      	add	r3, sp, #12
 8011bbc:	9300      	str	r3, [sp, #0]
 8011bbe:	462a      	mov	r2, r5
 8011bc0:	4b05      	ldr	r3, [pc, #20]	@ (8011bd8 <_svfiprintf_r+0x1f0>)
 8011bc2:	a904      	add	r1, sp, #16
 8011bc4:	4638      	mov	r0, r7
 8011bc6:	f7fd f9ad 	bl	800ef24 <_printf_i>
 8011bca:	e7ed      	b.n	8011ba8 <_svfiprintf_r+0x1c0>
 8011bcc:	08012861 	.word	0x08012861
 8011bd0:	0801286b 	.word	0x0801286b
 8011bd4:	0800e9f5 	.word	0x0800e9f5
 8011bd8:	08011933 	.word	0x08011933
 8011bdc:	08012867 	.word	0x08012867

08011be0 <fiprintf>:
 8011be0:	b40e      	push	{r1, r2, r3}
 8011be2:	b503      	push	{r0, r1, lr}
 8011be4:	4601      	mov	r1, r0
 8011be6:	ab03      	add	r3, sp, #12
 8011be8:	4805      	ldr	r0, [pc, #20]	@ (8011c00 <fiprintf+0x20>)
 8011bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bee:	6800      	ldr	r0, [r0, #0]
 8011bf0:	9301      	str	r3, [sp, #4]
 8011bf2:	f000 f8e9 	bl	8011dc8 <_vfiprintf_r>
 8011bf6:	b002      	add	sp, #8
 8011bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bfc:	b003      	add	sp, #12
 8011bfe:	4770      	bx	lr
 8011c00:	20000290 	.word	0x20000290

08011c04 <__swhatbuf_r>:
 8011c04:	b570      	push	{r4, r5, r6, lr}
 8011c06:	460c      	mov	r4, r1
 8011c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c0c:	2900      	cmp	r1, #0
 8011c0e:	b096      	sub	sp, #88	@ 0x58
 8011c10:	4615      	mov	r5, r2
 8011c12:	461e      	mov	r6, r3
 8011c14:	da0d      	bge.n	8011c32 <__swhatbuf_r+0x2e>
 8011c16:	89a3      	ldrh	r3, [r4, #12]
 8011c18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011c1c:	f04f 0100 	mov.w	r1, #0
 8011c20:	bf14      	ite	ne
 8011c22:	2340      	movne	r3, #64	@ 0x40
 8011c24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011c28:	2000      	movs	r0, #0
 8011c2a:	6031      	str	r1, [r6, #0]
 8011c2c:	602b      	str	r3, [r5, #0]
 8011c2e:	b016      	add	sp, #88	@ 0x58
 8011c30:	bd70      	pop	{r4, r5, r6, pc}
 8011c32:	466a      	mov	r2, sp
 8011c34:	f000 f862 	bl	8011cfc <_fstat_r>
 8011c38:	2800      	cmp	r0, #0
 8011c3a:	dbec      	blt.n	8011c16 <__swhatbuf_r+0x12>
 8011c3c:	9901      	ldr	r1, [sp, #4]
 8011c3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011c42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011c46:	4259      	negs	r1, r3
 8011c48:	4159      	adcs	r1, r3
 8011c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c4e:	e7eb      	b.n	8011c28 <__swhatbuf_r+0x24>

08011c50 <__smakebuf_r>:
 8011c50:	898b      	ldrh	r3, [r1, #12]
 8011c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c54:	079d      	lsls	r5, r3, #30
 8011c56:	4606      	mov	r6, r0
 8011c58:	460c      	mov	r4, r1
 8011c5a:	d507      	bpl.n	8011c6c <__smakebuf_r+0x1c>
 8011c5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011c60:	6023      	str	r3, [r4, #0]
 8011c62:	6123      	str	r3, [r4, #16]
 8011c64:	2301      	movs	r3, #1
 8011c66:	6163      	str	r3, [r4, #20]
 8011c68:	b003      	add	sp, #12
 8011c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c6c:	ab01      	add	r3, sp, #4
 8011c6e:	466a      	mov	r2, sp
 8011c70:	f7ff ffc8 	bl	8011c04 <__swhatbuf_r>
 8011c74:	9f00      	ldr	r7, [sp, #0]
 8011c76:	4605      	mov	r5, r0
 8011c78:	4639      	mov	r1, r7
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	f7fb ff56 	bl	800db2c <_malloc_r>
 8011c80:	b948      	cbnz	r0, 8011c96 <__smakebuf_r+0x46>
 8011c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c86:	059a      	lsls	r2, r3, #22
 8011c88:	d4ee      	bmi.n	8011c68 <__smakebuf_r+0x18>
 8011c8a:	f023 0303 	bic.w	r3, r3, #3
 8011c8e:	f043 0302 	orr.w	r3, r3, #2
 8011c92:	81a3      	strh	r3, [r4, #12]
 8011c94:	e7e2      	b.n	8011c5c <__smakebuf_r+0xc>
 8011c96:	89a3      	ldrh	r3, [r4, #12]
 8011c98:	6020      	str	r0, [r4, #0]
 8011c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c9e:	81a3      	strh	r3, [r4, #12]
 8011ca0:	9b01      	ldr	r3, [sp, #4]
 8011ca2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011ca6:	b15b      	cbz	r3, 8011cc0 <__smakebuf_r+0x70>
 8011ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cac:	4630      	mov	r0, r6
 8011cae:	f000 f837 	bl	8011d20 <_isatty_r>
 8011cb2:	b128      	cbz	r0, 8011cc0 <__smakebuf_r+0x70>
 8011cb4:	89a3      	ldrh	r3, [r4, #12]
 8011cb6:	f023 0303 	bic.w	r3, r3, #3
 8011cba:	f043 0301 	orr.w	r3, r3, #1
 8011cbe:	81a3      	strh	r3, [r4, #12]
 8011cc0:	89a3      	ldrh	r3, [r4, #12]
 8011cc2:	431d      	orrs	r5, r3
 8011cc4:	81a5      	strh	r5, [r4, #12]
 8011cc6:	e7cf      	b.n	8011c68 <__smakebuf_r+0x18>

08011cc8 <memmove>:
 8011cc8:	4288      	cmp	r0, r1
 8011cca:	b510      	push	{r4, lr}
 8011ccc:	eb01 0402 	add.w	r4, r1, r2
 8011cd0:	d902      	bls.n	8011cd8 <memmove+0x10>
 8011cd2:	4284      	cmp	r4, r0
 8011cd4:	4623      	mov	r3, r4
 8011cd6:	d807      	bhi.n	8011ce8 <memmove+0x20>
 8011cd8:	1e43      	subs	r3, r0, #1
 8011cda:	42a1      	cmp	r1, r4
 8011cdc:	d008      	beq.n	8011cf0 <memmove+0x28>
 8011cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ce6:	e7f8      	b.n	8011cda <memmove+0x12>
 8011ce8:	4402      	add	r2, r0
 8011cea:	4601      	mov	r1, r0
 8011cec:	428a      	cmp	r2, r1
 8011cee:	d100      	bne.n	8011cf2 <memmove+0x2a>
 8011cf0:	bd10      	pop	{r4, pc}
 8011cf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011cf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011cfa:	e7f7      	b.n	8011cec <memmove+0x24>

08011cfc <_fstat_r>:
 8011cfc:	b538      	push	{r3, r4, r5, lr}
 8011cfe:	4d07      	ldr	r5, [pc, #28]	@ (8011d1c <_fstat_r+0x20>)
 8011d00:	2300      	movs	r3, #0
 8011d02:	4604      	mov	r4, r0
 8011d04:	4608      	mov	r0, r1
 8011d06:	4611      	mov	r1, r2
 8011d08:	602b      	str	r3, [r5, #0]
 8011d0a:	f7ef fd61 	bl	80017d0 <_fstat>
 8011d0e:	1c43      	adds	r3, r0, #1
 8011d10:	d102      	bne.n	8011d18 <_fstat_r+0x1c>
 8011d12:	682b      	ldr	r3, [r5, #0]
 8011d14:	b103      	cbz	r3, 8011d18 <_fstat_r+0x1c>
 8011d16:	6023      	str	r3, [r4, #0]
 8011d18:	bd38      	pop	{r3, r4, r5, pc}
 8011d1a:	bf00      	nop
 8011d1c:	20002678 	.word	0x20002678

08011d20 <_isatty_r>:
 8011d20:	b538      	push	{r3, r4, r5, lr}
 8011d22:	4d06      	ldr	r5, [pc, #24]	@ (8011d3c <_isatty_r+0x1c>)
 8011d24:	2300      	movs	r3, #0
 8011d26:	4604      	mov	r4, r0
 8011d28:	4608      	mov	r0, r1
 8011d2a:	602b      	str	r3, [r5, #0]
 8011d2c:	f7ef fd60 	bl	80017f0 <_isatty>
 8011d30:	1c43      	adds	r3, r0, #1
 8011d32:	d102      	bne.n	8011d3a <_isatty_r+0x1a>
 8011d34:	682b      	ldr	r3, [r5, #0]
 8011d36:	b103      	cbz	r3, 8011d3a <_isatty_r+0x1a>
 8011d38:	6023      	str	r3, [r4, #0]
 8011d3a:	bd38      	pop	{r3, r4, r5, pc}
 8011d3c:	20002678 	.word	0x20002678

08011d40 <abort>:
 8011d40:	b508      	push	{r3, lr}
 8011d42:	2006      	movs	r0, #6
 8011d44:	f000 fa14 	bl	8012170 <raise>
 8011d48:	2001      	movs	r0, #1
 8011d4a:	f7ef fcf1 	bl	8001730 <_exit>

08011d4e <_calloc_r>:
 8011d4e:	b570      	push	{r4, r5, r6, lr}
 8011d50:	fba1 5402 	umull	r5, r4, r1, r2
 8011d54:	b93c      	cbnz	r4, 8011d66 <_calloc_r+0x18>
 8011d56:	4629      	mov	r1, r5
 8011d58:	f7fb fee8 	bl	800db2c <_malloc_r>
 8011d5c:	4606      	mov	r6, r0
 8011d5e:	b928      	cbnz	r0, 8011d6c <_calloc_r+0x1e>
 8011d60:	2600      	movs	r6, #0
 8011d62:	4630      	mov	r0, r6
 8011d64:	bd70      	pop	{r4, r5, r6, pc}
 8011d66:	220c      	movs	r2, #12
 8011d68:	6002      	str	r2, [r0, #0]
 8011d6a:	e7f9      	b.n	8011d60 <_calloc_r+0x12>
 8011d6c:	462a      	mov	r2, r5
 8011d6e:	4621      	mov	r1, r4
 8011d70:	f7fd fddd 	bl	800f92e <memset>
 8011d74:	e7f5      	b.n	8011d62 <_calloc_r+0x14>

08011d76 <__sfputc_r>:
 8011d76:	6893      	ldr	r3, [r2, #8]
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	b410      	push	{r4}
 8011d7e:	6093      	str	r3, [r2, #8]
 8011d80:	da08      	bge.n	8011d94 <__sfputc_r+0x1e>
 8011d82:	6994      	ldr	r4, [r2, #24]
 8011d84:	42a3      	cmp	r3, r4
 8011d86:	db01      	blt.n	8011d8c <__sfputc_r+0x16>
 8011d88:	290a      	cmp	r1, #10
 8011d8a:	d103      	bne.n	8011d94 <__sfputc_r+0x1e>
 8011d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d90:	f000 b932 	b.w	8011ff8 <__swbuf_r>
 8011d94:	6813      	ldr	r3, [r2, #0]
 8011d96:	1c58      	adds	r0, r3, #1
 8011d98:	6010      	str	r0, [r2, #0]
 8011d9a:	7019      	strb	r1, [r3, #0]
 8011d9c:	4608      	mov	r0, r1
 8011d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011da2:	4770      	bx	lr

08011da4 <__sfputs_r>:
 8011da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011da6:	4606      	mov	r6, r0
 8011da8:	460f      	mov	r7, r1
 8011daa:	4614      	mov	r4, r2
 8011dac:	18d5      	adds	r5, r2, r3
 8011dae:	42ac      	cmp	r4, r5
 8011db0:	d101      	bne.n	8011db6 <__sfputs_r+0x12>
 8011db2:	2000      	movs	r0, #0
 8011db4:	e007      	b.n	8011dc6 <__sfputs_r+0x22>
 8011db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dba:	463a      	mov	r2, r7
 8011dbc:	4630      	mov	r0, r6
 8011dbe:	f7ff ffda 	bl	8011d76 <__sfputc_r>
 8011dc2:	1c43      	adds	r3, r0, #1
 8011dc4:	d1f3      	bne.n	8011dae <__sfputs_r+0xa>
 8011dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011dc8 <_vfiprintf_r>:
 8011dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dcc:	460d      	mov	r5, r1
 8011dce:	b09d      	sub	sp, #116	@ 0x74
 8011dd0:	4614      	mov	r4, r2
 8011dd2:	4698      	mov	r8, r3
 8011dd4:	4606      	mov	r6, r0
 8011dd6:	b118      	cbz	r0, 8011de0 <_vfiprintf_r+0x18>
 8011dd8:	6a03      	ldr	r3, [r0, #32]
 8011dda:	b90b      	cbnz	r3, 8011de0 <_vfiprintf_r+0x18>
 8011ddc:	f7fd fd0e 	bl	800f7fc <__sinit>
 8011de0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011de2:	07d9      	lsls	r1, r3, #31
 8011de4:	d405      	bmi.n	8011df2 <_vfiprintf_r+0x2a>
 8011de6:	89ab      	ldrh	r3, [r5, #12]
 8011de8:	059a      	lsls	r2, r3, #22
 8011dea:	d402      	bmi.n	8011df2 <_vfiprintf_r+0x2a>
 8011dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011dee:	f7fd fe3e 	bl	800fa6e <__retarget_lock_acquire_recursive>
 8011df2:	89ab      	ldrh	r3, [r5, #12]
 8011df4:	071b      	lsls	r3, r3, #28
 8011df6:	d501      	bpl.n	8011dfc <_vfiprintf_r+0x34>
 8011df8:	692b      	ldr	r3, [r5, #16]
 8011dfa:	b99b      	cbnz	r3, 8011e24 <_vfiprintf_r+0x5c>
 8011dfc:	4629      	mov	r1, r5
 8011dfe:	4630      	mov	r0, r6
 8011e00:	f000 f938 	bl	8012074 <__swsetup_r>
 8011e04:	b170      	cbz	r0, 8011e24 <_vfiprintf_r+0x5c>
 8011e06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e08:	07dc      	lsls	r4, r3, #31
 8011e0a:	d504      	bpl.n	8011e16 <_vfiprintf_r+0x4e>
 8011e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e10:	b01d      	add	sp, #116	@ 0x74
 8011e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e16:	89ab      	ldrh	r3, [r5, #12]
 8011e18:	0598      	lsls	r0, r3, #22
 8011e1a:	d4f7      	bmi.n	8011e0c <_vfiprintf_r+0x44>
 8011e1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e1e:	f7fd fe27 	bl	800fa70 <__retarget_lock_release_recursive>
 8011e22:	e7f3      	b.n	8011e0c <_vfiprintf_r+0x44>
 8011e24:	2300      	movs	r3, #0
 8011e26:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e28:	2320      	movs	r3, #32
 8011e2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e32:	2330      	movs	r3, #48	@ 0x30
 8011e34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011fe4 <_vfiprintf_r+0x21c>
 8011e38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e3c:	f04f 0901 	mov.w	r9, #1
 8011e40:	4623      	mov	r3, r4
 8011e42:	469a      	mov	sl, r3
 8011e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e48:	b10a      	cbz	r2, 8011e4e <_vfiprintf_r+0x86>
 8011e4a:	2a25      	cmp	r2, #37	@ 0x25
 8011e4c:	d1f9      	bne.n	8011e42 <_vfiprintf_r+0x7a>
 8011e4e:	ebba 0b04 	subs.w	fp, sl, r4
 8011e52:	d00b      	beq.n	8011e6c <_vfiprintf_r+0xa4>
 8011e54:	465b      	mov	r3, fp
 8011e56:	4622      	mov	r2, r4
 8011e58:	4629      	mov	r1, r5
 8011e5a:	4630      	mov	r0, r6
 8011e5c:	f7ff ffa2 	bl	8011da4 <__sfputs_r>
 8011e60:	3001      	adds	r0, #1
 8011e62:	f000 80a7 	beq.w	8011fb4 <_vfiprintf_r+0x1ec>
 8011e66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e68:	445a      	add	r2, fp
 8011e6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	f000 809f 	beq.w	8011fb4 <_vfiprintf_r+0x1ec>
 8011e76:	2300      	movs	r3, #0
 8011e78:	f04f 32ff 	mov.w	r2, #4294967295
 8011e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e80:	f10a 0a01 	add.w	sl, sl, #1
 8011e84:	9304      	str	r3, [sp, #16]
 8011e86:	9307      	str	r3, [sp, #28]
 8011e88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e8e:	4654      	mov	r4, sl
 8011e90:	2205      	movs	r2, #5
 8011e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e96:	4853      	ldr	r0, [pc, #332]	@ (8011fe4 <_vfiprintf_r+0x21c>)
 8011e98:	f7ee f9ba 	bl	8000210 <memchr>
 8011e9c:	9a04      	ldr	r2, [sp, #16]
 8011e9e:	b9d8      	cbnz	r0, 8011ed8 <_vfiprintf_r+0x110>
 8011ea0:	06d1      	lsls	r1, r2, #27
 8011ea2:	bf44      	itt	mi
 8011ea4:	2320      	movmi	r3, #32
 8011ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011eaa:	0713      	lsls	r3, r2, #28
 8011eac:	bf44      	itt	mi
 8011eae:	232b      	movmi	r3, #43	@ 0x2b
 8011eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8011eb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011eba:	d015      	beq.n	8011ee8 <_vfiprintf_r+0x120>
 8011ebc:	9a07      	ldr	r2, [sp, #28]
 8011ebe:	4654      	mov	r4, sl
 8011ec0:	2000      	movs	r0, #0
 8011ec2:	f04f 0c0a 	mov.w	ip, #10
 8011ec6:	4621      	mov	r1, r4
 8011ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ecc:	3b30      	subs	r3, #48	@ 0x30
 8011ece:	2b09      	cmp	r3, #9
 8011ed0:	d94b      	bls.n	8011f6a <_vfiprintf_r+0x1a2>
 8011ed2:	b1b0      	cbz	r0, 8011f02 <_vfiprintf_r+0x13a>
 8011ed4:	9207      	str	r2, [sp, #28]
 8011ed6:	e014      	b.n	8011f02 <_vfiprintf_r+0x13a>
 8011ed8:	eba0 0308 	sub.w	r3, r0, r8
 8011edc:	fa09 f303 	lsl.w	r3, r9, r3
 8011ee0:	4313      	orrs	r3, r2
 8011ee2:	9304      	str	r3, [sp, #16]
 8011ee4:	46a2      	mov	sl, r4
 8011ee6:	e7d2      	b.n	8011e8e <_vfiprintf_r+0xc6>
 8011ee8:	9b03      	ldr	r3, [sp, #12]
 8011eea:	1d19      	adds	r1, r3, #4
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	9103      	str	r1, [sp, #12]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	bfbb      	ittet	lt
 8011ef4:	425b      	neglt	r3, r3
 8011ef6:	f042 0202 	orrlt.w	r2, r2, #2
 8011efa:	9307      	strge	r3, [sp, #28]
 8011efc:	9307      	strlt	r3, [sp, #28]
 8011efe:	bfb8      	it	lt
 8011f00:	9204      	strlt	r2, [sp, #16]
 8011f02:	7823      	ldrb	r3, [r4, #0]
 8011f04:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f06:	d10a      	bne.n	8011f1e <_vfiprintf_r+0x156>
 8011f08:	7863      	ldrb	r3, [r4, #1]
 8011f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f0c:	d132      	bne.n	8011f74 <_vfiprintf_r+0x1ac>
 8011f0e:	9b03      	ldr	r3, [sp, #12]
 8011f10:	1d1a      	adds	r2, r3, #4
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	9203      	str	r2, [sp, #12]
 8011f16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f1a:	3402      	adds	r4, #2
 8011f1c:	9305      	str	r3, [sp, #20]
 8011f1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011ff4 <_vfiprintf_r+0x22c>
 8011f22:	7821      	ldrb	r1, [r4, #0]
 8011f24:	2203      	movs	r2, #3
 8011f26:	4650      	mov	r0, sl
 8011f28:	f7ee f972 	bl	8000210 <memchr>
 8011f2c:	b138      	cbz	r0, 8011f3e <_vfiprintf_r+0x176>
 8011f2e:	9b04      	ldr	r3, [sp, #16]
 8011f30:	eba0 000a 	sub.w	r0, r0, sl
 8011f34:	2240      	movs	r2, #64	@ 0x40
 8011f36:	4082      	lsls	r2, r0
 8011f38:	4313      	orrs	r3, r2
 8011f3a:	3401      	adds	r4, #1
 8011f3c:	9304      	str	r3, [sp, #16]
 8011f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f42:	4829      	ldr	r0, [pc, #164]	@ (8011fe8 <_vfiprintf_r+0x220>)
 8011f44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f48:	2206      	movs	r2, #6
 8011f4a:	f7ee f961 	bl	8000210 <memchr>
 8011f4e:	2800      	cmp	r0, #0
 8011f50:	d03f      	beq.n	8011fd2 <_vfiprintf_r+0x20a>
 8011f52:	4b26      	ldr	r3, [pc, #152]	@ (8011fec <_vfiprintf_r+0x224>)
 8011f54:	bb1b      	cbnz	r3, 8011f9e <_vfiprintf_r+0x1d6>
 8011f56:	9b03      	ldr	r3, [sp, #12]
 8011f58:	3307      	adds	r3, #7
 8011f5a:	f023 0307 	bic.w	r3, r3, #7
 8011f5e:	3308      	adds	r3, #8
 8011f60:	9303      	str	r3, [sp, #12]
 8011f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f64:	443b      	add	r3, r7
 8011f66:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f68:	e76a      	b.n	8011e40 <_vfiprintf_r+0x78>
 8011f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f6e:	460c      	mov	r4, r1
 8011f70:	2001      	movs	r0, #1
 8011f72:	e7a8      	b.n	8011ec6 <_vfiprintf_r+0xfe>
 8011f74:	2300      	movs	r3, #0
 8011f76:	3401      	adds	r4, #1
 8011f78:	9305      	str	r3, [sp, #20]
 8011f7a:	4619      	mov	r1, r3
 8011f7c:	f04f 0c0a 	mov.w	ip, #10
 8011f80:	4620      	mov	r0, r4
 8011f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f86:	3a30      	subs	r2, #48	@ 0x30
 8011f88:	2a09      	cmp	r2, #9
 8011f8a:	d903      	bls.n	8011f94 <_vfiprintf_r+0x1cc>
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d0c6      	beq.n	8011f1e <_vfiprintf_r+0x156>
 8011f90:	9105      	str	r1, [sp, #20]
 8011f92:	e7c4      	b.n	8011f1e <_vfiprintf_r+0x156>
 8011f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f98:	4604      	mov	r4, r0
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	e7f0      	b.n	8011f80 <_vfiprintf_r+0x1b8>
 8011f9e:	ab03      	add	r3, sp, #12
 8011fa0:	9300      	str	r3, [sp, #0]
 8011fa2:	462a      	mov	r2, r5
 8011fa4:	4b12      	ldr	r3, [pc, #72]	@ (8011ff0 <_vfiprintf_r+0x228>)
 8011fa6:	a904      	add	r1, sp, #16
 8011fa8:	4630      	mov	r0, r6
 8011faa:	f7fc fd23 	bl	800e9f4 <_printf_float>
 8011fae:	4607      	mov	r7, r0
 8011fb0:	1c78      	adds	r0, r7, #1
 8011fb2:	d1d6      	bne.n	8011f62 <_vfiprintf_r+0x19a>
 8011fb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011fb6:	07d9      	lsls	r1, r3, #31
 8011fb8:	d405      	bmi.n	8011fc6 <_vfiprintf_r+0x1fe>
 8011fba:	89ab      	ldrh	r3, [r5, #12]
 8011fbc:	059a      	lsls	r2, r3, #22
 8011fbe:	d402      	bmi.n	8011fc6 <_vfiprintf_r+0x1fe>
 8011fc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011fc2:	f7fd fd55 	bl	800fa70 <__retarget_lock_release_recursive>
 8011fc6:	89ab      	ldrh	r3, [r5, #12]
 8011fc8:	065b      	lsls	r3, r3, #25
 8011fca:	f53f af1f 	bmi.w	8011e0c <_vfiprintf_r+0x44>
 8011fce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011fd0:	e71e      	b.n	8011e10 <_vfiprintf_r+0x48>
 8011fd2:	ab03      	add	r3, sp, #12
 8011fd4:	9300      	str	r3, [sp, #0]
 8011fd6:	462a      	mov	r2, r5
 8011fd8:	4b05      	ldr	r3, [pc, #20]	@ (8011ff0 <_vfiprintf_r+0x228>)
 8011fda:	a904      	add	r1, sp, #16
 8011fdc:	4630      	mov	r0, r6
 8011fde:	f7fc ffa1 	bl	800ef24 <_printf_i>
 8011fe2:	e7e4      	b.n	8011fae <_vfiprintf_r+0x1e6>
 8011fe4:	08012861 	.word	0x08012861
 8011fe8:	0801286b 	.word	0x0801286b
 8011fec:	0800e9f5 	.word	0x0800e9f5
 8011ff0:	08011da5 	.word	0x08011da5
 8011ff4:	08012867 	.word	0x08012867

08011ff8 <__swbuf_r>:
 8011ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ffa:	460e      	mov	r6, r1
 8011ffc:	4614      	mov	r4, r2
 8011ffe:	4605      	mov	r5, r0
 8012000:	b118      	cbz	r0, 801200a <__swbuf_r+0x12>
 8012002:	6a03      	ldr	r3, [r0, #32]
 8012004:	b90b      	cbnz	r3, 801200a <__swbuf_r+0x12>
 8012006:	f7fd fbf9 	bl	800f7fc <__sinit>
 801200a:	69a3      	ldr	r3, [r4, #24]
 801200c:	60a3      	str	r3, [r4, #8]
 801200e:	89a3      	ldrh	r3, [r4, #12]
 8012010:	071a      	lsls	r2, r3, #28
 8012012:	d501      	bpl.n	8012018 <__swbuf_r+0x20>
 8012014:	6923      	ldr	r3, [r4, #16]
 8012016:	b943      	cbnz	r3, 801202a <__swbuf_r+0x32>
 8012018:	4621      	mov	r1, r4
 801201a:	4628      	mov	r0, r5
 801201c:	f000 f82a 	bl	8012074 <__swsetup_r>
 8012020:	b118      	cbz	r0, 801202a <__swbuf_r+0x32>
 8012022:	f04f 37ff 	mov.w	r7, #4294967295
 8012026:	4638      	mov	r0, r7
 8012028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801202a:	6823      	ldr	r3, [r4, #0]
 801202c:	6922      	ldr	r2, [r4, #16]
 801202e:	1a98      	subs	r0, r3, r2
 8012030:	6963      	ldr	r3, [r4, #20]
 8012032:	b2f6      	uxtb	r6, r6
 8012034:	4283      	cmp	r3, r0
 8012036:	4637      	mov	r7, r6
 8012038:	dc05      	bgt.n	8012046 <__swbuf_r+0x4e>
 801203a:	4621      	mov	r1, r4
 801203c:	4628      	mov	r0, r5
 801203e:	f7fd fb29 	bl	800f694 <_fflush_r>
 8012042:	2800      	cmp	r0, #0
 8012044:	d1ed      	bne.n	8012022 <__swbuf_r+0x2a>
 8012046:	68a3      	ldr	r3, [r4, #8]
 8012048:	3b01      	subs	r3, #1
 801204a:	60a3      	str	r3, [r4, #8]
 801204c:	6823      	ldr	r3, [r4, #0]
 801204e:	1c5a      	adds	r2, r3, #1
 8012050:	6022      	str	r2, [r4, #0]
 8012052:	701e      	strb	r6, [r3, #0]
 8012054:	6962      	ldr	r2, [r4, #20]
 8012056:	1c43      	adds	r3, r0, #1
 8012058:	429a      	cmp	r2, r3
 801205a:	d004      	beq.n	8012066 <__swbuf_r+0x6e>
 801205c:	89a3      	ldrh	r3, [r4, #12]
 801205e:	07db      	lsls	r3, r3, #31
 8012060:	d5e1      	bpl.n	8012026 <__swbuf_r+0x2e>
 8012062:	2e0a      	cmp	r6, #10
 8012064:	d1df      	bne.n	8012026 <__swbuf_r+0x2e>
 8012066:	4621      	mov	r1, r4
 8012068:	4628      	mov	r0, r5
 801206a:	f7fd fb13 	bl	800f694 <_fflush_r>
 801206e:	2800      	cmp	r0, #0
 8012070:	d0d9      	beq.n	8012026 <__swbuf_r+0x2e>
 8012072:	e7d6      	b.n	8012022 <__swbuf_r+0x2a>

08012074 <__swsetup_r>:
 8012074:	b538      	push	{r3, r4, r5, lr}
 8012076:	4b29      	ldr	r3, [pc, #164]	@ (801211c <__swsetup_r+0xa8>)
 8012078:	4605      	mov	r5, r0
 801207a:	6818      	ldr	r0, [r3, #0]
 801207c:	460c      	mov	r4, r1
 801207e:	b118      	cbz	r0, 8012088 <__swsetup_r+0x14>
 8012080:	6a03      	ldr	r3, [r0, #32]
 8012082:	b90b      	cbnz	r3, 8012088 <__swsetup_r+0x14>
 8012084:	f7fd fbba 	bl	800f7fc <__sinit>
 8012088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801208c:	0719      	lsls	r1, r3, #28
 801208e:	d422      	bmi.n	80120d6 <__swsetup_r+0x62>
 8012090:	06da      	lsls	r2, r3, #27
 8012092:	d407      	bmi.n	80120a4 <__swsetup_r+0x30>
 8012094:	2209      	movs	r2, #9
 8012096:	602a      	str	r2, [r5, #0]
 8012098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801209c:	81a3      	strh	r3, [r4, #12]
 801209e:	f04f 30ff 	mov.w	r0, #4294967295
 80120a2:	e033      	b.n	801210c <__swsetup_r+0x98>
 80120a4:	0758      	lsls	r0, r3, #29
 80120a6:	d512      	bpl.n	80120ce <__swsetup_r+0x5a>
 80120a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80120aa:	b141      	cbz	r1, 80120be <__swsetup_r+0x4a>
 80120ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120b0:	4299      	cmp	r1, r3
 80120b2:	d002      	beq.n	80120ba <__swsetup_r+0x46>
 80120b4:	4628      	mov	r0, r5
 80120b6:	f7fe fb63 	bl	8010780 <_free_r>
 80120ba:	2300      	movs	r3, #0
 80120bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80120be:	89a3      	ldrh	r3, [r4, #12]
 80120c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80120c4:	81a3      	strh	r3, [r4, #12]
 80120c6:	2300      	movs	r3, #0
 80120c8:	6063      	str	r3, [r4, #4]
 80120ca:	6923      	ldr	r3, [r4, #16]
 80120cc:	6023      	str	r3, [r4, #0]
 80120ce:	89a3      	ldrh	r3, [r4, #12]
 80120d0:	f043 0308 	orr.w	r3, r3, #8
 80120d4:	81a3      	strh	r3, [r4, #12]
 80120d6:	6923      	ldr	r3, [r4, #16]
 80120d8:	b94b      	cbnz	r3, 80120ee <__swsetup_r+0x7a>
 80120da:	89a3      	ldrh	r3, [r4, #12]
 80120dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80120e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120e4:	d003      	beq.n	80120ee <__swsetup_r+0x7a>
 80120e6:	4621      	mov	r1, r4
 80120e8:	4628      	mov	r0, r5
 80120ea:	f7ff fdb1 	bl	8011c50 <__smakebuf_r>
 80120ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120f2:	f013 0201 	ands.w	r2, r3, #1
 80120f6:	d00a      	beq.n	801210e <__swsetup_r+0x9a>
 80120f8:	2200      	movs	r2, #0
 80120fa:	60a2      	str	r2, [r4, #8]
 80120fc:	6962      	ldr	r2, [r4, #20]
 80120fe:	4252      	negs	r2, r2
 8012100:	61a2      	str	r2, [r4, #24]
 8012102:	6922      	ldr	r2, [r4, #16]
 8012104:	b942      	cbnz	r2, 8012118 <__swsetup_r+0xa4>
 8012106:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801210a:	d1c5      	bne.n	8012098 <__swsetup_r+0x24>
 801210c:	bd38      	pop	{r3, r4, r5, pc}
 801210e:	0799      	lsls	r1, r3, #30
 8012110:	bf58      	it	pl
 8012112:	6962      	ldrpl	r2, [r4, #20]
 8012114:	60a2      	str	r2, [r4, #8]
 8012116:	e7f4      	b.n	8012102 <__swsetup_r+0x8e>
 8012118:	2000      	movs	r0, #0
 801211a:	e7f7      	b.n	801210c <__swsetup_r+0x98>
 801211c:	20000290 	.word	0x20000290

08012120 <_raise_r>:
 8012120:	291f      	cmp	r1, #31
 8012122:	b538      	push	{r3, r4, r5, lr}
 8012124:	4605      	mov	r5, r0
 8012126:	460c      	mov	r4, r1
 8012128:	d904      	bls.n	8012134 <_raise_r+0x14>
 801212a:	2316      	movs	r3, #22
 801212c:	6003      	str	r3, [r0, #0]
 801212e:	f04f 30ff 	mov.w	r0, #4294967295
 8012132:	bd38      	pop	{r3, r4, r5, pc}
 8012134:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012136:	b112      	cbz	r2, 801213e <_raise_r+0x1e>
 8012138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801213c:	b94b      	cbnz	r3, 8012152 <_raise_r+0x32>
 801213e:	4628      	mov	r0, r5
 8012140:	f000 f830 	bl	80121a4 <_getpid_r>
 8012144:	4622      	mov	r2, r4
 8012146:	4601      	mov	r1, r0
 8012148:	4628      	mov	r0, r5
 801214a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801214e:	f000 b817 	b.w	8012180 <_kill_r>
 8012152:	2b01      	cmp	r3, #1
 8012154:	d00a      	beq.n	801216c <_raise_r+0x4c>
 8012156:	1c59      	adds	r1, r3, #1
 8012158:	d103      	bne.n	8012162 <_raise_r+0x42>
 801215a:	2316      	movs	r3, #22
 801215c:	6003      	str	r3, [r0, #0]
 801215e:	2001      	movs	r0, #1
 8012160:	e7e7      	b.n	8012132 <_raise_r+0x12>
 8012162:	2100      	movs	r1, #0
 8012164:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012168:	4620      	mov	r0, r4
 801216a:	4798      	blx	r3
 801216c:	2000      	movs	r0, #0
 801216e:	e7e0      	b.n	8012132 <_raise_r+0x12>

08012170 <raise>:
 8012170:	4b02      	ldr	r3, [pc, #8]	@ (801217c <raise+0xc>)
 8012172:	4601      	mov	r1, r0
 8012174:	6818      	ldr	r0, [r3, #0]
 8012176:	f7ff bfd3 	b.w	8012120 <_raise_r>
 801217a:	bf00      	nop
 801217c:	20000290 	.word	0x20000290

08012180 <_kill_r>:
 8012180:	b538      	push	{r3, r4, r5, lr}
 8012182:	4d07      	ldr	r5, [pc, #28]	@ (80121a0 <_kill_r+0x20>)
 8012184:	2300      	movs	r3, #0
 8012186:	4604      	mov	r4, r0
 8012188:	4608      	mov	r0, r1
 801218a:	4611      	mov	r1, r2
 801218c:	602b      	str	r3, [r5, #0]
 801218e:	f7ef fabf 	bl	8001710 <_kill>
 8012192:	1c43      	adds	r3, r0, #1
 8012194:	d102      	bne.n	801219c <_kill_r+0x1c>
 8012196:	682b      	ldr	r3, [r5, #0]
 8012198:	b103      	cbz	r3, 801219c <_kill_r+0x1c>
 801219a:	6023      	str	r3, [r4, #0]
 801219c:	bd38      	pop	{r3, r4, r5, pc}
 801219e:	bf00      	nop
 80121a0:	20002678 	.word	0x20002678

080121a4 <_getpid_r>:
 80121a4:	f7ef baac 	b.w	8001700 <_getpid>

080121a8 <_init>:
 80121a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121aa:	bf00      	nop
 80121ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121ae:	bc08      	pop	{r3}
 80121b0:	469e      	mov	lr, r3
 80121b2:	4770      	bx	lr

080121b4 <_fini>:
 80121b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121b6:	bf00      	nop
 80121b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121ba:	bc08      	pop	{r3}
 80121bc:	469e      	mov	lr, r3
 80121be:	4770      	bx	lr
