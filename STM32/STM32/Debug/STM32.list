
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014354  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  08014528  08014528  00015528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c58  08014c58  000162e4  2**0
                  CONTENTS
  4 .ARM          00000008  08014c58  08014c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c60  08014c60  000162e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c60  08014c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014c64  08014c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e4  20000000  08014c68  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006334  200002e4  08014f4c  000162e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20006618  08014f4c  00016618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000162e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028b34  00000000  00000000  00016314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000665c  00000000  00000000  0003ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef0  00000000  00000000  000454a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017ad  00000000  00000000  00047398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b13d  00000000  00000000  00048b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dc8b  00000000  00000000  00073c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e40d0  00000000  00000000  000a190d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001859dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009330  00000000  00000000  00185a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0018ed50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002e4 	.word	0x200002e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801450c 	.word	0x0801450c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002e8 	.word	0x200002e8
 800020c:	0801450c 	.word	0x0801450c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <MX_CAN1_Init+0x64>)
 800102a:	4a18      	ldr	r2, [pc, #96]	@ (800108c <MX_CAN1_Init+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800102e:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001030:	2206      	movs	r2, #6
 8001032:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800103a:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <MX_CAN1_Init+0x64>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001042:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001046:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_CAN1_Init+0x64>)
 800104a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800104e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001050:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <MX_CAN1_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <MX_CAN1_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	@ (8001088 <MX_CAN1_Init+0x64>)
 8001076:	f001 f839 	bl	80020ec <HAL_CAN_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001080:	f000 fb50 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000300 	.word	0x20000300
 800108c:	40006400 	.word	0x40006400

08001090 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_CAN2_Init+0x64>)
 8001096:	4a18      	ldr	r2, [pc, #96]	@ (80010f8 <MX_CAN2_Init+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_CAN2_Init+0x64>)
 800109c:	2206      	movs	r2, #6
 800109e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80010a0:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_CAN2_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010a6:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <MX_CAN2_Init+0x64>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_CAN2_Init+0x64>)
 80010ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010b2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_CAN2_Init+0x64>)
 80010b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80010ba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <MX_CAN2_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_CAN2_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_CAN2_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_CAN2_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <MX_CAN2_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_CAN2_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_CAN2_Init+0x64>)
 80010e2:	f001 f803 	bl	80020ec <HAL_CAN_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80010ec:	f000 fb1a 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000328 	.word	0x20000328
 80010f8:	40006800 	.word	0x40006800

080010fc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08c      	sub	sp, #48	@ 0x30
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a4b      	ldr	r2, [pc, #300]	@ (8001248 <HAL_CAN_MspInit+0x14c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d13e      	bne.n	800119c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800111e:	4b4b      	ldr	r3, [pc, #300]	@ (800124c <HAL_CAN_MspInit+0x150>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	4a49      	ldr	r2, [pc, #292]	@ (800124c <HAL_CAN_MspInit+0x150>)
 8001126:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001128:	4b48      	ldr	r3, [pc, #288]	@ (800124c <HAL_CAN_MspInit+0x150>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d10d      	bne.n	800114c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	4b46      	ldr	r3, [pc, #280]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	4a45      	ldr	r2, [pc, #276]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 800113a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800113e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001140:	4b43      	ldr	r3, [pc, #268]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	4b3f      	ldr	r3, [pc, #252]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	4a3e      	ldr	r2, [pc, #248]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	6313      	str	r3, [r2, #48]	@ 0x30
 800115c:	4b3c      	ldr	r3, [pc, #240]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001168:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800117a:	2309      	movs	r3, #9
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4833      	ldr	r0, [pc, #204]	@ (8001254 <HAL_CAN_MspInit+0x158>)
 8001186:	f002 fafd 	bl	8003784 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2105      	movs	r1, #5
 800118e:	2014      	movs	r0, #20
 8001190:	f001 fecc 	bl	8002f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001194:	2014      	movs	r0, #20
 8001196:	f001 fee5 	bl	8002f64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800119a:	e050      	b.n	800123e <HAL_CAN_MspInit+0x142>
  else if(canHandle->Instance==CAN2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001258 <HAL_CAN_MspInit+0x15c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d14b      	bne.n	800123e <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b29      	ldr	r3, [pc, #164]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a28      	ldr	r2, [pc, #160]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 80011b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80011c2:	4b22      	ldr	r3, [pc, #136]	@ (800124c <HAL_CAN_MspInit+0x150>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a20      	ldr	r2, [pc, #128]	@ (800124c <HAL_CAN_MspInit+0x150>)
 80011ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80011cc:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <HAL_CAN_MspInit+0x150>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d10d      	bne.n	80011f0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 80011de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	4a15      	ldr	r2, [pc, #84]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_CAN_MspInit+0x154>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800120c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800121e:	2309      	movs	r3, #9
 8001220:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	480a      	ldr	r0, [pc, #40]	@ (8001254 <HAL_CAN_MspInit+0x158>)
 800122a:	f002 faab 	bl	8003784 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2105      	movs	r1, #5
 8001232:	2040      	movs	r0, #64	@ 0x40
 8001234:	f001 fe7a 	bl	8002f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001238:	2040      	movs	r0, #64	@ 0x40
 800123a:	f001 fe93 	bl	8002f64 <HAL_NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3730      	adds	r7, #48	@ 0x30
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40006400 	.word	0x40006400
 800124c:	20000350 	.word	0x20000350
 8001250:	40023800 	.word	0x40023800
 8001254:	40020400 	.word	0x40020400
 8001258:	40006800 	.word	0x40006800

0800125c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <MX_DMA_Init+0x6c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <MX_DMA_Init+0x6c>)
 800126c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <MX_DMA_Init+0x6c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2105      	movs	r1, #5
 8001282:	2039      	movs	r0, #57	@ 0x39
 8001284:	f001 fe52 	bl	8002f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001288:	2039      	movs	r0, #57	@ 0x39
 800128a:	f001 fe6b 	bl	8002f64 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2105      	movs	r1, #5
 8001292:	203a      	movs	r0, #58	@ 0x3a
 8001294:	f001 fe4a 	bl	8002f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001298:	203a      	movs	r0, #58	@ 0x3a
 800129a:	f001 fe63 	bl	8002f64 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2105      	movs	r1, #5
 80012a2:	2045      	movs	r0, #69	@ 0x45
 80012a4:	f001 fe42 	bl	8002f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80012a8:	2045      	movs	r0, #69	@ 0x45
 80012aa:	f001 fe5b 	bl	8002f64 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2105      	movs	r1, #5
 80012b2:	2046      	movs	r0, #70	@ 0x46
 80012b4:	f001 fe3a 	bl	8002f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012b8:	2046      	movs	r0, #70	@ 0x46
 80012ba:	f001 fe53 	bl	8002f64 <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer,
        uint32_t *pulIdleTaskStackSize) {
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4a07      	ldr	r2, [pc, #28]	@ (80012f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80012dc:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4a06      	ldr	r2, [pc, #24]	@ (80012fc <vApplicationGetIdleTaskMemory+0x30>)
 80012e2:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2280      	movs	r2, #128	@ 0x80
 80012e8:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000368 	.word	0x20000368
 80012fc:	20000408 	.word	0x20000408

08001300 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b09c      	sub	sp, #112	@ 0x70
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of bufferMutex */
  osMutexDef(bufferMutex);
 8001306:	2300      	movs	r3, #0
 8001308:	66bb      	str	r3, [r7, #104]	@ 0x68
 800130a:	2300      	movs	r3, #0
 800130c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  bufferMutexHandle = osMutexCreate(osMutex(bufferMutex));
 800130e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001312:	4618      	mov	r0, r3
 8001314:	f00a f8fd 	bl	800b512 <osMutexCreate>
 8001318:	4603      	mov	r3, r0
 800131a:	4a26      	ldr	r2, [pc, #152]	@ (80013b4 <MX_FREERTOS_Init+0xb4>)
 800131c:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of JogCmdQueue */
  osMessageQDef(JogCmdQueue, 16, uint32_t);
 800131e:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <MX_FREERTOS_Init+0xb8>)
 8001320:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001324:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001326:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  JogCmdQueueHandle = osMessageCreate(osMessageQ(JogCmdQueue), NULL);
 800132a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f00a f906 	bl	800b542 <osMessageCreate>
 8001336:	4603      	mov	r3, r0
 8001338:	4a20      	ldr	r2, [pc, #128]	@ (80013bc <MX_FREERTOS_Init+0xbc>)
 800133a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800133c:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <MX_FREERTOS_Init+0xc0>)
 800133e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001342:	461d      	mov	r5, r3
 8001344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001348:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800134c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001350:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f00a f87b 	bl	800b452 <osThreadCreate>
 800135c:	4603      	mov	r3, r0
 800135e:	4a19      	ldr	r2, [pc, #100]	@ (80013c4 <MX_FREERTOS_Init+0xc4>)
 8001360:	6013      	str	r3, [r2, #0]

  /* definition and creation of JogTask */
  osThreadDef(JogTask, StartJogTask, osPriorityBelowNormal, 0, 128);
 8001362:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <MX_FREERTOS_Init+0xc8>)
 8001364:	f107 0420 	add.w	r4, r7, #32
 8001368:	461d      	mov	r5, r3
 800136a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001372:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  JogTaskHandle = osThreadCreate(osThread(JogTask), NULL);
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f00a f868 	bl	800b452 <osThreadCreate>
 8001382:	4603      	mov	r3, r0
 8001384:	4a11      	ldr	r2, [pc, #68]	@ (80013cc <MX_FREERTOS_Init+0xcc>)
 8001386:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorDataTask */
  osThreadDef(MotorDataTask, ProcessMotorDataTask, osPriorityLow, 0, 128);
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MX_FREERTOS_Init+0xd0>)
 800138a:	1d3c      	adds	r4, r7, #4
 800138c:	461d      	mov	r5, r3
 800138e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001392:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorDataTaskHandle = osThreadCreate(osThread(MotorDataTask), NULL);
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f00a f857 	bl	800b452 <osThreadCreate>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <MX_FREERTOS_Init+0xd4>)
 80013a8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80013aa:	bf00      	nop
 80013ac:	3770      	adds	r7, #112	@ 0x70
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bdb0      	pop	{r4, r5, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000364 	.word	0x20000364
 80013b8:	08014528 	.word	0x08014528
 80013bc:	20000360 	.word	0x20000360
 80013c0:	08014544 	.word	0x08014544
 80013c4:	20000354 	.word	0x20000354
 80013c8:	08014568 	.word	0x08014568
 80013cc:	20000358 	.word	0x20000358
 80013d0:	08014594 	.word	0x08014594
 80013d4:	2000035c 	.word	0x2000035c

080013d8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80013e0:	f00c fb32 	bl	800da48 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013e4:	2101      	movs	r1, #1
 80013e6:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <StartDefaultTask+0x20>)
 80013e8:	f002 fb79 	bl	8003ade <HAL_GPIO_TogglePin>
		osDelay(500);
 80013ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013f0:	f00a f87b 	bl	800b4ea <osDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013f4:	bf00      	nop
 80013f6:	e7f5      	b.n	80013e4 <StartDefaultTask+0xc>
 80013f8:	40020800 	.word	0x40020800

080013fc <StartJogTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartJogTask */
void StartJogTask(void const * argument)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJogTask */
	JogCmd *buf;
	osEvent evt;
	/* Infinite loop */
	for (;;) {
		evt = osMessageGet(JogCmdQueueHandle, osWaitForever);
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <StartJogTask+0x2c>)
 8001406:	6819      	ldr	r1, [r3, #0]
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	4618      	mov	r0, r3
 8001412:	f00a f8ff 	bl	800b614 <osMessageGet>
		if (evt.status == osEventMessage) {
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b10      	cmp	r3, #16
 800141a:	d1f3      	bne.n	8001404 <StartJogTask+0x8>
			buf = (JogCmd*) evt.value.p;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	617b      	str	r3, [r7, #20]

			Process_Cmd(buf);
 8001420:	6978      	ldr	r0, [r7, #20]
 8001422:	f00d fc45 	bl	800ecb0 <Process_Cmd>
		evt = osMessageGet(JogCmdQueueHandle, osWaitForever);
 8001426:	e7ed      	b.n	8001404 <StartJogTask+0x8>
 8001428:	20000360 	.word	0x20000360

0800142c <ProcessMotorDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ProcessMotorDataTask */
void ProcessMotorDataTask(void const * argument)
{
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	b08d      	sub	sp, #52	@ 0x34
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ProcessMotorDataTask */
	uint8_t data[40] = {0XAA, 0X55};
 8001434:	f245 53aa 	movw	r3, #21930	@ 0x55aa
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	2224      	movs	r2, #36	@ 0x24
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f00f fce7 	bl	8010e16 <memset>
	data[38] = 0xcc; data[39] = 0x88;
 8001448:	23cc      	movs	r3, #204	@ 0xcc
 800144a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800144e:	2388      	movs	r3, #136	@ 0x88
 8001450:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  /* Infinite loop */
  for(;;)
  {
	memcpy(&data[2], &robot_fb_data, sizeof(robot_fb_data));
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <ProcessMotorDataTask+0x70>)
 8001456:	f107 000a 	add.w	r0, r7, #10
 800145a:	f103 0420 	add.w	r4, r3, #32
 800145e:	4602      	mov	r2, r0
 8001460:	4619      	mov	r1, r3
 8001462:	f8d1 c000 	ldr.w	ip, [r1]
 8001466:	684e      	ldr	r6, [r1, #4]
 8001468:	688d      	ldr	r5, [r1, #8]
 800146a:	68c9      	ldr	r1, [r1, #12]
 800146c:	f8c2 c000 	str.w	ip, [r2]
 8001470:	6056      	str	r6, [r2, #4]
 8001472:	6095      	str	r5, [r2, #8]
 8001474:	60d1      	str	r1, [r2, #12]
 8001476:	3310      	adds	r3, #16
 8001478:	3010      	adds	r0, #16
 800147a:	42a3      	cmp	r3, r4
 800147c:	d1ef      	bne.n	800145e <ProcessMotorDataTask+0x32>
 800147e:	4602      	mov	r2, r0
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6013      	str	r3, [r2, #0]
	CDC_Transmit_FS((uint8_t*)data, sizeof(data));
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	2128      	movs	r1, #40	@ 0x28
 800148a:	4618      	mov	r0, r3
 800148c:	f00c fbf0 	bl	800dc70 <CDC_Transmit_FS>
    osDelay(5);
 8001490:	2005      	movs	r0, #5
 8001492:	f00a f82a 	bl	800b4ea <osDelay>
	memcpy(&data[2], &robot_fb_data, sizeof(robot_fb_data));
 8001496:	bf00      	nop
 8001498:	e7dc      	b.n	8001454 <ProcessMotorDataTask+0x28>
 800149a:	bf00      	nop
 800149c:	200064a8 	.word	0x200064a8

080014a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b3b      	ldr	r3, [pc, #236]	@ (80015a8 <MX_GPIO_Init+0x108>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a3a      	ldr	r2, [pc, #232]	@ (80015a8 <MX_GPIO_Init+0x108>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b38      	ldr	r3, [pc, #224]	@ (80015a8 <MX_GPIO_Init+0x108>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b34      	ldr	r3, [pc, #208]	@ (80015a8 <MX_GPIO_Init+0x108>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a33      	ldr	r2, [pc, #204]	@ (80015a8 <MX_GPIO_Init+0x108>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b31      	ldr	r3, [pc, #196]	@ (80015a8 <MX_GPIO_Init+0x108>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <MX_GPIO_Init+0x108>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a2c      	ldr	r2, [pc, #176]	@ (80015a8 <MX_GPIO_Init+0x108>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <MX_GPIO_Init+0x108>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <MX_GPIO_Init+0x108>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a25      	ldr	r2, [pc, #148]	@ (80015a8 <MX_GPIO_Init+0x108>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b23      	ldr	r3, [pc, #140]	@ (80015a8 <MX_GPIO_Init+0x108>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <MX_GPIO_Init+0x108>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a1e      	ldr	r2, [pc, #120]	@ (80015a8 <MX_GPIO_Init+0x108>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <MX_GPIO_Init+0x108>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER1_Pin|POWER_5V_EN_Pin|POWER2_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	f246 0110 	movw	r1, #24592	@ 0x6010
 8001548:	4818      	ldr	r0, [pc, #96]	@ (80015ac <MX_GPIO_Init+0x10c>)
 800154a:	f002 faaf 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS485_DIR1_Pin|LED_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001554:	4815      	ldr	r0, [pc, #84]	@ (80015ac <MX_GPIO_Init+0x10c>)
 8001556:	f002 faa9 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DIR2_GPIO_Port, RS485_DIR2_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2108      	movs	r1, #8
 800155e:	4814      	ldr	r0, [pc, #80]	@ (80015b0 <MX_GPIO_Init+0x110>)
 8001560:	f002 faa4 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = POWER1_Pin|POWER_5V_EN_Pin|RS485_DIR1_Pin|LED_Pin
 8001564:	f24e 0311 	movw	r3, #57361	@ 0xe011
 8001568:	617b      	str	r3, [r7, #20]
                          |POWER2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	480b      	ldr	r0, [pc, #44]	@ (80015ac <MX_GPIO_Init+0x10c>)
 800157e:	f002 f901 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_DIR2_Pin;
 8001582:	2308      	movs	r3, #8
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_DIR2_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <MX_GPIO_Init+0x110>)
 800159a:	f002 f8f3 	bl	8003784 <HAL_GPIO_Init>

}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	@ 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020800 	.word	0x40020800
 80015b0:	40020400 	.word	0x40020400

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f000 fd32 	bl	8002020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 f834 	bl	8001628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f7ff ff6e 	bl	80014a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80015c4:	f7ff fe4a 	bl	800125c <MX_DMA_Init>
  MX_CAN1_Init();
 80015c8:	f7ff fd2c 	bl	8001024 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80015cc:	f000 fae8 	bl	8001ba0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80015d0:	f000 fb12 	bl	8001bf8 <MX_USART6_UART_Init>
  MX_CAN2_Init();
 80015d4:	f7ff fd5c 	bl	8001090 <MX_CAN2_Init>
  MX_UART5_Init();
 80015d8:	f000 fab8 	bl	8001b4c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	CAN_Filter_Init();
 80015dc:	f00d f9f8 	bl	800e9d0 <CAN_Filter_Init>
	BSP_Init();
 80015e0:	f00d f8e0 	bl	800e7a4 <BSP_Init>
	Board_Init();
 80015e4:	f00d f872 	bl	800e6cc <Board_Init>
//	        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
//	01 00 05 00 00 7A 44 0A D7 A3 3B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015e8:	f7ff fe8a 	bl	8001300 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015ec:	f009 ff2a 	bl	800b444 <osKernelStart>
    /* USER CODE BEGIN 3 */
//		GO_Motor_SetCmd(board.steer_motor, GO_MODE_W, 0, -2, 0);
//		GO_Motor_Send(board.steer_motor);
//		A1_Motor_SetCmd(board.roll_motor, A1_MODE_W, 0, 1, 0);
//		A1_Motor_Send(board.roll_motor);
		RE35_Motor_SetCmd(board.cable_motor, VEL, 1000, 0);
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <main+0x6c>)
 80015f2:	6898      	ldr	r0, [r3, #8]
 80015f4:	2300      	movs	r3, #0
 80015f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015fa:	2103      	movs	r1, #3
 80015fc:	f00d fc42 	bl	800ee84 <RE35_Motor_SetCmd>
		RE35_Motor_Send(board.cable_motor);
 8001600:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <main+0x6c>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4618      	mov	r0, r3
 8001606:	f00d fcbe 	bl	800ef86 <RE35_Motor_Send>
//		if(HAL_UART_Transmit(&huart5, dada, sizeof(dada), 100)!=HAL_OK)
//			Error_Handler();
//
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800160a:	2101      	movs	r1, #1
 800160c:	4805      	ldr	r0, [pc, #20]	@ (8001624 <main+0x70>)
 800160e:	f002 fa66 	bl	8003ade <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001612:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001616:	f000 fd45 	bl	80020a4 <HAL_Delay>
		RE35_Motor_SetCmd(board.cable_motor, VEL, 1000, 0);
 800161a:	bf00      	nop
 800161c:	e7e8      	b.n	80015f0 <main+0x3c>
 800161e:	bf00      	nop
 8001620:	200061e8 	.word	0x200061e8
 8001624:	40020800 	.word	0x40020800

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b094      	sub	sp, #80	@ 0x50
 800162c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	2234      	movs	r2, #52	@ 0x34
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f00f fbed 	bl	8010e16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <SystemClock_Config+0xd0>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	4a28      	ldr	r2, [pc, #160]	@ (80016f8 <SystemClock_Config+0xd0>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	@ 0x40
 800165c:	4b26      	ldr	r3, [pc, #152]	@ (80016f8 <SystemClock_Config+0xd0>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001668:	2300      	movs	r3, #0
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <SystemClock_Config+0xd4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <SystemClock_Config+0xd4>)
 8001672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <SystemClock_Config+0xd4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001684:	2301      	movs	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800168c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168e:	2302      	movs	r3, #2
 8001690:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001692:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001696:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001698:	230c      	movs	r3, #12
 800169a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800169c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016a6:	2307      	movs	r3, #7
 80016a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016aa:	2302      	movs	r3, #2
 80016ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4618      	mov	r0, r3
 80016b4:	f004 faea 	bl	8005c8c <HAL_RCC_OscConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016be:	f000 f831 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c2:	230f      	movs	r3, #15
 80016c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c6:	2302      	movs	r3, #2
 80016c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	2105      	movs	r1, #5
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fcb3 	bl	800504c <HAL_RCC_ClockConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80016ec:	f000 f81a 	bl	8001724 <Error_Handler>
  }
}
 80016f0:	bf00      	nop
 80016f2:	3750      	adds	r7, #80	@ 0x50
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40007000 	.word	0x40007000

08001700 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001712:	f000 fca7 	bl	8002064 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40001000 	.word	0x40001000

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <Error_Handler+0x8>

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_MspInit+0x54>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <HAL_MspInit+0x54>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <HAL_MspInit+0x54>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_MspInit+0x54>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <HAL_MspInit+0x54>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <HAL_MspInit+0x54>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	210f      	movs	r1, #15
 8001772:	f06f 0001 	mvn.w	r0, #1
 8001776:	f001 fbd9 	bl	8002f2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	@ 0x38
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4b33      	ldr	r3, [pc, #204]	@ (800186c <HAL_InitTick+0xe4>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	4a32      	ldr	r2, [pc, #200]	@ (800186c <HAL_InitTick+0xe4>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a8:	4b30      	ldr	r3, [pc, #192]	@ (800186c <HAL_InitTick+0xe4>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017b4:	f107 0210 	add.w	r2, r7, #16
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 fd5e 	bl	8005280 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d103      	bne.n	80017d6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017ce:	f003 fd2f 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 80017d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80017d4:	e004      	b.n	80017e0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017d6:	f003 fd2b 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 80017da:	4603      	mov	r3, r0
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017e2:	4a23      	ldr	r2, [pc, #140]	@ (8001870 <HAL_InitTick+0xe8>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	0c9b      	lsrs	r3, r3, #18
 80017ea:	3b01      	subs	r3, #1
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017ee:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <HAL_InitTick+0xec>)
 80017f0:	4a21      	ldr	r2, [pc, #132]	@ (8001878 <HAL_InitTick+0xf0>)
 80017f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001874 <HAL_InitTick+0xec>)
 80017f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001874 <HAL_InitTick+0xec>)
 80017fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001800:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001802:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <HAL_InitTick+0xec>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <HAL_InitTick+0xec>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180e:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_InitTick+0xec>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001814:	4817      	ldr	r0, [pc, #92]	@ (8001874 <HAL_InitTick+0xec>)
 8001816:	f004 fcd7 	bl	80061c8 <HAL_TIM_Base_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001820:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001824:	2b00      	cmp	r3, #0
 8001826:	d11b      	bne.n	8001860 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001828:	4812      	ldr	r0, [pc, #72]	@ (8001874 <HAL_InitTick+0xec>)
 800182a:	f004 fd27 	bl	800627c <HAL_TIM_Base_Start_IT>
 800182e:	4603      	mov	r3, r0
 8001830:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001834:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001838:	2b00      	cmp	r3, #0
 800183a:	d111      	bne.n	8001860 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800183c:	2036      	movs	r0, #54	@ 0x36
 800183e:	f001 fb91 	bl	8002f64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d808      	bhi.n	800185a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	2036      	movs	r0, #54	@ 0x36
 800184e:	f001 fb6d 	bl	8002f2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <HAL_InitTick+0xf4>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e002      	b.n	8001860 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001860:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001864:	4618      	mov	r0, r3
 8001866:	3738      	adds	r7, #56	@ 0x38
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	431bde83 	.word	0x431bde83
 8001874:	20000608 	.word	0x20000608
 8001878:	40001000 	.word	0x40001000
 800187c:	20000004 	.word	0x20000004

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <NMI_Handler+0x4>

08001888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <MemManage_Handler+0x4>

08001898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <CAN1_RX0_IRQHandler+0x10>)
 80018be:	f001 f84d 	bl	800295c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000300 	.word	0x20000300

080018cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018d0:	4803      	ldr	r0, [pc, #12]	@ (80018e0 <USART1_IRQHandler+0x14>)
 80018d2:	f005 f90b 	bl	8006aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	USER_UART_IRQHandler(&huart1);
 80018d6:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <USART1_IRQHandler+0x14>)
 80018d8:	f00d f82a 	bl	800e930 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	2000069c 	.word	0x2000069c

080018e4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <UART5_IRQHandler+0x10>)
 80018ea:	f005 f8ff 	bl	8006aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000654 	.word	0x20000654

080018f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <TIM6_DAC_IRQHandler+0x10>)
 80018fe:	f004 fd2d 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000608 	.word	0x20000608

0800190c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <DMA2_Stream1_IRQHandler+0x10>)
 8001912:	f001 fccd 	bl	80032b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200007ec 	.word	0x200007ec

08001920 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <DMA2_Stream2_IRQHandler+0x10>)
 8001926:	f001 fcc3 	bl	80032b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000072c 	.word	0x2000072c

08001934 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <CAN2_RX0_IRQHandler+0x10>)
 800193a:	f001 f80f 	bl	800295c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000328 	.word	0x20000328

08001948 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <OTG_FS_IRQHandler+0x10>)
 800194e:	f002 fa2b 	bl	8003da8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20005ae4 	.word	0x20005ae4

0800195c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <DMA2_Stream6_IRQHandler+0x10>)
 8001962:	f001 fca5 	bl	80032b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000084c 	.word	0x2000084c

08001970 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <DMA2_Stream7_IRQHandler+0x10>)
 8001976:	f001 fc9b 	bl	80032b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000078c 	.word	0x2000078c

08001984 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001988:	4803      	ldr	r0, [pc, #12]	@ (8001998 <USART6_IRQHandler+0x14>)
 800198a:	f005 f8af 	bl	8006aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  USER_UART_IRQHandler(&huart6);
 800198e:	4802      	ldr	r0, [pc, #8]	@ (8001998 <USART6_IRQHandler+0x14>)
 8001990:	f00c ffce 	bl	800e930 <USER_UART_IRQHandler>
  /* USER CODE END USART6_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200006e4 	.word	0x200006e4

0800199c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
	return 1;
 80019a0:	2301      	movs	r3, #1
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_kill>:

int _kill(int pid, int sig) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80019b6:	f00f fae7 	bl	8010f88 <__errno>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2216      	movs	r2, #22
 80019be:	601a      	str	r2, [r3, #0]
	return -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_exit>:

void _exit(int status) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ffe7 	bl	80019ac <_kill>
	while (1) {
 80019de:	bf00      	nop
 80019e0:	e7fd      	b.n	80019de <_exit+0x12>

080019e2 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e00a      	b.n	8001a0a <_read+0x28>
		*ptr++ = __io_getchar();
 80019f4:	f3af 8000 	nop.w
 80019f8:	4601      	mov	r1, r0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	60ba      	str	r2, [r7, #8]
 8001a00:	b2ca      	uxtb	r2, r1
 8001a02:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3301      	adds	r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	dbf0      	blt.n	80019f4 <_read+0x12>
	}

	return len;
 8001a12:	687b      	ldr	r3, [r7, #4]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	e009      	b.n	8001a42 <_write+0x26>
		__io_putchar(*ptr++);
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	60ba      	str	r2, [r7, #8]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f00e f994 	bl	800fd64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	dbf1      	blt.n	8001a2e <_write+0x12>
	}
	return len;
 8001a4a:	687b      	ldr	r3, [r7, #4]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_close>:

int _close(int file) {
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_fstat>:

int _fstat(int file, struct stat *st) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a7c:	605a      	str	r2, [r3, #4]
	return 0;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_isatty>:

int _isatty(int file) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001a94:	2301      	movs	r3, #1
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001aa2:	b480      	push	{r7}
 8001aa4:	b085      	sub	sp, #20
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8001ac4:	4a14      	ldr	r2, [pc, #80]	@ (8001b18 <_sbrk+0x5c>)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <_sbrk+0x60>)
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001ad0:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <_sbrk+0x64>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	@ (8001b24 <_sbrk+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d207      	bcs.n	8001afc <_sbrk+0x40>
		errno = ENOMEM;
 8001aec:	f00f fa4c 	bl	8010f88 <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001b02:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20020000 	.word	0x20020000
 8001b1c:	00000800 	.word	0x00000800
 8001b20:	20000650 	.word	0x20000650
 8001b24:	20006618 	.word	0x20006618

08001b28 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	@ (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <MX_UART5_Init+0x4c>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <MX_UART5_Init+0x50>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <MX_UART5_Init+0x4c>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <MX_UART5_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <MX_UART5_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <MX_UART5_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <MX_UART5_Init+0x4c>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <MX_UART5_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <MX_UART5_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_UART5_Init+0x4c>)
 8001b84:	f004 fdc2 	bl	800670c <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001b8e:	f7ff fdc9 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000654 	.word	0x20000654
 8001b9c:	40005000 	.word	0x40005000

08001ba0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <MX_USART1_UART_Init+0x4c>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <MX_USART1_UART_Init+0x50>)
 8001ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800000;
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bac:	4a11      	ldr	r2, [pc, #68]	@ (8001bf4 <MX_USART1_UART_Init+0x54>)
 8001bae:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bc4:	220c      	movs	r2, #12
 8001bc6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001bce:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_USART1_UART_Init+0x4c>)
 8001bd8:	f004 fd98 	bl	800670c <HAL_UART_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001be2:	f7ff fd9f 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000069c 	.word	0x2000069c
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	00493e00 	.word	0x00493e00

08001bf8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <MX_USART6_UART_Init+0x4c>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <MX_USART6_UART_Init+0x50>)
 8001c00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 4000000;
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <MX_USART6_UART_Init+0x4c>)
 8001c04:	4a11      	ldr	r2, [pc, #68]	@ (8001c4c <MX_USART6_UART_Init+0x54>)
 8001c06:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c08:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <MX_USART6_UART_Init+0x4c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <MX_USART6_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <MX_USART6_UART_Init+0x4c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <MX_USART6_UART_Init+0x4c>)
 8001c1c:	220c      	movs	r2, #12
 8001c1e:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <MX_USART6_UART_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <MX_USART6_UART_Init+0x4c>)
 8001c28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <MX_USART6_UART_Init+0x4c>)
 8001c30:	f004 fd6c 	bl	800670c <HAL_UART_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c3a:	f7ff fd73 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200006e4 	.word	0x200006e4
 8001c48:	40011400 	.word	0x40011400
 8001c4c:	003d0900 	.word	0x003d0900

08001c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08e      	sub	sp, #56	@ 0x38
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a78      	ldr	r2, [pc, #480]	@ (8001e50 <HAL_UART_MspInit+0x200>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d153      	bne.n	8001d1a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
 8001c76:	4b77      	ldr	r3, [pc, #476]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	4a76      	ldr	r2, [pc, #472]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001c7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c82:	4b74      	ldr	r3, [pc, #464]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	4b70      	ldr	r3, [pc, #448]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	4a6f      	ldr	r2, [pc, #444]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	4b69      	ldr	r3, [pc, #420]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	4a68      	ldr	r2, [pc, #416]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cba:	4b66      	ldr	r3, [pc, #408]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	485d      	ldr	r0, [pc, #372]	@ (8001e58 <HAL_UART_MspInit+0x208>)
 8001ce4:	f001 fd4e 	bl	8003784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d00:	4619      	mov	r1, r3
 8001d02:	4856      	ldr	r0, [pc, #344]	@ (8001e5c <HAL_UART_MspInit+0x20c>)
 8001d04:	f001 fd3e 	bl	8003784 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2105      	movs	r1, #5
 8001d0c:	2035      	movs	r0, #53	@ 0x35
 8001d0e:	f001 f90d 	bl	8002f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001d12:	2035      	movs	r0, #53	@ 0x35
 8001d14:	f001 f926 	bl	8002f64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001d18:	e146      	b.n	8001fa8 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a50      	ldr	r2, [pc, #320]	@ (8001e60 <HAL_UART_MspInit+0x210>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	f040 80a9 	bne.w	8001e78 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	4a49      	ldr	r2, [pc, #292]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001d30:	f043 0310 	orr.w	r3, r3, #16
 8001d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d36:	4b47      	ldr	r3, [pc, #284]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b43      	ldr	r3, [pc, #268]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	4a42      	ldr	r2, [pc, #264]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d52:	4b40      	ldr	r3, [pc, #256]	@ (8001e54 <HAL_UART_MspInit+0x204>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d5e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d70:	2307      	movs	r3, #7
 8001d72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d78:	4619      	mov	r1, r3
 8001d7a:	483a      	ldr	r0, [pc, #232]	@ (8001e64 <HAL_UART_MspInit+0x214>)
 8001d7c:	f001 fd02 	bl	8003784 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d80:	4b39      	ldr	r3, [pc, #228]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001d82:	4a3a      	ldr	r2, [pc, #232]	@ (8001e6c <HAL_UART_MspInit+0x21c>)
 8001d84:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d86:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001d88:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8e:	4b36      	ldr	r3, [pc, #216]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d94:	4b34      	ldr	r3, [pc, #208]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d9a:	4b33      	ldr	r3, [pc, #204]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001d9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001da0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da2:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001dae:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001db4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001db6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dba:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001dc2:	4829      	ldr	r0, [pc, #164]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001dc4:	f001 f8dc 	bl	8002f80 <HAL_DMA_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001dce:	f7ff fca9 	bl	8001724 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a24      	ldr	r2, [pc, #144]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001dd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dd8:	4a23      	ldr	r2, [pc, #140]	@ (8001e68 <HAL_UART_MspInit+0x218>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001dde:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001de0:	4a24      	ldr	r2, [pc, #144]	@ (8001e74 <HAL_UART_MspInit+0x224>)
 8001de2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001de4:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001de6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dec:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001dee:	2240      	movs	r2, #64	@ 0x40
 8001df0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001dfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dfe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e0c:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001e12:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001e14:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e18:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e20:	4813      	ldr	r0, [pc, #76]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001e22:	f001 f8ad 	bl	8002f80 <HAL_DMA_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8001e2c:	f7ff fc7a 	bl	8001724 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a0f      	ldr	r2, [pc, #60]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001e34:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e36:	4a0e      	ldr	r2, [pc, #56]	@ (8001e70 <HAL_UART_MspInit+0x220>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2105      	movs	r1, #5
 8001e40:	2025      	movs	r0, #37	@ 0x25
 8001e42:	f001 f873 	bl	8002f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e46:	2025      	movs	r0, #37	@ 0x25
 8001e48:	f001 f88c 	bl	8002f64 <HAL_NVIC_EnableIRQ>
}
 8001e4c:	e0ac      	b.n	8001fa8 <HAL_UART_MspInit+0x358>
 8001e4e:	bf00      	nop
 8001e50:	40005000 	.word	0x40005000
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	40011000 	.word	0x40011000
 8001e64:	40020000 	.word	0x40020000
 8001e68:	2000072c 	.word	0x2000072c
 8001e6c:	40026440 	.word	0x40026440
 8001e70:	2000078c 	.word	0x2000078c
 8001e74:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART6)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fb0 <HAL_UART_MspInit+0x360>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	f040 8092 	bne.w	8001fa8 <HAL_UART_MspInit+0x358>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb4 <HAL_UART_MspInit+0x364>)
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8c:	4a49      	ldr	r2, [pc, #292]	@ (8001fb4 <HAL_UART_MspInit+0x364>)
 8001e8e:	f043 0320 	orr.w	r3, r3, #32
 8001e92:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e94:	4b47      	ldr	r3, [pc, #284]	@ (8001fb4 <HAL_UART_MspInit+0x364>)
 8001e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	4b43      	ldr	r3, [pc, #268]	@ (8001fb4 <HAL_UART_MspInit+0x364>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	4a42      	ldr	r2, [pc, #264]	@ (8001fb4 <HAL_UART_MspInit+0x364>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb0:	4b40      	ldr	r3, [pc, #256]	@ (8001fb4 <HAL_UART_MspInit+0x364>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ebc:	23c0      	movs	r3, #192	@ 0xc0
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4838      	ldr	r0, [pc, #224]	@ (8001fb8 <HAL_UART_MspInit+0x368>)
 8001ed8:	f001 fc54 	bl	8003784 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001edc:	4b37      	ldr	r3, [pc, #220]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001ede:	4a38      	ldr	r2, [pc, #224]	@ (8001fc0 <HAL_UART_MspInit+0x370>)
 8001ee0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001ee2:	4b36      	ldr	r3, [pc, #216]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001ee4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001ee8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eea:	4b34      	ldr	r3, [pc, #208]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef0:	4b32      	ldr	r3, [pc, #200]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef6:	4b31      	ldr	r3, [pc, #196]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001ef8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001efc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001efe:	4b2f      	ldr	r3, [pc, #188]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f04:	4b2d      	ldr	r3, [pc, #180]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f10:	4b2a      	ldr	r3, [pc, #168]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001f12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f16:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f18:	4b28      	ldr	r3, [pc, #160]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001f1e:	4827      	ldr	r0, [pc, #156]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001f20:	f001 f82e 	bl	8002f80 <HAL_DMA_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_UART_MspInit+0x2de>
      Error_Handler();
 8001f2a:	f7ff fbfb 	bl	8001724 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a22      	ldr	r2, [pc, #136]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001f32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f34:	4a21      	ldr	r2, [pc, #132]	@ (8001fbc <HAL_UART_MspInit+0x36c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001f3a:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f3c:	4a22      	ldr	r2, [pc, #136]	@ (8001fc8 <HAL_UART_MspInit+0x378>)
 8001f3e:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001f40:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f42:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001f46:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f4a:	2240      	movs	r2, #64	@ 0x40
 8001f4c:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f5a:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f62:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001f68:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f70:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f74:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f76:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001f7c:	4811      	ldr	r0, [pc, #68]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f7e:	f000 ffff 	bl	8002f80 <HAL_DMA_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8001f88:	f7ff fbcc 	bl	8001724 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f90:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f92:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc4 <HAL_UART_MspInit+0x374>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2105      	movs	r1, #5
 8001f9c:	2047      	movs	r0, #71	@ 0x47
 8001f9e:	f000 ffc5 	bl	8002f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001fa2:	2047      	movs	r0, #71	@ 0x47
 8001fa4:	f000 ffde 	bl	8002f64 <HAL_NVIC_EnableIRQ>
}
 8001fa8:	bf00      	nop
 8001faa:	3738      	adds	r7, #56	@ 0x38
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40011400 	.word	0x40011400
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	200007ec 	.word	0x200007ec
 8001fc0:	40026428 	.word	0x40026428
 8001fc4:	2000084c 	.word	0x2000084c
 8001fc8:	400264a0 	.word	0x400264a0

08001fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd0:	480d      	ldr	r0, [pc, #52]	@ (8002008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fd2:	490e      	ldr	r1, [pc, #56]	@ (800200c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8002010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fe8:	4c0b      	ldr	r4, [pc, #44]	@ (8002018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ff6:	f7ff fd97 	bl	8001b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f00e ffcb 	bl	8010f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffe:	f7ff fad9 	bl	80015b4 <main>
  bx  lr    
 8002002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8002010:	08014c68 	.word	0x08014c68
  ldr r2, =_sbss
 8002014:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8002018:	20006618 	.word	0x20006618

0800201c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC_IRQHandler>
	...

08002020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002024:	4b0e      	ldr	r3, [pc, #56]	@ (8002060 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0d      	ldr	r2, [pc, #52]	@ (8002060 <HAL_Init+0x40>)
 800202a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800202e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002030:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <HAL_Init+0x40>)
 8002036:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800203a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800203c:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <HAL_Init+0x40>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a07      	ldr	r2, [pc, #28]	@ (8002060 <HAL_Init+0x40>)
 8002042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002048:	2003      	movs	r0, #3
 800204a:	f000 ff64 	bl	8002f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204e:	200f      	movs	r0, #15
 8002050:	f7ff fb9a 	bl	8001788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002054:	f7ff fb6c 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023c00 	.word	0x40023c00

08002064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <HAL_IncTick+0x20>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_IncTick+0x24>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4413      	add	r3, r2
 8002074:	4a04      	ldr	r2, [pc, #16]	@ (8002088 <HAL_IncTick+0x24>)
 8002076:	6013      	str	r3, [r2, #0]
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000008 	.word	0x20000008
 8002088:	200008ac 	.word	0x200008ac

0800208c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return uwTick;
 8002090:	4b03      	ldr	r3, [pc, #12]	@ (80020a0 <HAL_GetTick+0x14>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	200008ac 	.word	0x200008ac

080020a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ac:	f7ff ffee 	bl	800208c <HAL_GetTick>
 80020b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020bc:	d005      	beq.n	80020ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <HAL_Delay+0x44>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ca:	bf00      	nop
 80020cc:	f7ff ffde 	bl	800208c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d8f7      	bhi.n	80020cc <HAL_Delay+0x28>
  {
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000008 	.word	0x20000008

080020ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0ed      	b.n	80022da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fff6 	bl	80010fc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002120:	f7ff ffb4 	bl	800208c <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002126:	e012      	b.n	800214e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002128:	f7ff ffb0 	bl	800208c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b0a      	cmp	r3, #10
 8002134:	d90b      	bls.n	800214e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2205      	movs	r2, #5
 8002146:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0c5      	b.n	80022da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0e5      	beq.n	8002128 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0202 	bic.w	r2, r2, #2
 800216a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800216c:	f7ff ff8e 	bl	800208c <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002172:	e012      	b.n	800219a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002174:	f7ff ff8a 	bl	800208c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b0a      	cmp	r3, #10
 8002180:	d90b      	bls.n	800219a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2205      	movs	r2, #5
 8002192:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e09f      	b.n	80022da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1e5      	bne.n	8002174 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7e1b      	ldrb	r3, [r3, #24]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d108      	bne.n	80021c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e007      	b.n	80021d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7e5b      	ldrb	r3, [r3, #25]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d108      	bne.n	80021ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	e007      	b.n	80021fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7e9b      	ldrb	r3, [r3, #26]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d108      	bne.n	8002216 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0220 	orr.w	r2, r2, #32
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e007      	b.n	8002226 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0220 	bic.w	r2, r2, #32
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7edb      	ldrb	r3, [r3, #27]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d108      	bne.n	8002240 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0210 	bic.w	r2, r2, #16
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e007      	b.n	8002250 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0210 	orr.w	r2, r2, #16
 800224e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7f1b      	ldrb	r3, [r3, #28]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d108      	bne.n	800226a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0208 	orr.w	r2, r2, #8
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e007      	b.n	800227a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0208 	bic.w	r2, r2, #8
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7f5b      	ldrb	r3, [r3, #29]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d108      	bne.n	8002294 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0204 	orr.w	r2, r2, #4
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	e007      	b.n	80022a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0204 	bic.w	r2, r2, #4
 80022a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	ea42 0103 	orr.w	r1, r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	1e5a      	subs	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d003      	beq.n	800230a <HAL_CAN_ConfigFilter+0x26>
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	2b02      	cmp	r3, #2
 8002306:	f040 80be 	bne.w	8002486 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800230a:	4b65      	ldr	r3, [pc, #404]	@ (80024a0 <HAL_CAN_ConfigFilter+0x1bc>)
 800230c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002324:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	431a      	orrs	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	2201      	movs	r2, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	43db      	mvns	r3, r3
 800235c:	401a      	ands	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d123      	bne.n	80023b4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	43db      	mvns	r3, r3
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800238e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3248      	adds	r2, #72	@ 0x48
 8002394:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023aa:	6979      	ldr	r1, [r7, #20]
 80023ac:	3348      	adds	r3, #72	@ 0x48
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	440b      	add	r3, r1
 80023b2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d122      	bne.n	8002402 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3248      	adds	r2, #72	@ 0x48
 80023e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023f8:	6979      	ldr	r1, [r7, #20]
 80023fa:	3348      	adds	r3, #72	@ 0x48
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43db      	mvns	r3, r3
 8002414:	401a      	ands	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800241c:	e007      	b.n	800242e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	431a      	orrs	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	43db      	mvns	r3, r3
 8002440:	401a      	ands	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002448:	e007      	b.n	800245a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	431a      	orrs	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d107      	bne.n	8002472 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	431a      	orrs	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002478:	f023 0201 	bic.w	r2, r3, #1
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e006      	b.n	8002494 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	40006400 	.word	0x40006400

080024a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d12e      	bne.n	8002516 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024d0:	f7ff fddc 	bl	800208c <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024d6:	e012      	b.n	80024fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024d8:	f7ff fdd8 	bl	800208c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b0a      	cmp	r3, #10
 80024e4:	d90b      	bls.n	80024fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2205      	movs	r2, #5
 80024f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e012      	b.n	8002524 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e5      	bne.n	80024d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e006      	b.n	8002524 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
  }
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	@ 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002540:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800254a:	7ffb      	ldrb	r3, [r7, #31]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d003      	beq.n	8002558 <HAL_CAN_AddTxMessage+0x2c>
 8002550:	7ffb      	ldrb	r3, [r7, #31]
 8002552:	2b02      	cmp	r3, #2
 8002554:	f040 80ad 	bne.w	80026b2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10a      	bne.n	8002578 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8095 	beq.w	80026a2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	0e1b      	lsrs	r3, r3, #24
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002582:	2201      	movs	r2, #1
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	409a      	lsls	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10d      	bne.n	80025b0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800259e:	68f9      	ldr	r1, [r7, #12]
 80025a0:	6809      	ldr	r1, [r1, #0]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3318      	adds	r3, #24
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	440b      	add	r3, r1
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e00f      	b.n	80025d0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025c0:	68f9      	ldr	r1, [r7, #12]
 80025c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3318      	adds	r3, #24
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	440b      	add	r3, r1
 80025ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3318      	adds	r3, #24
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	440b      	add	r3, r1
 80025e0:	3304      	adds	r3, #4
 80025e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	7d1b      	ldrb	r3, [r3, #20]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d111      	bne.n	8002610 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3318      	adds	r3, #24
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4413      	add	r3, r2
 80025f8:	3304      	adds	r3, #4
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	6811      	ldr	r1, [r2, #0]
 8002600:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3318      	adds	r3, #24
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	440b      	add	r3, r1
 800260c:	3304      	adds	r3, #4
 800260e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3307      	adds	r3, #7
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	061a      	lsls	r2, r3, #24
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3306      	adds	r3, #6
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	041b      	lsls	r3, r3, #16
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3305      	adds	r3, #5
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	4313      	orrs	r3, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	3204      	adds	r2, #4
 8002630:	7812      	ldrb	r2, [r2, #0]
 8002632:	4610      	mov	r0, r2
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	6811      	ldr	r1, [r2, #0]
 8002638:	ea43 0200 	orr.w	r2, r3, r0
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	440b      	add	r3, r1
 8002642:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002646:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3303      	adds	r3, #3
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	061a      	lsls	r2, r3, #24
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3302      	adds	r3, #2
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	041b      	lsls	r3, r3, #16
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3301      	adds	r3, #1
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	4313      	orrs	r3, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	7812      	ldrb	r2, [r2, #0]
 8002668:	4610      	mov	r0, r2
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	6811      	ldr	r1, [r2, #0]
 800266e:	ea43 0200 	orr.w	r2, r3, r0
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	440b      	add	r3, r1
 8002678:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800267c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3318      	adds	r3, #24
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	4413      	add	r3, r2
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	6811      	ldr	r1, [r2, #0]
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3318      	adds	r3, #24
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	440b      	add	r3, r1
 800269c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	e00e      	b.n	80026c0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e006      	b.n	80026c0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3724      	adds	r7, #36	@ 0x24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d003      	beq.n	80026f0 <HAL_CAN_GetRxMessage+0x24>
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	f040 8103 	bne.w	80028f6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10e      	bne.n	8002714 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d116      	bne.n	8002732 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0f7      	b.n	8002904 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d107      	bne.n	8002732 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0e8      	b.n	8002904 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	331b      	adds	r3, #27
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	4413      	add	r3, r2
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0204 	and.w	r2, r3, #4
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10c      	bne.n	800276a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	331b      	adds	r3, #27
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	4413      	add	r3, r2
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0d5b      	lsrs	r3, r3, #21
 8002760:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e00b      	b.n	8002782 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	331b      	adds	r3, #27
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	4413      	add	r3, r2
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	08db      	lsrs	r3, r3, #3
 800277a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	331b      	adds	r3, #27
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	4413      	add	r3, r2
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0202 	and.w	r2, r3, #2
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	331b      	adds	r3, #27
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	4413      	add	r3, r2
 80027a4:	3304      	adds	r3, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2208      	movs	r2, #8
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	e00b      	b.n	80027d0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	331b      	adds	r3, #27
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	4413      	add	r3, r2
 80027c4:	3304      	adds	r3, #4
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	331b      	adds	r3, #27
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	4413      	add	r3, r2
 80027dc:	3304      	adds	r3, #4
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	331b      	adds	r3, #27
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	4413      	add	r3, r2
 80027f4:	3304      	adds	r3, #4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	4413      	add	r3, r2
 800280a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	4413      	add	r3, r2
 8002820:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0a1a      	lsrs	r2, r3, #8
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	4413      	add	r3, r2
 800283a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0c1a      	lsrs	r2, r3, #16
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	3302      	adds	r3, #2
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	4413      	add	r3, r2
 8002854:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0e1a      	lsrs	r2, r3, #24
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	3303      	adds	r3, #3
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	4413      	add	r3, r2
 800286e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	3304      	adds	r3, #4
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	4413      	add	r3, r2
 8002886:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0a1a      	lsrs	r2, r3, #8
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	3305      	adds	r3, #5
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	4413      	add	r3, r2
 80028a0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0c1a      	lsrs	r2, r3, #16
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	3306      	adds	r3, #6
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e1a      	lsrs	r2, r3, #24
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	3307      	adds	r3, #7
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d108      	bne.n	80028e2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0220 	orr.w	r2, r2, #32
 80028de:	60da      	str	r2, [r3, #12]
 80028e0:	e007      	b.n	80028f2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0220 	orr.w	r2, r2, #32
 80028f0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e006      	b.n	8002904 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
  }
}
 8002904:	4618      	mov	r0, r3
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002920:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d002      	beq.n	800292e <HAL_CAN_ActivateNotification+0x1e>
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d109      	bne.n	8002942 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6959      	ldr	r1, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e006      	b.n	8002950 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
  }
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	@ 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d07c      	beq.n	8002a9c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d023      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f983 	bl	8002cca <HAL_CAN_TxMailbox0CompleteCallback>
 80029c4:	e016      	b.n	80029f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d004      	beq.n	80029da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d8:	e00c      	b.n	80029f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d004      	beq.n	80029ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ec:	e002      	b.n	80029f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f989 	bl	8002d06 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d024      	beq.n	8002a48 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f963 	bl	8002cde <HAL_CAN_TxMailbox1CompleteCallback>
 8002a18:	e016      	b.n	8002a48 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d004      	beq.n	8002a2e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a2c:	e00c      	b.n	8002a48 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d004      	beq.n	8002a42 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a40:	e002      	b.n	8002a48 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f969 	bl	8002d1a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d024      	beq.n	8002a9c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f943 	bl	8002cf2 <HAL_CAN_TxMailbox2CompleteCallback>
 8002a6c:	e016      	b.n	8002a9c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d004      	beq.n	8002a82 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a80:	e00c      	b.n	8002a9c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a94:	e002      	b.n	8002a9c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f949 	bl	8002d2e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00c      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2210      	movs	r2, #16
 8002abe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2208      	movs	r2, #8
 8002ada:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f930 	bl	8002d42 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f00c f858 	bl	800ebb0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00c      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2210      	movs	r2, #16
 8002b22:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f912 	bl	8002d6a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d009      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8f9 	bl	8002d56 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8fc 	bl	8002d7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00b      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f8f5 	bl	8002d92 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d07b      	beq.n	8002caa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d072      	beq.n	8002ca2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	f043 0304 	orr.w	r3, r3, #4
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d043      	beq.n	8002ca2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d03e      	beq.n	8002ca2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c2a:	2b60      	cmp	r3, #96	@ 0x60
 8002c2c:	d02b      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x32a>
 8002c2e:	2b60      	cmp	r3, #96	@ 0x60
 8002c30:	d82e      	bhi.n	8002c90 <HAL_CAN_IRQHandler+0x334>
 8002c32:	2b50      	cmp	r3, #80	@ 0x50
 8002c34:	d022      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x320>
 8002c36:	2b50      	cmp	r3, #80	@ 0x50
 8002c38:	d82a      	bhi.n	8002c90 <HAL_CAN_IRQHandler+0x334>
 8002c3a:	2b40      	cmp	r3, #64	@ 0x40
 8002c3c:	d019      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x316>
 8002c3e:	2b40      	cmp	r3, #64	@ 0x40
 8002c40:	d826      	bhi.n	8002c90 <HAL_CAN_IRQHandler+0x334>
 8002c42:	2b30      	cmp	r3, #48	@ 0x30
 8002c44:	d010      	beq.n	8002c68 <HAL_CAN_IRQHandler+0x30c>
 8002c46:	2b30      	cmp	r3, #48	@ 0x30
 8002c48:	d822      	bhi.n	8002c90 <HAL_CAN_IRQHandler+0x334>
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d002      	beq.n	8002c54 <HAL_CAN_IRQHandler+0x2f8>
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d005      	beq.n	8002c5e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c52:	e01d      	b.n	8002c90 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c5c:	e019      	b.n	8002c92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	f043 0310 	orr.w	r3, r3, #16
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c66:	e014      	b.n	8002c92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	f043 0320 	orr.w	r3, r3, #32
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c70:	e00f      	b.n	8002c92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c7a:	e00a      	b.n	8002c92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c84:	e005      	b.n	8002c92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c8e:	e000      	b.n	8002c92 <HAL_CAN_IRQHandler+0x336>
            break;
 8002c90:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699a      	ldr	r2, [r3, #24]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ca0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f872 	bl	8002da6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	3728      	adds	r7, #40	@ 0x28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <__NVIC_SetPriorityGrouping+0x44>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dee:	4a04      	ldr	r2, [pc, #16]	@ (8002e00 <__NVIC_SetPriorityGrouping+0x44>)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	60d3      	str	r3, [r2, #12]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e08:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <__NVIC_GetPriorityGrouping+0x18>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	f003 0307 	and.w	r3, r3, #7
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	db0b      	blt.n	8002e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	f003 021f 	and.w	r2, r3, #31
 8002e38:	4907      	ldr	r1, [pc, #28]	@ (8002e58 <__NVIC_EnableIRQ+0x38>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	2001      	movs	r0, #1
 8002e42:	fa00 f202 	lsl.w	r2, r0, r2
 8002e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db0a      	blt.n	8002e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	490c      	ldr	r1, [pc, #48]	@ (8002ea8 <__NVIC_SetPriority+0x4c>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e84:	e00a      	b.n	8002e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4908      	ldr	r1, [pc, #32]	@ (8002eac <__NVIC_SetPriority+0x50>)
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	3b04      	subs	r3, #4
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	761a      	strb	r2, [r3, #24]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000e100 	.word	0xe000e100
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	@ 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f1c3 0307 	rsb	r3, r3, #7
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	bf28      	it	cs
 8002ece:	2304      	movcs	r3, #4
 8002ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d902      	bls.n	8002ee0 <NVIC_EncodePriority+0x30>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3b03      	subs	r3, #3
 8002ede:	e000      	b.n	8002ee2 <NVIC_EncodePriority+0x32>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	4313      	orrs	r3, r2
         );
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	@ 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ff4c 	bl	8002dbc <__NVIC_SetPriorityGrouping>
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f3e:	f7ff ff61 	bl	8002e04 <__NVIC_GetPriorityGrouping>
 8002f42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	6978      	ldr	r0, [r7, #20]
 8002f4a:	f7ff ffb1 	bl	8002eb0 <NVIC_EncodePriority>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff ff80 	bl	8002e5c <__NVIC_SetPriority>
}
 8002f5c:	bf00      	nop
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff ff54 	bl	8002e20 <__NVIC_EnableIRQ>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f8c:	f7ff f87e 	bl	800208c <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e099      	b.n	80030d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fbc:	e00f      	b.n	8002fde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fbe:	f7ff f865 	bl	800208c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d908      	bls.n	8002fde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e078      	b.n	80030d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e8      	bne.n	8002fbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4b38      	ldr	r3, [pc, #224]	@ (80030d8 <HAL_DMA_Init+0x158>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800300a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	2b04      	cmp	r3, #4
 8003036:	d107      	bne.n	8003048 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	4313      	orrs	r3, r2
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f023 0307 	bic.w	r3, r3, #7
 800305e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	2b04      	cmp	r3, #4
 8003070:	d117      	bne.n	80030a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fb01 	bl	800368c <DMA_CheckFifoParam>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2240      	movs	r2, #64	@ 0x40
 8003094:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800309e:	2301      	movs	r3, #1
 80030a0:	e016      	b.n	80030d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fab8 	bl	8003620 <DMA_CalcBaseAndBitshift>
 80030b0:	4603      	mov	r3, r0
 80030b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	223f      	movs	r2, #63	@ 0x3f
 80030ba:	409a      	lsls	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	f010803f 	.word	0xf010803f

080030dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_DMA_Start_IT+0x26>
 80030fe:	2302      	movs	r3, #2
 8003100:	e040      	b.n	8003184 <HAL_DMA_Start_IT+0xa8>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d12f      	bne.n	8003176 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fa4a 	bl	80035c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	223f      	movs	r2, #63	@ 0x3f
 8003136:	409a      	lsls	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0216 	orr.w	r2, r2, #22
 800314a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0208 	orr.w	r2, r2, #8
 8003162:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e005      	b.n	8003182 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800317e:	2302      	movs	r3, #2
 8003180:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003182:	7dfb      	ldrb	r3, [r7, #23]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800319a:	f7fe ff77 	bl	800208c <HAL_GetTick>
 800319e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d008      	beq.n	80031be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2280      	movs	r2, #128	@ 0x80
 80031b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e052      	b.n	8003264 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0216 	bic.w	r2, r2, #22
 80031cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <HAL_DMA_Abort+0x62>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0208 	bic.w	r2, r2, #8
 80031fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800320e:	e013      	b.n	8003238 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003210:	f7fe ff3c 	bl	800208c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b05      	cmp	r3, #5
 800321c:	d90c      	bls.n	8003238 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2203      	movs	r2, #3
 8003228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e015      	b.n	8003264 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e4      	bne.n	8003210 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324a:	223f      	movs	r2, #63	@ 0x3f
 800324c:	409a      	lsls	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d004      	beq.n	800328a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2280      	movs	r2, #128	@ 0x80
 8003284:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e00c      	b.n	80032a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2205      	movs	r2, #5
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032bc:	4b8e      	ldr	r3, [pc, #568]	@ (80034f8 <HAL_DMA_IRQHandler+0x248>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a8e      	ldr	r2, [pc, #568]	@ (80034fc <HAL_DMA_IRQHandler+0x24c>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	0a9b      	lsrs	r3, r3, #10
 80032c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032da:	2208      	movs	r2, #8
 80032dc:	409a      	lsls	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01a      	beq.n	800331c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0204 	bic.w	r2, r2, #4
 8003302:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003308:	2208      	movs	r2, #8
 800330a:	409a      	lsls	r2, r3
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003320:	2201      	movs	r2, #1
 8003322:	409a      	lsls	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d012      	beq.n	8003352 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333e:	2201      	movs	r2, #1
 8003340:	409a      	lsls	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334a:	f043 0202 	orr.w	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003356:	2204      	movs	r2, #4
 8003358:	409a      	lsls	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d012      	beq.n	8003388 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00b      	beq.n	8003388 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003374:	2204      	movs	r2, #4
 8003376:	409a      	lsls	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003380:	f043 0204 	orr.w	r2, r3, #4
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338c:	2210      	movs	r2, #16
 800338e:	409a      	lsls	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d043      	beq.n	8003420 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d03c      	beq.n	8003420 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033aa:	2210      	movs	r2, #16
 80033ac:	409a      	lsls	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d018      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d108      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d024      	beq.n	8003420 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	4798      	blx	r3
 80033de:	e01f      	b.n	8003420 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01b      	beq.n	8003420 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
 80033f0:	e016      	b.n	8003420 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d107      	bne.n	8003410 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0208 	bic.w	r2, r2, #8
 800340e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003424:	2220      	movs	r2, #32
 8003426:	409a      	lsls	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 808f 	beq.w	8003550 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8087 	beq.w	8003550 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003446:	2220      	movs	r2, #32
 8003448:	409a      	lsls	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b05      	cmp	r3, #5
 8003458:	d136      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0216 	bic.w	r2, r2, #22
 8003468:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003478:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d103      	bne.n	800348a <HAL_DMA_IRQHandler+0x1da>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0208 	bic.w	r2, r2, #8
 8003498:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349e:	223f      	movs	r2, #63	@ 0x3f
 80034a0:	409a      	lsls	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d07e      	beq.n	80035bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
        }
        return;
 80034c6:	e079      	b.n	80035bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01d      	beq.n	8003512 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10d      	bne.n	8003500 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d031      	beq.n	8003550 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
 80034f4:	e02c      	b.n	8003550 <HAL_DMA_IRQHandler+0x2a0>
 80034f6:	bf00      	nop
 80034f8:	20000000 	.word	0x20000000
 80034fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d023      	beq.n	8003550 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
 8003510:	e01e      	b.n	8003550 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10f      	bne.n	8003540 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0210 	bic.w	r2, r2, #16
 800352e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003554:	2b00      	cmp	r3, #0
 8003556:	d032      	beq.n	80035be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d022      	beq.n	80035aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2205      	movs	r2, #5
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	3301      	adds	r3, #1
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	429a      	cmp	r2, r3
 8003586:	d307      	bcc.n	8003598 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f2      	bne.n	800357c <HAL_DMA_IRQHandler+0x2cc>
 8003596:	e000      	b.n	800359a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003598:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	4798      	blx	r3
 80035ba:	e000      	b.n	80035be <HAL_DMA_IRQHandler+0x30e>
        return;
 80035bc:	bf00      	nop
    }
  }
}
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b40      	cmp	r3, #64	@ 0x40
 80035f0:	d108      	bne.n	8003604 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003602:	e007      	b.n	8003614 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	60da      	str	r2, [r3, #12]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	3b10      	subs	r3, #16
 8003630:	4a14      	ldr	r2, [pc, #80]	@ (8003684 <DMA_CalcBaseAndBitshift+0x64>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800363a:	4a13      	ldr	r2, [pc, #76]	@ (8003688 <DMA_CalcBaseAndBitshift+0x68>)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d909      	bls.n	8003662 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	1d1a      	adds	r2, r3, #4
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003660:	e007      	b.n	8003672 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	aaaaaaab 	.word	0xaaaaaaab
 8003688:	08014624 	.word	0x08014624

0800368c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11f      	bne.n	80036e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d856      	bhi.n	800375a <DMA_CheckFifoParam+0xce>
 80036ac:	a201      	add	r2, pc, #4	@ (adr r2, 80036b4 <DMA_CheckFifoParam+0x28>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	080036d7 	.word	0x080036d7
 80036bc:	080036c5 	.word	0x080036c5
 80036c0:	0800375b 	.word	0x0800375b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d046      	beq.n	800375e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d4:	e043      	b.n	800375e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036de:	d140      	bne.n	8003762 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e4:	e03d      	b.n	8003762 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ee:	d121      	bne.n	8003734 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d837      	bhi.n	8003766 <DMA_CheckFifoParam+0xda>
 80036f6:	a201      	add	r2, pc, #4	@ (adr r2, 80036fc <DMA_CheckFifoParam+0x70>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	08003713 	.word	0x08003713
 8003704:	0800370d 	.word	0x0800370d
 8003708:	08003725 	.word	0x08003725
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      break;
 8003710:	e030      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003716:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d025      	beq.n	800376a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003722:	e022      	b.n	800376a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800372c:	d11f      	bne.n	800376e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003732:	e01c      	b.n	800376e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d903      	bls.n	8003742 <DMA_CheckFifoParam+0xb6>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d003      	beq.n	8003748 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003740:	e018      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
      break;
 8003746:	e015      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00e      	beq.n	8003772 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      break;
 8003758:	e00b      	b.n	8003772 <DMA_CheckFifoParam+0xe6>
      break;
 800375a:	bf00      	nop
 800375c:	e00a      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 800375e:	bf00      	nop
 8003760:	e008      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 8003762:	bf00      	nop
 8003764:	e006      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 8003766:	bf00      	nop
 8003768:	e004      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 800376a:	bf00      	nop
 800376c:	e002      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;   
 800376e:	bf00      	nop
 8003770:	e000      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 8003772:	bf00      	nop
    }
  } 
  
  return status; 
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop

08003784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003784:	b480      	push	{r7}
 8003786:	b089      	sub	sp, #36	@ 0x24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	e165      	b.n	8003a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037a0:	2201      	movs	r2, #1
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	f040 8154 	bne.w	8003a66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d005      	beq.n	80037d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d130      	bne.n	8003838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	2203      	movs	r2, #3
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800380c:	2201      	movs	r2, #1
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 0201 	and.w	r2, r3, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b03      	cmp	r3, #3
 8003842:	d017      	beq.n	8003874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	2203      	movs	r2, #3
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d123      	bne.n	80038c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	08da      	lsrs	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3208      	adds	r2, #8
 8003888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	220f      	movs	r2, #15
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	08da      	lsrs	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3208      	adds	r2, #8
 80038c2:	69b9      	ldr	r1, [r7, #24]
 80038c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0203 	and.w	r2, r3, #3
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80ae 	beq.w	8003a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	4b5d      	ldr	r3, [pc, #372]	@ (8003a84 <HAL_GPIO_Init+0x300>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	4a5c      	ldr	r2, [pc, #368]	@ (8003a84 <HAL_GPIO_Init+0x300>)
 8003914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003918:	6453      	str	r3, [r2, #68]	@ 0x44
 800391a:	4b5a      	ldr	r3, [pc, #360]	@ (8003a84 <HAL_GPIO_Init+0x300>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003926:	4a58      	ldr	r2, [pc, #352]	@ (8003a88 <HAL_GPIO_Init+0x304>)
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	3302      	adds	r3, #2
 800392e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	220f      	movs	r2, #15
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a4f      	ldr	r2, [pc, #316]	@ (8003a8c <HAL_GPIO_Init+0x308>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d025      	beq.n	800399e <HAL_GPIO_Init+0x21a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a4e      	ldr	r2, [pc, #312]	@ (8003a90 <HAL_GPIO_Init+0x30c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01f      	beq.n	800399a <HAL_GPIO_Init+0x216>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a4d      	ldr	r2, [pc, #308]	@ (8003a94 <HAL_GPIO_Init+0x310>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d019      	beq.n	8003996 <HAL_GPIO_Init+0x212>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a4c      	ldr	r2, [pc, #304]	@ (8003a98 <HAL_GPIO_Init+0x314>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <HAL_GPIO_Init+0x20e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a9c <HAL_GPIO_Init+0x318>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00d      	beq.n	800398e <HAL_GPIO_Init+0x20a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a4a      	ldr	r2, [pc, #296]	@ (8003aa0 <HAL_GPIO_Init+0x31c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d007      	beq.n	800398a <HAL_GPIO_Init+0x206>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a49      	ldr	r2, [pc, #292]	@ (8003aa4 <HAL_GPIO_Init+0x320>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_GPIO_Init+0x202>
 8003982:	2306      	movs	r3, #6
 8003984:	e00c      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 8003986:	2307      	movs	r3, #7
 8003988:	e00a      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 800398a:	2305      	movs	r3, #5
 800398c:	e008      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 800398e:	2304      	movs	r3, #4
 8003990:	e006      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 8003992:	2303      	movs	r3, #3
 8003994:	e004      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 8003996:	2302      	movs	r3, #2
 8003998:	e002      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 800399e:	2300      	movs	r3, #0
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	f002 0203 	and.w	r2, r2, #3
 80039a6:	0092      	lsls	r2, r2, #2
 80039a8:	4093      	lsls	r3, r2
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039b0:	4935      	ldr	r1, [pc, #212]	@ (8003a88 <HAL_GPIO_Init+0x304>)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	089b      	lsrs	r3, r3, #2
 80039b6:	3302      	adds	r3, #2
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039be:	4b3a      	ldr	r3, [pc, #232]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039e2:	4a31      	ldr	r2, [pc, #196]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039e8:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a0c:	4a26      	ldr	r2, [pc, #152]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a12:	4b25      	ldr	r3, [pc, #148]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a36:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a60:	4a11      	ldr	r2, [pc, #68]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	61fb      	str	r3, [r7, #28]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	2b0f      	cmp	r3, #15
 8003a70:	f67f ae96 	bls.w	80037a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	3724      	adds	r7, #36	@ 0x24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40013800 	.word	0x40013800
 8003a8c:	40020000 	.word	0x40020000
 8003a90:	40020400 	.word	0x40020400
 8003a94:	40020800 	.word	0x40020800
 8003a98:	40020c00 	.word	0x40020c00
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40021400 	.word	0x40021400
 8003aa4:	40021800 	.word	0x40021800
 8003aa8:	40013c00 	.word	0x40013c00

08003aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003abc:	787b      	ldrb	r3, [r7, #1]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ac8:	e003      	b.n	8003ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	041a      	lsls	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	619a      	str	r2, [r3, #24]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b085      	sub	sp, #20
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003af0:	887a      	ldrh	r2, [r7, #2]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4013      	ands	r3, r2
 8003af6:	041a      	lsls	r2, r3, #16
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	43d9      	mvns	r1, r3
 8003afc:	887b      	ldrh	r3, [r7, #2]
 8003afe:	400b      	ands	r3, r1
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	619a      	str	r2, [r3, #24]
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af02      	add	r7, sp, #8
 8003b18:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e108      	b.n	8003d36 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f00a f9f0 	bl	800df24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2203      	movs	r2, #3
 8003b48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b52:	d102      	bne.n	8003b5a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 fa31 	bl	8007fc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7c1a      	ldrb	r2, [r3, #16]
 8003b6c:	f88d 2000 	strb.w	r2, [sp]
 8003b70:	3304      	adds	r3, #4
 8003b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b74:	f004 f910 	bl	8007d98 <USB_CoreInit>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e0d5      	b.n	8003d36 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f004 fa29 	bl	8007fe8 <USB_SetCurrentMode>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0c6      	b.n	8003d36 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	73fb      	strb	r3, [r7, #15]
 8003bac:	e04a      	b.n	8003c44 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bae:	7bfa      	ldrb	r2, [r7, #15]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	3315      	adds	r3, #21
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	3314      	adds	r3, #20
 8003bd2:	7bfa      	ldrb	r2, [r7, #15]
 8003bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	b298      	uxth	r0, r3
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	332e      	adds	r3, #46	@ 0x2e
 8003bea:	4602      	mov	r2, r0
 8003bec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bee:	7bfa      	ldrb	r2, [r7, #15]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3318      	adds	r3, #24
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c02:	7bfa      	ldrb	r2, [r7, #15]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	331c      	adds	r3, #28
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c16:	7bfa      	ldrb	r2, [r7, #15]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	3320      	adds	r3, #32
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c2a:	7bfa      	ldrb	r2, [r7, #15]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3324      	adds	r3, #36	@ 0x24
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	3301      	adds	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	791b      	ldrb	r3, [r3, #4]
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d3af      	bcc.n	8003bae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
 8003c52:	e044      	b.n	8003cde <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c6a:	7bfa      	ldrb	r2, [r7, #15]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c96:	7bfa      	ldrb	r2, [r7, #15]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cac:	7bfa      	ldrb	r2, [r7, #15]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cc2:	7bfa      	ldrb	r2, [r7, #15]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	791b      	ldrb	r3, [r3, #4]
 8003ce2:	7bfa      	ldrb	r2, [r7, #15]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d3b5      	bcc.n	8003c54 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7c1a      	ldrb	r2, [r3, #16]
 8003cf0:	f88d 2000 	strb.w	r2, [sp]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cf8:	f004 f9c2 	bl	8008080 <USB_DevInit>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e013      	b.n	8003d36 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7b1b      	ldrb	r3, [r3, #12]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d102      	bne.n	8003d2a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f001 f96d 	bl	8005004 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f005 f9f9 	bl	8009126 <USB_DevDisconnect>

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_PCD_Start+0x1c>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e022      	b.n	8003da0 <HAL_PCD_Start+0x62>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d105      	bne.n	8003d82 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f004 f90c 	bl	8007fa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f005 f9a7 	bl	80090e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b08d      	sub	sp, #52	@ 0x34
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f005 fa65 	bl	800928e <USB_GetMode>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 84b9 	bne.w	800473e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f005 f9c9 	bl	8009168 <USB_ReadInterrupts>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 84af 	beq.w	800473c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f005 f9b6 	bl	8009168 <USB_ReadInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d107      	bne.n	8003e16 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f002 0202 	and.w	r2, r2, #2
 8003e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f005 f9a4 	bl	8009168 <USB_ReadInterrupts>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d161      	bne.n	8003eee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0210 	bic.w	r2, r2, #16
 8003e38:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	3304      	adds	r3, #4
 8003e58:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	0c5b      	lsrs	r3, r3, #17
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d124      	bne.n	8003eb0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d035      	beq.n	8003ede <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	6a38      	ldr	r0, [r7, #32]
 8003e86:	f004 ffdb 	bl	8008e40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e96:	441a      	add	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ea8:	441a      	add	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	615a      	str	r2, [r3, #20]
 8003eae:	e016      	b.n	8003ede <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	0c5b      	lsrs	r3, r3, #17
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d110      	bne.n	8003ede <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6a38      	ldr	r0, [r7, #32]
 8003ec8:	f004 ffba 	bl	8008e40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ed8:	441a      	add	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699a      	ldr	r2, [r3, #24]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0210 	orr.w	r2, r2, #16
 8003eec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f005 f938 	bl	8009168 <USB_ReadInterrupts>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003efe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f02:	f040 80a7 	bne.w	8004054 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f005 f93d 	bl	800918e <USB_ReadDevAllOutEpInterrupt>
 8003f14:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003f16:	e099      	b.n	800404c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 808e 	beq.w	8004040 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f005 f961 	bl	80091f6 <USB_ReadDevOutEPInterrupt>
 8003f34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00c      	beq.n	8003f5a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2301      	movs	r3, #1
 8003f50:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fecf 	bl	8004cf8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00c      	beq.n	8003f7e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f70:	461a      	mov	r2, r3
 8003f72:	2308      	movs	r3, #8
 8003f74:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 ffa5 	bl	8004ec8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f94:	461a      	mov	r2, r3
 8003f96:	2310      	movs	r3, #16
 8003f98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d030      	beq.n	8004006 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fac:	2b80      	cmp	r3, #128	@ 0x80
 8003fae:	d109      	bne.n	8003fc4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fc2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	78db      	ldrb	r3, [r3, #3]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d108      	bne.n	8003ff4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	4619      	mov	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f00a f8b4 	bl	800e15c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004000:	461a      	mov	r2, r3
 8004002:	2302      	movs	r3, #2
 8004004:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401c:	461a      	mov	r2, r3
 800401e:	2320      	movs	r3, #32
 8004020:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d009      	beq.n	8004040 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004038:	461a      	mov	r2, r3
 800403a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800403e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	3301      	adds	r3, #1
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	2b00      	cmp	r3, #0
 8004050:	f47f af62 	bne.w	8003f18 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f005 f885 	bl	8009168 <USB_ReadInterrupts>
 800405e:	4603      	mov	r3, r0
 8004060:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004064:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004068:	f040 80db 	bne.w	8004222 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f005 f8a6 	bl	80091c2 <USB_ReadDevAllInEpInterrupt>
 8004076:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800407c:	e0cd      	b.n	800421a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800407e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 80c2 	beq.w	800420e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f005 f8cc 	bl	8009232 <USB_ReadDevInEPInterrupt>
 800409a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d057      	beq.n	8004156 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	2201      	movs	r2, #1
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	43db      	mvns	r3, r3
 80040c0:	69f9      	ldr	r1, [r7, #28]
 80040c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040c6:	4013      	ands	r3, r2
 80040c8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d6:	461a      	mov	r2, r3
 80040d8:	2301      	movs	r3, #1
 80040da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	799b      	ldrb	r3, [r3, #6]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d132      	bne.n	800414a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e8:	4613      	mov	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	3320      	adds	r3, #32
 80040f4:	6819      	ldr	r1, [r3, #0]
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4403      	add	r3, r0
 8004104:	331c      	adds	r3, #28
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4419      	add	r1, r3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4403      	add	r3, r0
 8004118:	3320      	adds	r3, #32
 800411a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	2b00      	cmp	r3, #0
 8004120:	d113      	bne.n	800414a <HAL_PCD_IRQHandler+0x3a2>
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	3324      	adds	r3, #36	@ 0x24
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004142:	461a      	mov	r2, r3
 8004144:	2101      	movs	r1, #1
 8004146:	f005 f8d3 	bl	80092f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	b2db      	uxtb	r3, r3
 800414e:	4619      	mov	r1, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f009 ff7e 	bl	800e052 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416c:	461a      	mov	r2, r3
 800416e:	2308      	movs	r3, #8
 8004170:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800417c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004188:	461a      	mov	r2, r3
 800418a:	2310      	movs	r3, #16
 800418c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a4:	461a      	mov	r2, r3
 80041a6:	2340      	movs	r3, #64	@ 0x40
 80041a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d023      	beq.n	80041fc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80041b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041b6:	6a38      	ldr	r0, [r7, #32]
 80041b8:	f004 f8c0 	bl	800833c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80041bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	3310      	adds	r3, #16
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	3304      	adds	r3, #4
 80041ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	78db      	ldrb	r3, [r3, #3]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d108      	bne.n	80041ea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2200      	movs	r2, #0
 80041dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f009 ffcb 	bl	800e180 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f6:	461a      	mov	r2, r3
 80041f8:	2302      	movs	r3, #2
 80041fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004206:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fce8 	bl	8004bde <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	3301      	adds	r3, #1
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	f47f af2e 	bne.w	800407e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f004 ff9e 	bl	8009168 <USB_ReadInterrupts>
 800422c:	4603      	mov	r3, r0
 800422e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004232:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004236:	d122      	bne.n	800427e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004252:	2b01      	cmp	r3, #1
 8004254:	d108      	bne.n	8004268 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800425e:	2100      	movs	r1, #0
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f00a f945 	bl	800e4f0 <HAL_PCDEx_LPM_Callback>
 8004266:	e002      	b.n	800426e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f009 ff69 	bl	800e140 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800427c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f004 ff70 	bl	8009168 <USB_ReadInterrupts>
 8004288:	4603      	mov	r3, r0
 800428a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800428e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004292:	d112      	bne.n	80042ba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d102      	bne.n	80042aa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f009 ff25 	bl	800e0f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80042b8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f004 ff52 	bl	8009168 <USB_ReadInterrupts>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ce:	d121      	bne.n	8004314 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80042de:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d111      	bne.n	800430e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	f003 020f 	and.w	r2, r3, #15
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004304:	2101      	movs	r1, #1
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f00a f8f2 	bl	800e4f0 <HAL_PCDEx_LPM_Callback>
 800430c:	e002      	b.n	8004314 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f009 fef0 	bl	800e0f4 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f004 ff25 	bl	8009168 <USB_ReadInterrupts>
 800431e:	4603      	mov	r3, r0
 8004320:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004328:	f040 80b7 	bne.w	800449a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2110      	movs	r1, #16
 8004346:	4618      	mov	r0, r3
 8004348:	f003 fff8 	bl	800833c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800434c:	2300      	movs	r3, #0
 800434e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004350:	e046      	b.n	80043e0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800435e:	461a      	mov	r2, r3
 8004360:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004364:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004376:	0151      	lsls	r1, r2, #5
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	440a      	add	r2, r1
 800437c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004380:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004384:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004392:	461a      	mov	r2, r3
 8004394:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004398:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800439a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043aa:	0151      	lsls	r1, r2, #5
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	440a      	add	r2, r1
 80043b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ca:	0151      	lsls	r1, r2, #5
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	440a      	add	r2, r1
 80043d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043dc:	3301      	adds	r3, #1
 80043de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	791b      	ldrb	r3, [r3, #4]
 80043e4:	461a      	mov	r2, r3
 80043e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d3b2      	bcc.n	8004352 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043fa:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80043fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	7bdb      	ldrb	r3, [r3, #15]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d016      	beq.n	8004436 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800440e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004418:	f043 030b 	orr.w	r3, r3, #11
 800441c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800442e:	f043 030b 	orr.w	r3, r3, #11
 8004432:	6453      	str	r3, [r2, #68]	@ 0x44
 8004434:	e015      	b.n	8004462 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004444:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004448:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800444c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800445c:	f043 030b 	orr.w	r3, r3, #11
 8004460:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004470:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004474:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004484:	461a      	mov	r2, r3
 8004486:	f004 ff33 	bl	80092f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f004 fe62 	bl	8009168 <USB_ReadInterrupts>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ae:	d123      	bne.n	80044f8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f004 fef8 	bl	80092aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f003 ffb5 	bl	800842e <USB_GetDevSpeed>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681c      	ldr	r4, [r3, #0]
 80044d0:	f000 fea2 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 80044d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044da:	461a      	mov	r2, r3
 80044dc:	4620      	mov	r0, r4
 80044de:	f003 fcbf 	bl	8007e60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f009 fddd 	bl	800e0a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80044f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f004 fe33 	bl	8009168 <USB_ReadInterrupts>
 8004502:	4603      	mov	r3, r0
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b08      	cmp	r3, #8
 800450a:	d10a      	bne.n	8004522 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f009 fdba 	bl	800e086 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695a      	ldr	r2, [r3, #20]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f002 0208 	and.w	r2, r2, #8
 8004520:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f004 fe1e 	bl	8009168 <USB_ReadInterrupts>
 800452c:	4603      	mov	r3, r0
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	2b80      	cmp	r3, #128	@ 0x80
 8004534:	d123      	bne.n	800457e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004542:	2301      	movs	r3, #1
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
 8004546:	e014      	b.n	8004572 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d105      	bne.n	800456c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004562:	b2db      	uxtb	r3, r3
 8004564:	4619      	mov	r1, r3
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fb08 	bl	8004b7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	3301      	adds	r3, #1
 8004570:	627b      	str	r3, [r7, #36]	@ 0x24
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	791b      	ldrb	r3, [r3, #4]
 8004576:	461a      	mov	r2, r3
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	4293      	cmp	r3, r2
 800457c:	d3e4      	bcc.n	8004548 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f004 fdf0 	bl	8009168 <USB_ReadInterrupts>
 8004588:	4603      	mov	r3, r0
 800458a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800458e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004592:	d13c      	bne.n	800460e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004594:	2301      	movs	r3, #1
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
 8004598:	e02b      	b.n	80045f2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ae:	4613      	mov	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	3318      	adds	r3, #24
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d115      	bne.n	80045ec <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80045c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	da12      	bge.n	80045ec <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ca:	4613      	mov	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3317      	adds	r3, #23
 80045d6:	2201      	movs	r2, #1
 80045d8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fac8 	bl	8004b7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	3301      	adds	r3, #1
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	791b      	ldrb	r3, [r3, #4]
 80045f6:	461a      	mov	r2, r3
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d3cd      	bcc.n	800459a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800460c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f004 fda8 	bl	8009168 <USB_ReadInterrupts>
 8004618:	4603      	mov	r3, r0
 800461a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800461e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004622:	d156      	bne.n	80046d2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004624:	2301      	movs	r3, #1
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
 8004628:	e045      	b.n	80046b6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463e:	4613      	mov	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d12e      	bne.n	80046b0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004652:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004654:	2b00      	cmp	r3, #0
 8004656:	da2b      	bge.n	80046b0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004664:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004668:	429a      	cmp	r2, r3
 800466a:	d121      	bne.n	80046b0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ac:	6053      	str	r3, [r2, #4]
            break;
 80046ae:	e008      	b.n	80046c2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	3301      	adds	r3, #1
 80046b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	791b      	ldrb	r3, [r3, #4]
 80046ba:	461a      	mov	r2, r3
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046be:	4293      	cmp	r3, r2
 80046c0:	d3b3      	bcc.n	800462a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695a      	ldr	r2, [r3, #20]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80046d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f004 fd46 	bl	8009168 <USB_ReadInterrupts>
 80046dc:	4603      	mov	r3, r0
 80046de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e6:	d10a      	bne.n	80046fe <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f009 fd5b 	bl	800e1a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80046fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f004 fd30 	bl	8009168 <USB_ReadInterrupts>
 8004708:	4603      	mov	r3, r0
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b04      	cmp	r3, #4
 8004710:	d115      	bne.n	800473e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f009 fd4b 	bl	800e1c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	e000      	b.n	800473e <HAL_PCD_IRQHandler+0x996>
      return;
 800473c:	bf00      	nop
    }
  }
}
 800473e:	3734      	adds	r7, #52	@ 0x34
 8004740:	46bd      	mov	sp, r7
 8004742:	bd90      	pop	{r4, r7, pc}

08004744 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_PCD_SetAddress+0x1a>
 800475a:	2302      	movs	r3, #2
 800475c:	e012      	b.n	8004784 <HAL_PCD_SetAddress+0x40>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	78fa      	ldrb	r2, [r7, #3]
 800476a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f004 fc8f 	bl	8009098 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	4608      	mov	r0, r1
 8004796:	4611      	mov	r1, r2
 8004798:	461a      	mov	r2, r3
 800479a:	4603      	mov	r3, r0
 800479c:	70fb      	strb	r3, [r7, #3]
 800479e:	460b      	mov	r3, r1
 80047a0:	803b      	strh	r3, [r7, #0]
 80047a2:	4613      	mov	r3, r2
 80047a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	da0f      	bge.n	80047d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047b2:	78fb      	ldrb	r3, [r7, #3]
 80047b4:	f003 020f 	and.w	r2, r3, #15
 80047b8:	4613      	mov	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	3310      	adds	r3, #16
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	3304      	adds	r3, #4
 80047c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	705a      	strb	r2, [r3, #1]
 80047d0:	e00f      	b.n	80047f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	f003 020f 	and.w	r2, r3, #15
 80047d8:	4613      	mov	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4413      	add	r3, r2
 80047e8:	3304      	adds	r3, #4
 80047ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80047fe:	883a      	ldrh	r2, [r7, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	78ba      	ldrb	r2, [r7, #2]
 8004808:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d004      	beq.n	800481c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800481c:	78bb      	ldrb	r3, [r7, #2]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d102      	bne.n	8004828 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_PCD_EP_Open+0xaa>
 8004832:	2302      	movs	r3, #2
 8004834:	e00e      	b.n	8004854 <HAL_PCD_EP_Open+0xc8>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68f9      	ldr	r1, [r7, #12]
 8004844:	4618      	mov	r0, r3
 8004846:	f003 fe17 	bl	8008478 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004852:	7afb      	ldrb	r3, [r7, #11]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800486c:	2b00      	cmp	r3, #0
 800486e:	da0f      	bge.n	8004890 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	f003 020f 	and.w	r2, r3, #15
 8004876:	4613      	mov	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	3310      	adds	r3, #16
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4413      	add	r3, r2
 8004884:	3304      	adds	r3, #4
 8004886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	705a      	strb	r2, [r3, #1]
 800488e:	e00f      	b.n	80048b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 020f 	and.w	r2, r3, #15
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	4413      	add	r3, r2
 80048a6:	3304      	adds	r3, #4
 80048a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_PCD_EP_Close+0x6e>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e00e      	b.n	80048e8 <HAL_PCD_EP_Close+0x8c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	4618      	mov	r0, r3
 80048da:	f003 fe55 	bl	8008588 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	460b      	mov	r3, r1
 80048fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004900:	7afb      	ldrb	r3, [r7, #11]
 8004902:	f003 020f 	and.w	r2, r3, #15
 8004906:	4613      	mov	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	3304      	adds	r3, #4
 8004918:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2200      	movs	r2, #0
 800492a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2200      	movs	r2, #0
 8004930:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004932:	7afb      	ldrb	r3, [r7, #11]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	b2da      	uxtb	r2, r3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	799b      	ldrb	r3, [r3, #6]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d102      	bne.n	800494c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	799b      	ldrb	r3, [r3, #6]
 8004954:	461a      	mov	r2, r3
 8004956:	6979      	ldr	r1, [r7, #20]
 8004958:	f003 fef2 	bl	8008740 <USB_EPStartXfer>

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	460b      	mov	r3, r1
 8004970:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	f003 020f 	and.w	r2, r3, #15
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004988:	681b      	ldr	r3, [r3, #0]
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	460b      	mov	r3, r1
 80049a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049a6:	7afb      	ldrb	r3, [r7, #11]
 80049a8:	f003 020f 	and.w	r2, r3, #15
 80049ac:	4613      	mov	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	3310      	adds	r3, #16
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4413      	add	r3, r2
 80049ba:	3304      	adds	r3, #4
 80049bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2200      	movs	r2, #0
 80049ce:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2201      	movs	r2, #1
 80049d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049d6:	7afb      	ldrb	r3, [r7, #11]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	799b      	ldrb	r3, [r3, #6]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d102      	bne.n	80049f0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	799b      	ldrb	r3, [r3, #6]
 80049f8:	461a      	mov	r2, r3
 80049fa:	6979      	ldr	r1, [r7, #20]
 80049fc:	f003 fea0 	bl	8008740 <USB_EPStartXfer>

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	7912      	ldrb	r2, [r2, #4]
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d901      	bls.n	8004a28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e04f      	b.n	8004ac8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	da0f      	bge.n	8004a50 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	f003 020f 	and.w	r2, r3, #15
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	3310      	adds	r3, #16
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4413      	add	r3, r2
 8004a44:	3304      	adds	r3, #4
 8004a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	705a      	strb	r2, [r3, #1]
 8004a4e:	e00d      	b.n	8004a6c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	4613      	mov	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4413      	add	r3, r2
 8004a62:	3304      	adds	r3, #4
 8004a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_PCD_EP_SetStall+0x82>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e01d      	b.n	8004ac8 <HAL_PCD_EP_SetStall+0xbe>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68f9      	ldr	r1, [r7, #12]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f004 fa28 	bl	8008ef0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	7999      	ldrb	r1, [r3, #6]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ab8:	461a      	mov	r2, r3
 8004aba:	f004 fc19 	bl	80092f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	7912      	ldrb	r2, [r2, #4]
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e042      	b.n	8004b74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	da0f      	bge.n	8004b16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 020f 	and.w	r2, r3, #15
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	3310      	adds	r3, #16
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	705a      	strb	r2, [r3, #1]
 8004b14:	e00f      	b.n	8004b36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 020f 	and.w	r2, r3, #15
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_PCD_EP_ClrStall+0x86>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e00e      	b.n	8004b74 <HAL_PCD_EP_ClrStall+0xa4>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f004 fa31 	bl	8008fcc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	da0c      	bge.n	8004baa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	f003 020f 	and.w	r2, r3, #15
 8004b96:	4613      	mov	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	3310      	adds	r3, #16
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e00c      	b.n	8004bc4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	f003 020f 	and.w	r2, r3, #15
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68f9      	ldr	r1, [r7, #12]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f004 f850 	bl	8008c70 <USB_EPStopXfer>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004bd4:	7afb      	ldrb	r3, [r7, #11]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b08a      	sub	sp, #40	@ 0x28
 8004be2:	af02      	add	r7, sp, #8
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	3310      	adds	r3, #16
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	3304      	adds	r3, #4
 8004c04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d901      	bls.n	8004c16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e06b      	b.n	8004cee <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d902      	bls.n	8004c32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3303      	adds	r3, #3
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c3a:	e02a      	b.n	8004c92 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d902      	bls.n	8004c58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	3303      	adds	r3, #3
 8004c5c:	089b      	lsrs	r3, r3, #2
 8004c5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68d9      	ldr	r1, [r3, #12]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	4603      	mov	r3, r0
 8004c74:	6978      	ldr	r0, [r7, #20]
 8004c76:	f004 f8a5 	bl	8008dc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	441a      	add	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d809      	bhi.n	8004cbc <PCD_WriteEmptyTxFifo+0xde>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	695a      	ldr	r2, [r3, #20]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d203      	bcs.n	8004cbc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1bf      	bne.n	8004c3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d811      	bhi.n	8004cec <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	2201      	movs	r2, #1
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	6939      	ldr	r1, [r7, #16]
 8004ce4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ce8:	4013      	ands	r3, r2
 8004cea:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	333c      	adds	r3, #60	@ 0x3c
 8004d10:	3304      	adds	r3, #4
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	799b      	ldrb	r3, [r3, #6]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d17b      	bne.n	8004e26 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d015      	beq.n	8004d64 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4a61      	ldr	r2, [pc, #388]	@ (8004ec0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	f240 80b9 	bls.w	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80b3 	beq.w	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d60:	6093      	str	r3, [r2, #8]
 8004d62:	e0a7      	b.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2320      	movs	r3, #32
 8004d7e:	6093      	str	r3, [r2, #8]
 8004d80:	e098      	b.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f040 8093 	bne.w	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	4a4b      	ldr	r2, [pc, #300]	@ (8004ec0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d90f      	bls.n	8004db6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dac:	461a      	mov	r2, r3
 8004dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db2:	6093      	str	r3, [r2, #8]
 8004db4:	e07e      	b.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3304      	adds	r3, #4
 8004dca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	0159      	lsls	r1, r3, #5
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	440b      	add	r3, r1
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d114      	bne.n	8004e18 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e00:	461a      	mov	r2, r3
 8004e02:	2101      	movs	r1, #1
 8004e04:	f004 fa74 	bl	80092f0 <USB_EP0_OutStart>
 8004e08:	e006      	b.n	8004e18 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f009 f8fc 	bl	800e01c <HAL_PCD_DataOutStageCallback>
 8004e24:	e046      	b.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	4a26      	ldr	r2, [pc, #152]	@ (8004ec4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d124      	bne.n	8004e78 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e44:	461a      	mov	r2, r3
 8004e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e4a:	6093      	str	r3, [r2, #8]
 8004e4c:	e032      	b.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d008      	beq.n	8004e6a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e64:	461a      	mov	r2, r3
 8004e66:	2320      	movs	r3, #32
 8004e68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f009 f8d3 	bl	800e01c <HAL_PCD_DataOutStageCallback>
 8004e76:	e01d      	b.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d114      	bne.n	8004ea8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d108      	bne.n	8004ea8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	f004 fa24 	bl	80092f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f009 f8b4 	bl	800e01c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	4f54300a 	.word	0x4f54300a
 8004ec4:	4f54310a 	.word	0x4f54310a

08004ec8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	333c      	adds	r3, #60	@ 0x3c
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4a15      	ldr	r2, [pc, #84]	@ (8004f50 <PCD_EP_OutSetupPacket_int+0x88>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d90e      	bls.n	8004f1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d009      	beq.n	8004f1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f14:	461a      	mov	r2, r3
 8004f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f009 f86b 	bl	800dff8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a0a      	ldr	r2, [pc, #40]	@ (8004f50 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d90c      	bls.n	8004f44 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	799b      	ldrb	r3, [r3, #6]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d108      	bne.n	8004f44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2101      	movs	r1, #1
 8004f40:	f004 f9d6 	bl	80092f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	4f54300a 	.word	0x4f54300a

08004f54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	70fb      	strb	r3, [r7, #3]
 8004f60:	4613      	mov	r3, r2
 8004f62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d107      	bne.n	8004f82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f72:	883b      	ldrh	r3, [r7, #0]
 8004f74:	0419      	lsls	r1, r3, #16
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f80:	e028      	b.n	8004fd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f90:	2300      	movs	r3, #0
 8004f92:	73fb      	strb	r3, [r7, #15]
 8004f94:	e00d      	b.n	8004fb2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	3340      	adds	r3, #64	@ 0x40
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	4413      	add	r3, r2
 8004faa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	73fb      	strb	r3, [r7, #15]
 8004fb2:	7bfa      	ldrb	r2, [r7, #15]
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d3ec      	bcc.n	8004f96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fbc:	883b      	ldrh	r3, [r7, #0]
 8004fbe:	0418      	lsls	r0, r3, #16
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	4302      	orrs	r2, r0
 8004fcc:	3340      	adds	r3, #64	@ 0x40
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	460b      	mov	r3, r1
 8004fec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	887a      	ldrh	r2, [r7, #2]
 8004ff4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005036:	f043 0303 	orr.w	r3, r3, #3
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0cc      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005060:	4b68      	ldr	r3, [pc, #416]	@ (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d90c      	bls.n	8005088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506e:	4b65      	ldr	r3, [pc, #404]	@ (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005076:	4b63      	ldr	r3, [pc, #396]	@ (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0b8      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d020      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a0:	4b59      	ldr	r3, [pc, #356]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4a58      	ldr	r2, [pc, #352]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050b8:	4b53      	ldr	r3, [pc, #332]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a52      	ldr	r2, [pc, #328]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c4:	4b50      	ldr	r3, [pc, #320]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	494d      	ldr	r1, [pc, #308]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d044      	beq.n	800516c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	4b47      	ldr	r3, [pc, #284]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d119      	bne.n	800512a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e07f      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d003      	beq.n	800510a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005106:	2b03      	cmp	r3, #3
 8005108:	d107      	bne.n	800511a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510a:	4b3f      	ldr	r3, [pc, #252]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e06f      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511a:	4b3b      	ldr	r3, [pc, #236]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e067      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800512a:	4b37      	ldr	r3, [pc, #220]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f023 0203 	bic.w	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	4934      	ldr	r1, [pc, #208]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	4313      	orrs	r3, r2
 800513a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800513c:	f7fc ffa6 	bl	800208c <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005142:	e00a      	b.n	800515a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005144:	f7fc ffa2 	bl	800208c <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005152:	4293      	cmp	r3, r2
 8005154:	d901      	bls.n	800515a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e04f      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515a:	4b2b      	ldr	r3, [pc, #172]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 020c 	and.w	r2, r3, #12
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	429a      	cmp	r2, r3
 800516a:	d1eb      	bne.n	8005144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800516c:	4b25      	ldr	r3, [pc, #148]	@ (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d20c      	bcs.n	8005194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	4b22      	ldr	r3, [pc, #136]	@ (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	4b20      	ldr	r3, [pc, #128]	@ (8005204 <HAL_RCC_ClockConfig+0x1b8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d001      	beq.n	8005194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e032      	b.n	80051fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a0:	4b19      	ldr	r3, [pc, #100]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4916      	ldr	r1, [pc, #88]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051be:	4b12      	ldr	r3, [pc, #72]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	490e      	ldr	r1, [pc, #56]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051d2:	f000 fbb1 	bl	8005938 <HAL_RCC_GetSysClockFreq>
 80051d6:	4602      	mov	r2, r0
 80051d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	490a      	ldr	r1, [pc, #40]	@ (800520c <HAL_RCC_ClockConfig+0x1c0>)
 80051e4:	5ccb      	ldrb	r3, [r1, r3]
 80051e6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ea:	4a09      	ldr	r2, [pc, #36]	@ (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80051ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051ee:	4b09      	ldr	r3, [pc, #36]	@ (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fc fac8 	bl	8001788 <HAL_InitTick>

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40023c00 	.word	0x40023c00
 8005208:	40023800 	.word	0x40023800
 800520c:	0801460c 	.word	0x0801460c
 8005210:	20000000 	.word	0x20000000
 8005214:	20000004 	.word	0x20000004

08005218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800521c:	4b03      	ldr	r3, [pc, #12]	@ (800522c <HAL_RCC_GetHCLKFreq+0x14>)
 800521e:	681b      	ldr	r3, [r3, #0]
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20000000 	.word	0x20000000

08005230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005234:	f7ff fff0 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005238:	4602      	mov	r2, r0
 800523a:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	0a9b      	lsrs	r3, r3, #10
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4903      	ldr	r1, [pc, #12]	@ (8005254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005246:	5ccb      	ldrb	r3, [r1, r3]
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40023800 	.word	0x40023800
 8005254:	0801461c 	.word	0x0801461c

08005258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800525c:	f7ff ffdc 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005260:	4602      	mov	r2, r0
 8005262:	4b05      	ldr	r3, [pc, #20]	@ (8005278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	0b5b      	lsrs	r3, r3, #13
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	4903      	ldr	r1, [pc, #12]	@ (800527c <HAL_RCC_GetPCLK2Freq+0x24>)
 800526e:	5ccb      	ldrb	r3, [r1, r3]
 8005270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005274:	4618      	mov	r0, r3
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40023800 	.word	0x40023800
 800527c:	0801461c 	.word	0x0801461c

08005280 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	220f      	movs	r2, #15
 800528e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005290:	4b12      	ldr	r3, [pc, #72]	@ (80052dc <HAL_RCC_GetClockConfig+0x5c>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 0203 	and.w	r2, r3, #3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800529c:	4b0f      	ldr	r3, [pc, #60]	@ (80052dc <HAL_RCC_GetClockConfig+0x5c>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052a8:	4b0c      	ldr	r3, [pc, #48]	@ (80052dc <HAL_RCC_GetClockConfig+0x5c>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052b4:	4b09      	ldr	r3, [pc, #36]	@ (80052dc <HAL_RCC_GetClockConfig+0x5c>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	08db      	lsrs	r3, r3, #3
 80052ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052c2:	4b07      	ldr	r3, [pc, #28]	@ (80052e0 <HAL_RCC_GetClockConfig+0x60>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 020f 	and.w	r2, r3, #15
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40023800 	.word	0x40023800
 80052e0:	40023c00 	.word	0x40023c00

080052e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08c      	sub	sp, #48	@ 0x30
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d010      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800531c:	4b6f      	ldr	r3, [pc, #444]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800531e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005322:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532a:	496c      	ldr	r1, [pc, #432]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800533a:	2301      	movs	r3, #1
 800533c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d010      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800534a:	4b64      	ldr	r3, [pc, #400]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800534c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005350:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005358:	4960      	ldr	r1, [pc, #384]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005368:	2301      	movs	r3, #1
 800536a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d017      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005378:	4b58      	ldr	r3, [pc, #352]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800537a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800537e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	4955      	ldr	r1, [pc, #340]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005396:	d101      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005398:	2301      	movs	r3, #1
 800539a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80053a4:	2301      	movs	r3, #1
 80053a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d017      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053b4:	4b49      	ldr	r3, [pc, #292]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c2:	4946      	ldr	r1, [pc, #280]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053d2:	d101      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80053d4:	2301      	movs	r3, #1
 80053d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80053e0:	2301      	movs	r3, #1
 80053e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 808a 	beq.w	8005506 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053f2:	2300      	movs	r3, #0
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	4b39      	ldr	r3, [pc, #228]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fa:	4a38      	ldr	r2, [pc, #224]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005400:	6413      	str	r3, [r2, #64]	@ 0x40
 8005402:	4b36      	ldr	r3, [pc, #216]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800540a:	60bb      	str	r3, [r7, #8]
 800540c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800540e:	4b34      	ldr	r3, [pc, #208]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a33      	ldr	r2, [pc, #204]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005418:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800541a:	f7fc fe37 	bl	800208c <HAL_GetTick>
 800541e:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005420:	e008      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005422:	f7fc fe33 	bl	800208c <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e278      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005434:	4b2a      	ldr	r3, [pc, #168]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005440:	4b26      	ldr	r3, [pc, #152]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005444:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005448:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d02f      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005454:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005458:	6a3a      	ldr	r2, [r7, #32]
 800545a:	429a      	cmp	r2, r3
 800545c:	d028      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800545e:	4b1f      	ldr	r3, [pc, #124]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005466:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005468:	4b1e      	ldr	r3, [pc, #120]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800546a:	2201      	movs	r2, #1
 800546c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800546e:	4b1d      	ldr	r3, [pc, #116]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005474:	4a19      	ldr	r2, [pc, #100]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800547a:	4b18      	ldr	r3, [pc, #96]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800547c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b01      	cmp	r3, #1
 8005484:	d114      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005486:	f7fc fe01 	bl	800208c <HAL_GetTick>
 800548a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548c:	e00a      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800548e:	f7fc fdfd 	bl	800208c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800549c:	4293      	cmp	r3, r2
 800549e:	d901      	bls.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e240      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a4:	4b0d      	ldr	r3, [pc, #52]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80054a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0ee      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054bc:	d114      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80054be:	4b07      	ldr	r3, [pc, #28]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80054ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054d2:	4902      	ldr	r1, [pc, #8]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	608b      	str	r3, [r1, #8]
 80054d8:	e00c      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80054da:	bf00      	nop
 80054dc:	40023800 	.word	0x40023800
 80054e0:	40007000 	.word	0x40007000
 80054e4:	42470e40 	.word	0x42470e40
 80054e8:	4b4a      	ldr	r3, [pc, #296]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4a49      	ldr	r2, [pc, #292]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054ee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80054f2:	6093      	str	r3, [r2, #8]
 80054f4:	4b47      	ldr	r3, [pc, #284]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005500:	4944      	ldr	r1, [pc, #272]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005502:	4313      	orrs	r3, r2
 8005504:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	2b00      	cmp	r3, #0
 8005510:	d004      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005518:	4b3f      	ldr	r3, [pc, #252]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800551a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005528:	4b3a      	ldr	r3, [pc, #232]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800552a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800552e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005536:	4937      	ldr	r1, [pc, #220]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800554a:	4b32      	ldr	r3, [pc, #200]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005550:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005558:	492e      	ldr	r1, [pc, #184]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d011      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800556c:	4b29      	ldr	r3, [pc, #164]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800556e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005572:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557a:	4926      	ldr	r1, [pc, #152]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800558a:	d101      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800558c:	2301      	movs	r3, #1
 800558e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800559c:	4b1d      	ldr	r3, [pc, #116]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800559e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055aa:	491a      	ldr	r1, [pc, #104]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d011      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80055be:	4b15      	ldr	r3, [pc, #84]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80055c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055c4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055cc:	4911      	ldr	r1, [pc, #68]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055dc:	d101      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80055de:	2301      	movs	r3, #1
 80055e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80055e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d005      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055f0:	f040 80ff 	bne.w	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055f4:	4b09      	ldr	r3, [pc, #36]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055fa:	f7fc fd47 	bl	800208c <HAL_GetTick>
 80055fe:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005600:	e00e      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005602:	f7fc fd43 	bl	800208c <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d907      	bls.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e188      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005614:	40023800 	.word	0x40023800
 8005618:	424711e0 	.word	0x424711e0
 800561c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005620:	4b7e      	ldr	r3, [pc, #504]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1ea      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	2b00      	cmp	r3, #0
 800563e:	d009      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005648:	2b00      	cmp	r3, #0
 800564a:	d028      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d124      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005654:	4b71      	ldr	r3, [pc, #452]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800565a:	0c1b      	lsrs	r3, r3, #16
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	3301      	adds	r3, #1
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005666:	4b6d      	ldr	r3, [pc, #436]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800566c:	0e1b      	lsrs	r3, r3, #24
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	431a      	orrs	r2, r3
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	3b01      	subs	r3, #1
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	431a      	orrs	r2, r3
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	061b      	lsls	r3, r3, #24
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	071b      	lsls	r3, r3, #28
 8005696:	4961      	ldr	r1, [pc, #388]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d035      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056c8:	d130      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80056ca:	4b54      	ldr	r3, [pc, #336]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d0:	0c1b      	lsrs	r3, r3, #16
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	3301      	adds	r3, #1
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056dc:	4b4f      	ldr	r3, [pc, #316]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056e2:	0f1b      	lsrs	r3, r3, #28
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	019b      	lsls	r3, r3, #6
 80056f4:	431a      	orrs	r2, r3
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	3b01      	subs	r3, #1
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	431a      	orrs	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	061b      	lsls	r3, r3, #24
 8005706:	431a      	orrs	r2, r3
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	071b      	lsls	r3, r3, #28
 800570c:	4943      	ldr	r1, [pc, #268]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005714:	4b41      	ldr	r3, [pc, #260]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800571a:	f023 021f 	bic.w	r2, r3, #31
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005722:	3b01      	subs	r3, #1
 8005724:	493d      	ldr	r1, [pc, #244]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005734:	2b00      	cmp	r3, #0
 8005736:	d029      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800573c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005740:	d124      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005742:	4b36      	ldr	r3, [pc, #216]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	3301      	adds	r3, #1
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005754:	4b31      	ldr	r3, [pc, #196]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800575a:	0f1b      	lsrs	r3, r3, #28
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	019b      	lsls	r3, r3, #6
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	3b01      	subs	r3, #1
 8005776:	041b      	lsls	r3, r3, #16
 8005778:	431a      	orrs	r2, r3
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	061b      	lsls	r3, r3, #24
 800577e:	431a      	orrs	r2, r3
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	071b      	lsls	r3, r3, #28
 8005784:	4925      	ldr	r1, [pc, #148]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005794:	2b00      	cmp	r3, #0
 8005796:	d016      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	019b      	lsls	r3, r3, #6
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	3b01      	subs	r3, #1
 80057ac:	041b      	lsls	r3, r3, #16
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	061b      	lsls	r3, r3, #24
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	071b      	lsls	r3, r3, #28
 80057be:	4917      	ldr	r1, [pc, #92]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057c6:	4b16      	ldr	r3, [pc, #88]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057cc:	f7fc fc5e 	bl	800208c <HAL_GetTick>
 80057d0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057d4:	f7fc fc5a 	bl	800208c <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e09f      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057e6:	4b0d      	ldr	r3, [pc, #52]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80057f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	f040 8095 	bne.w	8005924 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005800:	f7fc fc44 	bl	800208c <HAL_GetTick>
 8005804:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005806:	e00f      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005808:	f7fc fc40 	bl	800208c <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d908      	bls.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e085      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800581a:	bf00      	nop
 800581c:	40023800 	.word	0x40023800
 8005820:	42470068 	.word	0x42470068
 8005824:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005828:	4b41      	ldr	r3, [pc, #260]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005834:	d0e8      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02b      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585a:	2b00      	cmp	r3, #0
 800585c:	d127      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800585e:	4b34      	ldr	r3, [pc, #208]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	3301      	adds	r3, #1
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699a      	ldr	r2, [r3, #24]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	431a      	orrs	r2, r3
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	3b01      	subs	r3, #1
 8005882:	041b      	lsls	r3, r3, #16
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588a:	061b      	lsls	r3, r3, #24
 800588c:	4928      	ldr	r1, [pc, #160]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005894:	4b26      	ldr	r3, [pc, #152]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800589a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	3b01      	subs	r3, #1
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	4922      	ldr	r1, [pc, #136]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d01d      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058c2:	d118      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80058c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ca:	0e1b      	lsrs	r3, r3, #24
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	019b      	lsls	r3, r3, #6
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	3b01      	subs	r3, #1
 80058e6:	041b      	lsls	r3, r3, #16
 80058e8:	431a      	orrs	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	061b      	lsls	r3, r3, #24
 80058ee:	4910      	ldr	r1, [pc, #64]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058fc:	f7fc fbc6 	bl	800208c <HAL_GetTick>
 8005900:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005904:	f7fc fbc2 	bl	800208c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e007      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005916:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800591e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005922:	d1ef      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3730      	adds	r7, #48	@ 0x30
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40023800 	.word	0x40023800
 8005934:	42470070 	.word	0x42470070

08005938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800593c:	b0a6      	sub	sp, #152	@ 0x98
 800593e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800595e:	4bc8      	ldr	r3, [pc, #800]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 030c 	and.w	r3, r3, #12
 8005966:	2b0c      	cmp	r3, #12
 8005968:	f200 817e 	bhi.w	8005c68 <HAL_RCC_GetSysClockFreq+0x330>
 800596c:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <HAL_RCC_GetSysClockFreq+0x3c>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	080059a9 	.word	0x080059a9
 8005978:	08005c69 	.word	0x08005c69
 800597c:	08005c69 	.word	0x08005c69
 8005980:	08005c69 	.word	0x08005c69
 8005984:	080059b1 	.word	0x080059b1
 8005988:	08005c69 	.word	0x08005c69
 800598c:	08005c69 	.word	0x08005c69
 8005990:	08005c69 	.word	0x08005c69
 8005994:	080059b9 	.word	0x080059b9
 8005998:	08005c69 	.word	0x08005c69
 800599c:	08005c69 	.word	0x08005c69
 80059a0:	08005c69 	.word	0x08005c69
 80059a4:	08005b23 	.word	0x08005b23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059a8:	4bb6      	ldr	r3, [pc, #728]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x34c>)
 80059aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80059ae:	e15f      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059b0:	4bb5      	ldr	r3, [pc, #724]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x350>)
 80059b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80059b6:	e15b      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059b8:	4bb1      	ldr	r3, [pc, #708]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x348>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059c4:	4bae      	ldr	r3, [pc, #696]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x348>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d031      	beq.n	8005a34 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059d0:	4bab      	ldr	r3, [pc, #684]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x348>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	099b      	lsrs	r3, r3, #6
 80059d6:	2200      	movs	r2, #0
 80059d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80059e4:	2300      	movs	r3, #0
 80059e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80059e8:	4ba7      	ldr	r3, [pc, #668]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x350>)
 80059ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80059ee:	462a      	mov	r2, r5
 80059f0:	fb03 f202 	mul.w	r2, r3, r2
 80059f4:	2300      	movs	r3, #0
 80059f6:	4621      	mov	r1, r4
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	4413      	add	r3, r2
 80059fe:	4aa2      	ldr	r2, [pc, #648]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x350>)
 8005a00:	4621      	mov	r1, r4
 8005a02:	fba1 1202 	umull	r1, r2, r1, r2
 8005a06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a08:	460a      	mov	r2, r1
 8005a0a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005a0c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005a0e:	4413      	add	r3, r2
 8005a10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a16:	2200      	movs	r2, #0
 8005a18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a1a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005a1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a20:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005a24:	f7fb f950 	bl	8000cc8 <__aeabi_uldivmod>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a32:	e064      	b.n	8005afe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a34:	4b92      	ldr	r3, [pc, #584]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	099b      	lsrs	r3, r3, #6
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a3e:	657a      	str	r2, [r7, #84]	@ 0x54
 8005a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a48:	2300      	movs	r3, #0
 8005a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a4c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005a50:	4622      	mov	r2, r4
 8005a52:	462b      	mov	r3, r5
 8005a54:	f04f 0000 	mov.w	r0, #0
 8005a58:	f04f 0100 	mov.w	r1, #0
 8005a5c:	0159      	lsls	r1, r3, #5
 8005a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a62:	0150      	lsls	r0, r2, #5
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4621      	mov	r1, r4
 8005a6a:	1a51      	subs	r1, r2, r1
 8005a6c:	6139      	str	r1, [r7, #16]
 8005a6e:	4629      	mov	r1, r5
 8005a70:	eb63 0301 	sbc.w	r3, r3, r1
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	f04f 0300 	mov.w	r3, #0
 8005a7e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a82:	4659      	mov	r1, fp
 8005a84:	018b      	lsls	r3, r1, #6
 8005a86:	4651      	mov	r1, sl
 8005a88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a8c:	4651      	mov	r1, sl
 8005a8e:	018a      	lsls	r2, r1, #6
 8005a90:	4651      	mov	r1, sl
 8005a92:	ebb2 0801 	subs.w	r8, r2, r1
 8005a96:	4659      	mov	r1, fp
 8005a98:	eb63 0901 	sbc.w	r9, r3, r1
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ab0:	4690      	mov	r8, r2
 8005ab2:	4699      	mov	r9, r3
 8005ab4:	4623      	mov	r3, r4
 8005ab6:	eb18 0303 	adds.w	r3, r8, r3
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	462b      	mov	r3, r5
 8005abe:	eb49 0303 	adc.w	r3, r9, r3
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	028b      	lsls	r3, r1, #10
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ada:	4621      	mov	r1, r4
 8005adc:	028a      	lsls	r2, r1, #10
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aea:	647a      	str	r2, [r7, #68]	@ 0x44
 8005aec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005af0:	f7fb f8ea 	bl	8000cc8 <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4613      	mov	r3, r2
 8005afa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005afe:	4b60      	ldr	r3, [pc, #384]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	0c1b      	lsrs	r3, r3, #16
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	3301      	adds	r3, #1
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8005b10:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005b20:	e0a6      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b22:	4b57      	ldr	r3, [pc, #348]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b2e:	4b54      	ldr	r3, [pc, #336]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d02a      	beq.n	8005b90 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b3a:	4b51      	ldr	r3, [pc, #324]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	099b      	lsrs	r3, r3, #6
 8005b40:	2200      	movs	r2, #0
 8005b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x350>)
 8005b50:	fb03 f201 	mul.w	r2, r3, r1
 8005b54:	2300      	movs	r3, #0
 8005b56:	fb00 f303 	mul.w	r3, r0, r3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8005c88 <HAL_RCC_GetSysClockFreq+0x350>)
 8005b5e:	fba0 1202 	umull	r1, r2, r0, r2
 8005b62:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b64:	460a      	mov	r2, r1
 8005b66:	673a      	str	r2, [r7, #112]	@ 0x70
 8005b68:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005b6a:	4413      	add	r3, r2
 8005b6c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b72:	2200      	movs	r2, #0
 8005b74:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b76:	637a      	str	r2, [r7, #52]	@ 0x34
 8005b78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005b7c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005b80:	f7fb f8a2 	bl	8000cc8 <__aeabi_uldivmod>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4613      	mov	r3, r2
 8005b8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b8e:	e05b      	b.n	8005c48 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b90:	4b3b      	ldr	r3, [pc, #236]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	099b      	lsrs	r3, r3, #6
 8005b96:	2200      	movs	r2, #0
 8005b98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba2:	623b      	str	r3, [r7, #32]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ba8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bac:	4642      	mov	r2, r8
 8005bae:	464b      	mov	r3, r9
 8005bb0:	f04f 0000 	mov.w	r0, #0
 8005bb4:	f04f 0100 	mov.w	r1, #0
 8005bb8:	0159      	lsls	r1, r3, #5
 8005bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bbe:	0150      	lsls	r0, r2, #5
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4641      	mov	r1, r8
 8005bc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bca:	4649      	mov	r1, r9
 8005bcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005be0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005be4:	ebb2 040a 	subs.w	r4, r2, sl
 8005be8:	eb63 050b 	sbc.w	r5, r3, fp
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	00eb      	lsls	r3, r5, #3
 8005bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bfa:	00e2      	lsls	r2, r4, #3
 8005bfc:	4614      	mov	r4, r2
 8005bfe:	461d      	mov	r5, r3
 8005c00:	4643      	mov	r3, r8
 8005c02:	18e3      	adds	r3, r4, r3
 8005c04:	603b      	str	r3, [r7, #0]
 8005c06:	464b      	mov	r3, r9
 8005c08:	eb45 0303 	adc.w	r3, r5, r3
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	028b      	lsls	r3, r1, #10
 8005c1e:	4621      	mov	r1, r4
 8005c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c24:	4621      	mov	r1, r4
 8005c26:	028a      	lsls	r2, r1, #10
 8005c28:	4610      	mov	r0, r2
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c30:	2200      	movs	r2, #0
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	61fa      	str	r2, [r7, #28]
 8005c36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c3a:	f7fb f845 	bl	8000cc8 <__aeabi_uldivmod>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4613      	mov	r3, r2
 8005c44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005c48:	4b0d      	ldr	r3, [pc, #52]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	0f1b      	lsrs	r3, r3, #28
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8005c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005c66:	e003      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c68:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005c6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005c6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3798      	adds	r7, #152	@ 0x98
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7e:	bf00      	nop
 8005c80:	40023800 	.word	0x40023800
 8005c84:	00f42400 	.word	0x00f42400
 8005c88:	00b71b00 	.word	0x00b71b00

08005c8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e28d      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 8083 	beq.w	8005db2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005cac:	4b94      	ldr	r3, [pc, #592]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f003 030c 	and.w	r3, r3, #12
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d019      	beq.n	8005cec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005cb8:	4b91      	ldr	r3, [pc, #580]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d106      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005cc4:	4b8e      	ldr	r3, [pc, #568]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ccc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cd0:	d00c      	beq.n	8005cec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cd2:	4b8b      	ldr	r3, [pc, #556]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005cda:	2b0c      	cmp	r3, #12
 8005cdc:	d112      	bne.n	8005d04 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cde:	4b88      	ldr	r3, [pc, #544]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cea:	d10b      	bne.n	8005d04 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cec:	4b84      	ldr	r3, [pc, #528]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d05b      	beq.n	8005db0 <HAL_RCC_OscConfig+0x124>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d157      	bne.n	8005db0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e25a      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d0c:	d106      	bne.n	8005d1c <HAL_RCC_OscConfig+0x90>
 8005d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a7b      	ldr	r2, [pc, #492]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	e01d      	b.n	8005d58 <HAL_RCC_OscConfig+0xcc>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d24:	d10c      	bne.n	8005d40 <HAL_RCC_OscConfig+0xb4>
 8005d26:	4b76      	ldr	r3, [pc, #472]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a75      	ldr	r2, [pc, #468]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	4b73      	ldr	r3, [pc, #460]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a72      	ldr	r2, [pc, #456]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	e00b      	b.n	8005d58 <HAL_RCC_OscConfig+0xcc>
 8005d40:	4b6f      	ldr	r3, [pc, #444]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a6e      	ldr	r2, [pc, #440]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	4b6c      	ldr	r3, [pc, #432]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a6b      	ldr	r2, [pc, #428]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d013      	beq.n	8005d88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d60:	f7fc f994 	bl	800208c <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d68:	f7fc f990 	bl	800208c <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b64      	cmp	r3, #100	@ 0x64
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e21f      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7a:	4b61      	ldr	r3, [pc, #388]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f0      	beq.n	8005d68 <HAL_RCC_OscConfig+0xdc>
 8005d86:	e014      	b.n	8005db2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fc f980 	bl	800208c <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d90:	f7fc f97c 	bl	800208c <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b64      	cmp	r3, #100	@ 0x64
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e20b      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005da2:	4b57      	ldr	r3, [pc, #348]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f0      	bne.n	8005d90 <HAL_RCC_OscConfig+0x104>
 8005dae:	e000      	b.n	8005db2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d06f      	beq.n	8005e9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005dbe:	4b50      	ldr	r3, [pc, #320]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d017      	beq.n	8005dfa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005dca:	4b4d      	ldr	r3, [pc, #308]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d105      	bne.n	8005de2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00b      	beq.n	8005dfa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005de2:	4b47      	ldr	r3, [pc, #284]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005dea:	2b0c      	cmp	r3, #12
 8005dec:	d11c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dee:	4b44      	ldr	r3, [pc, #272]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d116      	bne.n	8005e28 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dfa:	4b41      	ldr	r3, [pc, #260]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <HAL_RCC_OscConfig+0x186>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d001      	beq.n	8005e12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e1d3      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e12:	4b3b      	ldr	r3, [pc, #236]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4937      	ldr	r1, [pc, #220]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e26:	e03a      	b.n	8005e9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d020      	beq.n	8005e72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e30:	4b34      	ldr	r3, [pc, #208]	@ (8005f04 <HAL_RCC_OscConfig+0x278>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e36:	f7fc f929 	bl	800208c <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e3c:	e008      	b.n	8005e50 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e3e:	f7fc f925 	bl	800208c <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e1b4      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e50:	4b2b      	ldr	r3, [pc, #172]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0f0      	beq.n	8005e3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5c:	4b28      	ldr	r3, [pc, #160]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	4925      	ldr	r1, [pc, #148]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]
 8005e70:	e015      	b.n	8005e9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e72:	4b24      	ldr	r3, [pc, #144]	@ (8005f04 <HAL_RCC_OscConfig+0x278>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fc f908 	bl	800208c <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e80:	f7fc f904 	bl	800208c <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e193      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e92:	4b1b      	ldr	r3, [pc, #108]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d036      	beq.n	8005f18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d016      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eb2:	4b15      	ldr	r3, [pc, #84]	@ (8005f08 <HAL_RCC_OscConfig+0x27c>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb8:	f7fc f8e8 	bl	800208c <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec0:	f7fc f8e4 	bl	800208c <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e173      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8005f00 <HAL_RCC_OscConfig+0x274>)
 8005ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x234>
 8005ede:	e01b      	b.n	8005f18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee0:	4b09      	ldr	r3, [pc, #36]	@ (8005f08 <HAL_RCC_OscConfig+0x27c>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee6:	f7fc f8d1 	bl	800208c <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eec:	e00e      	b.n	8005f0c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eee:	f7fc f8cd 	bl	800208c <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d907      	bls.n	8005f0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e15c      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
 8005f00:	40023800 	.word	0x40023800
 8005f04:	42470000 	.word	0x42470000
 8005f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f0c:	4b8a      	ldr	r3, [pc, #552]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1ea      	bne.n	8005eee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8097 	beq.w	8006054 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f26:	2300      	movs	r3, #0
 8005f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f2a:	4b83      	ldr	r3, [pc, #524]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10f      	bne.n	8005f56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f36:	2300      	movs	r3, #0
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f46:	4b7c      	ldr	r3, [pc, #496]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f4e:	60bb      	str	r3, [r7, #8]
 8005f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f52:	2301      	movs	r3, #1
 8005f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f56:	4b79      	ldr	r3, [pc, #484]	@ (800613c <HAL_RCC_OscConfig+0x4b0>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d118      	bne.n	8005f94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f62:	4b76      	ldr	r3, [pc, #472]	@ (800613c <HAL_RCC_OscConfig+0x4b0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a75      	ldr	r2, [pc, #468]	@ (800613c <HAL_RCC_OscConfig+0x4b0>)
 8005f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f6e:	f7fc f88d 	bl	800208c <HAL_GetTick>
 8005f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f74:	e008      	b.n	8005f88 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f76:	f7fc f889 	bl	800208c <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e118      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f88:	4b6c      	ldr	r3, [pc, #432]	@ (800613c <HAL_RCC_OscConfig+0x4b0>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0f0      	beq.n	8005f76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d106      	bne.n	8005faa <HAL_RCC_OscConfig+0x31e>
 8005f9c:	4b66      	ldr	r3, [pc, #408]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa0:	4a65      	ldr	r2, [pc, #404]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fa8:	e01c      	b.n	8005fe4 <HAL_RCC_OscConfig+0x358>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d10c      	bne.n	8005fcc <HAL_RCC_OscConfig+0x340>
 8005fb2:	4b61      	ldr	r3, [pc, #388]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb6:	4a60      	ldr	r2, [pc, #384]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005fb8:	f043 0304 	orr.w	r3, r3, #4
 8005fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fbe:	4b5e      	ldr	r3, [pc, #376]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc2:	4a5d      	ldr	r2, [pc, #372]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005fc4:	f043 0301 	orr.w	r3, r3, #1
 8005fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fca:	e00b      	b.n	8005fe4 <HAL_RCC_OscConfig+0x358>
 8005fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd0:	4a59      	ldr	r2, [pc, #356]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005fd2:	f023 0301 	bic.w	r3, r3, #1
 8005fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd8:	4b57      	ldr	r3, [pc, #348]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fdc:	4a56      	ldr	r2, [pc, #344]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8005fde:	f023 0304 	bic.w	r3, r3, #4
 8005fe2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d015      	beq.n	8006018 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fec:	f7fc f84e 	bl	800208c <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff2:	e00a      	b.n	800600a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff4:	f7fc f84a 	bl	800208c <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e0d7      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800600a:	4b4b      	ldr	r3, [pc, #300]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0ee      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x368>
 8006016:	e014      	b.n	8006042 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006018:	f7fc f838 	bl	800208c <HAL_GetTick>
 800601c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800601e:	e00a      	b.n	8006036 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006020:	f7fc f834 	bl	800208c <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800602e:	4293      	cmp	r3, r2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e0c1      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006036:	4b40      	ldr	r3, [pc, #256]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1ee      	bne.n	8006020 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006042:	7dfb      	ldrb	r3, [r7, #23]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d105      	bne.n	8006054 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006048:	4b3b      	ldr	r3, [pc, #236]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 800604a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604c:	4a3a      	ldr	r2, [pc, #232]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 800604e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006052:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 80ad 	beq.w	80061b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800605e:	4b36      	ldr	r3, [pc, #216]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	2b08      	cmp	r3, #8
 8006068:	d060      	beq.n	800612c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d145      	bne.n	80060fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006072:	4b33      	ldr	r3, [pc, #204]	@ (8006140 <HAL_RCC_OscConfig+0x4b4>)
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fc f808 	bl	800208c <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006080:	f7fc f804 	bl	800208c <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e093      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006092:	4b29      	ldr	r3, [pc, #164]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f0      	bne.n	8006080 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69da      	ldr	r2, [r3, #28]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ac:	019b      	lsls	r3, r3, #6
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b4:	085b      	lsrs	r3, r3, #1
 80060b6:	3b01      	subs	r3, #1
 80060b8:	041b      	lsls	r3, r3, #16
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c0:	061b      	lsls	r3, r3, #24
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c8:	071b      	lsls	r3, r3, #28
 80060ca:	491b      	ldr	r1, [pc, #108]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006140 <HAL_RCC_OscConfig+0x4b4>)
 80060d2:	2201      	movs	r2, #1
 80060d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d6:	f7fb ffd9 	bl	800208c <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060dc:	e008      	b.n	80060f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060de:	f7fb ffd5 	bl	800208c <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e064      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f0:	4b11      	ldr	r3, [pc, #68]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0f0      	beq.n	80060de <HAL_RCC_OscConfig+0x452>
 80060fc:	e05c      	b.n	80061b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060fe:	4b10      	ldr	r3, [pc, #64]	@ (8006140 <HAL_RCC_OscConfig+0x4b4>)
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006104:	f7fb ffc2 	bl	800208c <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800610c:	f7fb ffbe 	bl	800208c <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e04d      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800611e:	4b06      	ldr	r3, [pc, #24]	@ (8006138 <HAL_RCC_OscConfig+0x4ac>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f0      	bne.n	800610c <HAL_RCC_OscConfig+0x480>
 800612a:	e045      	b.n	80061b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d107      	bne.n	8006144 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e040      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
 8006138:	40023800 	.word	0x40023800
 800613c:	40007000 	.word	0x40007000
 8006140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006144:	4b1f      	ldr	r3, [pc, #124]	@ (80061c4 <HAL_RCC_OscConfig+0x538>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d030      	beq.n	80061b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800615c:	429a      	cmp	r2, r3
 800615e:	d129      	bne.n	80061b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800616a:	429a      	cmp	r2, r3
 800616c:	d122      	bne.n	80061b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006174:	4013      	ands	r3, r2
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800617a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800617c:	4293      	cmp	r3, r2
 800617e:	d119      	bne.n	80061b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	3b01      	subs	r3, #1
 800618e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006190:	429a      	cmp	r2, r3
 8006192:	d10f      	bne.n	80061b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d107      	bne.n	80061b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d001      	beq.n	80061b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	40023800 	.word	0x40023800

080061c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e041      	b.n	800625e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f839 	bl	8006266 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f000 f9c0 	bl	800658c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b01      	cmp	r3, #1
 800628e:	d001      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e04e      	b.n	8006332 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a23      	ldr	r2, [pc, #140]	@ (8006340 <HAL_TIM_Base_Start_IT+0xc4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d022      	beq.n	80062fc <HAL_TIM_Base_Start_IT+0x80>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062be:	d01d      	beq.n	80062fc <HAL_TIM_Base_Start_IT+0x80>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <HAL_TIM_Base_Start_IT+0xc8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d018      	beq.n	80062fc <HAL_TIM_Base_Start_IT+0x80>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006348 <HAL_TIM_Base_Start_IT+0xcc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d013      	beq.n	80062fc <HAL_TIM_Base_Start_IT+0x80>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1c      	ldr	r2, [pc, #112]	@ (800634c <HAL_TIM_Base_Start_IT+0xd0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00e      	beq.n	80062fc <HAL_TIM_Base_Start_IT+0x80>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006350 <HAL_TIM_Base_Start_IT+0xd4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d009      	beq.n	80062fc <HAL_TIM_Base_Start_IT+0x80>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a19      	ldr	r2, [pc, #100]	@ (8006354 <HAL_TIM_Base_Start_IT+0xd8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d004      	beq.n	80062fc <HAL_TIM_Base_Start_IT+0x80>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a18      	ldr	r2, [pc, #96]	@ (8006358 <HAL_TIM_Base_Start_IT+0xdc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d111      	bne.n	8006320 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b06      	cmp	r3, #6
 800630c:	d010      	beq.n	8006330 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0201 	orr.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631e:	e007      	b.n	8006330 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40010000 	.word	0x40010000
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40010400 	.word	0x40010400
 8006354:	40014000 	.word	0x40014000
 8006358:	40001800 	.word	0x40001800

0800635c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d020      	beq.n	80063c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01b      	beq.n	80063c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0202 	mvn.w	r2, #2
 8006390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f8d2 	bl	8006550 <HAL_TIM_IC_CaptureCallback>
 80063ac:	e005      	b.n	80063ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f8c4 	bl	800653c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f8d5 	bl	8006564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d020      	beq.n	800640c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d01b      	beq.n	800640c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0204 	mvn.w	r2, #4
 80063dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f8ac 	bl	8006550 <HAL_TIM_IC_CaptureCallback>
 80063f8:	e005      	b.n	8006406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f89e 	bl	800653c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f8af 	bl	8006564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d020      	beq.n	8006458 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d01b      	beq.n	8006458 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f06f 0208 	mvn.w	r2, #8
 8006428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2204      	movs	r2, #4
 800642e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f886 	bl	8006550 <HAL_TIM_IC_CaptureCallback>
 8006444:	e005      	b.n	8006452 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f878 	bl	800653c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f889 	bl	8006564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f003 0310 	and.w	r3, r3, #16
 800645e:	2b00      	cmp	r3, #0
 8006460:	d020      	beq.n	80064a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01b      	beq.n	80064a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0210 	mvn.w	r2, #16
 8006474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2208      	movs	r2, #8
 800647a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f860 	bl	8006550 <HAL_TIM_IC_CaptureCallback>
 8006490:	e005      	b.n	800649e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f852 	bl	800653c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f863 	bl	8006564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00c      	beq.n	80064c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0201 	mvn.w	r2, #1
 80064c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fb f91c 	bl	8001700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00c      	beq.n	80064ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d007      	beq.n	80064ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80064e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f906 	bl	80066f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00c      	beq.n	8006510 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d007      	beq.n	8006510 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f834 	bl	8006578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00c      	beq.n	8006534 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0220 	mvn.w	r2, #32
 800652c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f8d8 	bl	80066e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006534:	bf00      	nop
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a46      	ldr	r2, [pc, #280]	@ (80066b8 <TIM_Base_SetConfig+0x12c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d013      	beq.n	80065cc <TIM_Base_SetConfig+0x40>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065aa:	d00f      	beq.n	80065cc <TIM_Base_SetConfig+0x40>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a43      	ldr	r2, [pc, #268]	@ (80066bc <TIM_Base_SetConfig+0x130>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00b      	beq.n	80065cc <TIM_Base_SetConfig+0x40>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a42      	ldr	r2, [pc, #264]	@ (80066c0 <TIM_Base_SetConfig+0x134>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d007      	beq.n	80065cc <TIM_Base_SetConfig+0x40>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a41      	ldr	r2, [pc, #260]	@ (80066c4 <TIM_Base_SetConfig+0x138>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_Base_SetConfig+0x40>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a40      	ldr	r2, [pc, #256]	@ (80066c8 <TIM_Base_SetConfig+0x13c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d108      	bne.n	80065de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a35      	ldr	r2, [pc, #212]	@ (80066b8 <TIM_Base_SetConfig+0x12c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d02b      	beq.n	800663e <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ec:	d027      	beq.n	800663e <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a32      	ldr	r2, [pc, #200]	@ (80066bc <TIM_Base_SetConfig+0x130>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d023      	beq.n	800663e <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a31      	ldr	r2, [pc, #196]	@ (80066c0 <TIM_Base_SetConfig+0x134>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d01f      	beq.n	800663e <TIM_Base_SetConfig+0xb2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a30      	ldr	r2, [pc, #192]	@ (80066c4 <TIM_Base_SetConfig+0x138>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d01b      	beq.n	800663e <TIM_Base_SetConfig+0xb2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a2f      	ldr	r2, [pc, #188]	@ (80066c8 <TIM_Base_SetConfig+0x13c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d017      	beq.n	800663e <TIM_Base_SetConfig+0xb2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a2e      	ldr	r2, [pc, #184]	@ (80066cc <TIM_Base_SetConfig+0x140>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <TIM_Base_SetConfig+0xb2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2d      	ldr	r2, [pc, #180]	@ (80066d0 <TIM_Base_SetConfig+0x144>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00f      	beq.n	800663e <TIM_Base_SetConfig+0xb2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2c      	ldr	r2, [pc, #176]	@ (80066d4 <TIM_Base_SetConfig+0x148>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00b      	beq.n	800663e <TIM_Base_SetConfig+0xb2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a2b      	ldr	r2, [pc, #172]	@ (80066d8 <TIM_Base_SetConfig+0x14c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d007      	beq.n	800663e <TIM_Base_SetConfig+0xb2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2a      	ldr	r2, [pc, #168]	@ (80066dc <TIM_Base_SetConfig+0x150>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a29      	ldr	r2, [pc, #164]	@ (80066e0 <TIM_Base_SetConfig+0x154>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d108      	bne.n	8006650 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a10      	ldr	r2, [pc, #64]	@ (80066b8 <TIM_Base_SetConfig+0x12c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_Base_SetConfig+0xf8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a12      	ldr	r2, [pc, #72]	@ (80066c8 <TIM_Base_SetConfig+0x13c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d103      	bne.n	800668c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b01      	cmp	r3, #1
 800669c:	d105      	bne.n	80066aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f023 0201 	bic.w	r2, r3, #1
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	611a      	str	r2, [r3, #16]
  }
}
 80066aa:	bf00      	nop
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40010000 	.word	0x40010000
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40000c00 	.word	0x40000c00
 80066c8:	40010400 	.word	0x40010400
 80066cc:	40014000 	.word	0x40014000
 80066d0:	40014400 	.word	0x40014400
 80066d4:	40014800 	.word	0x40014800
 80066d8:	40001800 	.word	0x40001800
 80066dc:	40001c00 	.word	0x40001c00
 80066e0:	40002000 	.word	0x40002000

080066e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e042      	b.n	80067a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fb fa8c 	bl	8001c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2224      	movs	r2, #36	@ 0x24
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800674e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 f8ad 	bl	80078b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695a      	ldr	r2, [r3, #20]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08a      	sub	sp, #40	@ 0x28
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d175      	bne.n	80068b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_UART_Transmit+0x2c>
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e06e      	b.n	80068ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2221      	movs	r2, #33	@ 0x21
 80067e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ea:	f7fb fc4f 	bl	800208c <HAL_GetTick>
 80067ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	88fa      	ldrh	r2, [r7, #6]
 80067fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006804:	d108      	bne.n	8006818 <HAL_UART_Transmit+0x6c>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d104      	bne.n	8006818 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	61bb      	str	r3, [r7, #24]
 8006816:	e003      	b.n	8006820 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800681c:	2300      	movs	r3, #0
 800681e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006820:	e02e      	b.n	8006880 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2200      	movs	r2, #0
 800682a:	2180      	movs	r1, #128	@ 0x80
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 fd86 	bl	800733e <UART_WaitOnFlagUntilTimeout>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e03a      	b.n	80068ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10b      	bne.n	8006862 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006858:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	3302      	adds	r3, #2
 800685e:	61bb      	str	r3, [r7, #24]
 8006860:	e007      	b.n	8006872 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	781a      	ldrb	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	3301      	adds	r3, #1
 8006870:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1cb      	bne.n	8006822 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2200      	movs	r2, #0
 8006892:	2140      	movs	r1, #64	@ 0x40
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fd52 	bl	800733e <UART_WaitOnFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e006      	b.n	80068ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e000      	b.n	80068ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80068b8:	2302      	movs	r3, #2
  }
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08c      	sub	sp, #48	@ 0x30
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d156      	bne.n	800698c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_UART_Transmit_DMA+0x26>
 80068e4:	88fb      	ldrh	r3, [r7, #6]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e04f      	b.n	800698e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	88fa      	ldrh	r2, [r7, #6]
 80068fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2221      	movs	r2, #33	@ 0x21
 800690a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006912:	4a21      	ldr	r2, [pc, #132]	@ (8006998 <HAL_UART_Transmit_DMA+0xd4>)
 8006914:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691a:	4a20      	ldr	r2, [pc, #128]	@ (800699c <HAL_UART_Transmit_DMA+0xd8>)
 800691c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006922:	4a1f      	ldr	r2, [pc, #124]	@ (80069a0 <HAL_UART_Transmit_DMA+0xdc>)
 8006924:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692a:	2200      	movs	r2, #0
 800692c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800692e:	f107 0308 	add.w	r3, r7, #8
 8006932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693a:	6819      	ldr	r1, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3304      	adds	r3, #4
 8006942:	461a      	mov	r2, r3
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	f7fc fbc9 	bl	80030dc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006952:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3314      	adds	r3, #20
 800695a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	617b      	str	r3, [r7, #20]
   return(result);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800696a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3314      	adds	r3, #20
 8006972:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006974:	627a      	str	r2, [r7, #36]	@ 0x24
 8006976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6a39      	ldr	r1, [r7, #32]
 800697a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	61fb      	str	r3, [r7, #28]
   return(result);
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e5      	bne.n	8006954 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	e000      	b.n	800698e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800698c:	2302      	movs	r3, #2
  }
}
 800698e:	4618      	mov	r0, r3
 8006990:	3730      	adds	r7, #48	@ 0x30
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	0800708d 	.word	0x0800708d
 800699c:	08007127 	.word	0x08007127
 80069a0:	080072ab 	.word	0x080072ab

080069a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	4613      	mov	r3, r2
 80069b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b20      	cmp	r3, #32
 80069bc:	d112      	bne.n	80069e4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <HAL_UART_Receive_DMA+0x26>
 80069c4:	88fb      	ldrh	r3, [r7, #6]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e00b      	b.n	80069e6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	461a      	mov	r2, r3
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 fd08 	bl	80073f0 <UART_Start_Receive_DMA>
 80069e0:	4603      	mov	r3, r0
 80069e2:	e000      	b.n	80069e6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80069e4:	2302      	movs	r3, #2
  }
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b090      	sub	sp, #64	@ 0x40
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a04:	2b80      	cmp	r3, #128	@ 0x80
 8006a06:	bf0c      	ite	eq
 8006a08:	2301      	moveq	r3, #1
 8006a0a:	2300      	movne	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b21      	cmp	r3, #33	@ 0x21
 8006a1a:	d128      	bne.n	8006a6e <HAL_UART_DMAStop+0x80>
 8006a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d025      	beq.n	8006a6e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3314      	adds	r3, #20
 8006a28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	623b      	str	r3, [r7, #32]
   return(result);
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3314      	adds	r3, #20
 8006a40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a42:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e5      	bne.n	8006a22 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d004      	beq.n	8006a68 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fc fb92 	bl	800318c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fd5b 	bl	8007524 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a78:	2b40      	cmp	r3, #64	@ 0x40
 8006a7a:	bf0c      	ite	eq
 8006a7c:	2301      	moveq	r3, #1
 8006a7e:	2300      	movne	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b22      	cmp	r3, #34	@ 0x22
 8006a8e:	d128      	bne.n	8006ae2 <HAL_UART_DMAStop+0xf4>
 8006a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d025      	beq.n	8006ae2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3314      	adds	r3, #20
 8006a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3314      	adds	r3, #20
 8006ab4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ab6:	61fa      	str	r2, [r7, #28]
 8006ab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	69b9      	ldr	r1, [r7, #24]
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e5      	bne.n	8006a96 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fc fb58 	bl	800318c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fd49 	bl	8007574 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3740      	adds	r7, #64	@ 0x40
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b0ba      	sub	sp, #232	@ 0xe8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10f      	bne.n	8006b52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <HAL_UART_IRQHandler+0x66>
 8006b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fdf1 	bl	8007732 <UART_Receive_IT>
      return;
 8006b50:	e25b      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80de 	beq.w	8006d18 <HAL_UART_IRQHandler+0x22c>
 8006b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 80d1 	beq.w	8006d18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <HAL_UART_IRQHandler+0xae>
 8006b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d005      	beq.n	8006b9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b92:	f043 0201 	orr.w	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00b      	beq.n	8006bbe <HAL_UART_IRQHandler+0xd2>
 8006ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d005      	beq.n	8006bbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb6:	f043 0202 	orr.w	r2, r3, #2
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00b      	beq.n	8006be2 <HAL_UART_IRQHandler+0xf6>
 8006bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bda:	f043 0204 	orr.w	r2, r3, #4
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d011      	beq.n	8006c12 <HAL_UART_IRQHandler+0x126>
 8006bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d105      	bne.n	8006c06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c0a:	f043 0208 	orr.w	r2, r3, #8
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 81f2 	beq.w	8007000 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <HAL_UART_IRQHandler+0x14e>
 8006c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fd7c 	bl	8007732 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c44:	2b40      	cmp	r3, #64	@ 0x40
 8006c46:	bf0c      	ite	eq
 8006c48:	2301      	moveq	r3, #1
 8006c4a:	2300      	movne	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d103      	bne.n	8006c66 <HAL_UART_IRQHandler+0x17a>
 8006c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d04f      	beq.n	8006d06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fc84 	bl	8007574 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c76:	2b40      	cmp	r3, #64	@ 0x40
 8006c78:	d141      	bne.n	8006cfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3314      	adds	r3, #20
 8006ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006caa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1d9      	bne.n	8006c7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d013      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8006ecc <HAL_UART_IRQHandler+0x3e0>)
 8006cd4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fc fac6 	bl	800326c <HAL_DMA_Abort_IT>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d016      	beq.n	8006d14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf4:	e00e      	b.n	8006d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f9b2 	bl	8007060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfc:	e00a      	b.n	8006d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f9ae 	bl	8007060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d04:	e006      	b.n	8006d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f9aa 	bl	8007060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006d12:	e175      	b.n	8007000 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d14:	bf00      	nop
    return;
 8006d16:	e173      	b.n	8007000 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	f040 814f 	bne.w	8006fc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8148 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8141 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	60bb      	str	r3, [r7, #8]
 8006d52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5e:	2b40      	cmp	r3, #64	@ 0x40
 8006d60:	f040 80b6 	bne.w	8006ed0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8145 	beq.w	8007004 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d82:	429a      	cmp	r2, r3
 8006d84:	f080 813e 	bcs.w	8007004 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d9a:	f000 8088 	beq.w	8006eae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	330c      	adds	r3, #12
 8006dc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006dca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006dce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006dd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1d9      	bne.n	8006d9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3314      	adds	r3, #20
 8006df0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006dfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dfc:	f023 0301 	bic.w	r3, r3, #1
 8006e00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3314      	adds	r3, #20
 8006e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e1      	bne.n	8006dea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3314      	adds	r3, #20
 8006e2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3314      	adds	r3, #20
 8006e46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e3      	bne.n	8006e26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	330c      	adds	r3, #12
 8006e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e76:	e853 3f00 	ldrex	r3, [r3]
 8006e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e7e:	f023 0310 	bic.w	r3, r3, #16
 8006e82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	330c      	adds	r3, #12
 8006e8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006e90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e3      	bne.n	8006e6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fc f96f 	bl	800318c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f8d5 	bl	8007074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006eca:	e09b      	b.n	8007004 <HAL_UART_IRQHandler+0x518>
 8006ecc:	0800763b 	.word	0x0800763b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 808e 	beq.w	8007008 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8089 	beq.w	8007008 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006f1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e3      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3314      	adds	r3, #20
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3314      	adds	r3, #20
 8006f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f52:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e3      	bne.n	8006f2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0310 	bic.w	r3, r3, #16
 8006f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	330c      	adds	r3, #12
 8006f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f98:	61fa      	str	r2, [r7, #28]
 8006f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	69b9      	ldr	r1, [r7, #24]
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e3      	bne.n	8006f74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f85b 	bl	8007074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fbe:	e023      	b.n	8007008 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d009      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x4f4>
 8006fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fb42 	bl	8007662 <UART_Transmit_IT>
    return;
 8006fde:	e014      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00e      	beq.n	800700a <HAL_UART_IRQHandler+0x51e>
 8006fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fb82 	bl	8007702 <UART_EndTransmit_IT>
    return;
 8006ffe:	e004      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
    return;
 8007000:	bf00      	nop
 8007002:	e002      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
      return;
 8007004:	bf00      	nop
 8007006:	e000      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
      return;
 8007008:	bf00      	nop
  }
}
 800700a:	37e8      	adds	r7, #232	@ 0xe8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b090      	sub	sp, #64	@ 0x40
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007098:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d137      	bne.n	8007118 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80070a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070aa:	2200      	movs	r2, #0
 80070ac:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3314      	adds	r3, #20
 80070b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	623b      	str	r3, [r7, #32]
   return(result);
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3314      	adds	r3, #20
 80070cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80070d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e5      	bne.n	80070ae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	330c      	adds	r3, #12
 8007100:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007102:	61fa      	str	r2, [r7, #28]
 8007104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	69b9      	ldr	r1, [r7, #24]
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	617b      	str	r3, [r7, #20]
   return(result);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e5      	bne.n	80070e2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007116:	e002      	b.n	800711e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007118:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800711a:	f7ff ff79 	bl	8007010 <HAL_UART_TxCpltCallback>
}
 800711e:	bf00      	nop
 8007120:	3740      	adds	r7, #64	@ 0x40
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007132:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f7ff ff75 	bl	8007024 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800713a:	bf00      	nop
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b09c      	sub	sp, #112	@ 0x70
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800715a:	2b00      	cmp	r3, #0
 800715c:	d172      	bne.n	8007244 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800715e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007160:	2200      	movs	r2, #0
 8007162:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007164:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	330c      	adds	r3, #12
 800716a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007176:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800717a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800717c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007184:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007186:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800718a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e5      	bne.n	8007164 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3314      	adds	r3, #20
 800719e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a2:	e853 3f00 	ldrex	r3, [r3]
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071aa:	f023 0301 	bic.w	r3, r3, #1
 80071ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80071b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3314      	adds	r3, #20
 80071b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80071b8:	647a      	str	r2, [r7, #68]	@ 0x44
 80071ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071c0:	e841 2300 	strex	r3, r2, [r1]
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e5      	bne.n	8007198 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3314      	adds	r3, #20
 80071d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	623b      	str	r3, [r7, #32]
   return(result);
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80071e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3314      	adds	r3, #20
 80071ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80071ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80071ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e5      	bne.n	80071cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007202:	2220      	movs	r2, #32
 8007204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800720a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720c:	2b01      	cmp	r3, #1
 800720e:	d119      	bne.n	8007244 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	330c      	adds	r3, #12
 8007216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0310 	bic.w	r3, r3, #16
 8007226:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	330c      	adds	r3, #12
 800722e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007230:	61fa      	str	r2, [r7, #28]
 8007232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	69b9      	ldr	r1, [r7, #24]
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	617b      	str	r3, [r7, #20]
   return(result);
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e5      	bne.n	8007210 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007246:	2200      	movs	r2, #0
 8007248:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800724a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800724c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724e:	2b01      	cmp	r3, #1
 8007250:	d106      	bne.n	8007260 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007254:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007256:	4619      	mov	r1, r3
 8007258:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800725a:	f7ff ff0b 	bl	8007074 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800725e:	e002      	b.n	8007266 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007260:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007262:	f7ff fee9 	bl	8007038 <HAL_UART_RxCpltCallback>
}
 8007266:	bf00      	nop
 8007268:	3770      	adds	r7, #112	@ 0x70
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2201      	movs	r2, #1
 8007280:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007286:	2b01      	cmp	r3, #1
 8007288:	d108      	bne.n	800729c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800728e:	085b      	lsrs	r3, r3, #1
 8007290:	b29b      	uxth	r3, r3
 8007292:	4619      	mov	r1, r3
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7ff feed 	bl	8007074 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800729a:	e002      	b.n	80072a2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f7ff fed5 	bl	800704c <HAL_UART_RxHalfCpltCallback>
}
 80072a2:	bf00      	nop
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c6:	2b80      	cmp	r3, #128	@ 0x80
 80072c8:	bf0c      	ite	eq
 80072ca:	2301      	moveq	r3, #1
 80072cc:	2300      	movne	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b21      	cmp	r3, #33	@ 0x21
 80072dc:	d108      	bne.n	80072f0 <UART_DMAError+0x46>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d005      	beq.n	80072f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2200      	movs	r2, #0
 80072e8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80072ea:	68b8      	ldr	r0, [r7, #8]
 80072ec:	f000 f91a 	bl	8007524 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fa:	2b40      	cmp	r3, #64	@ 0x40
 80072fc:	bf0c      	ite	eq
 80072fe:	2301      	moveq	r3, #1
 8007300:	2300      	movne	r3, #0
 8007302:	b2db      	uxtb	r3, r3
 8007304:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b22      	cmp	r3, #34	@ 0x22
 8007310:	d108      	bne.n	8007324 <UART_DMAError+0x7a>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2200      	movs	r2, #0
 800731c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800731e:	68b8      	ldr	r0, [r7, #8]
 8007320:	f000 f928 	bl	8007574 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007328:	f043 0210 	orr.w	r2, r3, #16
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007330:	68b8      	ldr	r0, [r7, #8]
 8007332:	f7ff fe95 	bl	8007060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007336:	bf00      	nop
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b086      	sub	sp, #24
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	603b      	str	r3, [r7, #0]
 800734a:	4613      	mov	r3, r2
 800734c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800734e:	e03b      	b.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007356:	d037      	beq.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007358:	f7fa fe98 	bl	800208c <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	6a3a      	ldr	r2, [r7, #32]
 8007364:	429a      	cmp	r2, r3
 8007366:	d302      	bcc.n	800736e <UART_WaitOnFlagUntilTimeout+0x30>
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e03a      	b.n	80073e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d023      	beq.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b80      	cmp	r3, #128	@ 0x80
 8007384:	d020      	beq.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b40      	cmp	r3, #64	@ 0x40
 800738a:	d01d      	beq.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b08      	cmp	r3, #8
 8007398:	d116      	bne.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f8df 	bl	8007574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2208      	movs	r2, #8
 80073ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e00f      	b.n	80073e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	4013      	ands	r3, r2
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	bf0c      	ite	eq
 80073d8:	2301      	moveq	r3, #1
 80073da:	2300      	movne	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	461a      	mov	r2, r3
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d0b4      	beq.n	8007350 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b098      	sub	sp, #96	@ 0x60
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	4613      	mov	r3, r2
 80073fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	88fa      	ldrh	r2, [r7, #6]
 8007408:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2222      	movs	r2, #34	@ 0x22
 8007414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741c:	4a3e      	ldr	r2, [pc, #248]	@ (8007518 <UART_Start_Receive_DMA+0x128>)
 800741e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007424:	4a3d      	ldr	r2, [pc, #244]	@ (800751c <UART_Start_Receive_DMA+0x12c>)
 8007426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742c:	4a3c      	ldr	r2, [pc, #240]	@ (8007520 <UART_Start_Receive_DMA+0x130>)
 800742e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007434:	2200      	movs	r2, #0
 8007436:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007438:	f107 0308 	add.w	r3, r7, #8
 800743c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3304      	adds	r3, #4
 8007448:	4619      	mov	r1, r3
 800744a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	88fb      	ldrh	r3, [r7, #6]
 8007450:	f7fb fe44 	bl	80030dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007454:	2300      	movs	r3, #0
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d019      	beq.n	80074a6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	330c      	adds	r3, #12
 8007478:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007488:	65bb      	str	r3, [r7, #88]	@ 0x58
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	330c      	adds	r3, #12
 8007490:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007492:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007494:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007498:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80074a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e5      	bne.n	8007472 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3314      	adds	r3, #20
 80074ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b8:	f043 0301 	orr.w	r3, r3, #1
 80074bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3314      	adds	r3, #20
 80074c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80074c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80074c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80074cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e5      	bne.n	80074a6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3314      	adds	r3, #20
 80074e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	617b      	str	r3, [r7, #20]
   return(result);
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3314      	adds	r3, #20
 80074f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80074fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80074fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6a39      	ldr	r1, [r7, #32]
 8007500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	61fb      	str	r3, [r7, #28]
   return(result);
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e5      	bne.n	80074da <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3760      	adds	r7, #96	@ 0x60
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	08007143 	.word	0x08007143
 800751c:	0800726f 	.word	0x0800726f
 8007520:	080072ab 	.word	0x080072ab

08007524 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007524:	b480      	push	{r7}
 8007526:	b089      	sub	sp, #36	@ 0x24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	330c      	adds	r3, #12
 8007532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	60bb      	str	r3, [r7, #8]
   return(result);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007542:	61fb      	str	r3, [r7, #28]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	330c      	adds	r3, #12
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	61ba      	str	r2, [r7, #24]
 800754e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6979      	ldr	r1, [r7, #20]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	613b      	str	r3, [r7, #16]
   return(result);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e5      	bne.n	800752c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007568:	bf00      	nop
 800756a:	3724      	adds	r7, #36	@ 0x24
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b095      	sub	sp, #84	@ 0x54
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	330c      	adds	r3, #12
 8007582:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007592:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	330c      	adds	r3, #12
 800759a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800759c:	643a      	str	r2, [r7, #64]	@ 0x40
 800759e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e5      	bne.n	800757c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3314      	adds	r3, #20
 80075b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	61fb      	str	r3, [r7, #28]
   return(result);
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	f023 0301 	bic.w	r3, r3, #1
 80075c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3314      	adds	r3, #20
 80075ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e5      	bne.n	80075b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d119      	bne.n	8007620 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	330c      	adds	r3, #12
 80075f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f023 0310 	bic.w	r3, r3, #16
 8007602:	647b      	str	r3, [r7, #68]	@ 0x44
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	330c      	adds	r3, #12
 800760a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800760c:	61ba      	str	r2, [r7, #24]
 800760e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6979      	ldr	r1, [r7, #20]
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	613b      	str	r3, [r7, #16]
   return(result);
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e5      	bne.n	80075ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800762e:	bf00      	nop
 8007630:	3754      	adds	r7, #84	@ 0x54
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b084      	sub	sp, #16
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007646:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f7ff fd03 	bl	8007060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007662:	b480      	push	{r7}
 8007664:	b085      	sub	sp, #20
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b21      	cmp	r3, #33	@ 0x21
 8007674:	d13e      	bne.n	80076f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800767e:	d114      	bne.n	80076aa <UART_Transmit_IT+0x48>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d110      	bne.n	80076aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800769c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	1c9a      	adds	r2, r3, #2
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	621a      	str	r2, [r3, #32]
 80076a8:	e008      	b.n	80076bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	1c59      	adds	r1, r3, #1
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6211      	str	r1, [r2, #32]
 80076b4:	781a      	ldrb	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	4619      	mov	r1, r3
 80076ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10f      	bne.n	80076f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	e000      	b.n	80076f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076f4:	2302      	movs	r3, #2
  }
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007718:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff fc74 	bl	8007010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b08c      	sub	sp, #48	@ 0x30
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b22      	cmp	r3, #34	@ 0x22
 8007744:	f040 80ae 	bne.w	80078a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007750:	d117      	bne.n	8007782 <UART_Receive_IT+0x50>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d113      	bne.n	8007782 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800775a:	2300      	movs	r3, #0
 800775c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007762:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	b29b      	uxth	r3, r3
 800776c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007770:	b29a      	uxth	r2, r3
 8007772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007774:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777a:	1c9a      	adds	r2, r3, #2
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007780:	e026      	b.n	80077d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007786:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007788:	2300      	movs	r3, #0
 800778a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007794:	d007      	beq.n	80077a6 <UART_Receive_IT+0x74>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10a      	bne.n	80077b4 <UART_Receive_IT+0x82>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d106      	bne.n	80077b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b0:	701a      	strb	r2, [r3, #0]
 80077b2:	e008      	b.n	80077c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	3b01      	subs	r3, #1
 80077d8:	b29b      	uxth	r3, r3
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	4619      	mov	r1, r3
 80077de:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d15d      	bne.n	80078a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0220 	bic.w	r2, r2, #32
 80077f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	695a      	ldr	r2, [r3, #20]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 0201 	bic.w	r2, r2, #1
 8007812:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2220      	movs	r2, #32
 8007818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007826:	2b01      	cmp	r3, #1
 8007828:	d135      	bne.n	8007896 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	330c      	adds	r3, #12
 8007836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	613b      	str	r3, [r7, #16]
   return(result);
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f023 0310 	bic.w	r3, r3, #16
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	330c      	adds	r3, #12
 800784e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007850:	623a      	str	r2, [r7, #32]
 8007852:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	69f9      	ldr	r1, [r7, #28]
 8007856:	6a3a      	ldr	r2, [r7, #32]
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	61bb      	str	r3, [r7, #24]
   return(result);
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e5      	bne.n	8007830 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b10      	cmp	r3, #16
 8007870:	d10a      	bne.n	8007888 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007872:	2300      	movs	r3, #0
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff fbf0 	bl	8007074 <HAL_UARTEx_RxEventCallback>
 8007894:	e002      	b.n	800789c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff fbce 	bl	8007038 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	e002      	b.n	80078a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	e000      	b.n	80078a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80078a4:	2302      	movs	r3, #2
  }
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3730      	adds	r7, #48	@ 0x30
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078b4:	b0c0      	sub	sp, #256	@ 0x100
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80078c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078cc:	68d9      	ldr	r1, [r3, #12]
 80078ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	ea40 0301 	orr.w	r3, r0, r1
 80078d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078de:	689a      	ldr	r2, [r3, #8]
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	431a      	orrs	r2, r3
 80078f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007908:	f021 010c 	bic.w	r1, r1, #12
 800790c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007916:	430b      	orrs	r3, r1
 8007918:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800791a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792a:	6999      	ldr	r1, [r3, #24]
 800792c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	ea40 0301 	orr.w	r3, r0, r1
 8007936:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	4b8f      	ldr	r3, [pc, #572]	@ (8007b7c <UART_SetConfig+0x2cc>)
 8007940:	429a      	cmp	r2, r3
 8007942:	d005      	beq.n	8007950 <UART_SetConfig+0xa0>
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	4b8d      	ldr	r3, [pc, #564]	@ (8007b80 <UART_SetConfig+0x2d0>)
 800794c:	429a      	cmp	r2, r3
 800794e:	d104      	bne.n	800795a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007950:	f7fd fc82 	bl	8005258 <HAL_RCC_GetPCLK2Freq>
 8007954:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007958:	e003      	b.n	8007962 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800795a:	f7fd fc69 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 800795e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800796c:	f040 810c 	bne.w	8007b88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007974:	2200      	movs	r2, #0
 8007976:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800797a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800797e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007982:	4622      	mov	r2, r4
 8007984:	462b      	mov	r3, r5
 8007986:	1891      	adds	r1, r2, r2
 8007988:	65b9      	str	r1, [r7, #88]	@ 0x58
 800798a:	415b      	adcs	r3, r3
 800798c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800798e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007992:	4621      	mov	r1, r4
 8007994:	eb12 0801 	adds.w	r8, r2, r1
 8007998:	4629      	mov	r1, r5
 800799a:	eb43 0901 	adc.w	r9, r3, r1
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	f04f 0300 	mov.w	r3, #0
 80079a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079b2:	4690      	mov	r8, r2
 80079b4:	4699      	mov	r9, r3
 80079b6:	4623      	mov	r3, r4
 80079b8:	eb18 0303 	adds.w	r3, r8, r3
 80079bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079c0:	462b      	mov	r3, r5
 80079c2:	eb49 0303 	adc.w	r3, r9, r3
 80079c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80079da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079de:	460b      	mov	r3, r1
 80079e0:	18db      	adds	r3, r3, r3
 80079e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80079e4:	4613      	mov	r3, r2
 80079e6:	eb42 0303 	adc.w	r3, r2, r3
 80079ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80079ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80079f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80079f4:	f7f9 f968 	bl	8000cc8 <__aeabi_uldivmod>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4b61      	ldr	r3, [pc, #388]	@ (8007b84 <UART_SetConfig+0x2d4>)
 80079fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	011c      	lsls	r4, r3, #4
 8007a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a18:	4642      	mov	r2, r8
 8007a1a:	464b      	mov	r3, r9
 8007a1c:	1891      	adds	r1, r2, r2
 8007a1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a20:	415b      	adcs	r3, r3
 8007a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a28:	4641      	mov	r1, r8
 8007a2a:	eb12 0a01 	adds.w	sl, r2, r1
 8007a2e:	4649      	mov	r1, r9
 8007a30:	eb43 0b01 	adc.w	fp, r3, r1
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	f04f 0300 	mov.w	r3, #0
 8007a3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a48:	4692      	mov	sl, r2
 8007a4a:	469b      	mov	fp, r3
 8007a4c:	4643      	mov	r3, r8
 8007a4e:	eb1a 0303 	adds.w	r3, sl, r3
 8007a52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a56:	464b      	mov	r3, r9
 8007a58:	eb4b 0303 	adc.w	r3, fp, r3
 8007a5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a74:	460b      	mov	r3, r1
 8007a76:	18db      	adds	r3, r3, r3
 8007a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	eb42 0303 	adc.w	r3, r2, r3
 8007a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a8a:	f7f9 f91d 	bl	8000cc8 <__aeabi_uldivmod>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	4611      	mov	r1, r2
 8007a94:	4b3b      	ldr	r3, [pc, #236]	@ (8007b84 <UART_SetConfig+0x2d4>)
 8007a96:	fba3 2301 	umull	r2, r3, r3, r1
 8007a9a:	095b      	lsrs	r3, r3, #5
 8007a9c:	2264      	movs	r2, #100	@ 0x64
 8007a9e:	fb02 f303 	mul.w	r3, r2, r3
 8007aa2:	1acb      	subs	r3, r1, r3
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007aaa:	4b36      	ldr	r3, [pc, #216]	@ (8007b84 <UART_SetConfig+0x2d4>)
 8007aac:	fba3 2302 	umull	r2, r3, r3, r2
 8007ab0:	095b      	lsrs	r3, r3, #5
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007ab8:	441c      	add	r4, r3
 8007aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ac4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007ac8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007acc:	4642      	mov	r2, r8
 8007ace:	464b      	mov	r3, r9
 8007ad0:	1891      	adds	r1, r2, r2
 8007ad2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ad4:	415b      	adcs	r3, r3
 8007ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ad8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007adc:	4641      	mov	r1, r8
 8007ade:	1851      	adds	r1, r2, r1
 8007ae0:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	414b      	adcs	r3, r1
 8007ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae8:	f04f 0200 	mov.w	r2, #0
 8007aec:	f04f 0300 	mov.w	r3, #0
 8007af0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007af4:	4659      	mov	r1, fp
 8007af6:	00cb      	lsls	r3, r1, #3
 8007af8:	4651      	mov	r1, sl
 8007afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007afe:	4651      	mov	r1, sl
 8007b00:	00ca      	lsls	r2, r1, #3
 8007b02:	4610      	mov	r0, r2
 8007b04:	4619      	mov	r1, r3
 8007b06:	4603      	mov	r3, r0
 8007b08:	4642      	mov	r2, r8
 8007b0a:	189b      	adds	r3, r3, r2
 8007b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b10:	464b      	mov	r3, r9
 8007b12:	460a      	mov	r2, r1
 8007b14:	eb42 0303 	adc.w	r3, r2, r3
 8007b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b30:	460b      	mov	r3, r1
 8007b32:	18db      	adds	r3, r3, r3
 8007b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b36:	4613      	mov	r3, r2
 8007b38:	eb42 0303 	adc.w	r3, r2, r3
 8007b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b46:	f7f9 f8bf 	bl	8000cc8 <__aeabi_uldivmod>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b84 <UART_SetConfig+0x2d4>)
 8007b50:	fba3 1302 	umull	r1, r3, r3, r2
 8007b54:	095b      	lsrs	r3, r3, #5
 8007b56:	2164      	movs	r1, #100	@ 0x64
 8007b58:	fb01 f303 	mul.w	r3, r1, r3
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	3332      	adds	r3, #50	@ 0x32
 8007b62:	4a08      	ldr	r2, [pc, #32]	@ (8007b84 <UART_SetConfig+0x2d4>)
 8007b64:	fba2 2303 	umull	r2, r3, r2, r3
 8007b68:	095b      	lsrs	r3, r3, #5
 8007b6a:	f003 0207 	and.w	r2, r3, #7
 8007b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4422      	add	r2, r4
 8007b76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b78:	e106      	b.n	8007d88 <UART_SetConfig+0x4d8>
 8007b7a:	bf00      	nop
 8007b7c:	40011000 	.word	0x40011000
 8007b80:	40011400 	.word	0x40011400
 8007b84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b9a:	4642      	mov	r2, r8
 8007b9c:	464b      	mov	r3, r9
 8007b9e:	1891      	adds	r1, r2, r2
 8007ba0:	6239      	str	r1, [r7, #32]
 8007ba2:	415b      	adcs	r3, r3
 8007ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ba6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007baa:	4641      	mov	r1, r8
 8007bac:	1854      	adds	r4, r2, r1
 8007bae:	4649      	mov	r1, r9
 8007bb0:	eb43 0501 	adc.w	r5, r3, r1
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	f04f 0300 	mov.w	r3, #0
 8007bbc:	00eb      	lsls	r3, r5, #3
 8007bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bc2:	00e2      	lsls	r2, r4, #3
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	461d      	mov	r5, r3
 8007bc8:	4643      	mov	r3, r8
 8007bca:	18e3      	adds	r3, r4, r3
 8007bcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bd0:	464b      	mov	r3, r9
 8007bd2:	eb45 0303 	adc.w	r3, r5, r3
 8007bd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007be6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007bea:	f04f 0200 	mov.w	r2, #0
 8007bee:	f04f 0300 	mov.w	r3, #0
 8007bf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	008b      	lsls	r3, r1, #2
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c00:	4621      	mov	r1, r4
 8007c02:	008a      	lsls	r2, r1, #2
 8007c04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c08:	f7f9 f85e 	bl	8000cc8 <__aeabi_uldivmod>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4b60      	ldr	r3, [pc, #384]	@ (8007d94 <UART_SetConfig+0x4e4>)
 8007c12:	fba3 2302 	umull	r2, r3, r3, r2
 8007c16:	095b      	lsrs	r3, r3, #5
 8007c18:	011c      	lsls	r4, r3, #4
 8007c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c2c:	4642      	mov	r2, r8
 8007c2e:	464b      	mov	r3, r9
 8007c30:	1891      	adds	r1, r2, r2
 8007c32:	61b9      	str	r1, [r7, #24]
 8007c34:	415b      	adcs	r3, r3
 8007c36:	61fb      	str	r3, [r7, #28]
 8007c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c3c:	4641      	mov	r1, r8
 8007c3e:	1851      	adds	r1, r2, r1
 8007c40:	6139      	str	r1, [r7, #16]
 8007c42:	4649      	mov	r1, r9
 8007c44:	414b      	adcs	r3, r1
 8007c46:	617b      	str	r3, [r7, #20]
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c54:	4659      	mov	r1, fp
 8007c56:	00cb      	lsls	r3, r1, #3
 8007c58:	4651      	mov	r1, sl
 8007c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c5e:	4651      	mov	r1, sl
 8007c60:	00ca      	lsls	r2, r1, #3
 8007c62:	4610      	mov	r0, r2
 8007c64:	4619      	mov	r1, r3
 8007c66:	4603      	mov	r3, r0
 8007c68:	4642      	mov	r2, r8
 8007c6a:	189b      	adds	r3, r3, r2
 8007c6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c70:	464b      	mov	r3, r9
 8007c72:	460a      	mov	r2, r1
 8007c74:	eb42 0303 	adc.w	r3, r2, r3
 8007c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c88:	f04f 0200 	mov.w	r2, #0
 8007c8c:	f04f 0300 	mov.w	r3, #0
 8007c90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c94:	4649      	mov	r1, r9
 8007c96:	008b      	lsls	r3, r1, #2
 8007c98:	4641      	mov	r1, r8
 8007c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c9e:	4641      	mov	r1, r8
 8007ca0:	008a      	lsls	r2, r1, #2
 8007ca2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ca6:	f7f9 f80f 	bl	8000cc8 <__aeabi_uldivmod>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4b38      	ldr	r3, [pc, #224]	@ (8007d94 <UART_SetConfig+0x4e4>)
 8007cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8007cb6:	095b      	lsrs	r3, r3, #5
 8007cb8:	2264      	movs	r2, #100	@ 0x64
 8007cba:	fb02 f303 	mul.w	r3, r2, r3
 8007cbe:	1acb      	subs	r3, r1, r3
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	3332      	adds	r3, #50	@ 0x32
 8007cc4:	4a33      	ldr	r2, [pc, #204]	@ (8007d94 <UART_SetConfig+0x4e4>)
 8007cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cca:	095b      	lsrs	r3, r3, #5
 8007ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cd0:	441c      	add	r4, r3
 8007cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cda:	677a      	str	r2, [r7, #116]	@ 0x74
 8007cdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	1891      	adds	r1, r2, r2
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	415b      	adcs	r3, r3
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cf0:	4641      	mov	r1, r8
 8007cf2:	1851      	adds	r1, r2, r1
 8007cf4:	6039      	str	r1, [r7, #0]
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	414b      	adcs	r3, r1
 8007cfa:	607b      	str	r3, [r7, #4]
 8007cfc:	f04f 0200 	mov.w	r2, #0
 8007d00:	f04f 0300 	mov.w	r3, #0
 8007d04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d08:	4659      	mov	r1, fp
 8007d0a:	00cb      	lsls	r3, r1, #3
 8007d0c:	4651      	mov	r1, sl
 8007d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d12:	4651      	mov	r1, sl
 8007d14:	00ca      	lsls	r2, r1, #3
 8007d16:	4610      	mov	r0, r2
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	189b      	adds	r3, r3, r2
 8007d20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d22:	464b      	mov	r3, r9
 8007d24:	460a      	mov	r2, r1
 8007d26:	eb42 0303 	adc.w	r3, r2, r3
 8007d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d36:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d44:	4649      	mov	r1, r9
 8007d46:	008b      	lsls	r3, r1, #2
 8007d48:	4641      	mov	r1, r8
 8007d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d4e:	4641      	mov	r1, r8
 8007d50:	008a      	lsls	r2, r1, #2
 8007d52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d56:	f7f8 ffb7 	bl	8000cc8 <__aeabi_uldivmod>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d94 <UART_SetConfig+0x4e4>)
 8007d60:	fba3 1302 	umull	r1, r3, r3, r2
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	2164      	movs	r1, #100	@ 0x64
 8007d68:	fb01 f303 	mul.w	r3, r1, r3
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	3332      	adds	r3, #50	@ 0x32
 8007d72:	4a08      	ldr	r2, [pc, #32]	@ (8007d94 <UART_SetConfig+0x4e4>)
 8007d74:	fba2 2303 	umull	r2, r3, r2, r3
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	f003 020f 	and.w	r2, r3, #15
 8007d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4422      	add	r2, r4
 8007d86:	609a      	str	r2, [r3, #8]
}
 8007d88:	bf00      	nop
 8007d8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d94:	51eb851f 	.word	0x51eb851f

08007d98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d98:	b084      	sub	sp, #16
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	f107 001c 	add.w	r0, r7, #28
 8007da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007daa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d123      	bne.n	8007dfa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007dc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d105      	bne.n	8007dee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 fadc 	bl	80093ac <USB_CoreReset>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73fb      	strb	r3, [r7, #15]
 8007df8:	e01b      	b.n	8007e32 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fad0 	bl	80093ac <USB_CoreReset>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d106      	bne.n	8007e26 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e24:	e005      	b.n	8007e32 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e32:	7fbb      	ldrb	r3, [r7, #30]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d10b      	bne.n	8007e50 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f043 0206 	orr.w	r2, r3, #6
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f043 0220 	orr.w	r2, r3, #32
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e5c:	b004      	add	sp, #16
 8007e5e:	4770      	bx	lr

08007e60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d165      	bne.n	8007f40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4a41      	ldr	r2, [pc, #260]	@ (8007f7c <USB_SetTurnaroundTime+0x11c>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d906      	bls.n	8007e8a <USB_SetTurnaroundTime+0x2a>
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	4a40      	ldr	r2, [pc, #256]	@ (8007f80 <USB_SetTurnaroundTime+0x120>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d202      	bcs.n	8007e8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007e84:	230f      	movs	r3, #15
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	e062      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8007f80 <USB_SetTurnaroundTime+0x120>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d306      	bcc.n	8007ea0 <USB_SetTurnaroundTime+0x40>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	4a3b      	ldr	r2, [pc, #236]	@ (8007f84 <USB_SetTurnaroundTime+0x124>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d202      	bcs.n	8007ea0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e9a:	230e      	movs	r3, #14
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	e057      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4a38      	ldr	r2, [pc, #224]	@ (8007f84 <USB_SetTurnaroundTime+0x124>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d306      	bcc.n	8007eb6 <USB_SetTurnaroundTime+0x56>
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4a37      	ldr	r2, [pc, #220]	@ (8007f88 <USB_SetTurnaroundTime+0x128>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d202      	bcs.n	8007eb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007eb0:	230d      	movs	r3, #13
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	e04c      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4a33      	ldr	r2, [pc, #204]	@ (8007f88 <USB_SetTurnaroundTime+0x128>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d306      	bcc.n	8007ecc <USB_SetTurnaroundTime+0x6c>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4a32      	ldr	r2, [pc, #200]	@ (8007f8c <USB_SetTurnaroundTime+0x12c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d802      	bhi.n	8007ecc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	e041      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4a2f      	ldr	r2, [pc, #188]	@ (8007f8c <USB_SetTurnaroundTime+0x12c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d906      	bls.n	8007ee2 <USB_SetTurnaroundTime+0x82>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8007f90 <USB_SetTurnaroundTime+0x130>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d802      	bhi.n	8007ee2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007edc:	230b      	movs	r3, #11
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	e036      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8007f90 <USB_SetTurnaroundTime+0x130>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d906      	bls.n	8007ef8 <USB_SetTurnaroundTime+0x98>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	4a29      	ldr	r2, [pc, #164]	@ (8007f94 <USB_SetTurnaroundTime+0x134>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d802      	bhi.n	8007ef8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007ef2:	230a      	movs	r3, #10
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	e02b      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4a26      	ldr	r2, [pc, #152]	@ (8007f94 <USB_SetTurnaroundTime+0x134>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d906      	bls.n	8007f0e <USB_SetTurnaroundTime+0xae>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4a25      	ldr	r2, [pc, #148]	@ (8007f98 <USB_SetTurnaroundTime+0x138>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d202      	bcs.n	8007f0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f08:	2309      	movs	r3, #9
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	e020      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	4a21      	ldr	r2, [pc, #132]	@ (8007f98 <USB_SetTurnaroundTime+0x138>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d306      	bcc.n	8007f24 <USB_SetTurnaroundTime+0xc4>
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4a20      	ldr	r2, [pc, #128]	@ (8007f9c <USB_SetTurnaroundTime+0x13c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d802      	bhi.n	8007f24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f1e:	2308      	movs	r3, #8
 8007f20:	617b      	str	r3, [r7, #20]
 8007f22:	e015      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4a1d      	ldr	r2, [pc, #116]	@ (8007f9c <USB_SetTurnaroundTime+0x13c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d906      	bls.n	8007f3a <USB_SetTurnaroundTime+0xda>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8007fa0 <USB_SetTurnaroundTime+0x140>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d202      	bcs.n	8007f3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f34:	2307      	movs	r3, #7
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e00a      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f3a:	2306      	movs	r3, #6
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	e007      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f46:	2309      	movs	r3, #9
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	e001      	b.n	8007f50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f4c:	2309      	movs	r3, #9
 8007f4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	029b      	lsls	r3, r3, #10
 8007f64:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	371c      	adds	r7, #28
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	00d8acbf 	.word	0x00d8acbf
 8007f80:	00e4e1c0 	.word	0x00e4e1c0
 8007f84:	00f42400 	.word	0x00f42400
 8007f88:	01067380 	.word	0x01067380
 8007f8c:	011a499f 	.word	0x011a499f
 8007f90:	01312cff 	.word	0x01312cff
 8007f94:	014ca43f 	.word	0x014ca43f
 8007f98:	016e3600 	.word	0x016e3600
 8007f9c:	01a6ab1f 	.word	0x01a6ab1f
 8007fa0:	01e84800 	.word	0x01e84800

08007fa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f043 0201 	orr.w	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f023 0201 	bic.w	r2, r3, #1
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d115      	bne.n	8008036 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008016:	200a      	movs	r0, #10
 8008018:	f7fa f844 	bl	80020a4 <HAL_Delay>
      ms += 10U;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	330a      	adds	r3, #10
 8008020:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f001 f933 	bl	800928e <USB_GetMode>
 8008028:	4603      	mov	r3, r0
 800802a:	2b01      	cmp	r3, #1
 800802c:	d01e      	beq.n	800806c <USB_SetCurrentMode+0x84>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2bc7      	cmp	r3, #199	@ 0xc7
 8008032:	d9f0      	bls.n	8008016 <USB_SetCurrentMode+0x2e>
 8008034:	e01a      	b.n	800806c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d115      	bne.n	8008068 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008048:	200a      	movs	r0, #10
 800804a:	f7fa f82b 	bl	80020a4 <HAL_Delay>
      ms += 10U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	330a      	adds	r3, #10
 8008052:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 f91a 	bl	800928e <USB_GetMode>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <USB_SetCurrentMode+0x84>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2bc7      	cmp	r3, #199	@ 0xc7
 8008064:	d9f0      	bls.n	8008048 <USB_SetCurrentMode+0x60>
 8008066:	e001      	b.n	800806c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e005      	b.n	8008078 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008070:	d101      	bne.n	8008076 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008080:	b084      	sub	sp, #16
 8008082:	b580      	push	{r7, lr}
 8008084:	b086      	sub	sp, #24
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800808e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800809a:	2300      	movs	r3, #0
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	e009      	b.n	80080b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	3340      	adds	r3, #64	@ 0x40
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	2200      	movs	r2, #0
 80080ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	3301      	adds	r3, #1
 80080b2:	613b      	str	r3, [r7, #16]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	2b0e      	cmp	r3, #14
 80080b8:	d9f2      	bls.n	80080a0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d11c      	bne.n	80080fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080d0:	f043 0302 	orr.w	r3, r3, #2
 80080d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	e005      	b.n	8008108 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008100:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800810e:	461a      	mov	r2, r3
 8008110:	2300      	movs	r3, #0
 8008112:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008114:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008118:	2b01      	cmp	r3, #1
 800811a:	d10d      	bne.n	8008138 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800811c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008120:	2b00      	cmp	r3, #0
 8008122:	d104      	bne.n	800812e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008124:	2100      	movs	r1, #0
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f968 	bl	80083fc <USB_SetDevSpeed>
 800812c:	e008      	b.n	8008140 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800812e:	2101      	movs	r1, #1
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f963 	bl	80083fc <USB_SetDevSpeed>
 8008136:	e003      	b.n	8008140 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008138:	2103      	movs	r1, #3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f95e 	bl	80083fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008140:	2110      	movs	r1, #16
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f8fa 	bl	800833c <USB_FlushTxFifo>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f924 	bl	80083a0 <USB_FlushRxFifo>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008168:	461a      	mov	r2, r3
 800816a:	2300      	movs	r3, #0
 800816c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008174:	461a      	mov	r2, r3
 8008176:	2300      	movs	r3, #0
 8008178:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008180:	461a      	mov	r2, r3
 8008182:	2300      	movs	r3, #0
 8008184:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008186:	2300      	movs	r3, #0
 8008188:	613b      	str	r3, [r7, #16]
 800818a:	e043      	b.n	8008214 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800819e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081a2:	d118      	bne.n	80081d6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b6:	461a      	mov	r2, r3
 80081b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	e013      	b.n	80081e8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081cc:	461a      	mov	r2, r3
 80081ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	e008      	b.n	80081e8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e2:	461a      	mov	r2, r3
 80081e4:	2300      	movs	r3, #0
 80081e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f4:	461a      	mov	r2, r3
 80081f6:	2300      	movs	r3, #0
 80081f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008206:	461a      	mov	r2, r3
 8008208:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800820c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	3301      	adds	r3, #1
 8008212:	613b      	str	r3, [r7, #16]
 8008214:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008218:	461a      	mov	r2, r3
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	4293      	cmp	r3, r2
 800821e:	d3b5      	bcc.n	800818c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008220:	2300      	movs	r3, #0
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	e043      	b.n	80082ae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	4413      	add	r3, r2
 800822e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800823c:	d118      	bne.n	8008270 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008250:	461a      	mov	r2, r3
 8008252:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	e013      	b.n	8008282 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	015a      	lsls	r2, r3, #5
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4413      	add	r3, r2
 8008262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008266:	461a      	mov	r2, r3
 8008268:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	e008      	b.n	8008282 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800827c:	461a      	mov	r2, r3
 800827e:	2300      	movs	r3, #0
 8008280:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800828e:	461a      	mov	r2, r3
 8008290:	2300      	movs	r3, #0
 8008292:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082a0:	461a      	mov	r2, r3
 80082a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80082a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	3301      	adds	r3, #1
 80082ac:	613b      	str	r3, [r7, #16]
 80082ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80082b2:	461a      	mov	r2, r3
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d3b5      	bcc.n	8008226 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80082da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d105      	bne.n	80082f0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	f043 0210 	orr.w	r2, r3, #16
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	699a      	ldr	r2, [r3, #24]
 80082f4:	4b10      	ldr	r3, [pc, #64]	@ (8008338 <USB_DevInit+0x2b8>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f043 0208 	orr.w	r2, r3, #8
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008310:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008314:	2b01      	cmp	r3, #1
 8008316:	d107      	bne.n	8008328 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008320:	f043 0304 	orr.w	r3, r3, #4
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008328:	7dfb      	ldrb	r3, [r7, #23]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008334:	b004      	add	sp, #16
 8008336:	4770      	bx	lr
 8008338:	803c3800 	.word	0x803c3800

0800833c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3301      	adds	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008356:	d901      	bls.n	800835c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e01b      	b.n	8008394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	daf2      	bge.n	800834a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	019b      	lsls	r3, r3, #6
 800836c:	f043 0220 	orr.w	r2, r3, #32
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3301      	adds	r3, #1
 8008378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008380:	d901      	bls.n	8008386 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e006      	b.n	8008394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b20      	cmp	r3, #32
 8008390:	d0f0      	beq.n	8008374 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3301      	adds	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083b8:	d901      	bls.n	80083be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e018      	b.n	80083f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	daf2      	bge.n	80083ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2210      	movs	r2, #16
 80083ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3301      	adds	r3, #1
 80083d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083dc:	d901      	bls.n	80083e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e006      	b.n	80083f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f003 0310 	and.w	r3, r3, #16
 80083ea:	2b10      	cmp	r3, #16
 80083ec:	d0f0      	beq.n	80083d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	78fb      	ldrb	r3, [r7, #3]
 8008416:	68f9      	ldr	r1, [r7, #12]
 8008418:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800841c:	4313      	orrs	r3, r2
 800841e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800842e:	b480      	push	{r7}
 8008430:	b087      	sub	sp, #28
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 0306 	and.w	r3, r3, #6
 8008446:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d102      	bne.n	8008454 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800844e:	2300      	movs	r3, #0
 8008450:	75fb      	strb	r3, [r7, #23]
 8008452:	e00a      	b.n	800846a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b02      	cmp	r3, #2
 8008458:	d002      	beq.n	8008460 <USB_GetDevSpeed+0x32>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b06      	cmp	r3, #6
 800845e:	d102      	bne.n	8008466 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008460:	2302      	movs	r3, #2
 8008462:	75fb      	strb	r3, [r7, #23]
 8008464:	e001      	b.n	800846a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008466:	230f      	movs	r3, #15
 8008468:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800846a:	7dfb      	ldrb	r3, [r7, #23]
}
 800846c:	4618      	mov	r0, r3
 800846e:	371c      	adds	r7, #28
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	785b      	ldrb	r3, [r3, #1]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d13a      	bne.n	800850a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800849a:	69da      	ldr	r2, [r3, #28]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	f003 030f 	and.w	r3, r3, #15
 80084a4:	2101      	movs	r1, #1
 80084a6:	fa01 f303 	lsl.w	r3, r1, r3
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	68f9      	ldr	r1, [r7, #12]
 80084ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084b2:	4313      	orrs	r3, r2
 80084b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d155      	bne.n	8008578 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	791b      	ldrb	r3, [r3, #4]
 80084e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	059b      	lsls	r3, r3, #22
 80084ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084f0:	4313      	orrs	r3, r2
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	0151      	lsls	r1, r2, #5
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	440a      	add	r2, r1
 80084fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	e036      	b.n	8008578 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008510:	69da      	ldr	r2, [r3, #28]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	f003 030f 	and.w	r3, r3, #15
 800851a:	2101      	movs	r1, #1
 800851c:	fa01 f303 	lsl.w	r3, r1, r3
 8008520:	041b      	lsls	r3, r3, #16
 8008522:	68f9      	ldr	r1, [r7, #12]
 8008524:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008528:	4313      	orrs	r3, r2
 800852a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d11a      	bne.n	8008578 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	791b      	ldrb	r3, [r3, #4]
 800855c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800855e:	430b      	orrs	r3, r1
 8008560:	4313      	orrs	r3, r2
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	0151      	lsls	r1, r2, #5
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	440a      	add	r2, r1
 800856a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800856e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008576:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
	...

08008588 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	785b      	ldrb	r3, [r3, #1]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d161      	bne.n	8008668 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085ba:	d11f      	bne.n	80085fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	0151      	lsls	r1, r2, #5
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	440a      	add	r2, r1
 80085d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	0151      	lsls	r1, r2, #5
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	440a      	add	r2, r1
 80085f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008602:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	f003 030f 	and.w	r3, r3, #15
 800860c:	2101      	movs	r1, #1
 800860e:	fa01 f303 	lsl.w	r3, r1, r3
 8008612:	b29b      	uxth	r3, r3
 8008614:	43db      	mvns	r3, r3
 8008616:	68f9      	ldr	r1, [r7, #12]
 8008618:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800861c:	4013      	ands	r3, r2
 800861e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008626:	69da      	ldr	r2, [r3, #28]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	f003 030f 	and.w	r3, r3, #15
 8008630:	2101      	movs	r1, #1
 8008632:	fa01 f303 	lsl.w	r3, r1, r3
 8008636:	b29b      	uxth	r3, r3
 8008638:	43db      	mvns	r3, r3
 800863a:	68f9      	ldr	r1, [r7, #12]
 800863c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008640:	4013      	ands	r3, r2
 8008642:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	0159      	lsls	r1, r3, #5
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	440b      	add	r3, r1
 800865a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800865e:	4619      	mov	r1, r3
 8008660:	4b35      	ldr	r3, [pc, #212]	@ (8008738 <USB_DeactivateEndpoint+0x1b0>)
 8008662:	4013      	ands	r3, r2
 8008664:	600b      	str	r3, [r1, #0]
 8008666:	e060      	b.n	800872a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4413      	add	r3, r2
 8008670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800867a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800867e:	d11f      	bne.n	80086c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	0151      	lsls	r1, r2, #5
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	440a      	add	r2, r1
 8008696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800869a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800869e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	0151      	lsls	r1, r2, #5
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	440a      	add	r2, r1
 80086b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	f003 030f 	and.w	r3, r3, #15
 80086d0:	2101      	movs	r1, #1
 80086d2:	fa01 f303 	lsl.w	r3, r1, r3
 80086d6:	041b      	lsls	r3, r3, #16
 80086d8:	43db      	mvns	r3, r3
 80086da:	68f9      	ldr	r1, [r7, #12]
 80086dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086e0:	4013      	ands	r3, r2
 80086e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ea:	69da      	ldr	r2, [r3, #28]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f003 030f 	and.w	r3, r3, #15
 80086f4:	2101      	movs	r1, #1
 80086f6:	fa01 f303 	lsl.w	r3, r1, r3
 80086fa:	041b      	lsls	r3, r3, #16
 80086fc:	43db      	mvns	r3, r3
 80086fe:	68f9      	ldr	r1, [r7, #12]
 8008700:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008704:	4013      	ands	r3, r2
 8008706:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	0159      	lsls	r1, r3, #5
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	440b      	add	r3, r1
 800871e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008722:	4619      	mov	r1, r3
 8008724:	4b05      	ldr	r3, [pc, #20]	@ (800873c <USB_DeactivateEndpoint+0x1b4>)
 8008726:	4013      	ands	r3, r2
 8008728:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	ec337800 	.word	0xec337800
 800873c:	eff37800 	.word	0xeff37800

08008740 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08a      	sub	sp, #40	@ 0x28
 8008744:	af02      	add	r7, sp, #8
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	4613      	mov	r3, r2
 800874c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	785b      	ldrb	r3, [r3, #1]
 800875c:	2b01      	cmp	r3, #1
 800875e:	f040 817a 	bne.w	8008a56 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d132      	bne.n	80087d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	4413      	add	r3, r2
 8008772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	0151      	lsls	r1, r2, #5
 800877c:	69fa      	ldr	r2, [r7, #28]
 800877e:	440a      	add	r2, r1
 8008780:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008784:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008788:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800878c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	0151      	lsls	r1, r2, #5
 80087a0:	69fa      	ldr	r2, [r7, #28]
 80087a2:	440a      	add	r2, r1
 80087a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	0151      	lsls	r1, r2, #5
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	440a      	add	r2, r1
 80087c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087c8:	0cdb      	lsrs	r3, r3, #19
 80087ca:	04db      	lsls	r3, r3, #19
 80087cc:	6113      	str	r3, [r2, #16]
 80087ce:	e092      	b.n	80088f6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	0151      	lsls	r1, r2, #5
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	440a      	add	r2, r1
 80087e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ea:	0cdb      	lsrs	r3, r3, #19
 80087ec:	04db      	lsls	r3, r3, #19
 80087ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	0151      	lsls	r1, r2, #5
 8008802:	69fa      	ldr	r2, [r7, #28]
 8008804:	440a      	add	r2, r1
 8008806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800880a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800880e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008812:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d11a      	bne.n	8008850 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	691a      	ldr	r2, [r3, #16]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	429a      	cmp	r2, r3
 8008824:	d903      	bls.n	800882e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	689a      	ldr	r2, [r3, #8]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	4413      	add	r3, r2
 8008836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	69ba      	ldr	r2, [r7, #24]
 800883e:	0151      	lsls	r1, r2, #5
 8008840:	69fa      	ldr	r2, [r7, #28]
 8008842:	440a      	add	r2, r1
 8008844:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008848:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800884c:	6113      	str	r3, [r2, #16]
 800884e:	e01b      	b.n	8008888 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800885c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	6919      	ldr	r1, [r3, #16]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	440b      	add	r3, r1
 8008868:	1e59      	subs	r1, r3, #1
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008872:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008874:	4ba2      	ldr	r3, [pc, #648]	@ (8008b00 <USB_EPStartXfer+0x3c0>)
 8008876:	400b      	ands	r3, r1
 8008878:	69b9      	ldr	r1, [r7, #24]
 800887a:	0148      	lsls	r0, r1, #5
 800887c:	69f9      	ldr	r1, [r7, #28]
 800887e:	4401      	add	r1, r0
 8008880:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008884:	4313      	orrs	r3, r2
 8008886:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008894:	691a      	ldr	r2, [r3, #16]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800889e:	69b9      	ldr	r1, [r7, #24]
 80088a0:	0148      	lsls	r0, r1, #5
 80088a2:	69f9      	ldr	r1, [r7, #28]
 80088a4:	4401      	add	r1, r0
 80088a6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80088aa:	4313      	orrs	r3, r2
 80088ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	791b      	ldrb	r3, [r3, #4]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d11f      	bne.n	80088f6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	0151      	lsls	r1, r2, #5
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	440a      	add	r2, r1
 80088cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088d0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80088d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80088f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d14b      	bne.n	8008994 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d009      	beq.n	8008918 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008910:	461a      	mov	r2, r3
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	791b      	ldrb	r3, [r3, #4]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d128      	bne.n	8008972 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800892c:	2b00      	cmp	r3, #0
 800892e:	d110      	bne.n	8008952 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	0151      	lsls	r1, r2, #5
 8008942:	69fa      	ldr	r2, [r7, #28]
 8008944:	440a      	add	r2, r1
 8008946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800894a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	e00f      	b.n	8008972 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	4413      	add	r3, r2
 800895a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	0151      	lsls	r1, r2, #5
 8008964:	69fa      	ldr	r2, [r7, #28]
 8008966:	440a      	add	r2, r1
 8008968:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800896c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008970:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	0151      	lsls	r1, r2, #5
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	440a      	add	r2, r1
 8008988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800898c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	e165      	b.n	8008c60 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	0151      	lsls	r1, r2, #5
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	440a      	add	r2, r1
 80089aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80089b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	791b      	ldrb	r3, [r3, #4]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d015      	beq.n	80089e8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 814d 	beq.w	8008c60 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	2101      	movs	r1, #1
 80089d8:	fa01 f303 	lsl.w	r3, r1, r3
 80089dc:	69f9      	ldr	r1, [r7, #28]
 80089de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089e2:	4313      	orrs	r3, r2
 80089e4:	634b      	str	r3, [r1, #52]	@ 0x34
 80089e6:	e13b      	b.n	8008c60 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d110      	bne.n	8008a1a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	69ba      	ldr	r2, [r7, #24]
 8008a08:	0151      	lsls	r1, r2, #5
 8008a0a:	69fa      	ldr	r2, [r7, #28]
 8008a0c:	440a      	add	r2, r1
 8008a0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a12:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a16:	6013      	str	r3, [r2, #0]
 8008a18:	e00f      	b.n	8008a3a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	0151      	lsls	r1, r2, #5
 8008a2c:	69fa      	ldr	r2, [r7, #28]
 8008a2e:	440a      	add	r2, r1
 8008a30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a38:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	68d9      	ldr	r1, [r3, #12]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	781a      	ldrb	r2, [r3, #0]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	b298      	uxth	r0, r3
 8008a48:	79fb      	ldrb	r3, [r7, #7]
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 f9b8 	bl	8008dc4 <USB_WritePacket>
 8008a54:	e104      	b.n	8008c60 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	0151      	lsls	r1, r2, #5
 8008a68:	69fa      	ldr	r2, [r7, #28]
 8008a6a:	440a      	add	r2, r1
 8008a6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a70:	0cdb      	lsrs	r3, r3, #19
 8008a72:	04db      	lsls	r3, r3, #19
 8008a74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	0151      	lsls	r1, r2, #5
 8008a88:	69fa      	ldr	r2, [r7, #28]
 8008a8a:	440a      	add	r2, r1
 8008a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a90:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a94:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a98:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d131      	bne.n	8008b04 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	689a      	ldr	r2, [r3, #8]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac4:	691a      	ldr	r2, [r3, #16]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ace:	69b9      	ldr	r1, [r7, #24]
 8008ad0:	0148      	lsls	r0, r1, #5
 8008ad2:	69f9      	ldr	r1, [r7, #28]
 8008ad4:	4401      	add	r1, r0
 8008ad6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ada:	4313      	orrs	r3, r2
 8008adc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008af8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008afc:	6113      	str	r3, [r2, #16]
 8008afe:	e061      	b.n	8008bc4 <USB_EPStartXfer+0x484>
 8008b00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d123      	bne.n	8008b54 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b18:	691a      	ldr	r2, [r3, #16]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b22:	69b9      	ldr	r1, [r7, #24]
 8008b24:	0148      	lsls	r0, r1, #5
 8008b26:	69f9      	ldr	r1, [r7, #28]
 8008b28:	4401      	add	r1, r0
 8008b2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	69ba      	ldr	r2, [r7, #24]
 8008b42:	0151      	lsls	r1, r2, #5
 8008b44:	69fa      	ldr	r2, [r7, #28]
 8008b46:	440a      	add	r2, r1
 8008b48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b50:	6113      	str	r3, [r2, #16]
 8008b52:	e037      	b.n	8008bc4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	1e5a      	subs	r2, r3, #1
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b68:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	8afa      	ldrh	r2, [r7, #22]
 8008b70:	fb03 f202 	mul.w	r2, r3, r2
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b84:	691a      	ldr	r2, [r3, #16]
 8008b86:	8afb      	ldrh	r3, [r7, #22]
 8008b88:	04d9      	lsls	r1, r3, #19
 8008b8a:	4b38      	ldr	r3, [pc, #224]	@ (8008c6c <USB_EPStartXfer+0x52c>)
 8008b8c:	400b      	ands	r3, r1
 8008b8e:	69b9      	ldr	r1, [r7, #24]
 8008b90:	0148      	lsls	r0, r1, #5
 8008b92:	69f9      	ldr	r1, [r7, #28]
 8008b94:	4401      	add	r1, r0
 8008b96:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bb4:	69b9      	ldr	r1, [r7, #24]
 8008bb6:	0148      	lsls	r0, r1, #5
 8008bb8:	69f9      	ldr	r1, [r7, #28]
 8008bba:	4401      	add	r1, r0
 8008bbc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d10d      	bne.n	8008be6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d009      	beq.n	8008be6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	68d9      	ldr	r1, [r3, #12]
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be2:	460a      	mov	r2, r1
 8008be4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	791b      	ldrb	r3, [r3, #4]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d128      	bne.n	8008c40 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d110      	bne.n	8008c20 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	0151      	lsls	r1, r2, #5
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	440a      	add	r2, r1
 8008c14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	e00f      	b.n	8008c40 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	015a      	lsls	r2, r3, #5
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	0151      	lsls	r1, r2, #5
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	440a      	add	r2, r1
 8008c36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	0151      	lsls	r1, r2, #5
 8008c52:	69fa      	ldr	r2, [r7, #28]
 8008c54:	440a      	add	r2, r1
 8008c56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3720      	adds	r7, #32
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	1ff80000 	.word	0x1ff80000

08008c70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	785b      	ldrb	r3, [r3, #1]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d14a      	bne.n	8008d24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ca6:	f040 8086 	bne.w	8008db6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	7812      	ldrb	r2, [r2, #0]
 8008cbe:	0151      	lsls	r1, r2, #5
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	440a      	add	r2, r1
 8008cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cc8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008ccc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	7812      	ldrb	r2, [r2, #0]
 8008ce2:	0151      	lsls	r1, r2, #5
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	440a      	add	r2, r1
 8008ce8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d902      	bls.n	8008d08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	75fb      	strb	r3, [r7, #23]
          break;
 8008d06:	e056      	b.n	8008db6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d20:	d0e7      	beq.n	8008cf2 <USB_EPStopXfer+0x82>
 8008d22:	e048      	b.n	8008db6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d3c:	d13b      	bne.n	8008db6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	7812      	ldrb	r2, [r2, #0]
 8008d52:	0151      	lsls	r1, r2, #5
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	440a      	add	r2, r1
 8008d58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	7812      	ldrb	r2, [r2, #0]
 8008d76:	0151      	lsls	r1, r2, #5
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d902      	bls.n	8008d9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	75fb      	strb	r3, [r7, #23]
          break;
 8008d9a:	e00c      	b.n	8008db6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008db0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008db4:	d0e7      	beq.n	8008d86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	371c      	adds	r7, #28
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b089      	sub	sp, #36	@ 0x24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	71fb      	strb	r3, [r7, #7]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008de2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d123      	bne.n	8008e32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008dea:	88bb      	ldrh	r3, [r7, #4]
 8008dec:	3303      	adds	r3, #3
 8008dee:	089b      	lsrs	r3, r3, #2
 8008df0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008df2:	2300      	movs	r3, #0
 8008df4:	61bb      	str	r3, [r7, #24]
 8008df6:	e018      	b.n	8008e2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	031a      	lsls	r2, r3, #12
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e04:	461a      	mov	r2, r3
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	3301      	adds	r3, #1
 8008e16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	3301      	adds	r3, #1
 8008e22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	3301      	adds	r3, #1
 8008e28:	61bb      	str	r3, [r7, #24]
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d3e2      	bcc.n	8008df8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3724      	adds	r7, #36	@ 0x24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b08b      	sub	sp, #44	@ 0x2c
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e56:	88fb      	ldrh	r3, [r7, #6]
 8008e58:	089b      	lsrs	r3, r3, #2
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e5e:	88fb      	ldrh	r3, [r7, #6]
 8008e60:	f003 0303 	and.w	r3, r3, #3
 8008e64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e66:	2300      	movs	r3, #0
 8008e68:	623b      	str	r3, [r7, #32]
 8008e6a:	e014      	b.n	8008e96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e76:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e80:	3301      	adds	r3, #1
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e86:	3301      	adds	r3, #1
 8008e88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	3301      	adds	r3, #1
 8008e94:	623b      	str	r3, [r7, #32]
 8008e96:	6a3a      	ldr	r2, [r7, #32]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d3e6      	bcc.n	8008e6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e9e:	8bfb      	ldrh	r3, [r7, #30]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01e      	beq.n	8008ee2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f107 0310 	add.w	r3, r7, #16
 8008eb4:	6812      	ldr	r2, [r2, #0]
 8008eb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	701a      	strb	r2, [r3, #0]
      i++;
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008ed6:	8bfb      	ldrh	r3, [r7, #30]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008edc:	8bfb      	ldrh	r3, [r7, #30]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1ea      	bne.n	8008eb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	372c      	adds	r7, #44	@ 0x2c
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	785b      	ldrb	r3, [r3, #1]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d12c      	bne.n	8008f66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	db12      	blt.n	8008f44 <USB_EPSetStall+0x54>
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00f      	beq.n	8008f44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	0151      	lsls	r1, r2, #5
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	440a      	add	r2, r1
 8008f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f62:	6013      	str	r3, [r2, #0]
 8008f64:	e02b      	b.n	8008fbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	015a      	lsls	r2, r3, #5
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	db12      	blt.n	8008f9e <USB_EPSetStall+0xae>
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00f      	beq.n	8008f9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	0151      	lsls	r1, r2, #5
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	440a      	add	r2, r1
 8008f94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	0151      	lsls	r1, r2, #5
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	440a      	add	r2, r1
 8008fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	785b      	ldrb	r3, [r3, #1]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d128      	bne.n	800903a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	0151      	lsls	r1, r2, #5
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009002:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009006:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	791b      	ldrb	r3, [r3, #4]
 800900c:	2b03      	cmp	r3, #3
 800900e:	d003      	beq.n	8009018 <USB_EPClearStall+0x4c>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	791b      	ldrb	r3, [r3, #4]
 8009014:	2b02      	cmp	r3, #2
 8009016:	d138      	bne.n	800908a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	e027      	b.n	800908a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	4413      	add	r3, r2
 8009042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	0151      	lsls	r1, r2, #5
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	440a      	add	r2, r1
 8009050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009054:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009058:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	791b      	ldrb	r3, [r3, #4]
 800905e:	2b03      	cmp	r3, #3
 8009060:	d003      	beq.n	800906a <USB_EPClearStall+0x9e>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	791b      	ldrb	r3, [r3, #4]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d10f      	bne.n	800908a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	4413      	add	r3, r2
 8009072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	0151      	lsls	r1, r2, #5
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	440a      	add	r2, r1
 8009080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009088:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	460b      	mov	r3, r1
 80090a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80090ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80090cc:	68f9      	ldr	r1, [r7, #12]
 80090ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090d2:	4313      	orrs	r3, r2
 80090d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80090fe:	f023 0303 	bic.w	r3, r3, #3
 8009102:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009112:	f023 0302 	bic.w	r3, r3, #2
 8009116:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009126:	b480      	push	{r7}
 8009128:	b085      	sub	sp, #20
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009140:	f023 0303 	bic.w	r3, r3, #3
 8009144:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009154:	f043 0302 	orr.w	r3, r3, #2
 8009158:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	4013      	ands	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009180:	68fb      	ldr	r3, [r7, #12]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091aa:	69db      	ldr	r3, [r3, #28]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	4013      	ands	r3, r2
 80091b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	0c1b      	lsrs	r3, r3, #16
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80091c2:	b480      	push	{r7}
 80091c4:	b085      	sub	sp, #20
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091de:	69db      	ldr	r3, [r3, #28]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	4013      	ands	r3, r2
 80091e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	b29b      	uxth	r3, r3
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b085      	sub	sp, #20
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	460b      	mov	r3, r1
 8009200:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009206:	78fb      	ldrb	r3, [r7, #3]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	4013      	ands	r3, r2
 8009222:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009224:	68bb      	ldr	r3, [r7, #8]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009232:	b480      	push	{r7}
 8009234:	b087      	sub	sp, #28
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009254:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009256:	78fb      	ldrb	r3, [r7, #3]
 8009258:	f003 030f 	and.w	r3, r3, #15
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	fa22 f303 	lsr.w	r3, r2, r3
 8009262:	01db      	lsls	r3, r3, #7
 8009264:	b2db      	uxtb	r3, r3
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	4313      	orrs	r3, r2
 800926a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800926c:	78fb      	ldrb	r3, [r7, #3]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	4013      	ands	r3, r2
 800927e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009280:	68bb      	ldr	r3, [r7, #8]
}
 8009282:	4618      	mov	r0, r3
 8009284:	371c      	adds	r7, #28
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800928e:	b480      	push	{r7}
 8009290:	b083      	sub	sp, #12
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	f003 0301 	and.w	r3, r3, #1
}
 800929e:	4618      	mov	r0, r3
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b085      	sub	sp, #20
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80092c8:	f023 0307 	bic.w	r3, r3, #7
 80092cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	460b      	mov	r3, r1
 80092fa:	607a      	str	r2, [r7, #4]
 80092fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	333c      	adds	r3, #60	@ 0x3c
 8009306:	3304      	adds	r3, #4
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	4a26      	ldr	r2, [pc, #152]	@ (80093a8 <USB_EP0_OutStart+0xb8>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d90a      	bls.n	800932a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009320:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009324:	d101      	bne.n	800932a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	e037      	b.n	800939a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009330:	461a      	mov	r2, r3
 8009332:	2300      	movs	r3, #0
 8009334:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009344:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009348:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009358:	f043 0318 	orr.w	r3, r3, #24
 800935c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800936c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009370:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009372:	7afb      	ldrb	r3, [r7, #11]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d10f      	bne.n	8009398 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800937e:	461a      	mov	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009392:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009396:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	4f54300a 	.word	0x4f54300a

080093ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3301      	adds	r3, #1
 80093bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093c4:	d901      	bls.n	80093ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e01b      	b.n	8009402 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	daf2      	bge.n	80093b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f043 0201 	orr.w	r2, r3, #1
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3301      	adds	r3, #1
 80093e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093ee:	d901      	bls.n	80093f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e006      	b.n	8009402 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d0f0      	beq.n	80093e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
	...

08009410 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800941c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009420:	f005 f8b4 	bl	800e58c <USBD_static_malloc>
 8009424:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d109      	bne.n	8009440 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	32b0      	adds	r2, #176	@ 0xb0
 8009436:	2100      	movs	r1, #0
 8009438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800943c:	2302      	movs	r3, #2
 800943e:	e0d4      	b.n	80095ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009440:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009444:	2100      	movs	r1, #0
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f007 fce5 	bl	8010e16 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	32b0      	adds	r2, #176	@ 0xb0
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	32b0      	adds	r2, #176	@ 0xb0
 8009466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	7c1b      	ldrb	r3, [r3, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d138      	bne.n	80094ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009478:	4b5e      	ldr	r3, [pc, #376]	@ (80095f4 <USBD_CDC_Init+0x1e4>)
 800947a:	7819      	ldrb	r1, [r3, #0]
 800947c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009480:	2202      	movs	r2, #2
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f004 ff11 	bl	800e2aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009488:	4b5a      	ldr	r3, [pc, #360]	@ (80095f4 <USBD_CDC_Init+0x1e4>)
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	f003 020f 	and.w	r2, r3, #15
 8009490:	6879      	ldr	r1, [r7, #4]
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	440b      	add	r3, r1
 800949c:	3324      	adds	r3, #36	@ 0x24
 800949e:	2201      	movs	r2, #1
 80094a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80094a2:	4b55      	ldr	r3, [pc, #340]	@ (80095f8 <USBD_CDC_Init+0x1e8>)
 80094a4:	7819      	ldrb	r1, [r3, #0]
 80094a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094aa:	2202      	movs	r2, #2
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f004 fefc 	bl	800e2aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094b2:	4b51      	ldr	r3, [pc, #324]	@ (80095f8 <USBD_CDC_Init+0x1e8>)
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	f003 020f 	and.w	r2, r3, #15
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	4613      	mov	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4413      	add	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	440b      	add	r3, r1
 80094c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094ca:	2201      	movs	r2, #1
 80094cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80094ce:	4b4b      	ldr	r3, [pc, #300]	@ (80095fc <USBD_CDC_Init+0x1ec>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	f003 020f 	and.w	r2, r3, #15
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	4613      	mov	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	440b      	add	r3, r1
 80094e2:	3326      	adds	r3, #38	@ 0x26
 80094e4:	2210      	movs	r2, #16
 80094e6:	801a      	strh	r2, [r3, #0]
 80094e8:	e035      	b.n	8009556 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80094ea:	4b42      	ldr	r3, [pc, #264]	@ (80095f4 <USBD_CDC_Init+0x1e4>)
 80094ec:	7819      	ldrb	r1, [r3, #0]
 80094ee:	2340      	movs	r3, #64	@ 0x40
 80094f0:	2202      	movs	r2, #2
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f004 fed9 	bl	800e2aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80094f8:	4b3e      	ldr	r3, [pc, #248]	@ (80095f4 <USBD_CDC_Init+0x1e4>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	f003 020f 	and.w	r2, r3, #15
 8009500:	6879      	ldr	r1, [r7, #4]
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	440b      	add	r3, r1
 800950c:	3324      	adds	r3, #36	@ 0x24
 800950e:	2201      	movs	r2, #1
 8009510:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009512:	4b39      	ldr	r3, [pc, #228]	@ (80095f8 <USBD_CDC_Init+0x1e8>)
 8009514:	7819      	ldrb	r1, [r3, #0]
 8009516:	2340      	movs	r3, #64	@ 0x40
 8009518:	2202      	movs	r2, #2
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f004 fec5 	bl	800e2aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009520:	4b35      	ldr	r3, [pc, #212]	@ (80095f8 <USBD_CDC_Init+0x1e8>)
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	f003 020f 	and.w	r2, r3, #15
 8009528:	6879      	ldr	r1, [r7, #4]
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009538:	2201      	movs	r2, #1
 800953a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800953c:	4b2f      	ldr	r3, [pc, #188]	@ (80095fc <USBD_CDC_Init+0x1ec>)
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	f003 020f 	and.w	r2, r3, #15
 8009544:	6879      	ldr	r1, [r7, #4]
 8009546:	4613      	mov	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	440b      	add	r3, r1
 8009550:	3326      	adds	r3, #38	@ 0x26
 8009552:	2210      	movs	r2, #16
 8009554:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009556:	4b29      	ldr	r3, [pc, #164]	@ (80095fc <USBD_CDC_Init+0x1ec>)
 8009558:	7819      	ldrb	r1, [r3, #0]
 800955a:	2308      	movs	r3, #8
 800955c:	2203      	movs	r2, #3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f004 fea3 	bl	800e2aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009564:	4b25      	ldr	r3, [pc, #148]	@ (80095fc <USBD_CDC_Init+0x1ec>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	f003 020f 	and.w	r2, r3, #15
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	4613      	mov	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	440b      	add	r3, r1
 8009578:	3324      	adds	r3, #36	@ 0x24
 800957a:	2201      	movs	r2, #1
 800957c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	33b0      	adds	r3, #176	@ 0xb0
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d101      	bne.n	80095b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80095b4:	2302      	movs	r3, #2
 80095b6:	e018      	b.n	80095ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7c1b      	ldrb	r3, [r3, #16]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10a      	bne.n	80095d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095c0:	4b0d      	ldr	r3, [pc, #52]	@ (80095f8 <USBD_CDC_Init+0x1e8>)
 80095c2:	7819      	ldrb	r1, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f004 ff5a 	bl	800e488 <USBD_LL_PrepareReceive>
 80095d4:	e008      	b.n	80095e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095d6:	4b08      	ldr	r3, [pc, #32]	@ (80095f8 <USBD_CDC_Init+0x1e8>)
 80095d8:	7819      	ldrb	r1, [r3, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095e0:	2340      	movs	r3, #64	@ 0x40
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f004 ff50 	bl	800e488 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	20000093 	.word	0x20000093
 80095f8:	20000094 	.word	0x20000094
 80095fc:	20000095 	.word	0x20000095

08009600 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	460b      	mov	r3, r1
 800960a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800960c:	4b3a      	ldr	r3, [pc, #232]	@ (80096f8 <USBD_CDC_DeInit+0xf8>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	4619      	mov	r1, r3
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f004 fe6f 	bl	800e2f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009618:	4b37      	ldr	r3, [pc, #220]	@ (80096f8 <USBD_CDC_DeInit+0xf8>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	f003 020f 	and.w	r2, r3, #15
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	440b      	add	r3, r1
 800962c:	3324      	adds	r3, #36	@ 0x24
 800962e:	2200      	movs	r2, #0
 8009630:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009632:	4b32      	ldr	r3, [pc, #200]	@ (80096fc <USBD_CDC_DeInit+0xfc>)
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f004 fe5c 	bl	800e2f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800963e:	4b2f      	ldr	r3, [pc, #188]	@ (80096fc <USBD_CDC_DeInit+0xfc>)
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	f003 020f 	and.w	r2, r3, #15
 8009646:	6879      	ldr	r1, [r7, #4]
 8009648:	4613      	mov	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	440b      	add	r3, r1
 8009652:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009656:	2200      	movs	r2, #0
 8009658:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800965a:	4b29      	ldr	r3, [pc, #164]	@ (8009700 <USBD_CDC_DeInit+0x100>)
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f004 fe48 	bl	800e2f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009666:	4b26      	ldr	r3, [pc, #152]	@ (8009700 <USBD_CDC_DeInit+0x100>)
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	f003 020f 	and.w	r2, r3, #15
 800966e:	6879      	ldr	r1, [r7, #4]
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	440b      	add	r3, r1
 800967a:	3324      	adds	r3, #36	@ 0x24
 800967c:	2200      	movs	r2, #0
 800967e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009680:	4b1f      	ldr	r3, [pc, #124]	@ (8009700 <USBD_CDC_DeInit+0x100>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	f003 020f 	and.w	r2, r3, #15
 8009688:	6879      	ldr	r1, [r7, #4]
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	440b      	add	r3, r1
 8009694:	3326      	adds	r3, #38	@ 0x26
 8009696:	2200      	movs	r2, #0
 8009698:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	32b0      	adds	r2, #176	@ 0xb0
 80096a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d01f      	beq.n	80096ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	33b0      	adds	r3, #176	@ 0xb0
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	32b0      	adds	r2, #176	@ 0xb0
 80096ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f004 ff6a 	bl	800e5a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	32b0      	adds	r2, #176	@ 0xb0
 80096de:	2100      	movs	r1, #0
 80096e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000093 	.word	0x20000093
 80096fc:	20000094 	.word	0x20000094
 8009700:	20000095 	.word	0x20000095

08009704 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	32b0      	adds	r2, #176	@ 0xb0
 8009718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009722:	2300      	movs	r3, #0
 8009724:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009730:	2303      	movs	r3, #3
 8009732:	e0bf      	b.n	80098b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800973c:	2b00      	cmp	r3, #0
 800973e:	d050      	beq.n	80097e2 <USBD_CDC_Setup+0xde>
 8009740:	2b20      	cmp	r3, #32
 8009742:	f040 80af 	bne.w	80098a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	88db      	ldrh	r3, [r3, #6]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d03a      	beq.n	80097c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	b25b      	sxtb	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	da1b      	bge.n	8009790 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	33b0      	adds	r3, #176	@ 0xb0
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800976e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009770:	683a      	ldr	r2, [r7, #0]
 8009772:	88d2      	ldrh	r2, [r2, #6]
 8009774:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	88db      	ldrh	r3, [r3, #6]
 800977a:	2b07      	cmp	r3, #7
 800977c:	bf28      	it	cs
 800977e:	2307      	movcs	r3, #7
 8009780:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	89fa      	ldrh	r2, [r7, #14]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 fdb1 	bl	800b2f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800978e:	e090      	b.n	80098b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	785a      	ldrb	r2, [r3, #1]
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	88db      	ldrh	r3, [r3, #6]
 800979e:	2b3f      	cmp	r3, #63	@ 0x3f
 80097a0:	d803      	bhi.n	80097aa <USBD_CDC_Setup+0xa6>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	88db      	ldrh	r3, [r3, #6]
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	e000      	b.n	80097ac <USBD_CDC_Setup+0xa8>
 80097aa:	2240      	movs	r2, #64	@ 0x40
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80097b2:	6939      	ldr	r1, [r7, #16]
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80097ba:	461a      	mov	r2, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f001 fdc3 	bl	800b348 <USBD_CtlPrepareRx>
      break;
 80097c2:	e076      	b.n	80098b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	33b0      	adds	r3, #176	@ 0xb0
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	7850      	ldrb	r0, [r2, #1]
 80097da:	2200      	movs	r2, #0
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	4798      	blx	r3
      break;
 80097e0:	e067      	b.n	80098b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	2b0b      	cmp	r3, #11
 80097e8:	d851      	bhi.n	800988e <USBD_CDC_Setup+0x18a>
 80097ea:	a201      	add	r2, pc, #4	@ (adr r2, 80097f0 <USBD_CDC_Setup+0xec>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009821 	.word	0x08009821
 80097f4:	0800989d 	.word	0x0800989d
 80097f8:	0800988f 	.word	0x0800988f
 80097fc:	0800988f 	.word	0x0800988f
 8009800:	0800988f 	.word	0x0800988f
 8009804:	0800988f 	.word	0x0800988f
 8009808:	0800988f 	.word	0x0800988f
 800980c:	0800988f 	.word	0x0800988f
 8009810:	0800988f 	.word	0x0800988f
 8009814:	0800988f 	.word	0x0800988f
 8009818:	0800984b 	.word	0x0800984b
 800981c:	08009875 	.word	0x08009875
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b03      	cmp	r3, #3
 800982a:	d107      	bne.n	800983c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800982c:	f107 030a 	add.w	r3, r7, #10
 8009830:	2202      	movs	r2, #2
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 fd5b 	bl	800b2f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800983a:	e032      	b.n	80098a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 fce5 	bl	800b20e <USBD_CtlError>
            ret = USBD_FAIL;
 8009844:	2303      	movs	r3, #3
 8009846:	75fb      	strb	r3, [r7, #23]
          break;
 8009848:	e02b      	b.n	80098a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b03      	cmp	r3, #3
 8009854:	d107      	bne.n	8009866 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009856:	f107 030d 	add.w	r3, r7, #13
 800985a:	2201      	movs	r2, #1
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f001 fd46 	bl	800b2f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009864:	e01d      	b.n	80098a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f001 fcd0 	bl	800b20e <USBD_CtlError>
            ret = USBD_FAIL;
 800986e:	2303      	movs	r3, #3
 8009870:	75fb      	strb	r3, [r7, #23]
          break;
 8009872:	e016      	b.n	80098a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b03      	cmp	r3, #3
 800987e:	d00f      	beq.n	80098a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f001 fcc3 	bl	800b20e <USBD_CtlError>
            ret = USBD_FAIL;
 8009888:	2303      	movs	r3, #3
 800988a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800988c:	e008      	b.n	80098a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f001 fcbc 	bl	800b20e <USBD_CtlError>
          ret = USBD_FAIL;
 8009896:	2303      	movs	r3, #3
 8009898:	75fb      	strb	r3, [r7, #23]
          break;
 800989a:	e002      	b.n	80098a2 <USBD_CDC_Setup+0x19e>
          break;
 800989c:	bf00      	nop
 800989e:	e008      	b.n	80098b2 <USBD_CDC_Setup+0x1ae>
          break;
 80098a0:	bf00      	nop
      }
      break;
 80098a2:	e006      	b.n	80098b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f001 fcb1 	bl	800b20e <USBD_CtlError>
      ret = USBD_FAIL;
 80098ac:	2303      	movs	r3, #3
 80098ae:	75fb      	strb	r3, [r7, #23]
      break;
 80098b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3718      	adds	r7, #24
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	32b0      	adds	r2, #176	@ 0xb0
 80098da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e065      	b.n	80099b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	32b0      	adds	r2, #176	@ 0xb0
 80098f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80098f6:	78fb      	ldrb	r3, [r7, #3]
 80098f8:	f003 020f 	and.w	r2, r3, #15
 80098fc:	6879      	ldr	r1, [r7, #4]
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	440b      	add	r3, r1
 8009908:	3318      	adds	r3, #24
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d02f      	beq.n	8009970 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	f003 020f 	and.w	r2, r3, #15
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	440b      	add	r3, r1
 8009922:	3318      	adds	r3, #24
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	78fb      	ldrb	r3, [r7, #3]
 8009928:	f003 010f 	and.w	r1, r3, #15
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	460b      	mov	r3, r1
 8009930:	00db      	lsls	r3, r3, #3
 8009932:	440b      	add	r3, r1
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4403      	add	r3, r0
 8009938:	331c      	adds	r3, #28
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009940:	fb01 f303 	mul.w	r3, r1, r3
 8009944:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009946:	2b00      	cmp	r3, #0
 8009948:	d112      	bne.n	8009970 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	f003 020f 	and.w	r2, r3, #15
 8009950:	6879      	ldr	r1, [r7, #4]
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	440b      	add	r3, r1
 800995c:	3318      	adds	r3, #24
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009962:	78f9      	ldrb	r1, [r7, #3]
 8009964:	2300      	movs	r3, #0
 8009966:	2200      	movs	r2, #0
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f004 fd6c 	bl	800e446 <USBD_LL_Transmit>
 800996e:	e01f      	b.n	80099b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2200      	movs	r2, #0
 8009974:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	33b0      	adds	r3, #176	@ 0xb0
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d010      	beq.n	80099b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	33b0      	adds	r3, #176	@ 0xb0
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80099ac:	78fa      	ldrb	r2, [r7, #3]
 80099ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	32b0      	adds	r2, #176	@ 0xb0
 80099d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	32b0      	adds	r2, #176	@ 0xb0
 80099e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d101      	bne.n	80099ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e01a      	b.n	8009a22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80099ec:	78fb      	ldrb	r3, [r7, #3]
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f004 fd6a 	bl	800e4ca <USBD_LL_GetRxDataSize>
 80099f6:	4602      	mov	r2, r0
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	33b0      	adds	r3, #176	@ 0xb0
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	32b0      	adds	r2, #176	@ 0xb0
 8009a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e024      	b.n	8009a96 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	33b0      	adds	r3, #176	@ 0xb0
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d019      	beq.n	8009a94 <USBD_CDC_EP0_RxReady+0x6a>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009a66:	2bff      	cmp	r3, #255	@ 0xff
 8009a68:	d014      	beq.n	8009a94 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	33b0      	adds	r3, #176	@ 0xb0
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009a82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	22ff      	movs	r2, #255	@ 0xff
 8009a90:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009aa8:	2182      	movs	r1, #130	@ 0x82
 8009aaa:	4818      	ldr	r0, [pc, #96]	@ (8009b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009aac:	f000 fd4f 	bl	800a54e <USBD_GetEpDesc>
 8009ab0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	4815      	ldr	r0, [pc, #84]	@ (8009b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ab6:	f000 fd4a 	bl	800a54e <USBD_GetEpDesc>
 8009aba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009abc:	2181      	movs	r1, #129	@ 0x81
 8009abe:	4813      	ldr	r0, [pc, #76]	@ (8009b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ac0:	f000 fd45 	bl	800a54e <USBD_GetEpDesc>
 8009ac4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2210      	movs	r2, #16
 8009ad0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d006      	beq.n	8009ae6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ae0:	711a      	strb	r2, [r3, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d006      	beq.n	8009afa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009af4:	711a      	strb	r2, [r3, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2243      	movs	r2, #67	@ 0x43
 8009afe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b00:	4b02      	ldr	r3, [pc, #8]	@ (8009b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20000050 	.word	0x20000050

08009b10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b18:	2182      	movs	r1, #130	@ 0x82
 8009b1a:	4818      	ldr	r0, [pc, #96]	@ (8009b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b1c:	f000 fd17 	bl	800a54e <USBD_GetEpDesc>
 8009b20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b22:	2101      	movs	r1, #1
 8009b24:	4815      	ldr	r0, [pc, #84]	@ (8009b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b26:	f000 fd12 	bl	800a54e <USBD_GetEpDesc>
 8009b2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b2c:	2181      	movs	r1, #129	@ 0x81
 8009b2e:	4813      	ldr	r0, [pc, #76]	@ (8009b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b30:	f000 fd0d 	bl	800a54e <USBD_GetEpDesc>
 8009b34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d002      	beq.n	8009b42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	2210      	movs	r2, #16
 8009b40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d006      	beq.n	8009b56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	711a      	strb	r2, [r3, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f042 0202 	orr.w	r2, r2, #2
 8009b54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d006      	beq.n	8009b6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	711a      	strb	r2, [r3, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f042 0202 	orr.w	r2, r2, #2
 8009b68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2243      	movs	r2, #67	@ 0x43
 8009b6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b70:	4b02      	ldr	r3, [pc, #8]	@ (8009b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3718      	adds	r7, #24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20000050 	.word	0x20000050

08009b80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b88:	2182      	movs	r1, #130	@ 0x82
 8009b8a:	4818      	ldr	r0, [pc, #96]	@ (8009bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b8c:	f000 fcdf 	bl	800a54e <USBD_GetEpDesc>
 8009b90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b92:	2101      	movs	r1, #1
 8009b94:	4815      	ldr	r0, [pc, #84]	@ (8009bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b96:	f000 fcda 	bl	800a54e <USBD_GetEpDesc>
 8009b9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b9c:	2181      	movs	r1, #129	@ 0x81
 8009b9e:	4813      	ldr	r0, [pc, #76]	@ (8009bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ba0:	f000 fcd5 	bl	800a54e <USBD_GetEpDesc>
 8009ba4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	2210      	movs	r2, #16
 8009bb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d006      	beq.n	8009bc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bc0:	711a      	strb	r2, [r3, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d006      	beq.n	8009bda <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bd4:	711a      	strb	r2, [r3, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2243      	movs	r2, #67	@ 0x43
 8009bde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009be0:	4b02      	ldr	r3, [pc, #8]	@ (8009bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20000050 	.word	0x20000050

08009bf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	220a      	movs	r2, #10
 8009bfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009bfe:	4b03      	ldr	r3, [pc, #12]	@ (8009c0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	2000000c 	.word	0x2000000c

08009c10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d101      	bne.n	8009c24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e009      	b.n	8009c38 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	33b0      	adds	r3, #176	@ 0xb0
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	32b0      	adds	r2, #176	@ 0xb0
 8009c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e008      	b.n	8009c7c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	371c      	adds	r7, #28
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	32b0      	adds	r2, #176	@ 0xb0
 8009c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	e004      	b.n	8009cb6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
	...

08009cc4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	32b0      	adds	r2, #176	@ 0xb0
 8009cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cda:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e025      	b.n	8009d36 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d11f      	bne.n	8009d34 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009cfc:	4b10      	ldr	r3, [pc, #64]	@ (8009d40 <USBD_CDC_TransmitPacket+0x7c>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	f003 020f 	and.w	r2, r3, #15
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4403      	add	r3, r0
 8009d16:	3318      	adds	r3, #24
 8009d18:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009d1a:	4b09      	ldr	r3, [pc, #36]	@ (8009d40 <USBD_CDC_TransmitPacket+0x7c>)
 8009d1c:	7819      	ldrb	r1, [r3, #0]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f004 fb8b 	bl	800e446 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20000093 	.word	0x20000093

08009d44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	32b0      	adds	r2, #176	@ 0xb0
 8009d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	32b0      	adds	r2, #176	@ 0xb0
 8009d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d101      	bne.n	8009d72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	e018      	b.n	8009da4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	7c1b      	ldrb	r3, [r3, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10a      	bne.n	8009d90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8009dac <USBD_CDC_ReceivePacket+0x68>)
 8009d7c:	7819      	ldrb	r1, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f004 fb7d 	bl	800e488 <USBD_LL_PrepareReceive>
 8009d8e:	e008      	b.n	8009da2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d90:	4b06      	ldr	r3, [pc, #24]	@ (8009dac <USBD_CDC_ReceivePacket+0x68>)
 8009d92:	7819      	ldrb	r1, [r3, #0]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d9a:	2340      	movs	r3, #64	@ 0x40
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f004 fb73 	bl	800e488 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	20000094 	.word	0x20000094

08009db0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d101      	bne.n	8009dc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e01f      	b.n	8009e08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	79fa      	ldrb	r2, [r7, #7]
 8009dfa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f004 f9ed 	bl	800e1dc <USBD_LL_Init>
 8009e02:	4603      	mov	r3, r0
 8009e04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3718      	adds	r7, #24
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e025      	b.n	8009e74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	32ae      	adds	r2, #174	@ 0xae
 8009e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00f      	beq.n	8009e64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	32ae      	adds	r2, #174	@ 0xae
 8009e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e54:	f107 020e 	add.w	r2, r7, #14
 8009e58:	4610      	mov	r0, r2
 8009e5a:	4798      	blx	r3
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e6a:	1c5a      	adds	r2, r3, #1
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f004 f9f5 	bl	800e274 <USBD_LL_Start>
 8009e8a:	4603      	mov	r3, r0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d009      	beq.n	8009ed8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	78fa      	ldrb	r2, [r7, #3]
 8009ece:	4611      	mov	r1, r2
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	4798      	blx	r3
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	460b      	mov	r3, r1
 8009eec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	78fa      	ldrb	r2, [r7, #3]
 8009efc:	4611      	mov	r1, r2
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	4798      	blx	r3
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 f936 	bl	800b19a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f4a:	f003 031f 	and.w	r3, r3, #31
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d01a      	beq.n	8009f88 <USBD_LL_SetupStage+0x72>
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d822      	bhi.n	8009f9c <USBD_LL_SetupStage+0x86>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <USBD_LL_SetupStage+0x4a>
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d00a      	beq.n	8009f74 <USBD_LL_SetupStage+0x5e>
 8009f5e:	e01d      	b.n	8009f9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fb63 	bl	800a634 <USBD_StdDevReq>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	73fb      	strb	r3, [r7, #15]
      break;
 8009f72:	e020      	b.n	8009fb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fbcb 	bl	800a718 <USBD_StdItfReq>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73fb      	strb	r3, [r7, #15]
      break;
 8009f86:	e016      	b.n	8009fb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fc2d 	bl	800a7f0 <USBD_StdEPReq>
 8009f96:	4603      	mov	r3, r0
 8009f98:	73fb      	strb	r3, [r7, #15]
      break;
 8009f9a:	e00c      	b.n	8009fb6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009fa2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f004 f9c2 	bl	800e334 <USBD_LL_StallEP>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009fb4:	bf00      	nop
  }

  return ret;
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009fd2:	7afb      	ldrb	r3, [r7, #11]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d16e      	bne.n	800a0b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009fde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	f040 8098 	bne.w	800a11c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	689a      	ldr	r2, [r3, #8]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d913      	bls.n	800a020 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	689a      	ldr	r2, [r3, #8]
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	1ad2      	subs	r2, r2, r3
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	68da      	ldr	r2, [r3, #12]
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	4293      	cmp	r3, r2
 800a010:	bf28      	it	cs
 800a012:	4613      	movcs	r3, r2
 800a014:	461a      	mov	r2, r3
 800a016:	6879      	ldr	r1, [r7, #4]
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f001 f9b2 	bl	800b382 <USBD_CtlContinueRx>
 800a01e:	e07d      	b.n	800a11c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a026:	f003 031f 	and.w	r3, r3, #31
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d014      	beq.n	800a058 <USBD_LL_DataOutStage+0x98>
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d81d      	bhi.n	800a06e <USBD_LL_DataOutStage+0xae>
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <USBD_LL_DataOutStage+0x7c>
 800a036:	2b01      	cmp	r3, #1
 800a038:	d003      	beq.n	800a042 <USBD_LL_DataOutStage+0x82>
 800a03a:	e018      	b.n	800a06e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a03c:	2300      	movs	r3, #0
 800a03e:	75bb      	strb	r3, [r7, #22]
            break;
 800a040:	e018      	b.n	800a074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	4619      	mov	r1, r3
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 fa64 	bl	800a51a <USBD_CoreFindIF>
 800a052:	4603      	mov	r3, r0
 800a054:	75bb      	strb	r3, [r7, #22]
            break;
 800a056:	e00d      	b.n	800a074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	4619      	mov	r1, r3
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 fa66 	bl	800a534 <USBD_CoreFindEP>
 800a068:	4603      	mov	r3, r0
 800a06a:	75bb      	strb	r3, [r7, #22]
            break;
 800a06c:	e002      	b.n	800a074 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a06e:	2300      	movs	r3, #0
 800a070:	75bb      	strb	r3, [r7, #22]
            break;
 800a072:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a074:	7dbb      	ldrb	r3, [r7, #22]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d119      	bne.n	800a0ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b03      	cmp	r3, #3
 800a084:	d113      	bne.n	800a0ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a086:	7dba      	ldrb	r2, [r7, #22]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	32ae      	adds	r2, #174	@ 0xae
 800a08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00b      	beq.n	800a0ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a096:	7dba      	ldrb	r2, [r7, #22]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a09e:	7dba      	ldrb	r2, [r7, #22]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	32ae      	adds	r2, #174	@ 0xae
 800a0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f001 f978 	bl	800b3a4 <USBD_CtlSendStatus>
 800a0b4:	e032      	b.n	800a11c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a0b6:	7afb      	ldrb	r3, [r7, #11]
 800a0b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	4619      	mov	r1, r3
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f000 fa37 	bl	800a534 <USBD_CoreFindEP>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0ca:	7dbb      	ldrb	r3, [r7, #22]
 800a0cc:	2bff      	cmp	r3, #255	@ 0xff
 800a0ce:	d025      	beq.n	800a11c <USBD_LL_DataOutStage+0x15c>
 800a0d0:	7dbb      	ldrb	r3, [r7, #22]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d122      	bne.n	800a11c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d117      	bne.n	800a112 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a0e2:	7dba      	ldrb	r2, [r7, #22]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	32ae      	adds	r2, #174	@ 0xae
 800a0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00f      	beq.n	800a112 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a0f2:	7dba      	ldrb	r2, [r7, #22]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a0fa:	7dba      	ldrb	r2, [r7, #22]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	32ae      	adds	r2, #174	@ 0xae
 800a100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	7afa      	ldrb	r2, [r7, #11]
 800a108:	4611      	mov	r1, r2
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	4798      	blx	r3
 800a10e:	4603      	mov	r3, r0
 800a110:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a112:	7dfb      	ldrb	r3, [r7, #23]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a118:	7dfb      	ldrb	r3, [r7, #23]
 800a11a:	e000      	b.n	800a11e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b086      	sub	sp, #24
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	60f8      	str	r0, [r7, #12]
 800a12e:	460b      	mov	r3, r1
 800a130:	607a      	str	r2, [r7, #4]
 800a132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a134:	7afb      	ldrb	r3, [r7, #11]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d16f      	bne.n	800a21a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3314      	adds	r3, #20
 800a13e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a146:	2b02      	cmp	r3, #2
 800a148:	d15a      	bne.n	800a200 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	689a      	ldr	r2, [r3, #8]
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	429a      	cmp	r2, r3
 800a154:	d914      	bls.n	800a180 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	689a      	ldr	r2, [r3, #8]
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	1ad2      	subs	r2, r2, r3
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	461a      	mov	r2, r3
 800a16a:	6879      	ldr	r1, [r7, #4]
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f001 f8da 	bl	800b326 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a172:	2300      	movs	r3, #0
 800a174:	2200      	movs	r2, #0
 800a176:	2100      	movs	r1, #0
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f004 f985 	bl	800e488 <USBD_LL_PrepareReceive>
 800a17e:	e03f      	b.n	800a200 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	68da      	ldr	r2, [r3, #12]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d11c      	bne.n	800a1c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	685a      	ldr	r2, [r3, #4]
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a194:	429a      	cmp	r2, r3
 800a196:	d316      	bcc.n	800a1c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d20f      	bcs.n	800a1c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f001 f8bb 	bl	800b326 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	2100      	movs	r1, #0
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f004 f962 	bl	800e488 <USBD_LL_PrepareReceive>
 800a1c4:	e01c      	b.n	800a200 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d10f      	bne.n	800a1f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d009      	beq.n	800a1f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1f2:	2180      	movs	r1, #128	@ 0x80
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f004 f89d 	bl	800e334 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f001 f8e5 	bl	800b3ca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d03a      	beq.n	800a280 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7ff fe42 	bl	8009e94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a218:	e032      	b.n	800a280 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a21a:	7afb      	ldrb	r3, [r7, #11]
 800a21c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a220:	b2db      	uxtb	r3, r3
 800a222:	4619      	mov	r1, r3
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 f985 	bl	800a534 <USBD_CoreFindEP>
 800a22a:	4603      	mov	r3, r0
 800a22c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a22e:	7dfb      	ldrb	r3, [r7, #23]
 800a230:	2bff      	cmp	r3, #255	@ 0xff
 800a232:	d025      	beq.n	800a280 <USBD_LL_DataInStage+0x15a>
 800a234:	7dfb      	ldrb	r3, [r7, #23]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d122      	bne.n	800a280 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2b03      	cmp	r3, #3
 800a244:	d11c      	bne.n	800a280 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a246:	7dfa      	ldrb	r2, [r7, #23]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	32ae      	adds	r2, #174	@ 0xae
 800a24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d014      	beq.n	800a280 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a256:	7dfa      	ldrb	r2, [r7, #23]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a25e:	7dfa      	ldrb	r2, [r7, #23]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	32ae      	adds	r2, #174	@ 0xae
 800a264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	7afa      	ldrb	r2, [r7, #11]
 800a26c:	4611      	mov	r1, r2
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	4798      	blx	r3
 800a272:	4603      	mov	r3, r0
 800a274:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a276:	7dbb      	ldrb	r3, [r7, #22]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d001      	beq.n	800a280 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a27c:	7dbb      	ldrb	r3, [r7, #22]
 800a27e:	e000      	b.n	800a282 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3718      	adds	r7, #24
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b084      	sub	sp, #16
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d014      	beq.n	800a2f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00e      	beq.n	800a2f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	6852      	ldr	r2, [r2, #4]
 800a2de:	b2d2      	uxtb	r2, r2
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	4798      	blx	r3
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2f0:	2340      	movs	r3, #64	@ 0x40
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f003 ffd7 	bl	800e2aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2240      	movs	r2, #64	@ 0x40
 800a308:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a30c:	2340      	movs	r3, #64	@ 0x40
 800a30e:	2200      	movs	r2, #0
 800a310:	2180      	movs	r1, #128	@ 0x80
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f003 ffc9 	bl	800e2aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2240      	movs	r2, #64	@ 0x40
 800a322:	621a      	str	r2, [r3, #32]

  return ret;
 800a324:	7bfb      	ldrb	r3, [r7, #15]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a32e:	b480      	push	{r7}
 800a330:	b083      	sub	sp, #12
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	460b      	mov	r3, r1
 800a338:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	78fa      	ldrb	r2, [r7, #3]
 800a33e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b04      	cmp	r3, #4
 800a360:	d006      	beq.n	800a370 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2204      	movs	r2, #4
 800a374:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	370c      	adds	r7, #12
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a386:	b480      	push	{r7}
 800a388:	b083      	sub	sp, #12
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b04      	cmp	r3, #4
 800a398:	d106      	bne.n	800a3a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b082      	sub	sp, #8
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	d110      	bne.n	800a3ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00b      	beq.n	800a3ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3da:	69db      	ldr	r3, [r3, #28]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d005      	beq.n	800a3ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	460b      	mov	r3, r1
 800a400:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	32ae      	adds	r2, #174	@ 0xae
 800a40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d101      	bne.n	800a418 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a414:	2303      	movs	r3, #3
 800a416:	e01c      	b.n	800a452 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b03      	cmp	r3, #3
 800a422:	d115      	bne.n	800a450 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	32ae      	adds	r2, #174	@ 0xae
 800a42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00b      	beq.n	800a450 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	32ae      	adds	r2, #174	@ 0xae
 800a442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a446:	6a1b      	ldr	r3, [r3, #32]
 800a448:	78fa      	ldrb	r2, [r7, #3]
 800a44a:	4611      	mov	r1, r2
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b082      	sub	sp, #8
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	460b      	mov	r3, r1
 800a464:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	32ae      	adds	r2, #174	@ 0xae
 800a470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d101      	bne.n	800a47c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a478:	2303      	movs	r3, #3
 800a47a:	e01c      	b.n	800a4b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b03      	cmp	r3, #3
 800a486:	d115      	bne.n	800a4b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	32ae      	adds	r2, #174	@ 0xae
 800a492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00b      	beq.n	800a4b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	32ae      	adds	r2, #174	@ 0xae
 800a4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ac:	78fa      	ldrb	r2, [r7, #3]
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b083      	sub	sp, #12
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00e      	beq.n	800a510 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	6852      	ldr	r2, [r2, #4]
 800a4fe:	b2d2      	uxtb	r2, r2
 800a500:	4611      	mov	r1, r2
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	4798      	blx	r3
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a50c:	2303      	movs	r3, #3
 800a50e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a510:	7bfb      	ldrb	r3, [r7, #15]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	460b      	mov	r3, r1
 800a524:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a526:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a540:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b086      	sub	sp, #24
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a562:	2300      	movs	r3, #0
 800a564:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	885b      	ldrh	r3, [r3, #2]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	7812      	ldrb	r2, [r2, #0]
 800a570:	4293      	cmp	r3, r2
 800a572:	d91f      	bls.n	800a5b4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a57a:	e013      	b.n	800a5a4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a57c:	f107 030a 	add.w	r3, r7, #10
 800a580:	4619      	mov	r1, r3
 800a582:	6978      	ldr	r0, [r7, #20]
 800a584:	f000 f81b 	bl	800a5be <USBD_GetNextDesc>
 800a588:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	785b      	ldrb	r3, [r3, #1]
 800a58e:	2b05      	cmp	r3, #5
 800a590:	d108      	bne.n	800a5a4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	789b      	ldrb	r3, [r3, #2]
 800a59a:	78fa      	ldrb	r2, [r7, #3]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d008      	beq.n	800a5b2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	885b      	ldrh	r3, [r3, #2]
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	897b      	ldrh	r3, [r7, #10]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d8e5      	bhi.n	800a57c <USBD_GetEpDesc+0x2e>
 800a5b0:	e000      	b.n	800a5b4 <USBD_GetEpDesc+0x66>
          break;
 800a5b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a5b4:	693b      	ldr	r3, [r7, #16]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3718      	adds	r7, #24
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b085      	sub	sp, #20
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	7812      	ldrb	r2, [r2, #0]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b087      	sub	sp, #28
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	3301      	adds	r3, #1
 800a60c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a614:	8a3b      	ldrh	r3, [r7, #16]
 800a616:	021b      	lsls	r3, r3, #8
 800a618:	b21a      	sxth	r2, r3
 800a61a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a61e:	4313      	orrs	r3, r2
 800a620:	b21b      	sxth	r3, r3
 800a622:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a624:	89fb      	ldrh	r3, [r7, #14]
}
 800a626:	4618      	mov	r0, r3
 800a628:	371c      	adds	r7, #28
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
	...

0800a634 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a64a:	2b40      	cmp	r3, #64	@ 0x40
 800a64c:	d005      	beq.n	800a65a <USBD_StdDevReq+0x26>
 800a64e:	2b40      	cmp	r3, #64	@ 0x40
 800a650:	d857      	bhi.n	800a702 <USBD_StdDevReq+0xce>
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00f      	beq.n	800a676 <USBD_StdDevReq+0x42>
 800a656:	2b20      	cmp	r3, #32
 800a658:	d153      	bne.n	800a702 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	32ae      	adds	r2, #174	@ 0xae
 800a664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	4798      	blx	r3
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]
      break;
 800a674:	e04a      	b.n	800a70c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	2b09      	cmp	r3, #9
 800a67c:	d83b      	bhi.n	800a6f6 <USBD_StdDevReq+0xc2>
 800a67e:	a201      	add	r2, pc, #4	@ (adr r2, 800a684 <USBD_StdDevReq+0x50>)
 800a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a684:	0800a6d9 	.word	0x0800a6d9
 800a688:	0800a6ed 	.word	0x0800a6ed
 800a68c:	0800a6f7 	.word	0x0800a6f7
 800a690:	0800a6e3 	.word	0x0800a6e3
 800a694:	0800a6f7 	.word	0x0800a6f7
 800a698:	0800a6b7 	.word	0x0800a6b7
 800a69c:	0800a6ad 	.word	0x0800a6ad
 800a6a0:	0800a6f7 	.word	0x0800a6f7
 800a6a4:	0800a6cf 	.word	0x0800a6cf
 800a6a8:	0800a6c1 	.word	0x0800a6c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fa3c 	bl	800ab2c <USBD_GetDescriptor>
          break;
 800a6b4:	e024      	b.n	800a700 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fbcb 	bl	800ae54 <USBD_SetAddress>
          break;
 800a6be:	e01f      	b.n	800a700 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a6c0:	6839      	ldr	r1, [r7, #0]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fc0a 	bl	800aedc <USBD_SetConfig>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	73fb      	strb	r3, [r7, #15]
          break;
 800a6cc:	e018      	b.n	800a700 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a6ce:	6839      	ldr	r1, [r7, #0]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fcad 	bl	800b030 <USBD_GetConfig>
          break;
 800a6d6:	e013      	b.n	800a700 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fcde 	bl	800b09c <USBD_GetStatus>
          break;
 800a6e0:	e00e      	b.n	800a700 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fd0d 	bl	800b104 <USBD_SetFeature>
          break;
 800a6ea:	e009      	b.n	800a700 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fd31 	bl	800b156 <USBD_ClrFeature>
          break;
 800a6f4:	e004      	b.n	800a700 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fd88 	bl	800b20e <USBD_CtlError>
          break;
 800a6fe:	bf00      	nop
      }
      break;
 800a700:	e004      	b.n	800a70c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fd82 	bl	800b20e <USBD_CtlError>
      break;
 800a70a:	bf00      	nop
  }

  return ret;
 800a70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop

0800a718 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a72e:	2b40      	cmp	r3, #64	@ 0x40
 800a730:	d005      	beq.n	800a73e <USBD_StdItfReq+0x26>
 800a732:	2b40      	cmp	r3, #64	@ 0x40
 800a734:	d852      	bhi.n	800a7dc <USBD_StdItfReq+0xc4>
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <USBD_StdItfReq+0x26>
 800a73a:	2b20      	cmp	r3, #32
 800a73c:	d14e      	bne.n	800a7dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a744:	b2db      	uxtb	r3, r3
 800a746:	3b01      	subs	r3, #1
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d840      	bhi.n	800a7ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	889b      	ldrh	r3, [r3, #4]
 800a750:	b2db      	uxtb	r3, r3
 800a752:	2b01      	cmp	r3, #1
 800a754:	d836      	bhi.n	800a7c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	889b      	ldrh	r3, [r3, #4]
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	4619      	mov	r1, r3
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7ff fedb 	bl	800a51a <USBD_CoreFindIF>
 800a764:	4603      	mov	r3, r0
 800a766:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a768:	7bbb      	ldrb	r3, [r7, #14]
 800a76a:	2bff      	cmp	r3, #255	@ 0xff
 800a76c:	d01d      	beq.n	800a7aa <USBD_StdItfReq+0x92>
 800a76e:	7bbb      	ldrb	r3, [r7, #14]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d11a      	bne.n	800a7aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a774:	7bba      	ldrb	r2, [r7, #14]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	32ae      	adds	r2, #174	@ 0xae
 800a77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00f      	beq.n	800a7a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a784:	7bba      	ldrb	r2, [r7, #14]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a78c:	7bba      	ldrb	r2, [r7, #14]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	32ae      	adds	r2, #174	@ 0xae
 800a792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	6839      	ldr	r1, [r7, #0]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	4798      	blx	r3
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a7a2:	e004      	b.n	800a7ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a7a8:	e001      	b.n	800a7ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	88db      	ldrh	r3, [r3, #6]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d110      	bne.n	800a7d8 <USBD_StdItfReq+0xc0>
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d10d      	bne.n	800a7d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fdf1 	bl	800b3a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a7c2:	e009      	b.n	800a7d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fd21 	bl	800b20e <USBD_CtlError>
          break;
 800a7cc:	e004      	b.n	800a7d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fd1c 	bl	800b20e <USBD_CtlError>
          break;
 800a7d6:	e000      	b.n	800a7da <USBD_StdItfReq+0xc2>
          break;
 800a7d8:	bf00      	nop
      }
      break;
 800a7da:	e004      	b.n	800a7e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fd15 	bl	800b20e <USBD_CtlError>
      break;
 800a7e4:	bf00      	nop
  }

  return ret;
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	889b      	ldrh	r3, [r3, #4]
 800a802:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a80c:	2b40      	cmp	r3, #64	@ 0x40
 800a80e:	d007      	beq.n	800a820 <USBD_StdEPReq+0x30>
 800a810:	2b40      	cmp	r3, #64	@ 0x40
 800a812:	f200 817f 	bhi.w	800ab14 <USBD_StdEPReq+0x324>
 800a816:	2b00      	cmp	r3, #0
 800a818:	d02a      	beq.n	800a870 <USBD_StdEPReq+0x80>
 800a81a:	2b20      	cmp	r3, #32
 800a81c:	f040 817a 	bne.w	800ab14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a820:	7bbb      	ldrb	r3, [r7, #14]
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7ff fe85 	bl	800a534 <USBD_CoreFindEP>
 800a82a:	4603      	mov	r3, r0
 800a82c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a82e:	7b7b      	ldrb	r3, [r7, #13]
 800a830:	2bff      	cmp	r3, #255	@ 0xff
 800a832:	f000 8174 	beq.w	800ab1e <USBD_StdEPReq+0x32e>
 800a836:	7b7b      	ldrb	r3, [r7, #13]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f040 8170 	bne.w	800ab1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a83e:	7b7a      	ldrb	r2, [r7, #13]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a846:	7b7a      	ldrb	r2, [r7, #13]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	32ae      	adds	r2, #174	@ 0xae
 800a84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	2b00      	cmp	r3, #0
 800a854:	f000 8163 	beq.w	800ab1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a858:	7b7a      	ldrb	r2, [r7, #13]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	32ae      	adds	r2, #174	@ 0xae
 800a85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	4798      	blx	r3
 800a86a:	4603      	mov	r3, r0
 800a86c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a86e:	e156      	b.n	800ab1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	785b      	ldrb	r3, [r3, #1]
 800a874:	2b03      	cmp	r3, #3
 800a876:	d008      	beq.n	800a88a <USBD_StdEPReq+0x9a>
 800a878:	2b03      	cmp	r3, #3
 800a87a:	f300 8145 	bgt.w	800ab08 <USBD_StdEPReq+0x318>
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 809b 	beq.w	800a9ba <USBD_StdEPReq+0x1ca>
 800a884:	2b01      	cmp	r3, #1
 800a886:	d03c      	beq.n	800a902 <USBD_StdEPReq+0x112>
 800a888:	e13e      	b.n	800ab08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b02      	cmp	r3, #2
 800a894:	d002      	beq.n	800a89c <USBD_StdEPReq+0xac>
 800a896:	2b03      	cmp	r3, #3
 800a898:	d016      	beq.n	800a8c8 <USBD_StdEPReq+0xd8>
 800a89a:	e02c      	b.n	800a8f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a89c:	7bbb      	ldrb	r3, [r7, #14]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00d      	beq.n	800a8be <USBD_StdEPReq+0xce>
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	2b80      	cmp	r3, #128	@ 0x80
 800a8a6:	d00a      	beq.n	800a8be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f003 fd41 	bl	800e334 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8b2:	2180      	movs	r1, #128	@ 0x80
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f003 fd3d 	bl	800e334 <USBD_LL_StallEP>
 800a8ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8bc:	e020      	b.n	800a900 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fca4 	bl	800b20e <USBD_CtlError>
              break;
 800a8c6:	e01b      	b.n	800a900 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	885b      	ldrh	r3, [r3, #2]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10e      	bne.n	800a8ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00b      	beq.n	800a8ee <USBD_StdEPReq+0xfe>
 800a8d6:	7bbb      	ldrb	r3, [r7, #14]
 800a8d8:	2b80      	cmp	r3, #128	@ 0x80
 800a8da:	d008      	beq.n	800a8ee <USBD_StdEPReq+0xfe>
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	88db      	ldrh	r3, [r3, #6]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d104      	bne.n	800a8ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f003 fd23 	bl	800e334 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 fd58 	bl	800b3a4 <USBD_CtlSendStatus>

              break;
 800a8f4:	e004      	b.n	800a900 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a8f6:	6839      	ldr	r1, [r7, #0]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fc88 	bl	800b20e <USBD_CtlError>
              break;
 800a8fe:	bf00      	nop
          }
          break;
 800a900:	e107      	b.n	800ab12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d002      	beq.n	800a914 <USBD_StdEPReq+0x124>
 800a90e:	2b03      	cmp	r3, #3
 800a910:	d016      	beq.n	800a940 <USBD_StdEPReq+0x150>
 800a912:	e04b      	b.n	800a9ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a914:	7bbb      	ldrb	r3, [r7, #14]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00d      	beq.n	800a936 <USBD_StdEPReq+0x146>
 800a91a:	7bbb      	ldrb	r3, [r7, #14]
 800a91c:	2b80      	cmp	r3, #128	@ 0x80
 800a91e:	d00a      	beq.n	800a936 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a920:	7bbb      	ldrb	r3, [r7, #14]
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f003 fd05 	bl	800e334 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a92a:	2180      	movs	r1, #128	@ 0x80
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f003 fd01 	bl	800e334 <USBD_LL_StallEP>
 800a932:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a934:	e040      	b.n	800a9b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fc68 	bl	800b20e <USBD_CtlError>
              break;
 800a93e:	e03b      	b.n	800a9b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	885b      	ldrh	r3, [r3, #2]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d136      	bne.n	800a9b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d004      	beq.n	800a95c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a952:	7bbb      	ldrb	r3, [r7, #14]
 800a954:	4619      	mov	r1, r3
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f003 fd0b 	bl	800e372 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fd21 	bl	800b3a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7ff fde4 	bl	800a534 <USBD_CoreFindEP>
 800a96c:	4603      	mov	r3, r0
 800a96e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a970:	7b7b      	ldrb	r3, [r7, #13]
 800a972:	2bff      	cmp	r3, #255	@ 0xff
 800a974:	d01f      	beq.n	800a9b6 <USBD_StdEPReq+0x1c6>
 800a976:	7b7b      	ldrb	r3, [r7, #13]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d11c      	bne.n	800a9b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a97c:	7b7a      	ldrb	r2, [r7, #13]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a984:	7b7a      	ldrb	r2, [r7, #13]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	32ae      	adds	r2, #174	@ 0xae
 800a98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d010      	beq.n	800a9b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a994:	7b7a      	ldrb	r2, [r7, #13]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	32ae      	adds	r2, #174	@ 0xae
 800a99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	4798      	blx	r3
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a9aa:	e004      	b.n	800a9b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fc2d 	bl	800b20e <USBD_CtlError>
              break;
 800a9b4:	e000      	b.n	800a9b8 <USBD_StdEPReq+0x1c8>
              break;
 800a9b6:	bf00      	nop
          }
          break;
 800a9b8:	e0ab      	b.n	800ab12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d002      	beq.n	800a9cc <USBD_StdEPReq+0x1dc>
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d032      	beq.n	800aa30 <USBD_StdEPReq+0x240>
 800a9ca:	e097      	b.n	800aafc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9cc:	7bbb      	ldrb	r3, [r7, #14]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d007      	beq.n	800a9e2 <USBD_StdEPReq+0x1f2>
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
 800a9d4:	2b80      	cmp	r3, #128	@ 0x80
 800a9d6:	d004      	beq.n	800a9e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fc17 	bl	800b20e <USBD_CtlError>
                break;
 800a9e0:	e091      	b.n	800ab06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	da0b      	bge.n	800aa02 <USBD_StdEPReq+0x212>
 800a9ea:	7bbb      	ldrb	r3, [r7, #14]
 800a9ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	3310      	adds	r3, #16
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	3304      	adds	r3, #4
 800aa00:	e00b      	b.n	800aa1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
 800aa04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa08:	4613      	mov	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	4413      	add	r3, r2
 800aa18:	3304      	adds	r3, #4
 800aa1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2202      	movs	r2, #2
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fc61 	bl	800b2f0 <USBD_CtlSendData>
              break;
 800aa2e:	e06a      	b.n	800ab06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	da11      	bge.n	800aa5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa38:	7bbb      	ldrb	r3, [r7, #14]
 800aa3a:	f003 020f 	and.w	r2, r3, #15
 800aa3e:	6879      	ldr	r1, [r7, #4]
 800aa40:	4613      	mov	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4413      	add	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	440b      	add	r3, r1
 800aa4a:	3324      	adds	r3, #36	@ 0x24
 800aa4c:	881b      	ldrh	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d117      	bne.n	800aa82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fbda 	bl	800b20e <USBD_CtlError>
                  break;
 800aa5a:	e054      	b.n	800ab06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa5c:	7bbb      	ldrb	r3, [r7, #14]
 800aa5e:	f003 020f 	and.w	r2, r3, #15
 800aa62:	6879      	ldr	r1, [r7, #4]
 800aa64:	4613      	mov	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	440b      	add	r3, r1
 800aa6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d104      	bne.n	800aa82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fbc7 	bl	800b20e <USBD_CtlError>
                  break;
 800aa80:	e041      	b.n	800ab06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	da0b      	bge.n	800aaa2 <USBD_StdEPReq+0x2b2>
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa90:	4613      	mov	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	3310      	adds	r3, #16
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	e00b      	b.n	800aaba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aaa2:	7bbb      	ldrb	r3, [r7, #14]
 800aaa4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	4413      	add	r3, r2
 800aab8:	3304      	adds	r3, #4
 800aaba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d002      	beq.n	800aac8 <USBD_StdEPReq+0x2d8>
 800aac2:	7bbb      	ldrb	r3, [r7, #14]
 800aac4:	2b80      	cmp	r3, #128	@ 0x80
 800aac6:	d103      	bne.n	800aad0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2200      	movs	r2, #0
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	e00e      	b.n	800aaee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aad0:	7bbb      	ldrb	r3, [r7, #14]
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f003 fc6b 	bl	800e3b0 <USBD_LL_IsStallEP>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d003      	beq.n	800aae8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	2201      	movs	r2, #1
 800aae4:	601a      	str	r2, [r3, #0]
 800aae6:	e002      	b.n	800aaee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2200      	movs	r2, #0
 800aaec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fbfb 	bl	800b2f0 <USBD_CtlSendData>
              break;
 800aafa:	e004      	b.n	800ab06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fb85 	bl	800b20e <USBD_CtlError>
              break;
 800ab04:	bf00      	nop
          }
          break;
 800ab06:	e004      	b.n	800ab12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fb7f 	bl	800b20e <USBD_CtlError>
          break;
 800ab10:	bf00      	nop
      }
      break;
 800ab12:	e005      	b.n	800ab20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fb79 	bl	800b20e <USBD_CtlError>
      break;
 800ab1c:	e000      	b.n	800ab20 <USBD_StdEPReq+0x330>
      break;
 800ab1e:	bf00      	nop
  }

  return ret;
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab36:	2300      	movs	r3, #0
 800ab38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	885b      	ldrh	r3, [r3, #2]
 800ab46:	0a1b      	lsrs	r3, r3, #8
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	2b0e      	cmp	r3, #14
 800ab4e:	f200 8152 	bhi.w	800adf6 <USBD_GetDescriptor+0x2ca>
 800ab52:	a201      	add	r2, pc, #4	@ (adr r2, 800ab58 <USBD_GetDescriptor+0x2c>)
 800ab54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab58:	0800abc9 	.word	0x0800abc9
 800ab5c:	0800abe1 	.word	0x0800abe1
 800ab60:	0800ac21 	.word	0x0800ac21
 800ab64:	0800adf7 	.word	0x0800adf7
 800ab68:	0800adf7 	.word	0x0800adf7
 800ab6c:	0800ad97 	.word	0x0800ad97
 800ab70:	0800adc3 	.word	0x0800adc3
 800ab74:	0800adf7 	.word	0x0800adf7
 800ab78:	0800adf7 	.word	0x0800adf7
 800ab7c:	0800adf7 	.word	0x0800adf7
 800ab80:	0800adf7 	.word	0x0800adf7
 800ab84:	0800adf7 	.word	0x0800adf7
 800ab88:	0800adf7 	.word	0x0800adf7
 800ab8c:	0800adf7 	.word	0x0800adf7
 800ab90:	0800ab95 	.word	0x0800ab95
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab9a:	69db      	ldr	r3, [r3, #28]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00b      	beq.n	800abb8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aba6:	69db      	ldr	r3, [r3, #28]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	7c12      	ldrb	r2, [r2, #16]
 800abac:	f107 0108 	add.w	r1, r7, #8
 800abb0:	4610      	mov	r0, r2
 800abb2:	4798      	blx	r3
 800abb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abb6:	e126      	b.n	800ae06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fb27 	bl	800b20e <USBD_CtlError>
        err++;
 800abc0:	7afb      	ldrb	r3, [r7, #11]
 800abc2:	3301      	adds	r3, #1
 800abc4:	72fb      	strb	r3, [r7, #11]
      break;
 800abc6:	e11e      	b.n	800ae06 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	7c12      	ldrb	r2, [r2, #16]
 800abd4:	f107 0108 	add.w	r1, r7, #8
 800abd8:	4610      	mov	r0, r2
 800abda:	4798      	blx	r3
 800abdc:	60f8      	str	r0, [r7, #12]
      break;
 800abde:	e112      	b.n	800ae06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	7c1b      	ldrb	r3, [r3, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10d      	bne.n	800ac04 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf0:	f107 0208 	add.w	r2, r7, #8
 800abf4:	4610      	mov	r0, r2
 800abf6:	4798      	blx	r3
 800abf8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3301      	adds	r3, #1
 800abfe:	2202      	movs	r2, #2
 800ac00:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac02:	e100      	b.n	800ae06 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac0c:	f107 0208 	add.w	r2, r7, #8
 800ac10:	4610      	mov	r0, r2
 800ac12:	4798      	blx	r3
 800ac14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	701a      	strb	r2, [r3, #0]
      break;
 800ac1e:	e0f2      	b.n	800ae06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	885b      	ldrh	r3, [r3, #2]
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b05      	cmp	r3, #5
 800ac28:	f200 80ac 	bhi.w	800ad84 <USBD_GetDescriptor+0x258>
 800ac2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ac34 <USBD_GetDescriptor+0x108>)
 800ac2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac32:	bf00      	nop
 800ac34:	0800ac4d 	.word	0x0800ac4d
 800ac38:	0800ac81 	.word	0x0800ac81
 800ac3c:	0800acb5 	.word	0x0800acb5
 800ac40:	0800ace9 	.word	0x0800ace9
 800ac44:	0800ad1d 	.word	0x0800ad1d
 800ac48:	0800ad51 	.word	0x0800ad51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00b      	beq.n	800ac70 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	7c12      	ldrb	r2, [r2, #16]
 800ac64:	f107 0108 	add.w	r1, r7, #8
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4798      	blx	r3
 800ac6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac6e:	e091      	b.n	800ad94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 facb 	bl	800b20e <USBD_CtlError>
            err++;
 800ac78:	7afb      	ldrb	r3, [r7, #11]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac7e:	e089      	b.n	800ad94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00b      	beq.n	800aca4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	7c12      	ldrb	r2, [r2, #16]
 800ac98:	f107 0108 	add.w	r1, r7, #8
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	4798      	blx	r3
 800aca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aca2:	e077      	b.n	800ad94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fab1 	bl	800b20e <USBD_CtlError>
            err++;
 800acac:	7afb      	ldrb	r3, [r7, #11]
 800acae:	3301      	adds	r3, #1
 800acb0:	72fb      	strb	r3, [r7, #11]
          break;
 800acb2:	e06f      	b.n	800ad94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	7c12      	ldrb	r2, [r2, #16]
 800accc:	f107 0108 	add.w	r1, r7, #8
 800acd0:	4610      	mov	r0, r2
 800acd2:	4798      	blx	r3
 800acd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acd6:	e05d      	b.n	800ad94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fa97 	bl	800b20e <USBD_CtlError>
            err++;
 800ace0:	7afb      	ldrb	r3, [r7, #11]
 800ace2:	3301      	adds	r3, #1
 800ace4:	72fb      	strb	r3, [r7, #11]
          break;
 800ace6:	e055      	b.n	800ad94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00b      	beq.n	800ad0c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	7c12      	ldrb	r2, [r2, #16]
 800ad00:	f107 0108 	add.w	r1, r7, #8
 800ad04:	4610      	mov	r0, r2
 800ad06:	4798      	blx	r3
 800ad08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad0a:	e043      	b.n	800ad94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fa7d 	bl	800b20e <USBD_CtlError>
            err++;
 800ad14:	7afb      	ldrb	r3, [r7, #11]
 800ad16:	3301      	adds	r3, #1
 800ad18:	72fb      	strb	r3, [r7, #11]
          break;
 800ad1a:	e03b      	b.n	800ad94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad22:	695b      	ldr	r3, [r3, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	7c12      	ldrb	r2, [r2, #16]
 800ad34:	f107 0108 	add.w	r1, r7, #8
 800ad38:	4610      	mov	r0, r2
 800ad3a:	4798      	blx	r3
 800ad3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad3e:	e029      	b.n	800ad94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fa63 	bl	800b20e <USBD_CtlError>
            err++;
 800ad48:	7afb      	ldrb	r3, [r7, #11]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad4e:	e021      	b.n	800ad94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00b      	beq.n	800ad74 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	7c12      	ldrb	r2, [r2, #16]
 800ad68:	f107 0108 	add.w	r1, r7, #8
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3
 800ad70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad72:	e00f      	b.n	800ad94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fa49 	bl	800b20e <USBD_CtlError>
            err++;
 800ad7c:	7afb      	ldrb	r3, [r7, #11]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	72fb      	strb	r3, [r7, #11]
          break;
 800ad82:	e007      	b.n	800ad94 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fa41 	bl	800b20e <USBD_CtlError>
          err++;
 800ad8c:	7afb      	ldrb	r3, [r7, #11]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad92:	bf00      	nop
      }
      break;
 800ad94:	e037      	b.n	800ae06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	7c1b      	ldrb	r3, [r3, #16]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d109      	bne.n	800adb2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ada4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ada6:	f107 0208 	add.w	r2, r7, #8
 800adaa:	4610      	mov	r0, r2
 800adac:	4798      	blx	r3
 800adae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adb0:	e029      	b.n	800ae06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fa2a 	bl	800b20e <USBD_CtlError>
        err++;
 800adba:	7afb      	ldrb	r3, [r7, #11]
 800adbc:	3301      	adds	r3, #1
 800adbe:	72fb      	strb	r3, [r7, #11]
      break;
 800adc0:	e021      	b.n	800ae06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	7c1b      	ldrb	r3, [r3, #16]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10d      	bne.n	800ade6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800add0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800add2:	f107 0208 	add.w	r2, r7, #8
 800add6:	4610      	mov	r0, r2
 800add8:	4798      	blx	r3
 800adda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	3301      	adds	r3, #1
 800ade0:	2207      	movs	r2, #7
 800ade2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ade4:	e00f      	b.n	800ae06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fa10 	bl	800b20e <USBD_CtlError>
        err++;
 800adee:	7afb      	ldrb	r3, [r7, #11]
 800adf0:	3301      	adds	r3, #1
 800adf2:	72fb      	strb	r3, [r7, #11]
      break;
 800adf4:	e007      	b.n	800ae06 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fa08 	bl	800b20e <USBD_CtlError>
      err++;
 800adfe:	7afb      	ldrb	r3, [r7, #11]
 800ae00:	3301      	adds	r3, #1
 800ae02:	72fb      	strb	r3, [r7, #11]
      break;
 800ae04:	bf00      	nop
  }

  if (err != 0U)
 800ae06:	7afb      	ldrb	r3, [r7, #11]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d11e      	bne.n	800ae4a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	88db      	ldrh	r3, [r3, #6]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d016      	beq.n	800ae42 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ae14:	893b      	ldrh	r3, [r7, #8]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00e      	beq.n	800ae38 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	88da      	ldrh	r2, [r3, #6]
 800ae1e:	893b      	ldrh	r3, [r7, #8]
 800ae20:	4293      	cmp	r3, r2
 800ae22:	bf28      	it	cs
 800ae24:	4613      	movcs	r3, r2
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae2a:	893b      	ldrh	r3, [r7, #8]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	68f9      	ldr	r1, [r7, #12]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 fa5d 	bl	800b2f0 <USBD_CtlSendData>
 800ae36:	e009      	b.n	800ae4c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f9e7 	bl	800b20e <USBD_CtlError>
 800ae40:	e004      	b.n	800ae4c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 faae 	bl	800b3a4 <USBD_CtlSendStatus>
 800ae48:	e000      	b.n	800ae4c <USBD_GetDescriptor+0x320>
    return;
 800ae4a:	bf00      	nop
  }
}
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop

0800ae54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	889b      	ldrh	r3, [r3, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d131      	bne.n	800aeca <USBD_SetAddress+0x76>
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	88db      	ldrh	r3, [r3, #6]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d12d      	bne.n	800aeca <USBD_SetAddress+0x76>
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	885b      	ldrh	r3, [r3, #2]
 800ae72:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae74:	d829      	bhi.n	800aeca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	885b      	ldrh	r3, [r3, #2]
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	d104      	bne.n	800ae98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f9bc 	bl	800b20e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae96:	e01d      	b.n	800aed4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	7bfa      	ldrb	r2, [r7, #15]
 800ae9c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aea0:	7bfb      	ldrb	r3, [r7, #15]
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f003 faaf 	bl	800e408 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fa7a 	bl	800b3a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d004      	beq.n	800aec0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2202      	movs	r2, #2
 800aeba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aebe:	e009      	b.n	800aed4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aec8:	e004      	b.n	800aed4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f99e 	bl	800b20e <USBD_CtlError>
  }
}
 800aed2:	bf00      	nop
 800aed4:	bf00      	nop
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	885b      	ldrh	r3, [r3, #2]
 800aeee:	b2da      	uxtb	r2, r3
 800aef0:	4b4e      	ldr	r3, [pc, #312]	@ (800b02c <USBD_SetConfig+0x150>)
 800aef2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aef4:	4b4d      	ldr	r3, [pc, #308]	@ (800b02c <USBD_SetConfig+0x150>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d905      	bls.n	800af08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f985 	bl	800b20e <USBD_CtlError>
    return USBD_FAIL;
 800af04:	2303      	movs	r3, #3
 800af06:	e08c      	b.n	800b022 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b02      	cmp	r3, #2
 800af12:	d002      	beq.n	800af1a <USBD_SetConfig+0x3e>
 800af14:	2b03      	cmp	r3, #3
 800af16:	d029      	beq.n	800af6c <USBD_SetConfig+0x90>
 800af18:	e075      	b.n	800b006 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af1a:	4b44      	ldr	r3, [pc, #272]	@ (800b02c <USBD_SetConfig+0x150>)
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d020      	beq.n	800af64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800af22:	4b42      	ldr	r3, [pc, #264]	@ (800b02c <USBD_SetConfig+0x150>)
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af2c:	4b3f      	ldr	r3, [pc, #252]	@ (800b02c <USBD_SetConfig+0x150>)
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	4619      	mov	r1, r3
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7fe ffb9 	bl	8009eaa <USBD_SetClassConfig>
 800af38:	4603      	mov	r3, r0
 800af3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d008      	beq.n	800af54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f962 	bl	800b20e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2202      	movs	r2, #2
 800af4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af52:	e065      	b.n	800b020 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fa25 	bl	800b3a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2203      	movs	r2, #3
 800af5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800af62:	e05d      	b.n	800b020 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fa1d 	bl	800b3a4 <USBD_CtlSendStatus>
      break;
 800af6a:	e059      	b.n	800b020 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af6c:	4b2f      	ldr	r3, [pc, #188]	@ (800b02c <USBD_SetConfig+0x150>)
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d112      	bne.n	800af9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2202      	movs	r2, #2
 800af78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800af7c:	4b2b      	ldr	r3, [pc, #172]	@ (800b02c <USBD_SetConfig+0x150>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	461a      	mov	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af86:	4b29      	ldr	r3, [pc, #164]	@ (800b02c <USBD_SetConfig+0x150>)
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7fe ffa8 	bl	8009ee2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fa06 	bl	800b3a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af98:	e042      	b.n	800b020 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800af9a:	4b24      	ldr	r3, [pc, #144]	@ (800b02c <USBD_SetConfig+0x150>)
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	461a      	mov	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d02a      	beq.n	800affe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	b2db      	uxtb	r3, r3
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f7fe ff96 	bl	8009ee2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800afb6:	4b1d      	ldr	r3, [pc, #116]	@ (800b02c <USBD_SetConfig+0x150>)
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afc0:	4b1a      	ldr	r3, [pc, #104]	@ (800b02c <USBD_SetConfig+0x150>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	4619      	mov	r1, r3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7fe ff6f 	bl	8009eaa <USBD_SetClassConfig>
 800afcc:	4603      	mov	r3, r0
 800afce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00f      	beq.n	800aff6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 f918 	bl	800b20e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	4619      	mov	r1, r3
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7fe ff7b 	bl	8009ee2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2202      	movs	r2, #2
 800aff0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aff4:	e014      	b.n	800b020 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 f9d4 	bl	800b3a4 <USBD_CtlSendStatus>
      break;
 800affc:	e010      	b.n	800b020 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f9d0 	bl	800b3a4 <USBD_CtlSendStatus>
      break;
 800b004:	e00c      	b.n	800b020 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f900 	bl	800b20e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b00e:	4b07      	ldr	r3, [pc, #28]	@ (800b02c <USBD_SetConfig+0x150>)
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7fe ff64 	bl	8009ee2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b01a:	2303      	movs	r3, #3
 800b01c:	73fb      	strb	r3, [r7, #15]
      break;
 800b01e:	bf00      	nop
  }

  return ret;
 800b020:	7bfb      	ldrb	r3, [r7, #15]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	200008b0 	.word	0x200008b0

0800b030 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	88db      	ldrh	r3, [r3, #6]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d004      	beq.n	800b04c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f8e2 	bl	800b20e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b04a:	e023      	b.n	800b094 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b02      	cmp	r3, #2
 800b056:	dc02      	bgt.n	800b05e <USBD_GetConfig+0x2e>
 800b058:	2b00      	cmp	r3, #0
 800b05a:	dc03      	bgt.n	800b064 <USBD_GetConfig+0x34>
 800b05c:	e015      	b.n	800b08a <USBD_GetConfig+0x5a>
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d00b      	beq.n	800b07a <USBD_GetConfig+0x4a>
 800b062:	e012      	b.n	800b08a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	3308      	adds	r3, #8
 800b06e:	2201      	movs	r2, #1
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f93c 	bl	800b2f0 <USBD_CtlSendData>
        break;
 800b078:	e00c      	b.n	800b094 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	3304      	adds	r3, #4
 800b07e:	2201      	movs	r2, #1
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f934 	bl	800b2f0 <USBD_CtlSendData>
        break;
 800b088:	e004      	b.n	800b094 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f8be 	bl	800b20e <USBD_CtlError>
        break;
 800b092:	bf00      	nop
}
 800b094:	bf00      	nop
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d81e      	bhi.n	800b0f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	88db      	ldrh	r3, [r3, #6]
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d004      	beq.n	800b0c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f8a5 	bl	800b20e <USBD_CtlError>
        break;
 800b0c4:	e01a      	b.n	800b0fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d005      	beq.n	800b0e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	f043 0202 	orr.w	r2, r3, #2
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	330c      	adds	r3, #12
 800b0e6:	2202      	movs	r2, #2
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f900 	bl	800b2f0 <USBD_CtlSendData>
      break;
 800b0f0:	e004      	b.n	800b0fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f88a 	bl	800b20e <USBD_CtlError>
      break;
 800b0fa:	bf00      	nop
  }
}
 800b0fc:	bf00      	nop
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	885b      	ldrh	r3, [r3, #2]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d107      	bne.n	800b126 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f940 	bl	800b3a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b124:	e013      	b.n	800b14e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	885b      	ldrh	r3, [r3, #2]
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d10b      	bne.n	800b146 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	889b      	ldrh	r3, [r3, #4]
 800b132:	0a1b      	lsrs	r3, r3, #8
 800b134:	b29b      	uxth	r3, r3
 800b136:	b2da      	uxtb	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f930 	bl	800b3a4 <USBD_CtlSendStatus>
}
 800b144:	e003      	b.n	800b14e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f860 	bl	800b20e <USBD_CtlError>
}
 800b14e:	bf00      	nop
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b166:	b2db      	uxtb	r3, r3
 800b168:	3b01      	subs	r3, #1
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	d80b      	bhi.n	800b186 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	885b      	ldrh	r3, [r3, #2]
 800b172:	2b01      	cmp	r3, #1
 800b174:	d10c      	bne.n	800b190 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f910 	bl	800b3a4 <USBD_CtlSendStatus>
      }
      break;
 800b184:	e004      	b.n	800b190 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f840 	bl	800b20e <USBD_CtlError>
      break;
 800b18e:	e000      	b.n	800b192 <USBD_ClrFeature+0x3c>
      break;
 800b190:	bf00      	nop
  }
}
 800b192:	bf00      	nop
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	781a      	ldrb	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	781a      	ldrb	r2, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f7ff fa16 	bl	800a5f6 <SWAPBYTE>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f7ff fa09 	bl	800a5f6 <SWAPBYTE>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f7ff f9fc 	bl	800a5f6 <SWAPBYTE>
 800b1fe:	4603      	mov	r3, r0
 800b200:	461a      	mov	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	80da      	strh	r2, [r3, #6]
}
 800b206:	bf00      	nop
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b218:	2180      	movs	r1, #128	@ 0x80
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f003 f88a 	bl	800e334 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b220:	2100      	movs	r1, #0
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f003 f886 	bl	800e334 <USBD_LL_StallEP>
}
 800b228:	bf00      	nop
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b23c:	2300      	movs	r3, #0
 800b23e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d036      	beq.n	800b2b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b24a:	6938      	ldr	r0, [r7, #16]
 800b24c:	f000 f836 	bl	800b2bc <USBD_GetLen>
 800b250:	4603      	mov	r3, r0
 800b252:	3301      	adds	r3, #1
 800b254:	b29b      	uxth	r3, r3
 800b256:	005b      	lsls	r3, r3, #1
 800b258:	b29a      	uxth	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b25e:	7dfb      	ldrb	r3, [r7, #23]
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	4413      	add	r3, r2
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	7812      	ldrb	r2, [r2, #0]
 800b268:	701a      	strb	r2, [r3, #0]
  idx++;
 800b26a:	7dfb      	ldrb	r3, [r7, #23]
 800b26c:	3301      	adds	r3, #1
 800b26e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b270:	7dfb      	ldrb	r3, [r7, #23]
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	4413      	add	r3, r2
 800b276:	2203      	movs	r2, #3
 800b278:	701a      	strb	r2, [r3, #0]
  idx++;
 800b27a:	7dfb      	ldrb	r3, [r7, #23]
 800b27c:	3301      	adds	r3, #1
 800b27e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b280:	e013      	b.n	800b2aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b282:	7dfb      	ldrb	r3, [r7, #23]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	4413      	add	r3, r2
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	7812      	ldrb	r2, [r2, #0]
 800b28c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	3301      	adds	r3, #1
 800b292:	613b      	str	r3, [r7, #16]
    idx++;
 800b294:	7dfb      	ldrb	r3, [r7, #23]
 800b296:	3301      	adds	r3, #1
 800b298:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	4413      	add	r3, r2
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2a4:	7dfb      	ldrb	r3, [r7, #23]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d1e7      	bne.n	800b282 <USBD_GetString+0x52>
 800b2b2:	e000      	b.n	800b2b6 <USBD_GetString+0x86>
    return;
 800b2b4:	bf00      	nop
  }
}
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2cc:	e005      	b.n	800b2da <USBD_GetLen+0x1e>
  {
    len++;
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1f5      	bne.n	800b2ce <USBD_GetLen+0x12>
  }

  return len;
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2202      	movs	r2, #2
 800b300:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	2100      	movs	r1, #0
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f003 f895 	bl	800e446 <USBD_LL_Transmit>

  return USBD_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b084      	sub	sp, #16
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	60f8      	str	r0, [r7, #12]
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	2100      	movs	r1, #0
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f003 f884 	bl	800e446 <USBD_LL_Transmit>

  return USBD_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2203      	movs	r2, #3
 800b358:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	2100      	movs	r1, #0
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f003 f888 	bl	800e488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b084      	sub	sp, #16
 800b386:	af00      	add	r7, sp, #0
 800b388:	60f8      	str	r0, [r7, #12]
 800b38a:	60b9      	str	r1, [r7, #8]
 800b38c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	2100      	movs	r1, #0
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f003 f877 	bl	800e488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2204      	movs	r2, #4
 800b3b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f003 f843 	bl	800e446 <USBD_LL_Transmit>

  return USBD_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2205      	movs	r2, #5
 800b3d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3da:	2300      	movs	r3, #0
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2100      	movs	r1, #0
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f003 f851 	bl	800e488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b3fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b402:	2b84      	cmp	r3, #132	@ 0x84
 800b404:	d005      	beq.n	800b412 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b406:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	4413      	add	r3, r2
 800b40e:	3303      	adds	r3, #3
 800b410:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b412:	68fb      	ldr	r3, [r7, #12]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b426:	f3ef 8305 	mrs	r3, IPSR
 800b42a:	607b      	str	r3, [r7, #4]
  return(result);
 800b42c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b42e:	2b00      	cmp	r3, #0
 800b430:	bf14      	ite	ne
 800b432:	2301      	movne	r3, #1
 800b434:	2300      	moveq	r3, #0
 800b436:	b2db      	uxtb	r3, r3
}
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b448:	f001 f994 	bl	800c774 <vTaskStartScheduler>
  
  return osOK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	bd80      	pop	{r7, pc}

0800b452 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b452:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b454:	b089      	sub	sp, #36	@ 0x24
 800b456:	af04      	add	r7, sp, #16
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d020      	beq.n	800b4a6 <osThreadCreate+0x54>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	699b      	ldr	r3, [r3, #24]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d01c      	beq.n	800b4a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685c      	ldr	r4, [r3, #4]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	691e      	ldr	r6, [r3, #16]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b47e:	4618      	mov	r0, r3
 800b480:	f7ff ffb6 	bl	800b3f0 <makeFreeRtosPriority>
 800b484:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b48e:	9202      	str	r2, [sp, #8]
 800b490:	9301      	str	r3, [sp, #4]
 800b492:	9100      	str	r1, [sp, #0]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	4632      	mov	r2, r6
 800b498:	4629      	mov	r1, r5
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 ff84 	bl	800c3a8 <xTaskCreateStatic>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	60fb      	str	r3, [r7, #12]
 800b4a4:	e01c      	b.n	800b4e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685c      	ldr	r4, [r3, #4]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b4b2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff ff98 	bl	800b3f0 <makeFreeRtosPriority>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	f107 030c 	add.w	r3, r7, #12
 800b4c6:	9301      	str	r3, [sp, #4]
 800b4c8:	9200      	str	r2, [sp, #0]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	4632      	mov	r2, r6
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 ffc9 	bl	800c468 <xTaskCreate>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d001      	beq.n	800b4e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	e000      	b.n	800b4e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d001      	beq.n	800b500 <osDelay+0x16>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	e000      	b.n	800b502 <osDelay+0x18>
 800b500:	2301      	movs	r3, #1
 800b502:	4618      	mov	r0, r3
 800b504:	f001 f900 	bl	800c708 <vTaskDelay>
  
  return osOK;
 800b508:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b082      	sub	sp, #8
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d007      	beq.n	800b532 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	4619      	mov	r1, r3
 800b528:	2001      	movs	r0, #1
 800b52a:	f000 fb0e 	bl	800bb4a <xQueueCreateMutexStatic>
 800b52e:	4603      	mov	r3, r0
 800b530:	e003      	b.n	800b53a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b532:	2001      	movs	r0, #1
 800b534:	f000 faf1 	bl	800bb1a <xQueueCreateMutex>
 800b538:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b542:	b590      	push	{r4, r7, lr}
 800b544:	b085      	sub	sp, #20
 800b546:	af02      	add	r7, sp, #8
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d011      	beq.n	800b578 <osMessageCreate+0x36>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00d      	beq.n	800b578 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6818      	ldr	r0, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6859      	ldr	r1, [r3, #4]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689a      	ldr	r2, [r3, #8]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	2400      	movs	r4, #0
 800b56e:	9400      	str	r4, [sp, #0]
 800b570:	f000 f9e2 	bl	800b938 <xQueueGenericCreateStatic>
 800b574:	4603      	mov	r3, r0
 800b576:	e008      	b.n	800b58a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6818      	ldr	r0, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	4619      	mov	r1, r3
 800b584:	f000 fa55 	bl	800ba32 <xQueueGenericCreate>
 800b588:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd90      	pop	{r4, r7, pc}
	...

0800b594 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <osMessagePut+0x1e>
    ticks = 1;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b5b2:	f7ff ff35 	bl	800b420 <inHandlerMode>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d018      	beq.n	800b5ee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b5bc:	f107 0210 	add.w	r2, r7, #16
 800b5c0:	f107 0108 	add.w	r1, r7, #8
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f000 fbdc 	bl	800bd84 <xQueueGenericSendFromISR>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d001      	beq.n	800b5d6 <osMessagePut+0x42>
      return osErrorOS;
 800b5d2:	23ff      	movs	r3, #255	@ 0xff
 800b5d4:	e018      	b.n	800b608 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d014      	beq.n	800b606 <osMessagePut+0x72>
 800b5dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b610 <osMessagePut+0x7c>)
 800b5de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5e2:	601a      	str	r2, [r3, #0]
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	e00b      	b.n	800b606 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b5ee:	f107 0108 	add.w	r1, r7, #8
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f000 fac2 	bl	800bb80 <xQueueGenericSend>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d001      	beq.n	800b606 <osMessagePut+0x72>
      return osErrorOS;
 800b602:	23ff      	movs	r3, #255	@ 0xff
 800b604:	e000      	b.n	800b608 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3718      	adds	r7, #24
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	e000ed04 	.word	0xe000ed04

0800b614 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b614:	b590      	push	{r4, r7, lr}
 800b616:	b08b      	sub	sp, #44	@ 0x2c
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b624:	2300      	movs	r3, #0
 800b626:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d10a      	bne.n	800b644 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b62e:	2380      	movs	r3, #128	@ 0x80
 800b630:	617b      	str	r3, [r7, #20]
    return event;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	461c      	mov	r4, r3
 800b636:	f107 0314 	add.w	r3, r7, #20
 800b63a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b63e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b642:	e054      	b.n	800b6ee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b644:	2300      	movs	r3, #0
 800b646:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b652:	d103      	bne.n	800b65c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b654:	f04f 33ff 	mov.w	r3, #4294967295
 800b658:	627b      	str	r3, [r7, #36]	@ 0x24
 800b65a:	e009      	b.n	800b670 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d006      	beq.n	800b670 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800b666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <osMessageGet+0x5c>
      ticks = 1;
 800b66c:	2301      	movs	r3, #1
 800b66e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b670:	f7ff fed6 	bl	800b420 <inHandlerMode>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d01c      	beq.n	800b6b4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b67a:	f107 0220 	add.w	r2, r7, #32
 800b67e:	f107 0314 	add.w	r3, r7, #20
 800b682:	3304      	adds	r3, #4
 800b684:	4619      	mov	r1, r3
 800b686:	68b8      	ldr	r0, [r7, #8]
 800b688:	f000 fcfc 	bl	800c084 <xQueueReceiveFromISR>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d102      	bne.n	800b698 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b692:	2310      	movs	r3, #16
 800b694:	617b      	str	r3, [r7, #20]
 800b696:	e001      	b.n	800b69c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b698:	2300      	movs	r3, #0
 800b69a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b69c:	6a3b      	ldr	r3, [r7, #32]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d01d      	beq.n	800b6de <osMessageGet+0xca>
 800b6a2:	4b15      	ldr	r3, [pc, #84]	@ (800b6f8 <osMessageGet+0xe4>)
 800b6a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	e014      	b.n	800b6de <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b6b4:	f107 0314 	add.w	r3, r7, #20
 800b6b8:	3304      	adds	r3, #4
 800b6ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6bc:	4619      	mov	r1, r3
 800b6be:	68b8      	ldr	r0, [r7, #8]
 800b6c0:	f000 fbfe 	bl	800bec0 <xQueueReceive>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d102      	bne.n	800b6d0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b6ca:	2310      	movs	r3, #16
 800b6cc:	617b      	str	r3, [r7, #20]
 800b6ce:	e006      	b.n	800b6de <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d101      	bne.n	800b6da <osMessageGet+0xc6>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	e000      	b.n	800b6dc <osMessageGet+0xc8>
 800b6da:	2340      	movs	r3, #64	@ 0x40
 800b6dc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	461c      	mov	r4, r3
 800b6e2:	f107 0314 	add.w	r3, r7, #20
 800b6e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b6ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	372c      	adds	r7, #44	@ 0x2c
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd90      	pop	{r4, r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	e000ed04 	.word	0xe000ed04

0800b6fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f103 0208 	add.w	r2, r3, #8
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f04f 32ff 	mov.w	r2, #4294967295
 800b714:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f103 0208 	add.w	r2, r3, #8
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f103 0208 	add.w	r2, r3, #8
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b74a:	bf00      	nop
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b756:	b480      	push	{r7}
 800b758:	b085      	sub	sp, #20
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	689a      	ldr	r2, [r3, #8]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	683a      	ldr	r2, [r7, #0]
 800b77a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	1c5a      	adds	r2, r3, #1
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	601a      	str	r2, [r3, #0]
}
 800b792:	bf00      	nop
 800b794:	3714      	adds	r7, #20
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b085      	sub	sp, #20
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b4:	d103      	bne.n	800b7be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	691b      	ldr	r3, [r3, #16]
 800b7ba:	60fb      	str	r3, [r7, #12]
 800b7bc:	e00c      	b.n	800b7d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	e002      	b.n	800b7cc <vListInsert+0x2e>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	60fb      	str	r3, [r7, #12]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d2f6      	bcs.n	800b7c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	685a      	ldr	r2, [r3, #4]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	683a      	ldr	r2, [r7, #0]
 800b7e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	683a      	ldr	r2, [r7, #0]
 800b7f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	1c5a      	adds	r2, r3, #1
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	601a      	str	r2, [r3, #0]
}
 800b804:	bf00      	nop
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	6892      	ldr	r2, [r2, #8]
 800b826:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	6852      	ldr	r2, [r2, #4]
 800b830:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d103      	bne.n	800b844 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	689a      	ldr	r2, [r3, #8]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	1e5a      	subs	r2, r3, #1
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10b      	bne.n	800b890 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b87c:	f383 8811 	msr	BASEPRI, r3
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b88a:	bf00      	nop
 800b88c:	bf00      	nop
 800b88e:	e7fd      	b.n	800b88c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b890:	f001 fdca 	bl	800d428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b89c:	68f9      	ldr	r1, [r7, #12]
 800b89e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b8a0:	fb01 f303 	mul.w	r3, r1, r3
 800b8a4:	441a      	add	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	68f9      	ldr	r1, [r7, #12]
 800b8c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b8c6:	fb01 f303 	mul.w	r3, r1, r3
 800b8ca:	441a      	add	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	22ff      	movs	r2, #255	@ 0xff
 800b8d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	22ff      	movs	r2, #255	@ 0xff
 800b8dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d114      	bne.n	800b910 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d01a      	beq.n	800b924 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3310      	adds	r3, #16
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f001 f998 	bl	800cc28 <xTaskRemoveFromEventList>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d012      	beq.n	800b924 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b8fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b934 <xQueueGenericReset+0xd0>)
 800b900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b904:	601a      	str	r2, [r3, #0]
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	e009      	b.n	800b924 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	3310      	adds	r3, #16
 800b914:	4618      	mov	r0, r3
 800b916:	f7ff fef1 	bl	800b6fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3324      	adds	r3, #36	@ 0x24
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff feec 	bl	800b6fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b924:	f001 fdb2 	bl	800d48c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b928:	2301      	movs	r3, #1
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	e000ed04 	.word	0xe000ed04

0800b938 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b08e      	sub	sp, #56	@ 0x38
 800b93c:	af02      	add	r7, sp, #8
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10b      	bne.n	800b964 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b95e:	bf00      	nop
 800b960:	bf00      	nop
 800b962:	e7fd      	b.n	800b960 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10b      	bne.n	800b982 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b97c:	bf00      	nop
 800b97e:	bf00      	nop
 800b980:	e7fd      	b.n	800b97e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <xQueueGenericCreateStatic+0x56>
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <xQueueGenericCreateStatic+0x5a>
 800b98e:	2301      	movs	r3, #1
 800b990:	e000      	b.n	800b994 <xQueueGenericCreateStatic+0x5c>
 800b992:	2300      	movs	r3, #0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10b      	bne.n	800b9b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	623b      	str	r3, [r7, #32]
}
 800b9aa:	bf00      	nop
 800b9ac:	bf00      	nop
 800b9ae:	e7fd      	b.n	800b9ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d102      	bne.n	800b9bc <xQueueGenericCreateStatic+0x84>
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <xQueueGenericCreateStatic+0x88>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e000      	b.n	800b9c2 <xQueueGenericCreateStatic+0x8a>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10b      	bne.n	800b9de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ca:	f383 8811 	msr	BASEPRI, r3
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f3bf 8f4f 	dsb	sy
 800b9d6:	61fb      	str	r3, [r7, #28]
}
 800b9d8:	bf00      	nop
 800b9da:	bf00      	nop
 800b9dc:	e7fd      	b.n	800b9da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b9de:	2348      	movs	r3, #72	@ 0x48
 800b9e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	2b48      	cmp	r3, #72	@ 0x48
 800b9e6:	d00b      	beq.n	800ba00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ec:	f383 8811 	msr	BASEPRI, r3
 800b9f0:	f3bf 8f6f 	isb	sy
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	61bb      	str	r3, [r7, #24]
}
 800b9fa:	bf00      	nop
 800b9fc:	bf00      	nop
 800b9fe:	e7fd      	b.n	800b9fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ba06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00d      	beq.n	800ba28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ba18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	68b9      	ldr	r1, [r7, #8]
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f000 f840 	bl	800baa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3730      	adds	r7, #48	@ 0x30
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b08a      	sub	sp, #40	@ 0x28
 800ba36:	af02      	add	r7, sp, #8
 800ba38:	60f8      	str	r0, [r7, #12]
 800ba3a:	60b9      	str	r1, [r7, #8]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d10b      	bne.n	800ba5e <xQueueGenericCreate+0x2c>
	__asm volatile
 800ba46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	613b      	str	r3, [r7, #16]
}
 800ba58:	bf00      	nop
 800ba5a:	bf00      	nop
 800ba5c:	e7fd      	b.n	800ba5a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	fb02 f303 	mul.w	r3, r2, r3
 800ba66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	3348      	adds	r3, #72	@ 0x48
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f001 fdfd 	bl	800d66c <pvPortMalloc>
 800ba72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d011      	beq.n	800ba9e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	3348      	adds	r3, #72	@ 0x48
 800ba82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba8c:	79fa      	ldrb	r2, [r7, #7]
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	4613      	mov	r3, r2
 800ba94:	697a      	ldr	r2, [r7, #20]
 800ba96:	68b9      	ldr	r1, [r7, #8]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f000 f805 	bl	800baa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba9e:	69bb      	ldr	r3, [r7, #24]
	}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3720      	adds	r7, #32
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
 800bab4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d103      	bne.n	800bac4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	69ba      	ldr	r2, [r7, #24]
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	e002      	b.n	800baca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bad6:	2101      	movs	r1, #1
 800bad8:	69b8      	ldr	r0, [r7, #24]
 800bada:	f7ff fec3 	bl	800b864 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bade:	bf00      	nop
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b082      	sub	sp, #8
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00e      	beq.n	800bb12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bb06:	2300      	movs	r3, #0
 800bb08:	2200      	movs	r2, #0
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 f837 	bl	800bb80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bb12:	bf00      	nop
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b086      	sub	sp, #24
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	4603      	mov	r3, r0
 800bb22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb24:	2301      	movs	r3, #1
 800bb26:	617b      	str	r3, [r7, #20]
 800bb28:	2300      	movs	r3, #0
 800bb2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bb2c:	79fb      	ldrb	r3, [r7, #7]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	6939      	ldr	r1, [r7, #16]
 800bb32:	6978      	ldr	r0, [r7, #20]
 800bb34:	f7ff ff7d 	bl	800ba32 <xQueueGenericCreate>
 800bb38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f7ff ffd3 	bl	800bae6 <prvInitialiseMutex>

		return xNewQueue;
 800bb40:	68fb      	ldr	r3, [r7, #12]
	}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b088      	sub	sp, #32
 800bb4e:	af02      	add	r7, sp, #8
 800bb50:	4603      	mov	r3, r0
 800bb52:	6039      	str	r1, [r7, #0]
 800bb54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb56:	2301      	movs	r3, #1
 800bb58:	617b      	str	r3, [r7, #20]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bb5e:	79fb      	ldrb	r3, [r7, #7]
 800bb60:	9300      	str	r3, [sp, #0]
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	2200      	movs	r2, #0
 800bb66:	6939      	ldr	r1, [r7, #16]
 800bb68:	6978      	ldr	r0, [r7, #20]
 800bb6a:	f7ff fee5 	bl	800b938 <xQueueGenericCreateStatic>
 800bb6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f7ff ffb8 	bl	800bae6 <prvInitialiseMutex>

		return xNewQueue;
 800bb76:	68fb      	ldr	r3, [r7, #12]
	}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b08e      	sub	sp, #56	@ 0x38
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
 800bb8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10b      	bne.n	800bbb4 <xQueueGenericSend+0x34>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bbae:	bf00      	nop
 800bbb0:	bf00      	nop
 800bbb2:	e7fd      	b.n	800bbb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d103      	bne.n	800bbc2 <xQueueGenericSend+0x42>
 800bbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d101      	bne.n	800bbc6 <xQueueGenericSend+0x46>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e000      	b.n	800bbc8 <xQueueGenericSend+0x48>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10b      	bne.n	800bbe4 <xQueueGenericSend+0x64>
	__asm volatile
 800bbcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd0:	f383 8811 	msr	BASEPRI, r3
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	f3bf 8f4f 	dsb	sy
 800bbdc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bbde:	bf00      	nop
 800bbe0:	bf00      	nop
 800bbe2:	e7fd      	b.n	800bbe0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	2b02      	cmp	r3, #2
 800bbe8:	d103      	bne.n	800bbf2 <xQueueGenericSend+0x72>
 800bbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d101      	bne.n	800bbf6 <xQueueGenericSend+0x76>
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e000      	b.n	800bbf8 <xQueueGenericSend+0x78>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10b      	bne.n	800bc14 <xQueueGenericSend+0x94>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	623b      	str	r3, [r7, #32]
}
 800bc0e:	bf00      	nop
 800bc10:	bf00      	nop
 800bc12:	e7fd      	b.n	800bc10 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc14:	f001 f9ce 	bl	800cfb4 <xTaskGetSchedulerState>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d102      	bne.n	800bc24 <xQueueGenericSend+0xa4>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <xQueueGenericSend+0xa8>
 800bc24:	2301      	movs	r3, #1
 800bc26:	e000      	b.n	800bc2a <xQueueGenericSend+0xaa>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d10b      	bne.n	800bc46 <xQueueGenericSend+0xc6>
	__asm volatile
 800bc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	61fb      	str	r3, [r7, #28]
}
 800bc40:	bf00      	nop
 800bc42:	bf00      	nop
 800bc44:	e7fd      	b.n	800bc42 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc46:	f001 fbef 	bl	800d428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d302      	bcc.n	800bc5c <xQueueGenericSend+0xdc>
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d129      	bne.n	800bcb0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	68b9      	ldr	r1, [r7, #8]
 800bc60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc62:	f000 fa91 	bl	800c188 <prvCopyDataToQueue>
 800bc66:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d010      	beq.n	800bc92 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc72:	3324      	adds	r3, #36	@ 0x24
 800bc74:	4618      	mov	r0, r3
 800bc76:	f000 ffd7 	bl	800cc28 <xTaskRemoveFromEventList>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d013      	beq.n	800bca8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc80:	4b3f      	ldr	r3, [pc, #252]	@ (800bd80 <xQueueGenericSend+0x200>)
 800bc82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc86:	601a      	str	r2, [r3, #0]
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	e00a      	b.n	800bca8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d007      	beq.n	800bca8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc98:	4b39      	ldr	r3, [pc, #228]	@ (800bd80 <xQueueGenericSend+0x200>)
 800bc9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc9e:	601a      	str	r2, [r3, #0]
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bca8:	f001 fbf0 	bl	800d48c <vPortExitCritical>
				return pdPASS;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e063      	b.n	800bd78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d103      	bne.n	800bcbe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcb6:	f001 fbe9 	bl	800d48c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e05c      	b.n	800bd78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d106      	bne.n	800bcd2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcc4:	f107 0314 	add.w	r3, r7, #20
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f001 f811 	bl	800ccf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcd2:	f001 fbdb 	bl	800d48c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcd6:	f000 fdb7 	bl	800c848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcda:	f001 fba5 	bl	800d428 <vPortEnterCritical>
 800bcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bce4:	b25b      	sxtb	r3, r3
 800bce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcea:	d103      	bne.n	800bcf4 <xQueueGenericSend+0x174>
 800bcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bcfa:	b25b      	sxtb	r3, r3
 800bcfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd00:	d103      	bne.n	800bd0a <xQueueGenericSend+0x18a>
 800bd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd0a:	f001 fbbf 	bl	800d48c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd0e:	1d3a      	adds	r2, r7, #4
 800bd10:	f107 0314 	add.w	r3, r7, #20
 800bd14:	4611      	mov	r1, r2
 800bd16:	4618      	mov	r0, r3
 800bd18:	f001 f800 	bl	800cd1c <xTaskCheckForTimeOut>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d124      	bne.n	800bd6c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd24:	f000 fb28 	bl	800c378 <prvIsQueueFull>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d018      	beq.n	800bd60 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd30:	3310      	adds	r3, #16
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	4611      	mov	r1, r2
 800bd36:	4618      	mov	r0, r3
 800bd38:	f000 ff50 	bl	800cbdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd3e:	f000 fab3 	bl	800c2a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd42:	f000 fd8f 	bl	800c864 <xTaskResumeAll>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f47f af7c 	bne.w	800bc46 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bd4e:	4b0c      	ldr	r3, [pc, #48]	@ (800bd80 <xQueueGenericSend+0x200>)
 800bd50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd54:	601a      	str	r2, [r3, #0]
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	e772      	b.n	800bc46 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd62:	f000 faa1 	bl	800c2a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd66:	f000 fd7d 	bl	800c864 <xTaskResumeAll>
 800bd6a:	e76c      	b.n	800bc46 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd6e:	f000 fa9b 	bl	800c2a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd72:	f000 fd77 	bl	800c864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3738      	adds	r7, #56	@ 0x38
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	e000ed04 	.word	0xe000ed04

0800bd84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b090      	sub	sp, #64	@ 0x40
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	607a      	str	r2, [r7, #4]
 800bd90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800bd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10b      	bne.n	800bdb4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800bd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bdae:	bf00      	nop
 800bdb0:	bf00      	nop
 800bdb2:	e7fd      	b.n	800bdb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d103      	bne.n	800bdc2 <xQueueGenericSendFromISR+0x3e>
 800bdba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <xQueueGenericSendFromISR+0x42>
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e000      	b.n	800bdc8 <xQueueGenericSendFromISR+0x44>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10b      	bne.n	800bde4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800bdcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdd0:	f383 8811 	msr	BASEPRI, r3
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bdde:	bf00      	nop
 800bde0:	bf00      	nop
 800bde2:	e7fd      	b.n	800bde0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	d103      	bne.n	800bdf2 <xQueueGenericSendFromISR+0x6e>
 800bdea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d101      	bne.n	800bdf6 <xQueueGenericSendFromISR+0x72>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e000      	b.n	800bdf8 <xQueueGenericSendFromISR+0x74>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10b      	bne.n	800be14 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	623b      	str	r3, [r7, #32]
}
 800be0e:	bf00      	nop
 800be10:	bf00      	nop
 800be12:	e7fd      	b.n	800be10 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be14:	f001 fbe8 	bl	800d5e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800be18:	f3ef 8211 	mrs	r2, BASEPRI
 800be1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be20:	f383 8811 	msr	BASEPRI, r3
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	61fa      	str	r2, [r7, #28]
 800be2e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800be30:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be32:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d302      	bcc.n	800be46 <xQueueGenericSendFromISR+0xc2>
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b02      	cmp	r3, #2
 800be44:	d12f      	bne.n	800bea6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	68b9      	ldr	r1, [r7, #8]
 800be5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800be5c:	f000 f994 	bl	800c188 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be60:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800be64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be68:	d112      	bne.n	800be90 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d016      	beq.n	800bea0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be74:	3324      	adds	r3, #36	@ 0x24
 800be76:	4618      	mov	r0, r3
 800be78:	f000 fed6 	bl	800cc28 <xTaskRemoveFromEventList>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00e      	beq.n	800bea0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00b      	beq.n	800bea0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	601a      	str	r2, [r3, #0]
 800be8e:	e007      	b.n	800bea0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800be94:	3301      	adds	r3, #1
 800be96:	b2db      	uxtb	r3, r3
 800be98:	b25a      	sxtb	r2, r3
 800be9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bea0:	2301      	movs	r3, #1
 800bea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bea4:	e001      	b.n	800beaa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bea6:	2300      	movs	r3, #0
 800bea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800beaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800beb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800beb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3740      	adds	r7, #64	@ 0x40
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b08c      	sub	sp, #48	@ 0x30
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800becc:	2300      	movs	r3, #0
 800bece:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10b      	bne.n	800bef2 <xQueueReceive+0x32>
	__asm volatile
 800beda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	623b      	str	r3, [r7, #32]
}
 800beec:	bf00      	nop
 800beee:	bf00      	nop
 800bef0:	e7fd      	b.n	800beee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d103      	bne.n	800bf00 <xQueueReceive+0x40>
 800bef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800befa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <xQueueReceive+0x44>
 800bf00:	2301      	movs	r3, #1
 800bf02:	e000      	b.n	800bf06 <xQueueReceive+0x46>
 800bf04:	2300      	movs	r3, #0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10b      	bne.n	800bf22 <xQueueReceive+0x62>
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	61fb      	str	r3, [r7, #28]
}
 800bf1c:	bf00      	nop
 800bf1e:	bf00      	nop
 800bf20:	e7fd      	b.n	800bf1e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf22:	f001 f847 	bl	800cfb4 <xTaskGetSchedulerState>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d102      	bne.n	800bf32 <xQueueReceive+0x72>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d101      	bne.n	800bf36 <xQueueReceive+0x76>
 800bf32:	2301      	movs	r3, #1
 800bf34:	e000      	b.n	800bf38 <xQueueReceive+0x78>
 800bf36:	2300      	movs	r3, #0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10b      	bne.n	800bf54 <xQueueReceive+0x94>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	61bb      	str	r3, [r7, #24]
}
 800bf4e:	bf00      	nop
 800bf50:	bf00      	nop
 800bf52:	e7fd      	b.n	800bf50 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf54:	f001 fa68 	bl	800d428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf5c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d01f      	beq.n	800bfa4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf64:	68b9      	ldr	r1, [r7, #8]
 800bf66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf68:	f000 f978 	bl	800c25c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6e:	1e5a      	subs	r2, r3, #1
 800bf70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf72:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00f      	beq.n	800bf9c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf7e:	3310      	adds	r3, #16
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 fe51 	bl	800cc28 <xTaskRemoveFromEventList>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d007      	beq.n	800bf9c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf8c:	4b3c      	ldr	r3, [pc, #240]	@ (800c080 <xQueueReceive+0x1c0>)
 800bf8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf9c:	f001 fa76 	bl	800d48c <vPortExitCritical>
				return pdPASS;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e069      	b.n	800c078 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d103      	bne.n	800bfb2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfaa:	f001 fa6f 	bl	800d48c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	e062      	b.n	800c078 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d106      	bne.n	800bfc6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfb8:	f107 0310 	add.w	r3, r7, #16
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 fe97 	bl	800ccf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfc6:	f001 fa61 	bl	800d48c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfca:	f000 fc3d 	bl	800c848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfce:	f001 fa2b 	bl	800d428 <vPortEnterCritical>
 800bfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bfd8:	b25b      	sxtb	r3, r3
 800bfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfde:	d103      	bne.n	800bfe8 <xQueueReceive+0x128>
 800bfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bfe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bfee:	b25b      	sxtb	r3, r3
 800bff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff4:	d103      	bne.n	800bffe <xQueueReceive+0x13e>
 800bff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bffe:	f001 fa45 	bl	800d48c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c002:	1d3a      	adds	r2, r7, #4
 800c004:	f107 0310 	add.w	r3, r7, #16
 800c008:	4611      	mov	r1, r2
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 fe86 	bl	800cd1c <xTaskCheckForTimeOut>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d123      	bne.n	800c05e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c018:	f000 f998 	bl	800c34c <prvIsQueueEmpty>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d017      	beq.n	800c052 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c024:	3324      	adds	r3, #36	@ 0x24
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	4611      	mov	r1, r2
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 fdd6 	bl	800cbdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c032:	f000 f939 	bl	800c2a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c036:	f000 fc15 	bl	800c864 <xTaskResumeAll>
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d189      	bne.n	800bf54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c040:	4b0f      	ldr	r3, [pc, #60]	@ (800c080 <xQueueReceive+0x1c0>)
 800c042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c046:	601a      	str	r2, [r3, #0]
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	e780      	b.n	800bf54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c054:	f000 f928 	bl	800c2a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c058:	f000 fc04 	bl	800c864 <xTaskResumeAll>
 800c05c:	e77a      	b.n	800bf54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c05e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c060:	f000 f922 	bl	800c2a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c064:	f000 fbfe 	bl	800c864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c068:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c06a:	f000 f96f 	bl	800c34c <prvIsQueueEmpty>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	f43f af6f 	beq.w	800bf54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c076:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3730      	adds	r7, #48	@ 0x30
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	e000ed04 	.word	0xe000ed04

0800c084 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b08e      	sub	sp, #56	@ 0x38
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c096:	2b00      	cmp	r3, #0
 800c098:	d10b      	bne.n	800c0b2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	623b      	str	r3, [r7, #32]
}
 800c0ac:	bf00      	nop
 800c0ae:	bf00      	nop
 800c0b0:	e7fd      	b.n	800c0ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d103      	bne.n	800c0c0 <xQueueReceiveFromISR+0x3c>
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d101      	bne.n	800c0c4 <xQueueReceiveFromISR+0x40>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e000      	b.n	800c0c6 <xQueueReceiveFromISR+0x42>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10b      	bne.n	800c0e2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	61fb      	str	r3, [r7, #28]
}
 800c0dc:	bf00      	nop
 800c0de:	bf00      	nop
 800c0e0:	e7fd      	b.n	800c0de <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0e2:	f001 fa81 	bl	800d5e8 <vPortValidateInterruptPriority>
	__asm volatile
 800c0e6:	f3ef 8211 	mrs	r2, BASEPRI
 800c0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	61ba      	str	r2, [r7, #24]
 800c0fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c0fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c100:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c106:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d02f      	beq.n	800c16e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c110:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c114:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c118:	68b9      	ldr	r1, [r7, #8]
 800c11a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c11c:	f000 f89e 	bl	800c25c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c122:	1e5a      	subs	r2, r3, #1
 800c124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c126:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c128:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c130:	d112      	bne.n	800c158 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d016      	beq.n	800c168 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c13c:	3310      	adds	r3, #16
 800c13e:	4618      	mov	r0, r3
 800c140:	f000 fd72 	bl	800cc28 <xTaskRemoveFromEventList>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00e      	beq.n	800c168 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00b      	beq.n	800c168 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	601a      	str	r2, [r3, #0]
 800c156:	e007      	b.n	800c168 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c15c:	3301      	adds	r3, #1
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	b25a      	sxtb	r2, r3
 800c162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c168:	2301      	movs	r3, #1
 800c16a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c16c:	e001      	b.n	800c172 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c16e:	2300      	movs	r3, #0
 800c170:	637b      	str	r3, [r7, #52]	@ 0x34
 800c172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c174:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	f383 8811 	msr	BASEPRI, r3
}
 800c17c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c17e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c180:	4618      	mov	r0, r3
 800c182:	3738      	adds	r7, #56	@ 0x38
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b086      	sub	sp, #24
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c194:	2300      	movs	r3, #0
 800c196:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c19c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d10d      	bne.n	800c1c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d14d      	bne.n	800c24a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f000 ff1c 	bl	800cff0 <xTaskPriorityDisinherit>
 800c1b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	609a      	str	r2, [r3, #8]
 800c1c0:	e043      	b.n	800c24a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d119      	bne.n	800c1fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6858      	ldr	r0, [r3, #4]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	68b9      	ldr	r1, [r7, #8]
 800c1d4:	f004 ff05 	bl	8010fe2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	685a      	ldr	r2, [r3, #4]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1e0:	441a      	add	r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	685a      	ldr	r2, [r3, #4]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d32b      	bcc.n	800c24a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	605a      	str	r2, [r3, #4]
 800c1fa:	e026      	b.n	800c24a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	68d8      	ldr	r0, [r3, #12]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c204:	461a      	mov	r2, r3
 800c206:	68b9      	ldr	r1, [r7, #8]
 800c208:	f004 feeb 	bl	8010fe2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	68da      	ldr	r2, [r3, #12]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c214:	425b      	negs	r3, r3
 800c216:	441a      	add	r2, r3
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	68da      	ldr	r2, [r3, #12]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	429a      	cmp	r2, r3
 800c226:	d207      	bcs.n	800c238 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	689a      	ldr	r2, [r3, #8]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c230:	425b      	negs	r3, r3
 800c232:	441a      	add	r2, r3
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b02      	cmp	r3, #2
 800c23c:	d105      	bne.n	800c24a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d002      	beq.n	800c24a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	3b01      	subs	r3, #1
 800c248:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	1c5a      	adds	r2, r3, #1
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c252:	697b      	ldr	r3, [r7, #20]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3718      	adds	r7, #24
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d018      	beq.n	800c2a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	68da      	ldr	r2, [r3, #12]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c276:	441a      	add	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	68da      	ldr	r2, [r3, #12]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	429a      	cmp	r2, r3
 800c286:	d303      	bcc.n	800c290 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	68d9      	ldr	r1, [r3, #12]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c298:	461a      	mov	r2, r3
 800c29a:	6838      	ldr	r0, [r7, #0]
 800c29c:	f004 fea1 	bl	8010fe2 <memcpy>
	}
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2b0:	f001 f8ba 	bl	800d428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2bc:	e011      	b.n	800c2e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d012      	beq.n	800c2ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	3324      	adds	r3, #36	@ 0x24
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 fcac 	bl	800cc28 <xTaskRemoveFromEventList>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d001      	beq.n	800c2da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2d6:	f000 fd85 	bl	800cde4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	dce9      	bgt.n	800c2be <prvUnlockQueue+0x16>
 800c2ea:	e000      	b.n	800c2ee <prvUnlockQueue+0x46>
					break;
 800c2ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	22ff      	movs	r2, #255	@ 0xff
 800c2f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c2f6:	f001 f8c9 	bl	800d48c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c2fa:	f001 f895 	bl	800d428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c304:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c306:	e011      	b.n	800c32c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d012      	beq.n	800c336 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3310      	adds	r3, #16
 800c314:	4618      	mov	r0, r3
 800c316:	f000 fc87 	bl	800cc28 <xTaskRemoveFromEventList>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d001      	beq.n	800c324 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c320:	f000 fd60 	bl	800cde4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c324:	7bbb      	ldrb	r3, [r7, #14]
 800c326:	3b01      	subs	r3, #1
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c32c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c330:	2b00      	cmp	r3, #0
 800c332:	dce9      	bgt.n	800c308 <prvUnlockQueue+0x60>
 800c334:	e000      	b.n	800c338 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c336:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	22ff      	movs	r2, #255	@ 0xff
 800c33c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c340:	f001 f8a4 	bl	800d48c <vPortExitCritical>
}
 800c344:	bf00      	nop
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c354:	f001 f868 	bl	800d428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d102      	bne.n	800c366 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c360:	2301      	movs	r3, #1
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	e001      	b.n	800c36a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c36a:	f001 f88f 	bl	800d48c <vPortExitCritical>

	return xReturn;
 800c36e:	68fb      	ldr	r3, [r7, #12]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c380:	f001 f852 	bl	800d428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d102      	bne.n	800c396 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c390:	2301      	movs	r3, #1
 800c392:	60fb      	str	r3, [r7, #12]
 800c394:	e001      	b.n	800c39a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c396:	2300      	movs	r3, #0
 800c398:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c39a:	f001 f877 	bl	800d48c <vPortExitCritical>

	return xReturn;
 800c39e:	68fb      	ldr	r3, [r7, #12]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b08e      	sub	sp, #56	@ 0x38
 800c3ac:	af04      	add	r7, sp, #16
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10b      	bne.n	800c3d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c0:	f383 8811 	msr	BASEPRI, r3
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	623b      	str	r3, [r7, #32]
}
 800c3ce:	bf00      	nop
 800c3d0:	bf00      	nop
 800c3d2:	e7fd      	b.n	800c3d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d10b      	bne.n	800c3f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	61fb      	str	r3, [r7, #28]
}
 800c3ec:	bf00      	nop
 800c3ee:	bf00      	nop
 800c3f0:	e7fd      	b.n	800c3ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c3f2:	23a0      	movs	r3, #160	@ 0xa0
 800c3f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	2ba0      	cmp	r3, #160	@ 0xa0
 800c3fa:	d00b      	beq.n	800c414 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	61bb      	str	r3, [r7, #24]
}
 800c40e:	bf00      	nop
 800c410:	bf00      	nop
 800c412:	e7fd      	b.n	800c410 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c414:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d01e      	beq.n	800c45a <xTaskCreateStatic+0xb2>
 800c41c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d01b      	beq.n	800c45a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c424:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c428:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c42a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c42e:	2202      	movs	r2, #2
 800c430:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c434:	2300      	movs	r3, #0
 800c436:	9303      	str	r3, [sp, #12]
 800c438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43a:	9302      	str	r3, [sp, #8]
 800c43c:	f107 0314 	add.w	r3, r7, #20
 800c440:	9301      	str	r3, [sp, #4]
 800c442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	68b9      	ldr	r1, [r7, #8]
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f000 f851 	bl	800c4f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c452:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c454:	f000 f8ee 	bl	800c634 <prvAddNewTaskToReadyList>
 800c458:	e001      	b.n	800c45e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c45a:	2300      	movs	r3, #0
 800c45c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c45e:	697b      	ldr	r3, [r7, #20]
	}
 800c460:	4618      	mov	r0, r3
 800c462:	3728      	adds	r7, #40	@ 0x28
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b08c      	sub	sp, #48	@ 0x30
 800c46c:	af04      	add	r7, sp, #16
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	603b      	str	r3, [r7, #0]
 800c474:	4613      	mov	r3, r2
 800c476:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c478:	88fb      	ldrh	r3, [r7, #6]
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4618      	mov	r0, r3
 800c47e:	f001 f8f5 	bl	800d66c <pvPortMalloc>
 800c482:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00e      	beq.n	800c4a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c48a:	20a0      	movs	r0, #160	@ 0xa0
 800c48c:	f001 f8ee 	bl	800d66c <pvPortMalloc>
 800c490:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d003      	beq.n	800c4a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	697a      	ldr	r2, [r7, #20]
 800c49c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c49e:	e005      	b.n	800c4ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c4a0:	6978      	ldr	r0, [r7, #20]
 800c4a2:	f001 f9b1 	bl	800d808 <vPortFree>
 800c4a6:	e001      	b.n	800c4ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d017      	beq.n	800c4e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c4ba:	88fa      	ldrh	r2, [r7, #6]
 800c4bc:	2300      	movs	r3, #0
 800c4be:	9303      	str	r3, [sp, #12]
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	9302      	str	r3, [sp, #8]
 800c4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	68b9      	ldr	r1, [r7, #8]
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f000 f80f 	bl	800c4f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4d6:	69f8      	ldr	r0, [r7, #28]
 800c4d8:	f000 f8ac 	bl	800c634 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	61bb      	str	r3, [r7, #24]
 800c4e0:	e002      	b.n	800c4e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c4e8:	69bb      	ldr	r3, [r7, #24]
	}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3720      	adds	r7, #32
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
	...

0800c4f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b088      	sub	sp, #32
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c50c:	3b01      	subs	r3, #1
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	4413      	add	r3, r2
 800c512:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	f023 0307 	bic.w	r3, r3, #7
 800c51a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	f003 0307 	and.w	r3, r3, #7
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00b      	beq.n	800c53e <prvInitialiseNewTask+0x4a>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	617b      	str	r3, [r7, #20]
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	e7fd      	b.n	800c53a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d01f      	beq.n	800c584 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c544:	2300      	movs	r3, #0
 800c546:	61fb      	str	r3, [r7, #28]
 800c548:	e012      	b.n	800c570 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	4413      	add	r3, r2
 800c550:	7819      	ldrb	r1, [r3, #0]
 800c552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	4413      	add	r3, r2
 800c558:	3334      	adds	r3, #52	@ 0x34
 800c55a:	460a      	mov	r2, r1
 800c55c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	4413      	add	r3, r2
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d006      	beq.n	800c578 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	3301      	adds	r3, #1
 800c56e:	61fb      	str	r3, [r7, #28]
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	2b0f      	cmp	r3, #15
 800c574:	d9e9      	bls.n	800c54a <prvInitialiseNewTask+0x56>
 800c576:	e000      	b.n	800c57a <prvInitialiseNewTask+0x86>
			{
				break;
 800c578:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c582:	e003      	b.n	800c58c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c586:	2200      	movs	r2, #0
 800c588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58e:	2b06      	cmp	r3, #6
 800c590:	d901      	bls.n	800c596 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c592:	2306      	movs	r3, #6
 800c594:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c598:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c59a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c59e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5a0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7ff f8c5 	bl	800b73c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b4:	3318      	adds	r3, #24
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7ff f8c0 	bl	800b73c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c4:	f1c3 0207 	rsb	r2, r3, #7
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e4:	334c      	adds	r3, #76	@ 0x4c
 800c5e6:	224c      	movs	r2, #76	@ 0x4c
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f004 fc13 	bl	8010e16 <memset>
 800c5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f2:	4a0d      	ldr	r2, [pc, #52]	@ (800c628 <prvInitialiseNewTask+0x134>)
 800c5f4:	651a      	str	r2, [r3, #80]	@ 0x50
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f8:	4a0c      	ldr	r2, [pc, #48]	@ (800c62c <prvInitialiseNewTask+0x138>)
 800c5fa:	655a      	str	r2, [r3, #84]	@ 0x54
 800c5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fe:	4a0c      	ldr	r2, [pc, #48]	@ (800c630 <prvInitialiseNewTask+0x13c>)
 800c600:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	68f9      	ldr	r1, [r7, #12]
 800c606:	69b8      	ldr	r0, [r7, #24]
 800c608:	f000 fde0 	bl	800d1cc <pxPortInitialiseStack>
 800c60c:	4602      	mov	r2, r0
 800c60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c610:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c614:	2b00      	cmp	r3, #0
 800c616:	d002      	beq.n	800c61e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c61a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c61c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c61e:	bf00      	nop
 800c620:	3720      	adds	r7, #32
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	200064d4 	.word	0x200064d4
 800c62c:	2000653c 	.word	0x2000653c
 800c630:	200065a4 	.word	0x200065a4

0800c634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c63c:	f000 fef4 	bl	800d428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c640:	4b2a      	ldr	r3, [pc, #168]	@ (800c6ec <prvAddNewTaskToReadyList+0xb8>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	3301      	adds	r3, #1
 800c646:	4a29      	ldr	r2, [pc, #164]	@ (800c6ec <prvAddNewTaskToReadyList+0xb8>)
 800c648:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c64a:	4b29      	ldr	r3, [pc, #164]	@ (800c6f0 <prvAddNewTaskToReadyList+0xbc>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d109      	bne.n	800c666 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c652:	4a27      	ldr	r2, [pc, #156]	@ (800c6f0 <prvAddNewTaskToReadyList+0xbc>)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c658:	4b24      	ldr	r3, [pc, #144]	@ (800c6ec <prvAddNewTaskToReadyList+0xb8>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d110      	bne.n	800c682 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c660:	f000 fbe4 	bl	800ce2c <prvInitialiseTaskLists>
 800c664:	e00d      	b.n	800c682 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c666:	4b23      	ldr	r3, [pc, #140]	@ (800c6f4 <prvAddNewTaskToReadyList+0xc0>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d109      	bne.n	800c682 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c66e:	4b20      	ldr	r3, [pc, #128]	@ (800c6f0 <prvAddNewTaskToReadyList+0xbc>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c678:	429a      	cmp	r2, r3
 800c67a:	d802      	bhi.n	800c682 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c67c:	4a1c      	ldr	r2, [pc, #112]	@ (800c6f0 <prvAddNewTaskToReadyList+0xbc>)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c682:	4b1d      	ldr	r3, [pc, #116]	@ (800c6f8 <prvAddNewTaskToReadyList+0xc4>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	3301      	adds	r3, #1
 800c688:	4a1b      	ldr	r2, [pc, #108]	@ (800c6f8 <prvAddNewTaskToReadyList+0xc4>)
 800c68a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c690:	2201      	movs	r2, #1
 800c692:	409a      	lsls	r2, r3
 800c694:	4b19      	ldr	r3, [pc, #100]	@ (800c6fc <prvAddNewTaskToReadyList+0xc8>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4313      	orrs	r3, r2
 800c69a:	4a18      	ldr	r2, [pc, #96]	@ (800c6fc <prvAddNewTaskToReadyList+0xc8>)
 800c69c:	6013      	str	r3, [r2, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4413      	add	r3, r2
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	4a15      	ldr	r2, [pc, #84]	@ (800c700 <prvAddNewTaskToReadyList+0xcc>)
 800c6ac:	441a      	add	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	f7ff f84e 	bl	800b756 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c6ba:	f000 fee7 	bl	800d48c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c6be:	4b0d      	ldr	r3, [pc, #52]	@ (800c6f4 <prvAddNewTaskToReadyList+0xc0>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00e      	beq.n	800c6e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c6c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f0 <prvAddNewTaskToReadyList+0xbc>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d207      	bcs.n	800c6e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c6d4:	4b0b      	ldr	r3, [pc, #44]	@ (800c704 <prvAddNewTaskToReadyList+0xd0>)
 800c6d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6da:	601a      	str	r2, [r3, #0]
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6e4:	bf00      	nop
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	200009b4 	.word	0x200009b4
 800c6f0:	200008b4 	.word	0x200008b4
 800c6f4:	200009c0 	.word	0x200009c0
 800c6f8:	200009d0 	.word	0x200009d0
 800c6fc:	200009bc 	.word	0x200009bc
 800c700:	200008b8 	.word	0x200008b8
 800c704:	e000ed04 	.word	0xe000ed04

0800c708 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c710:	2300      	movs	r3, #0
 800c712:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d018      	beq.n	800c74c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c71a:	4b14      	ldr	r3, [pc, #80]	@ (800c76c <vTaskDelay+0x64>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00b      	beq.n	800c73a <vTaskDelay+0x32>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	60bb      	str	r3, [r7, #8]
}
 800c734:	bf00      	nop
 800c736:	bf00      	nop
 800c738:	e7fd      	b.n	800c736 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c73a:	f000 f885 	bl	800c848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c73e:	2100      	movs	r1, #0
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fcdd 	bl	800d100 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c746:	f000 f88d 	bl	800c864 <xTaskResumeAll>
 800c74a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d107      	bne.n	800c762 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c752:	4b07      	ldr	r3, [pc, #28]	@ (800c770 <vTaskDelay+0x68>)
 800c754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c758:	601a      	str	r2, [r3, #0]
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c762:	bf00      	nop
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	200009dc 	.word	0x200009dc
 800c770:	e000ed04 	.word	0xe000ed04

0800c774 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b08a      	sub	sp, #40	@ 0x28
 800c778:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c77a:	2300      	movs	r3, #0
 800c77c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c77e:	2300      	movs	r3, #0
 800c780:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c782:	463a      	mov	r2, r7
 800c784:	1d39      	adds	r1, r7, #4
 800c786:	f107 0308 	add.w	r3, r7, #8
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7f4 fd9e 	bl	80012cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	68ba      	ldr	r2, [r7, #8]
 800c796:	9202      	str	r2, [sp, #8]
 800c798:	9301      	str	r3, [sp, #4]
 800c79a:	2300      	movs	r3, #0
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	460a      	mov	r2, r1
 800c7a2:	4921      	ldr	r1, [pc, #132]	@ (800c828 <vTaskStartScheduler+0xb4>)
 800c7a4:	4821      	ldr	r0, [pc, #132]	@ (800c82c <vTaskStartScheduler+0xb8>)
 800c7a6:	f7ff fdff 	bl	800c3a8 <xTaskCreateStatic>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	4a20      	ldr	r2, [pc, #128]	@ (800c830 <vTaskStartScheduler+0xbc>)
 800c7ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c7b0:	4b1f      	ldr	r3, [pc, #124]	@ (800c830 <vTaskStartScheduler+0xbc>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	617b      	str	r3, [r7, #20]
 800c7bc:	e001      	b.n	800c7c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d11b      	bne.n	800c800 <vTaskStartScheduler+0x8c>
	__asm volatile
 800c7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	613b      	str	r3, [r7, #16]
}
 800c7da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c7dc:	4b15      	ldr	r3, [pc, #84]	@ (800c834 <vTaskStartScheduler+0xc0>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	334c      	adds	r3, #76	@ 0x4c
 800c7e2:	4a15      	ldr	r2, [pc, #84]	@ (800c838 <vTaskStartScheduler+0xc4>)
 800c7e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c7e6:	4b15      	ldr	r3, [pc, #84]	@ (800c83c <vTaskStartScheduler+0xc8>)
 800c7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c7ee:	4b14      	ldr	r3, [pc, #80]	@ (800c840 <vTaskStartScheduler+0xcc>)
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c7f4:	4b13      	ldr	r3, [pc, #76]	@ (800c844 <vTaskStartScheduler+0xd0>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c7fa:	f000 fd71 	bl	800d2e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c7fe:	e00f      	b.n	800c820 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c806:	d10b      	bne.n	800c820 <vTaskStartScheduler+0xac>
	__asm volatile
 800c808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80c:	f383 8811 	msr	BASEPRI, r3
 800c810:	f3bf 8f6f 	isb	sy
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	60fb      	str	r3, [r7, #12]
}
 800c81a:	bf00      	nop
 800c81c:	bf00      	nop
 800c81e:	e7fd      	b.n	800c81c <vTaskStartScheduler+0xa8>
}
 800c820:	bf00      	nop
 800c822:	3718      	adds	r7, #24
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	080145b0 	.word	0x080145b0
 800c82c:	0800cdfd 	.word	0x0800cdfd
 800c830:	200009d8 	.word	0x200009d8
 800c834:	200008b4 	.word	0x200008b4
 800c838:	20000128 	.word	0x20000128
 800c83c:	200009d4 	.word	0x200009d4
 800c840:	200009c0 	.word	0x200009c0
 800c844:	200009b8 	.word	0x200009b8

0800c848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c848:	b480      	push	{r7}
 800c84a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c84c:	4b04      	ldr	r3, [pc, #16]	@ (800c860 <vTaskSuspendAll+0x18>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	3301      	adds	r3, #1
 800c852:	4a03      	ldr	r2, [pc, #12]	@ (800c860 <vTaskSuspendAll+0x18>)
 800c854:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c856:	bf00      	nop
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	200009dc 	.word	0x200009dc

0800c864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c86a:	2300      	movs	r3, #0
 800c86c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c86e:	2300      	movs	r3, #0
 800c870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c872:	4b42      	ldr	r3, [pc, #264]	@ (800c97c <xTaskResumeAll+0x118>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d10b      	bne.n	800c892 <xTaskResumeAll+0x2e>
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	603b      	str	r3, [r7, #0]
}
 800c88c:	bf00      	nop
 800c88e:	bf00      	nop
 800c890:	e7fd      	b.n	800c88e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c892:	f000 fdc9 	bl	800d428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c896:	4b39      	ldr	r3, [pc, #228]	@ (800c97c <xTaskResumeAll+0x118>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	3b01      	subs	r3, #1
 800c89c:	4a37      	ldr	r2, [pc, #220]	@ (800c97c <xTaskResumeAll+0x118>)
 800c89e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8a0:	4b36      	ldr	r3, [pc, #216]	@ (800c97c <xTaskResumeAll+0x118>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d161      	bne.n	800c96c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c8a8:	4b35      	ldr	r3, [pc, #212]	@ (800c980 <xTaskResumeAll+0x11c>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d05d      	beq.n	800c96c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8b0:	e02e      	b.n	800c910 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8b2:	4b34      	ldr	r3, [pc, #208]	@ (800c984 <xTaskResumeAll+0x120>)
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	3318      	adds	r3, #24
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fe ffa6 	bl	800b810 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fe ffa1 	bl	800b810 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	409a      	lsls	r2, r3
 800c8d6:	4b2c      	ldr	r3, [pc, #176]	@ (800c988 <xTaskResumeAll+0x124>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	4a2a      	ldr	r2, [pc, #168]	@ (800c988 <xTaskResumeAll+0x124>)
 800c8de:	6013      	str	r3, [r2, #0]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4a27      	ldr	r2, [pc, #156]	@ (800c98c <xTaskResumeAll+0x128>)
 800c8ee:	441a      	add	r2, r3
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	f7fe ff2d 	bl	800b756 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c900:	4b23      	ldr	r3, [pc, #140]	@ (800c990 <xTaskResumeAll+0x12c>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c906:	429a      	cmp	r2, r3
 800c908:	d302      	bcc.n	800c910 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c90a:	4b22      	ldr	r3, [pc, #136]	@ (800c994 <xTaskResumeAll+0x130>)
 800c90c:	2201      	movs	r2, #1
 800c90e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c910:	4b1c      	ldr	r3, [pc, #112]	@ (800c984 <xTaskResumeAll+0x120>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1cc      	bne.n	800c8b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c91e:	f000 fb29 	bl	800cf74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c922:	4b1d      	ldr	r3, [pc, #116]	@ (800c998 <xTaskResumeAll+0x134>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d010      	beq.n	800c950 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c92e:	f000 f837 	bl	800c9a0 <xTaskIncrementTick>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d002      	beq.n	800c93e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c938:	4b16      	ldr	r3, [pc, #88]	@ (800c994 <xTaskResumeAll+0x130>)
 800c93a:	2201      	movs	r2, #1
 800c93c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	3b01      	subs	r3, #1
 800c942:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1f1      	bne.n	800c92e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c94a:	4b13      	ldr	r3, [pc, #76]	@ (800c998 <xTaskResumeAll+0x134>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c950:	4b10      	ldr	r3, [pc, #64]	@ (800c994 <xTaskResumeAll+0x130>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d009      	beq.n	800c96c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c958:	2301      	movs	r3, #1
 800c95a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c95c:	4b0f      	ldr	r3, [pc, #60]	@ (800c99c <xTaskResumeAll+0x138>)
 800c95e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c962:	601a      	str	r2, [r3, #0]
 800c964:	f3bf 8f4f 	dsb	sy
 800c968:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c96c:	f000 fd8e 	bl	800d48c <vPortExitCritical>

	return xAlreadyYielded;
 800c970:	68bb      	ldr	r3, [r7, #8]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	200009dc 	.word	0x200009dc
 800c980:	200009b4 	.word	0x200009b4
 800c984:	20000974 	.word	0x20000974
 800c988:	200009bc 	.word	0x200009bc
 800c98c:	200008b8 	.word	0x200008b8
 800c990:	200008b4 	.word	0x200008b4
 800c994:	200009c8 	.word	0x200009c8
 800c998:	200009c4 	.word	0x200009c4
 800c99c:	e000ed04 	.word	0xe000ed04

0800c9a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9aa:	4b4f      	ldr	r3, [pc, #316]	@ (800cae8 <xTaskIncrementTick+0x148>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f040 808f 	bne.w	800cad2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c9b4:	4b4d      	ldr	r3, [pc, #308]	@ (800caec <xTaskIncrementTick+0x14c>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c9bc:	4a4b      	ldr	r2, [pc, #300]	@ (800caec <xTaskIncrementTick+0x14c>)
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d121      	bne.n	800ca0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c9c8:	4b49      	ldr	r3, [pc, #292]	@ (800caf0 <xTaskIncrementTick+0x150>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d00b      	beq.n	800c9ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800c9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	603b      	str	r3, [r7, #0]
}
 800c9e4:	bf00      	nop
 800c9e6:	bf00      	nop
 800c9e8:	e7fd      	b.n	800c9e6 <xTaskIncrementTick+0x46>
 800c9ea:	4b41      	ldr	r3, [pc, #260]	@ (800caf0 <xTaskIncrementTick+0x150>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	60fb      	str	r3, [r7, #12]
 800c9f0:	4b40      	ldr	r3, [pc, #256]	@ (800caf4 <xTaskIncrementTick+0x154>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a3e      	ldr	r2, [pc, #248]	@ (800caf0 <xTaskIncrementTick+0x150>)
 800c9f6:	6013      	str	r3, [r2, #0]
 800c9f8:	4a3e      	ldr	r2, [pc, #248]	@ (800caf4 <xTaskIncrementTick+0x154>)
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6013      	str	r3, [r2, #0]
 800c9fe:	4b3e      	ldr	r3, [pc, #248]	@ (800caf8 <xTaskIncrementTick+0x158>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3301      	adds	r3, #1
 800ca04:	4a3c      	ldr	r2, [pc, #240]	@ (800caf8 <xTaskIncrementTick+0x158>)
 800ca06:	6013      	str	r3, [r2, #0]
 800ca08:	f000 fab4 	bl	800cf74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca0c:	4b3b      	ldr	r3, [pc, #236]	@ (800cafc <xTaskIncrementTick+0x15c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	693a      	ldr	r2, [r7, #16]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d348      	bcc.n	800caa8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca16:	4b36      	ldr	r3, [pc, #216]	@ (800caf0 <xTaskIncrementTick+0x150>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d104      	bne.n	800ca2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca20:	4b36      	ldr	r3, [pc, #216]	@ (800cafc <xTaskIncrementTick+0x15c>)
 800ca22:	f04f 32ff 	mov.w	r2, #4294967295
 800ca26:	601a      	str	r2, [r3, #0]
					break;
 800ca28:	e03e      	b.n	800caa8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca2a:	4b31      	ldr	r3, [pc, #196]	@ (800caf0 <xTaskIncrementTick+0x150>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca3a:	693a      	ldr	r2, [r7, #16]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d203      	bcs.n	800ca4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca42:	4a2e      	ldr	r2, [pc, #184]	@ (800cafc <xTaskIncrementTick+0x15c>)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca48:	e02e      	b.n	800caa8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fe fede 	bl	800b810 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d004      	beq.n	800ca66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	3318      	adds	r3, #24
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7fe fed5 	bl	800b810 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	409a      	lsls	r2, r3
 800ca6e:	4b24      	ldr	r3, [pc, #144]	@ (800cb00 <xTaskIncrementTick+0x160>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	4a22      	ldr	r2, [pc, #136]	@ (800cb00 <xTaskIncrementTick+0x160>)
 800ca76:	6013      	str	r3, [r2, #0]
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	4413      	add	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4a1f      	ldr	r2, [pc, #124]	@ (800cb04 <xTaskIncrementTick+0x164>)
 800ca86:	441a      	add	r2, r3
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	4610      	mov	r0, r2
 800ca90:	f7fe fe61 	bl	800b756 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca98:	4b1b      	ldr	r3, [pc, #108]	@ (800cb08 <xTaskIncrementTick+0x168>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d3b9      	bcc.n	800ca16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800caa2:	2301      	movs	r3, #1
 800caa4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800caa6:	e7b6      	b.n	800ca16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800caa8:	4b17      	ldr	r3, [pc, #92]	@ (800cb08 <xTaskIncrementTick+0x168>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caae:	4915      	ldr	r1, [pc, #84]	@ (800cb04 <xTaskIncrementTick+0x164>)
 800cab0:	4613      	mov	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	009b      	lsls	r3, r3, #2
 800cab8:	440b      	add	r3, r1
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d901      	bls.n	800cac4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cac0:	2301      	movs	r3, #1
 800cac2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cac4:	4b11      	ldr	r3, [pc, #68]	@ (800cb0c <xTaskIncrementTick+0x16c>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d007      	beq.n	800cadc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cacc:	2301      	movs	r3, #1
 800cace:	617b      	str	r3, [r7, #20]
 800cad0:	e004      	b.n	800cadc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cad2:	4b0f      	ldr	r3, [pc, #60]	@ (800cb10 <xTaskIncrementTick+0x170>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	3301      	adds	r3, #1
 800cad8:	4a0d      	ldr	r2, [pc, #52]	@ (800cb10 <xTaskIncrementTick+0x170>)
 800cada:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cadc:	697b      	ldr	r3, [r7, #20]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	200009dc 	.word	0x200009dc
 800caec:	200009b8 	.word	0x200009b8
 800caf0:	2000096c 	.word	0x2000096c
 800caf4:	20000970 	.word	0x20000970
 800caf8:	200009cc 	.word	0x200009cc
 800cafc:	200009d4 	.word	0x200009d4
 800cb00:	200009bc 	.word	0x200009bc
 800cb04:	200008b8 	.word	0x200008b8
 800cb08:	200008b4 	.word	0x200008b4
 800cb0c:	200009c8 	.word	0x200009c8
 800cb10:	200009c4 	.word	0x200009c4

0800cb14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cb14:	b480      	push	{r7}
 800cb16:	b087      	sub	sp, #28
 800cb18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb1a:	4b2a      	ldr	r3, [pc, #168]	@ (800cbc4 <vTaskSwitchContext+0xb0>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cb22:	4b29      	ldr	r3, [pc, #164]	@ (800cbc8 <vTaskSwitchContext+0xb4>)
 800cb24:	2201      	movs	r2, #1
 800cb26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cb28:	e045      	b.n	800cbb6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800cb2a:	4b27      	ldr	r3, [pc, #156]	@ (800cbc8 <vTaskSwitchContext+0xb4>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb30:	4b26      	ldr	r3, [pc, #152]	@ (800cbcc <vTaskSwitchContext+0xb8>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	fab3 f383 	clz	r3, r3
 800cb3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cb3e:	7afb      	ldrb	r3, [r7, #11]
 800cb40:	f1c3 031f 	rsb	r3, r3, #31
 800cb44:	617b      	str	r3, [r7, #20]
 800cb46:	4922      	ldr	r1, [pc, #136]	@ (800cbd0 <vTaskSwitchContext+0xbc>)
 800cb48:	697a      	ldr	r2, [r7, #20]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4413      	add	r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	440b      	add	r3, r1
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10b      	bne.n	800cb72 <vTaskSwitchContext+0x5e>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	607b      	str	r3, [r7, #4]
}
 800cb6c:	bf00      	nop
 800cb6e:	bf00      	nop
 800cb70:	e7fd      	b.n	800cb6e <vTaskSwitchContext+0x5a>
 800cb72:	697a      	ldr	r2, [r7, #20]
 800cb74:	4613      	mov	r3, r2
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	4413      	add	r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	4a14      	ldr	r2, [pc, #80]	@ (800cbd0 <vTaskSwitchContext+0xbc>)
 800cb7e:	4413      	add	r3, r2
 800cb80:	613b      	str	r3, [r7, #16]
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	685a      	ldr	r2, [r3, #4]
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	605a      	str	r2, [r3, #4]
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	685a      	ldr	r2, [r3, #4]
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	3308      	adds	r3, #8
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d104      	bne.n	800cba2 <vTaskSwitchContext+0x8e>
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	685a      	ldr	r2, [r3, #4]
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	605a      	str	r2, [r3, #4]
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	4a0a      	ldr	r2, [pc, #40]	@ (800cbd4 <vTaskSwitchContext+0xc0>)
 800cbaa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cbac:	4b09      	ldr	r3, [pc, #36]	@ (800cbd4 <vTaskSwitchContext+0xc0>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	334c      	adds	r3, #76	@ 0x4c
 800cbb2:	4a09      	ldr	r2, [pc, #36]	@ (800cbd8 <vTaskSwitchContext+0xc4>)
 800cbb4:	6013      	str	r3, [r2, #0]
}
 800cbb6:	bf00      	nop
 800cbb8:	371c      	adds	r7, #28
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	200009dc 	.word	0x200009dc
 800cbc8:	200009c8 	.word	0x200009c8
 800cbcc:	200009bc 	.word	0x200009bc
 800cbd0:	200008b8 	.word	0x200008b8
 800cbd4:	200008b4 	.word	0x200008b4
 800cbd8:	20000128 	.word	0x20000128

0800cbdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d10b      	bne.n	800cc04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cbec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf0:	f383 8811 	msr	BASEPRI, r3
 800cbf4:	f3bf 8f6f 	isb	sy
 800cbf8:	f3bf 8f4f 	dsb	sy
 800cbfc:	60fb      	str	r3, [r7, #12]
}
 800cbfe:	bf00      	nop
 800cc00:	bf00      	nop
 800cc02:	e7fd      	b.n	800cc00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc04:	4b07      	ldr	r3, [pc, #28]	@ (800cc24 <vTaskPlaceOnEventList+0x48>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	3318      	adds	r3, #24
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7fe fdc6 	bl	800b79e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc12:	2101      	movs	r1, #1
 800cc14:	6838      	ldr	r0, [r7, #0]
 800cc16:	f000 fa73 	bl	800d100 <prvAddCurrentTaskToDelayedList>
}
 800cc1a:	bf00      	nop
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	200008b4 	.word	0x200008b4

0800cc28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10b      	bne.n	800cc56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	60fb      	str	r3, [r7, #12]
}
 800cc50:	bf00      	nop
 800cc52:	bf00      	nop
 800cc54:	e7fd      	b.n	800cc52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	3318      	adds	r3, #24
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fe fdd8 	bl	800b810 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc60:	4b1d      	ldr	r3, [pc, #116]	@ (800ccd8 <xTaskRemoveFromEventList+0xb0>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d11c      	bne.n	800cca2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	3304      	adds	r3, #4
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7fe fdcf 	bl	800b810 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc76:	2201      	movs	r2, #1
 800cc78:	409a      	lsls	r2, r3
 800cc7a:	4b18      	ldr	r3, [pc, #96]	@ (800ccdc <xTaskRemoveFromEventList+0xb4>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	4a16      	ldr	r2, [pc, #88]	@ (800ccdc <xTaskRemoveFromEventList+0xb4>)
 800cc82:	6013      	str	r3, [r2, #0]
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc88:	4613      	mov	r3, r2
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	4413      	add	r3, r2
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	4a13      	ldr	r2, [pc, #76]	@ (800cce0 <xTaskRemoveFromEventList+0xb8>)
 800cc92:	441a      	add	r2, r3
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	3304      	adds	r3, #4
 800cc98:	4619      	mov	r1, r3
 800cc9a:	4610      	mov	r0, r2
 800cc9c:	f7fe fd5b 	bl	800b756 <vListInsertEnd>
 800cca0:	e005      	b.n	800ccae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	3318      	adds	r3, #24
 800cca6:	4619      	mov	r1, r3
 800cca8:	480e      	ldr	r0, [pc, #56]	@ (800cce4 <xTaskRemoveFromEventList+0xbc>)
 800ccaa:	f7fe fd54 	bl	800b756 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cce8 <xTaskRemoveFromEventList+0xc0>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d905      	bls.n	800ccc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ccc0:	4b0a      	ldr	r3, [pc, #40]	@ (800ccec <xTaskRemoveFromEventList+0xc4>)
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	601a      	str	r2, [r3, #0]
 800ccc6:	e001      	b.n	800cccc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cccc:	697b      	ldr	r3, [r7, #20]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3718      	adds	r7, #24
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	200009dc 	.word	0x200009dc
 800ccdc:	200009bc 	.word	0x200009bc
 800cce0:	200008b8 	.word	0x200008b8
 800cce4:	20000974 	.word	0x20000974
 800cce8:	200008b4 	.word	0x200008b4
 800ccec:	200009c8 	.word	0x200009c8

0800ccf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ccf8:	4b06      	ldr	r3, [pc, #24]	@ (800cd14 <vTaskInternalSetTimeOutState+0x24>)
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd00:	4b05      	ldr	r3, [pc, #20]	@ (800cd18 <vTaskInternalSetTimeOutState+0x28>)
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	605a      	str	r2, [r3, #4]
}
 800cd08:	bf00      	nop
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr
 800cd14:	200009cc 	.word	0x200009cc
 800cd18:	200009b8 	.word	0x200009b8

0800cd1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b088      	sub	sp, #32
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10b      	bne.n	800cd44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cd2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	613b      	str	r3, [r7, #16]
}
 800cd3e:	bf00      	nop
 800cd40:	bf00      	nop
 800cd42:	e7fd      	b.n	800cd40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d10b      	bne.n	800cd62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	60fb      	str	r3, [r7, #12]
}
 800cd5c:	bf00      	nop
 800cd5e:	bf00      	nop
 800cd60:	e7fd      	b.n	800cd5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cd62:	f000 fb61 	bl	800d428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd66:	4b1d      	ldr	r3, [pc, #116]	@ (800cddc <xTaskCheckForTimeOut+0xc0>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	69ba      	ldr	r2, [r7, #24]
 800cd72:	1ad3      	subs	r3, r2, r3
 800cd74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7e:	d102      	bne.n	800cd86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd80:	2300      	movs	r3, #0
 800cd82:	61fb      	str	r3, [r7, #28]
 800cd84:	e023      	b.n	800cdce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	4b15      	ldr	r3, [pc, #84]	@ (800cde0 <xTaskCheckForTimeOut+0xc4>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d007      	beq.n	800cda2 <xTaskCheckForTimeOut+0x86>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	69ba      	ldr	r2, [r7, #24]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d302      	bcc.n	800cda2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	61fb      	str	r3, [r7, #28]
 800cda0:	e015      	b.n	800cdce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	697a      	ldr	r2, [r7, #20]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d20b      	bcs.n	800cdc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	1ad2      	subs	r2, r2, r3
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f7ff ff99 	bl	800ccf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	61fb      	str	r3, [r7, #28]
 800cdc2:	e004      	b.n	800cdce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cdce:	f000 fb5d 	bl	800d48c <vPortExitCritical>

	return xReturn;
 800cdd2:	69fb      	ldr	r3, [r7, #28]
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3720      	adds	r7, #32
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	200009b8 	.word	0x200009b8
 800cde0:	200009cc 	.word	0x200009cc

0800cde4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cde4:	b480      	push	{r7}
 800cde6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cde8:	4b03      	ldr	r3, [pc, #12]	@ (800cdf8 <vTaskMissedYield+0x14>)
 800cdea:	2201      	movs	r2, #1
 800cdec:	601a      	str	r2, [r3, #0]
}
 800cdee:	bf00      	nop
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr
 800cdf8:	200009c8 	.word	0x200009c8

0800cdfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce04:	f000 f852 	bl	800ceac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce08:	4b06      	ldr	r3, [pc, #24]	@ (800ce24 <prvIdleTask+0x28>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d9f9      	bls.n	800ce04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ce10:	4b05      	ldr	r3, [pc, #20]	@ (800ce28 <prvIdleTask+0x2c>)
 800ce12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce16:	601a      	str	r2, [r3, #0]
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ce20:	e7f0      	b.n	800ce04 <prvIdleTask+0x8>
 800ce22:	bf00      	nop
 800ce24:	200008b8 	.word	0x200008b8
 800ce28:	e000ed04 	.word	0xe000ed04

0800ce2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce32:	2300      	movs	r3, #0
 800ce34:	607b      	str	r3, [r7, #4]
 800ce36:	e00c      	b.n	800ce52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	4413      	add	r3, r2
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	4a12      	ldr	r2, [pc, #72]	@ (800ce8c <prvInitialiseTaskLists+0x60>)
 800ce44:	4413      	add	r3, r2
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7fe fc58 	bl	800b6fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	607b      	str	r3, [r7, #4]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b06      	cmp	r3, #6
 800ce56:	d9ef      	bls.n	800ce38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce58:	480d      	ldr	r0, [pc, #52]	@ (800ce90 <prvInitialiseTaskLists+0x64>)
 800ce5a:	f7fe fc4f 	bl	800b6fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce5e:	480d      	ldr	r0, [pc, #52]	@ (800ce94 <prvInitialiseTaskLists+0x68>)
 800ce60:	f7fe fc4c 	bl	800b6fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce64:	480c      	ldr	r0, [pc, #48]	@ (800ce98 <prvInitialiseTaskLists+0x6c>)
 800ce66:	f7fe fc49 	bl	800b6fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce6a:	480c      	ldr	r0, [pc, #48]	@ (800ce9c <prvInitialiseTaskLists+0x70>)
 800ce6c:	f7fe fc46 	bl	800b6fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce70:	480b      	ldr	r0, [pc, #44]	@ (800cea0 <prvInitialiseTaskLists+0x74>)
 800ce72:	f7fe fc43 	bl	800b6fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce76:	4b0b      	ldr	r3, [pc, #44]	@ (800cea4 <prvInitialiseTaskLists+0x78>)
 800ce78:	4a05      	ldr	r2, [pc, #20]	@ (800ce90 <prvInitialiseTaskLists+0x64>)
 800ce7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce7c:	4b0a      	ldr	r3, [pc, #40]	@ (800cea8 <prvInitialiseTaskLists+0x7c>)
 800ce7e:	4a05      	ldr	r2, [pc, #20]	@ (800ce94 <prvInitialiseTaskLists+0x68>)
 800ce80:	601a      	str	r2, [r3, #0]
}
 800ce82:	bf00      	nop
 800ce84:	3708      	adds	r7, #8
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	200008b8 	.word	0x200008b8
 800ce90:	20000944 	.word	0x20000944
 800ce94:	20000958 	.word	0x20000958
 800ce98:	20000974 	.word	0x20000974
 800ce9c:	20000988 	.word	0x20000988
 800cea0:	200009a0 	.word	0x200009a0
 800cea4:	2000096c 	.word	0x2000096c
 800cea8:	20000970 	.word	0x20000970

0800ceac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ceb2:	e019      	b.n	800cee8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ceb4:	f000 fab8 	bl	800d428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceb8:	4b10      	ldr	r3, [pc, #64]	@ (800cefc <prvCheckTasksWaitingTermination+0x50>)
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	3304      	adds	r3, #4
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fe fca3 	bl	800b810 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ceca:	4b0d      	ldr	r3, [pc, #52]	@ (800cf00 <prvCheckTasksWaitingTermination+0x54>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	3b01      	subs	r3, #1
 800ced0:	4a0b      	ldr	r2, [pc, #44]	@ (800cf00 <prvCheckTasksWaitingTermination+0x54>)
 800ced2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ced4:	4b0b      	ldr	r3, [pc, #44]	@ (800cf04 <prvCheckTasksWaitingTermination+0x58>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	4a0a      	ldr	r2, [pc, #40]	@ (800cf04 <prvCheckTasksWaitingTermination+0x58>)
 800cedc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cede:	f000 fad5 	bl	800d48c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 f810 	bl	800cf08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cee8:	4b06      	ldr	r3, [pc, #24]	@ (800cf04 <prvCheckTasksWaitingTermination+0x58>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d1e1      	bne.n	800ceb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cef0:	bf00      	nop
 800cef2:	bf00      	nop
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	20000988 	.word	0x20000988
 800cf00:	200009b4 	.word	0x200009b4
 800cf04:	2000099c 	.word	0x2000099c

0800cf08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	334c      	adds	r3, #76	@ 0x4c
 800cf14:	4618      	mov	r0, r3
 800cf16:	f003 ff9b 	bl	8010e50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d108      	bne.n	800cf36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 fc6d 	bl	800d808 <vPortFree>
				vPortFree( pxTCB );
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fc6a 	bl	800d808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf34:	e019      	b.n	800cf6a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d103      	bne.n	800cf48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 fc61 	bl	800d808 <vPortFree>
	}
 800cf46:	e010      	b.n	800cf6a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	d00b      	beq.n	800cf6a <prvDeleteTCB+0x62>
	__asm volatile
 800cf52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	60fb      	str	r3, [r7, #12]
}
 800cf64:	bf00      	nop
 800cf66:	bf00      	nop
 800cf68:	e7fd      	b.n	800cf66 <prvDeleteTCB+0x5e>
	}
 800cf6a:	bf00      	nop
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
	...

0800cf74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf7a:	4b0c      	ldr	r3, [pc, #48]	@ (800cfac <prvResetNextTaskUnblockTime+0x38>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d104      	bne.n	800cf8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf84:	4b0a      	ldr	r3, [pc, #40]	@ (800cfb0 <prvResetNextTaskUnblockTime+0x3c>)
 800cf86:	f04f 32ff 	mov.w	r2, #4294967295
 800cf8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf8c:	e008      	b.n	800cfa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf8e:	4b07      	ldr	r3, [pc, #28]	@ (800cfac <prvResetNextTaskUnblockTime+0x38>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	4a04      	ldr	r2, [pc, #16]	@ (800cfb0 <prvResetNextTaskUnblockTime+0x3c>)
 800cf9e:	6013      	str	r3, [r2, #0]
}
 800cfa0:	bf00      	nop
 800cfa2:	370c      	adds	r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr
 800cfac:	2000096c 	.word	0x2000096c
 800cfb0:	200009d4 	.word	0x200009d4

0800cfb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cfba:	4b0b      	ldr	r3, [pc, #44]	@ (800cfe8 <xTaskGetSchedulerState+0x34>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d102      	bne.n	800cfc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	607b      	str	r3, [r7, #4]
 800cfc6:	e008      	b.n	800cfda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfc8:	4b08      	ldr	r3, [pc, #32]	@ (800cfec <xTaskGetSchedulerState+0x38>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d102      	bne.n	800cfd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	607b      	str	r3, [r7, #4]
 800cfd4:	e001      	b.n	800cfda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cfda:	687b      	ldr	r3, [r7, #4]
	}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr
 800cfe8:	200009c0 	.word	0x200009c0
 800cfec:	200009dc 	.word	0x200009dc

0800cff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b086      	sub	sp, #24
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cffc:	2300      	movs	r3, #0
 800cffe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d070      	beq.n	800d0e8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d006:	4b3b      	ldr	r3, [pc, #236]	@ (800d0f4 <xTaskPriorityDisinherit+0x104>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	693a      	ldr	r2, [r7, #16]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d00b      	beq.n	800d028 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	60fb      	str	r3, [r7, #12]
}
 800d022:	bf00      	nop
 800d024:	bf00      	nop
 800d026:	e7fd      	b.n	800d024 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10b      	bne.n	800d048 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d034:	f383 8811 	msr	BASEPRI, r3
 800d038:	f3bf 8f6f 	isb	sy
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	60bb      	str	r3, [r7, #8]
}
 800d042:	bf00      	nop
 800d044:	bf00      	nop
 800d046:	e7fd      	b.n	800d044 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d04c:	1e5a      	subs	r2, r3, #1
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d044      	beq.n	800d0e8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d062:	2b00      	cmp	r3, #0
 800d064:	d140      	bne.n	800d0e8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	3304      	adds	r3, #4
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fbd0 	bl	800b810 <uxListRemove>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d115      	bne.n	800d0a2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d07a:	491f      	ldr	r1, [pc, #124]	@ (800d0f8 <xTaskPriorityDisinherit+0x108>)
 800d07c:	4613      	mov	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4413      	add	r3, r2
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	440b      	add	r3, r1
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d10a      	bne.n	800d0a2 <xTaskPriorityDisinherit+0xb2>
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d090:	2201      	movs	r2, #1
 800d092:	fa02 f303 	lsl.w	r3, r2, r3
 800d096:	43da      	mvns	r2, r3
 800d098:	4b18      	ldr	r3, [pc, #96]	@ (800d0fc <xTaskPriorityDisinherit+0x10c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4013      	ands	r3, r2
 800d09e:	4a17      	ldr	r2, [pc, #92]	@ (800d0fc <xTaskPriorityDisinherit+0x10c>)
 800d0a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ae:	f1c3 0207 	rsb	r2, r3, #7
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	409a      	lsls	r2, r3
 800d0be:	4b0f      	ldr	r3, [pc, #60]	@ (800d0fc <xTaskPriorityDisinherit+0x10c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	4a0d      	ldr	r2, [pc, #52]	@ (800d0fc <xTaskPriorityDisinherit+0x10c>)
 800d0c6:	6013      	str	r3, [r2, #0]
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4a08      	ldr	r2, [pc, #32]	@ (800d0f8 <xTaskPriorityDisinherit+0x108>)
 800d0d6:	441a      	add	r2, r3
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	3304      	adds	r3, #4
 800d0dc:	4619      	mov	r1, r3
 800d0de:	4610      	mov	r0, r2
 800d0e0:	f7fe fb39 	bl	800b756 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d0e8:	697b      	ldr	r3, [r7, #20]
	}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3718      	adds	r7, #24
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	200008b4 	.word	0x200008b4
 800d0f8:	200008b8 	.word	0x200008b8
 800d0fc:	200009bc 	.word	0x200009bc

0800d100 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d10a:	4b29      	ldr	r3, [pc, #164]	@ (800d1b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d110:	4b28      	ldr	r3, [pc, #160]	@ (800d1b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	3304      	adds	r3, #4
 800d116:	4618      	mov	r0, r3
 800d118:	f7fe fb7a 	bl	800b810 <uxListRemove>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10b      	bne.n	800d13a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d122:	4b24      	ldr	r3, [pc, #144]	@ (800d1b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d128:	2201      	movs	r2, #1
 800d12a:	fa02 f303 	lsl.w	r3, r2, r3
 800d12e:	43da      	mvns	r2, r3
 800d130:	4b21      	ldr	r3, [pc, #132]	@ (800d1b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4013      	ands	r3, r2
 800d136:	4a20      	ldr	r2, [pc, #128]	@ (800d1b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d138:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d140:	d10a      	bne.n	800d158 <prvAddCurrentTaskToDelayedList+0x58>
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d007      	beq.n	800d158 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d148:	4b1a      	ldr	r3, [pc, #104]	@ (800d1b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	3304      	adds	r3, #4
 800d14e:	4619      	mov	r1, r3
 800d150:	481a      	ldr	r0, [pc, #104]	@ (800d1bc <prvAddCurrentTaskToDelayedList+0xbc>)
 800d152:	f7fe fb00 	bl	800b756 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d156:	e026      	b.n	800d1a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d158:	68fa      	ldr	r2, [r7, #12]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4413      	add	r3, r2
 800d15e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d160:	4b14      	ldr	r3, [pc, #80]	@ (800d1b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	68ba      	ldr	r2, [r7, #8]
 800d166:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d209      	bcs.n	800d184 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d170:	4b13      	ldr	r3, [pc, #76]	@ (800d1c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	4b0f      	ldr	r3, [pc, #60]	@ (800d1b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	3304      	adds	r3, #4
 800d17a:	4619      	mov	r1, r3
 800d17c:	4610      	mov	r0, r2
 800d17e:	f7fe fb0e 	bl	800b79e <vListInsert>
}
 800d182:	e010      	b.n	800d1a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d184:	4b0f      	ldr	r3, [pc, #60]	@ (800d1c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	4b0a      	ldr	r3, [pc, #40]	@ (800d1b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	3304      	adds	r3, #4
 800d18e:	4619      	mov	r1, r3
 800d190:	4610      	mov	r0, r2
 800d192:	f7fe fb04 	bl	800b79e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d196:	4b0c      	ldr	r3, [pc, #48]	@ (800d1c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	68ba      	ldr	r2, [r7, #8]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d202      	bcs.n	800d1a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d1a0:	4a09      	ldr	r2, [pc, #36]	@ (800d1c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	6013      	str	r3, [r2, #0]
}
 800d1a6:	bf00      	nop
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	200009b8 	.word	0x200009b8
 800d1b4:	200008b4 	.word	0x200008b4
 800d1b8:	200009bc 	.word	0x200009bc
 800d1bc:	200009a0 	.word	0x200009a0
 800d1c0:	20000970 	.word	0x20000970
 800d1c4:	2000096c 	.word	0x2000096c
 800d1c8:	200009d4 	.word	0x200009d4

0800d1cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	3b04      	subs	r3, #4
 800d1dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d1e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	3b04      	subs	r3, #4
 800d1ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	f023 0201 	bic.w	r2, r3, #1
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	3b04      	subs	r3, #4
 800d1fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d1fc:	4a0c      	ldr	r2, [pc, #48]	@ (800d230 <pxPortInitialiseStack+0x64>)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	3b14      	subs	r3, #20
 800d206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	3b04      	subs	r3, #4
 800d212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f06f 0202 	mvn.w	r2, #2
 800d21a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	3b20      	subs	r3, #32
 800d220:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d222:	68fb      	ldr	r3, [r7, #12]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	0800d235 	.word	0x0800d235

0800d234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d234:	b480      	push	{r7}
 800d236:	b085      	sub	sp, #20
 800d238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d23a:	2300      	movs	r3, #0
 800d23c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d23e:	4b13      	ldr	r3, [pc, #76]	@ (800d28c <prvTaskExitError+0x58>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d246:	d00b      	beq.n	800d260 <prvTaskExitError+0x2c>
	__asm volatile
 800d248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d24c:	f383 8811 	msr	BASEPRI, r3
 800d250:	f3bf 8f6f 	isb	sy
 800d254:	f3bf 8f4f 	dsb	sy
 800d258:	60fb      	str	r3, [r7, #12]
}
 800d25a:	bf00      	nop
 800d25c:	bf00      	nop
 800d25e:	e7fd      	b.n	800d25c <prvTaskExitError+0x28>
	__asm volatile
 800d260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d264:	f383 8811 	msr	BASEPRI, r3
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	60bb      	str	r3, [r7, #8]
}
 800d272:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d274:	bf00      	nop
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d0fc      	beq.n	800d276 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d27c:	bf00      	nop
 800d27e:	bf00      	nop
 800d280:	3714      	adds	r7, #20
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	20000098 	.word	0x20000098

0800d290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d290:	4b07      	ldr	r3, [pc, #28]	@ (800d2b0 <pxCurrentTCBConst2>)
 800d292:	6819      	ldr	r1, [r3, #0]
 800d294:	6808      	ldr	r0, [r1, #0]
 800d296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29a:	f380 8809 	msr	PSP, r0
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f04f 0000 	mov.w	r0, #0
 800d2a6:	f380 8811 	msr	BASEPRI, r0
 800d2aa:	4770      	bx	lr
 800d2ac:	f3af 8000 	nop.w

0800d2b0 <pxCurrentTCBConst2>:
 800d2b0:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop

0800d2b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d2b8:	4808      	ldr	r0, [pc, #32]	@ (800d2dc <prvPortStartFirstTask+0x24>)
 800d2ba:	6800      	ldr	r0, [r0, #0]
 800d2bc:	6800      	ldr	r0, [r0, #0]
 800d2be:	f380 8808 	msr	MSP, r0
 800d2c2:	f04f 0000 	mov.w	r0, #0
 800d2c6:	f380 8814 	msr	CONTROL, r0
 800d2ca:	b662      	cpsie	i
 800d2cc:	b661      	cpsie	f
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	df00      	svc	0
 800d2d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d2da:	bf00      	nop
 800d2dc:	e000ed08 	.word	0xe000ed08

0800d2e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d2e6:	4b47      	ldr	r3, [pc, #284]	@ (800d404 <xPortStartScheduler+0x124>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a47      	ldr	r2, [pc, #284]	@ (800d408 <xPortStartScheduler+0x128>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d10b      	bne.n	800d308 <xPortStartScheduler+0x28>
	__asm volatile
 800d2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f4:	f383 8811 	msr	BASEPRI, r3
 800d2f8:	f3bf 8f6f 	isb	sy
 800d2fc:	f3bf 8f4f 	dsb	sy
 800d300:	613b      	str	r3, [r7, #16]
}
 800d302:	bf00      	nop
 800d304:	bf00      	nop
 800d306:	e7fd      	b.n	800d304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d308:	4b3e      	ldr	r3, [pc, #248]	@ (800d404 <xPortStartScheduler+0x124>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a3f      	ldr	r2, [pc, #252]	@ (800d40c <xPortStartScheduler+0x12c>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d10b      	bne.n	800d32a <xPortStartScheduler+0x4a>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	60fb      	str	r3, [r7, #12]
}
 800d324:	bf00      	nop
 800d326:	bf00      	nop
 800d328:	e7fd      	b.n	800d326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d32a:	4b39      	ldr	r3, [pc, #228]	@ (800d410 <xPortStartScheduler+0x130>)
 800d32c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	b2db      	uxtb	r3, r3
 800d334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	22ff      	movs	r2, #255	@ 0xff
 800d33a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	b2db      	uxtb	r3, r3
 800d342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d344:	78fb      	ldrb	r3, [r7, #3]
 800d346:	b2db      	uxtb	r3, r3
 800d348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	4b31      	ldr	r3, [pc, #196]	@ (800d414 <xPortStartScheduler+0x134>)
 800d350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d352:	4b31      	ldr	r3, [pc, #196]	@ (800d418 <xPortStartScheduler+0x138>)
 800d354:	2207      	movs	r2, #7
 800d356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d358:	e009      	b.n	800d36e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d35a:	4b2f      	ldr	r3, [pc, #188]	@ (800d418 <xPortStartScheduler+0x138>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	3b01      	subs	r3, #1
 800d360:	4a2d      	ldr	r2, [pc, #180]	@ (800d418 <xPortStartScheduler+0x138>)
 800d362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d364:	78fb      	ldrb	r3, [r7, #3]
 800d366:	b2db      	uxtb	r3, r3
 800d368:	005b      	lsls	r3, r3, #1
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d36e:	78fb      	ldrb	r3, [r7, #3]
 800d370:	b2db      	uxtb	r3, r3
 800d372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d376:	2b80      	cmp	r3, #128	@ 0x80
 800d378:	d0ef      	beq.n	800d35a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d37a:	4b27      	ldr	r3, [pc, #156]	@ (800d418 <xPortStartScheduler+0x138>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f1c3 0307 	rsb	r3, r3, #7
 800d382:	2b04      	cmp	r3, #4
 800d384:	d00b      	beq.n	800d39e <xPortStartScheduler+0xbe>
	__asm volatile
 800d386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	60bb      	str	r3, [r7, #8]
}
 800d398:	bf00      	nop
 800d39a:	bf00      	nop
 800d39c:	e7fd      	b.n	800d39a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d39e:	4b1e      	ldr	r3, [pc, #120]	@ (800d418 <xPortStartScheduler+0x138>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	021b      	lsls	r3, r3, #8
 800d3a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d418 <xPortStartScheduler+0x138>)
 800d3a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d3a8:	4b1b      	ldr	r3, [pc, #108]	@ (800d418 <xPortStartScheduler+0x138>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d3b0:	4a19      	ldr	r2, [pc, #100]	@ (800d418 <xPortStartScheduler+0x138>)
 800d3b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d3bc:	4b17      	ldr	r3, [pc, #92]	@ (800d41c <xPortStartScheduler+0x13c>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4a16      	ldr	r2, [pc, #88]	@ (800d41c <xPortStartScheduler+0x13c>)
 800d3c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d3c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d3c8:	4b14      	ldr	r3, [pc, #80]	@ (800d41c <xPortStartScheduler+0x13c>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a13      	ldr	r2, [pc, #76]	@ (800d41c <xPortStartScheduler+0x13c>)
 800d3ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d3d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d3d4:	f000 f8da 	bl	800d58c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d3d8:	4b11      	ldr	r3, [pc, #68]	@ (800d420 <xPortStartScheduler+0x140>)
 800d3da:	2200      	movs	r2, #0
 800d3dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d3de:	f000 f8f9 	bl	800d5d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d3e2:	4b10      	ldr	r3, [pc, #64]	@ (800d424 <xPortStartScheduler+0x144>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a0f      	ldr	r2, [pc, #60]	@ (800d424 <xPortStartScheduler+0x144>)
 800d3e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d3ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d3ee:	f7ff ff63 	bl	800d2b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d3f2:	f7ff fb8f 	bl	800cb14 <vTaskSwitchContext>
	prvTaskExitError();
 800d3f6:	f7ff ff1d 	bl	800d234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d3fa:	2300      	movs	r3, #0
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3718      	adds	r7, #24
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	e000ed00 	.word	0xe000ed00
 800d408:	410fc271 	.word	0x410fc271
 800d40c:	410fc270 	.word	0x410fc270
 800d410:	e000e400 	.word	0xe000e400
 800d414:	200009e0 	.word	0x200009e0
 800d418:	200009e4 	.word	0x200009e4
 800d41c:	e000ed20 	.word	0xe000ed20
 800d420:	20000098 	.word	0x20000098
 800d424:	e000ef34 	.word	0xe000ef34

0800d428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d428:	b480      	push	{r7}
 800d42a:	b083      	sub	sp, #12
 800d42c:	af00      	add	r7, sp, #0
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	607b      	str	r3, [r7, #4]
}
 800d440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d442:	4b10      	ldr	r3, [pc, #64]	@ (800d484 <vPortEnterCritical+0x5c>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	3301      	adds	r3, #1
 800d448:	4a0e      	ldr	r2, [pc, #56]	@ (800d484 <vPortEnterCritical+0x5c>)
 800d44a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d44c:	4b0d      	ldr	r3, [pc, #52]	@ (800d484 <vPortEnterCritical+0x5c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d110      	bne.n	800d476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d454:	4b0c      	ldr	r3, [pc, #48]	@ (800d488 <vPortEnterCritical+0x60>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00b      	beq.n	800d476 <vPortEnterCritical+0x4e>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	603b      	str	r3, [r7, #0]
}
 800d470:	bf00      	nop
 800d472:	bf00      	nop
 800d474:	e7fd      	b.n	800d472 <vPortEnterCritical+0x4a>
	}
}
 800d476:	bf00      	nop
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	20000098 	.word	0x20000098
 800d488:	e000ed04 	.word	0xe000ed04

0800d48c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d492:	4b12      	ldr	r3, [pc, #72]	@ (800d4dc <vPortExitCritical+0x50>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d10b      	bne.n	800d4b2 <vPortExitCritical+0x26>
	__asm volatile
 800d49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	607b      	str	r3, [r7, #4]
}
 800d4ac:	bf00      	nop
 800d4ae:	bf00      	nop
 800d4b0:	e7fd      	b.n	800d4ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800d4dc <vPortExitCritical+0x50>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	4a08      	ldr	r2, [pc, #32]	@ (800d4dc <vPortExitCritical+0x50>)
 800d4ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d4bc:	4b07      	ldr	r3, [pc, #28]	@ (800d4dc <vPortExitCritical+0x50>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d105      	bne.n	800d4d0 <vPortExitCritical+0x44>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	f383 8811 	msr	BASEPRI, r3
}
 800d4ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	20000098 	.word	0x20000098

0800d4e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d4e0:	f3ef 8009 	mrs	r0, PSP
 800d4e4:	f3bf 8f6f 	isb	sy
 800d4e8:	4b15      	ldr	r3, [pc, #84]	@ (800d540 <pxCurrentTCBConst>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	f01e 0f10 	tst.w	lr, #16
 800d4f0:	bf08      	it	eq
 800d4f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d4f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4fa:	6010      	str	r0, [r2, #0]
 800d4fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d504:	f380 8811 	msr	BASEPRI, r0
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	f7ff fb00 	bl	800cb14 <vTaskSwitchContext>
 800d514:	f04f 0000 	mov.w	r0, #0
 800d518:	f380 8811 	msr	BASEPRI, r0
 800d51c:	bc09      	pop	{r0, r3}
 800d51e:	6819      	ldr	r1, [r3, #0]
 800d520:	6808      	ldr	r0, [r1, #0]
 800d522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d526:	f01e 0f10 	tst.w	lr, #16
 800d52a:	bf08      	it	eq
 800d52c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d530:	f380 8809 	msr	PSP, r0
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	f3af 8000 	nop.w

0800d540 <pxCurrentTCBConst>:
 800d540:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d544:	bf00      	nop
 800d546:	bf00      	nop

0800d548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
	__asm volatile
 800d54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	607b      	str	r3, [r7, #4]
}
 800d560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d562:	f7ff fa1d 	bl	800c9a0 <xTaskIncrementTick>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d003      	beq.n	800d574 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d56c:	4b06      	ldr	r3, [pc, #24]	@ (800d588 <SysTick_Handler+0x40>)
 800d56e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	2300      	movs	r3, #0
 800d576:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	f383 8811 	msr	BASEPRI, r3
}
 800d57e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d580:	bf00      	nop
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	e000ed04 	.word	0xe000ed04

0800d58c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d58c:	b480      	push	{r7}
 800d58e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d590:	4b0b      	ldr	r3, [pc, #44]	@ (800d5c0 <vPortSetupTimerInterrupt+0x34>)
 800d592:	2200      	movs	r2, #0
 800d594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d596:	4b0b      	ldr	r3, [pc, #44]	@ (800d5c4 <vPortSetupTimerInterrupt+0x38>)
 800d598:	2200      	movs	r2, #0
 800d59a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d59c:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c8 <vPortSetupTimerInterrupt+0x3c>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d5cc <vPortSetupTimerInterrupt+0x40>)
 800d5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a6:	099b      	lsrs	r3, r3, #6
 800d5a8:	4a09      	ldr	r2, [pc, #36]	@ (800d5d0 <vPortSetupTimerInterrupt+0x44>)
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5ae:	4b04      	ldr	r3, [pc, #16]	@ (800d5c0 <vPortSetupTimerInterrupt+0x34>)
 800d5b0:	2207      	movs	r2, #7
 800d5b2:	601a      	str	r2, [r3, #0]
}
 800d5b4:	bf00      	nop
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	e000e010 	.word	0xe000e010
 800d5c4:	e000e018 	.word	0xe000e018
 800d5c8:	20000000 	.word	0x20000000
 800d5cc:	10624dd3 	.word	0x10624dd3
 800d5d0:	e000e014 	.word	0xe000e014

0800d5d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d5d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d5e4 <vPortEnableVFP+0x10>
 800d5d8:	6801      	ldr	r1, [r0, #0]
 800d5da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d5de:	6001      	str	r1, [r0, #0]
 800d5e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d5e2:	bf00      	nop
 800d5e4:	e000ed88 	.word	0xe000ed88

0800d5e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d5ee:	f3ef 8305 	mrs	r3, IPSR
 800d5f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2b0f      	cmp	r3, #15
 800d5f8:	d915      	bls.n	800d626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d5fa:	4a18      	ldr	r2, [pc, #96]	@ (800d65c <vPortValidateInterruptPriority+0x74>)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	4413      	add	r3, r2
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d604:	4b16      	ldr	r3, [pc, #88]	@ (800d660 <vPortValidateInterruptPriority+0x78>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	7afa      	ldrb	r2, [r7, #11]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d20b      	bcs.n	800d626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	607b      	str	r3, [r7, #4]
}
 800d620:	bf00      	nop
 800d622:	bf00      	nop
 800d624:	e7fd      	b.n	800d622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d626:	4b0f      	ldr	r3, [pc, #60]	@ (800d664 <vPortValidateInterruptPriority+0x7c>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d62e:	4b0e      	ldr	r3, [pc, #56]	@ (800d668 <vPortValidateInterruptPriority+0x80>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	429a      	cmp	r2, r3
 800d634:	d90b      	bls.n	800d64e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d63a:	f383 8811 	msr	BASEPRI, r3
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	603b      	str	r3, [r7, #0]
}
 800d648:	bf00      	nop
 800d64a:	bf00      	nop
 800d64c:	e7fd      	b.n	800d64a <vPortValidateInterruptPriority+0x62>
	}
 800d64e:	bf00      	nop
 800d650:	3714      	adds	r7, #20
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	e000e3f0 	.word	0xe000e3f0
 800d660:	200009e0 	.word	0x200009e0
 800d664:	e000ed0c 	.word	0xe000ed0c
 800d668:	200009e4 	.word	0x200009e4

0800d66c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08a      	sub	sp, #40	@ 0x28
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d674:	2300      	movs	r3, #0
 800d676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d678:	f7ff f8e6 	bl	800c848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d67c:	4b5c      	ldr	r3, [pc, #368]	@ (800d7f0 <pvPortMalloc+0x184>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d684:	f000 f924 	bl	800d8d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d688:	4b5a      	ldr	r3, [pc, #360]	@ (800d7f4 <pvPortMalloc+0x188>)
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4013      	ands	r3, r2
 800d690:	2b00      	cmp	r3, #0
 800d692:	f040 8095 	bne.w	800d7c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d01e      	beq.n	800d6da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d69c:	2208      	movs	r2, #8
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f003 0307 	and.w	r3, r3, #7
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d015      	beq.n	800d6da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f023 0307 	bic.w	r3, r3, #7
 800d6b4:	3308      	adds	r3, #8
 800d6b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f003 0307 	and.w	r3, r3, #7
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00b      	beq.n	800d6da <pvPortMalloc+0x6e>
	__asm volatile
 800d6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	617b      	str	r3, [r7, #20]
}
 800d6d4:	bf00      	nop
 800d6d6:	bf00      	nop
 800d6d8:	e7fd      	b.n	800d6d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d06f      	beq.n	800d7c0 <pvPortMalloc+0x154>
 800d6e0:	4b45      	ldr	r3, [pc, #276]	@ (800d7f8 <pvPortMalloc+0x18c>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d86a      	bhi.n	800d7c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d6ea:	4b44      	ldr	r3, [pc, #272]	@ (800d7fc <pvPortMalloc+0x190>)
 800d6ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d6ee:	4b43      	ldr	r3, [pc, #268]	@ (800d7fc <pvPortMalloc+0x190>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6f4:	e004      	b.n	800d700 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	429a      	cmp	r2, r3
 800d708:	d903      	bls.n	800d712 <pvPortMalloc+0xa6>
 800d70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1f1      	bne.n	800d6f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d712:	4b37      	ldr	r3, [pc, #220]	@ (800d7f0 <pvPortMalloc+0x184>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d718:	429a      	cmp	r2, r3
 800d71a:	d051      	beq.n	800d7c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d71c:	6a3b      	ldr	r3, [r7, #32]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2208      	movs	r2, #8
 800d722:	4413      	add	r3, r2
 800d724:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d730:	685a      	ldr	r2, [r3, #4]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	1ad2      	subs	r2, r2, r3
 800d736:	2308      	movs	r3, #8
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d920      	bls.n	800d780 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d73e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	4413      	add	r3, r2
 800d744:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	f003 0307 	and.w	r3, r3, #7
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00b      	beq.n	800d768 <pvPortMalloc+0xfc>
	__asm volatile
 800d750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	613b      	str	r3, [r7, #16]
}
 800d762:	bf00      	nop
 800d764:	bf00      	nop
 800d766:	e7fd      	b.n	800d764 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76a:	685a      	ldr	r2, [r3, #4]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	1ad2      	subs	r2, r2, r3
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d77a:	69b8      	ldr	r0, [r7, #24]
 800d77c:	f000 f90a 	bl	800d994 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d780:	4b1d      	ldr	r3, [pc, #116]	@ (800d7f8 <pvPortMalloc+0x18c>)
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	4a1b      	ldr	r2, [pc, #108]	@ (800d7f8 <pvPortMalloc+0x18c>)
 800d78c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d78e:	4b1a      	ldr	r3, [pc, #104]	@ (800d7f8 <pvPortMalloc+0x18c>)
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	4b1b      	ldr	r3, [pc, #108]	@ (800d800 <pvPortMalloc+0x194>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	429a      	cmp	r2, r3
 800d798:	d203      	bcs.n	800d7a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d79a:	4b17      	ldr	r3, [pc, #92]	@ (800d7f8 <pvPortMalloc+0x18c>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a18      	ldr	r2, [pc, #96]	@ (800d800 <pvPortMalloc+0x194>)
 800d7a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a4:	685a      	ldr	r2, [r3, #4]
 800d7a6:	4b13      	ldr	r3, [pc, #76]	@ (800d7f4 <pvPortMalloc+0x188>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	431a      	orrs	r2, r3
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d7b6:	4b13      	ldr	r3, [pc, #76]	@ (800d804 <pvPortMalloc+0x198>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	4a11      	ldr	r2, [pc, #68]	@ (800d804 <pvPortMalloc+0x198>)
 800d7be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7c0:	f7ff f850 	bl	800c864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	f003 0307 	and.w	r3, r3, #7
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00b      	beq.n	800d7e6 <pvPortMalloc+0x17a>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	60fb      	str	r3, [r7, #12]
}
 800d7e0:	bf00      	nop
 800d7e2:	bf00      	nop
 800d7e4:	e7fd      	b.n	800d7e2 <pvPortMalloc+0x176>
	return pvReturn;
 800d7e6:	69fb      	ldr	r3, [r7, #28]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3728      	adds	r7, #40	@ 0x28
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	200045f0 	.word	0x200045f0
 800d7f4:	20004604 	.word	0x20004604
 800d7f8:	200045f4 	.word	0x200045f4
 800d7fc:	200045e8 	.word	0x200045e8
 800d800:	200045f8 	.word	0x200045f8
 800d804:	200045fc 	.word	0x200045fc

0800d808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b086      	sub	sp, #24
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d04f      	beq.n	800d8ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d81a:	2308      	movs	r3, #8
 800d81c:	425b      	negs	r3, r3
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	4413      	add	r3, r2
 800d822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	4b25      	ldr	r3, [pc, #148]	@ (800d8c4 <vPortFree+0xbc>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4013      	ands	r3, r2
 800d832:	2b00      	cmp	r3, #0
 800d834:	d10b      	bne.n	800d84e <vPortFree+0x46>
	__asm volatile
 800d836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d83a:	f383 8811 	msr	BASEPRI, r3
 800d83e:	f3bf 8f6f 	isb	sy
 800d842:	f3bf 8f4f 	dsb	sy
 800d846:	60fb      	str	r3, [r7, #12]
}
 800d848:	bf00      	nop
 800d84a:	bf00      	nop
 800d84c:	e7fd      	b.n	800d84a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00b      	beq.n	800d86e <vPortFree+0x66>
	__asm volatile
 800d856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d85a:	f383 8811 	msr	BASEPRI, r3
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	f3bf 8f4f 	dsb	sy
 800d866:	60bb      	str	r3, [r7, #8]
}
 800d868:	bf00      	nop
 800d86a:	bf00      	nop
 800d86c:	e7fd      	b.n	800d86a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	685a      	ldr	r2, [r3, #4]
 800d872:	4b14      	ldr	r3, [pc, #80]	@ (800d8c4 <vPortFree+0xbc>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4013      	ands	r3, r2
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d01e      	beq.n	800d8ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d11a      	bne.n	800d8ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	685a      	ldr	r2, [r3, #4]
 800d888:	4b0e      	ldr	r3, [pc, #56]	@ (800d8c4 <vPortFree+0xbc>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	43db      	mvns	r3, r3
 800d88e:	401a      	ands	r2, r3
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d894:	f7fe ffd8 	bl	800c848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	685a      	ldr	r2, [r3, #4]
 800d89c:	4b0a      	ldr	r3, [pc, #40]	@ (800d8c8 <vPortFree+0xc0>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	4a09      	ldr	r2, [pc, #36]	@ (800d8c8 <vPortFree+0xc0>)
 800d8a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8a6:	6938      	ldr	r0, [r7, #16]
 800d8a8:	f000 f874 	bl	800d994 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d8ac:	4b07      	ldr	r3, [pc, #28]	@ (800d8cc <vPortFree+0xc4>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	4a06      	ldr	r2, [pc, #24]	@ (800d8cc <vPortFree+0xc4>)
 800d8b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d8b6:	f7fe ffd5 	bl	800c864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8ba:	bf00      	nop
 800d8bc:	3718      	adds	r7, #24
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	20004604 	.word	0x20004604
 800d8c8:	200045f4 	.word	0x200045f4
 800d8cc:	20004600 	.word	0x20004600

0800d8d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d8da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8dc:	4b27      	ldr	r3, [pc, #156]	@ (800d97c <prvHeapInit+0xac>)
 800d8de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f003 0307 	and.w	r3, r3, #7
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d00c      	beq.n	800d904 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	3307      	adds	r3, #7
 800d8ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f023 0307 	bic.w	r3, r3, #7
 800d8f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	4a1f      	ldr	r2, [pc, #124]	@ (800d97c <prvHeapInit+0xac>)
 800d900:	4413      	add	r3, r2
 800d902:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d908:	4a1d      	ldr	r2, [pc, #116]	@ (800d980 <prvHeapInit+0xb0>)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d90e:	4b1c      	ldr	r3, [pc, #112]	@ (800d980 <prvHeapInit+0xb0>)
 800d910:	2200      	movs	r2, #0
 800d912:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	4413      	add	r3, r2
 800d91a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d91c:	2208      	movs	r2, #8
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	1a9b      	subs	r3, r3, r2
 800d922:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f023 0307 	bic.w	r3, r3, #7
 800d92a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	4a15      	ldr	r2, [pc, #84]	@ (800d984 <prvHeapInit+0xb4>)
 800d930:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d932:	4b14      	ldr	r3, [pc, #80]	@ (800d984 <prvHeapInit+0xb4>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	2200      	movs	r2, #0
 800d938:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d93a:	4b12      	ldr	r3, [pc, #72]	@ (800d984 <prvHeapInit+0xb4>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2200      	movs	r2, #0
 800d940:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	1ad2      	subs	r2, r2, r3
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d950:	4b0c      	ldr	r3, [pc, #48]	@ (800d984 <prvHeapInit+0xb4>)
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	4a0a      	ldr	r2, [pc, #40]	@ (800d988 <prvHeapInit+0xb8>)
 800d95e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	4a09      	ldr	r2, [pc, #36]	@ (800d98c <prvHeapInit+0xbc>)
 800d966:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d968:	4b09      	ldr	r3, [pc, #36]	@ (800d990 <prvHeapInit+0xc0>)
 800d96a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d96e:	601a      	str	r2, [r3, #0]
}
 800d970:	bf00      	nop
 800d972:	3714      	adds	r7, #20
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr
 800d97c:	200009e8 	.word	0x200009e8
 800d980:	200045e8 	.word	0x200045e8
 800d984:	200045f0 	.word	0x200045f0
 800d988:	200045f8 	.word	0x200045f8
 800d98c:	200045f4 	.word	0x200045f4
 800d990:	20004604 	.word	0x20004604

0800d994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d994:	b480      	push	{r7}
 800d996:	b085      	sub	sp, #20
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d99c:	4b28      	ldr	r3, [pc, #160]	@ (800da40 <prvInsertBlockIntoFreeList+0xac>)
 800d99e:	60fb      	str	r3, [r7, #12]
 800d9a0:	e002      	b.n	800d9a8 <prvInsertBlockIntoFreeList+0x14>
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	60fb      	str	r3, [r7, #12]
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d8f7      	bhi.n	800d9a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	4413      	add	r3, r2
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d108      	bne.n	800d9d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	685a      	ldr	r2, [r3, #4]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	441a      	add	r2, r3
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	441a      	add	r2, r3
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d118      	bne.n	800da1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	4b15      	ldr	r3, [pc, #84]	@ (800da44 <prvInsertBlockIntoFreeList+0xb0>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d00d      	beq.n	800da12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	685a      	ldr	r2, [r3, #4]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	441a      	add	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	601a      	str	r2, [r3, #0]
 800da10:	e008      	b.n	800da24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da12:	4b0c      	ldr	r3, [pc, #48]	@ (800da44 <prvInsertBlockIntoFreeList+0xb0>)
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	601a      	str	r2, [r3, #0]
 800da1a:	e003      	b.n	800da24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da24:	68fa      	ldr	r2, [r7, #12]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d002      	beq.n	800da32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da32:	bf00      	nop
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	200045e8 	.word	0x200045e8
 800da44:	200045f0 	.word	0x200045f0

0800da48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800da4c:	2200      	movs	r2, #0
 800da4e:	4912      	ldr	r1, [pc, #72]	@ (800da98 <MX_USB_DEVICE_Init+0x50>)
 800da50:	4812      	ldr	r0, [pc, #72]	@ (800da9c <MX_USB_DEVICE_Init+0x54>)
 800da52:	f7fc f9ad 	bl	8009db0 <USBD_Init>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d001      	beq.n	800da60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800da5c:	f7f3 fe62 	bl	8001724 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800da60:	490f      	ldr	r1, [pc, #60]	@ (800daa0 <MX_USB_DEVICE_Init+0x58>)
 800da62:	480e      	ldr	r0, [pc, #56]	@ (800da9c <MX_USB_DEVICE_Init+0x54>)
 800da64:	f7fc f9d4 	bl	8009e10 <USBD_RegisterClass>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d001      	beq.n	800da72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800da6e:	f7f3 fe59 	bl	8001724 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800da72:	490c      	ldr	r1, [pc, #48]	@ (800daa4 <MX_USB_DEVICE_Init+0x5c>)
 800da74:	4809      	ldr	r0, [pc, #36]	@ (800da9c <MX_USB_DEVICE_Init+0x54>)
 800da76:	f7fc f8cb 	bl	8009c10 <USBD_CDC_RegisterInterface>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d001      	beq.n	800da84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800da80:	f7f3 fe50 	bl	8001724 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800da84:	4805      	ldr	r0, [pc, #20]	@ (800da9c <MX_USB_DEVICE_Init+0x54>)
 800da86:	f7fc f9f9 	bl	8009e7c <USBD_Start>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d001      	beq.n	800da94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800da90:	f7f3 fe48 	bl	8001724 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800da94:	bf00      	nop
 800da96:	bd80      	pop	{r7, pc}
 800da98:	200000b8 	.word	0x200000b8
 800da9c:	20004608 	.word	0x20004608
 800daa0:	20000018 	.word	0x20000018
 800daa4:	200000a4 	.word	0x200000a4

0800daa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800daac:	2200      	movs	r2, #0
 800daae:	4905      	ldr	r1, [pc, #20]	@ (800dac4 <CDC_Init_FS+0x1c>)
 800dab0:	4805      	ldr	r0, [pc, #20]	@ (800dac8 <CDC_Init_FS+0x20>)
 800dab2:	f7fc f8c7 	bl	8009c44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dab6:	4905      	ldr	r1, [pc, #20]	@ (800dacc <CDC_Init_FS+0x24>)
 800dab8:	4803      	ldr	r0, [pc, #12]	@ (800dac8 <CDC_Init_FS+0x20>)
 800daba:	f7fc f8e5 	bl	8009c88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dabe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	200050e4 	.word	0x200050e4
 800dac8:	20004608 	.word	0x20004608
 800dacc:	200048e4 	.word	0x200048e4

0800dad0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dad0:	b480      	push	{r7}
 800dad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dad4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr

0800dae0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	4603      	mov	r3, r0
 800dae8:	6039      	str	r1, [r7, #0]
 800daea:	71fb      	strb	r3, [r7, #7]
 800daec:	4613      	mov	r3, r2
 800daee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800daf0:	79fb      	ldrb	r3, [r7, #7]
 800daf2:	2b23      	cmp	r3, #35	@ 0x23
 800daf4:	f200 8098 	bhi.w	800dc28 <CDC_Control_FS+0x148>
 800daf8:	a201      	add	r2, pc, #4	@ (adr r2, 800db00 <CDC_Control_FS+0x20>)
 800dafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dafe:	bf00      	nop
 800db00:	0800dc29 	.word	0x0800dc29
 800db04:	0800dc29 	.word	0x0800dc29
 800db08:	0800dc29 	.word	0x0800dc29
 800db0c:	0800dc29 	.word	0x0800dc29
 800db10:	0800dc29 	.word	0x0800dc29
 800db14:	0800dc29 	.word	0x0800dc29
 800db18:	0800dc29 	.word	0x0800dc29
 800db1c:	0800dc29 	.word	0x0800dc29
 800db20:	0800dc29 	.word	0x0800dc29
 800db24:	0800dc29 	.word	0x0800dc29
 800db28:	0800dc29 	.word	0x0800dc29
 800db2c:	0800dc29 	.word	0x0800dc29
 800db30:	0800dc29 	.word	0x0800dc29
 800db34:	0800dc29 	.word	0x0800dc29
 800db38:	0800dc29 	.word	0x0800dc29
 800db3c:	0800dc29 	.word	0x0800dc29
 800db40:	0800dc29 	.word	0x0800dc29
 800db44:	0800dc29 	.word	0x0800dc29
 800db48:	0800dc29 	.word	0x0800dc29
 800db4c:	0800dc29 	.word	0x0800dc29
 800db50:	0800dc29 	.word	0x0800dc29
 800db54:	0800dc29 	.word	0x0800dc29
 800db58:	0800dc29 	.word	0x0800dc29
 800db5c:	0800dc29 	.word	0x0800dc29
 800db60:	0800dc29 	.word	0x0800dc29
 800db64:	0800dc29 	.word	0x0800dc29
 800db68:	0800dc29 	.word	0x0800dc29
 800db6c:	0800dc29 	.word	0x0800dc29
 800db70:	0800dc29 	.word	0x0800dc29
 800db74:	0800dc29 	.word	0x0800dc29
 800db78:	0800dc29 	.word	0x0800dc29
 800db7c:	0800dc29 	.word	0x0800dc29
 800db80:	0800db91 	.word	0x0800db91
 800db84:	0800dbd5 	.word	0x0800dbd5
 800db88:	0800dc29 	.word	0x0800dc29
 800db8c:	0800dc29 	.word	0x0800dc29
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	461a      	mov	r2, r3
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	3301      	adds	r3, #1
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	021b      	lsls	r3, r3, #8
 800db9e:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	3302      	adds	r3, #2
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	041b      	lsls	r3, r3, #16
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800dba8:	431a      	orrs	r2, r3
								(pbuf[2] << 16) | (pbuf[3] << 24));
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	3303      	adds	r3, #3
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	061b      	lsls	r3, r3, #24
 800dbb2:	4313      	orrs	r3, r2
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	4b20      	ldr	r3, [pc, #128]	@ (800dc38 <CDC_Control_FS+0x158>)
 800dbb8:	601a      	str	r2, [r3, #0]
		LineCoding.format     = pbuf[4];
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	791a      	ldrb	r2, [r3, #4]
 800dbbe:	4b1e      	ldr	r3, [pc, #120]	@ (800dc38 <CDC_Control_FS+0x158>)
 800dbc0:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	795a      	ldrb	r2, [r3, #5]
 800dbc6:	4b1c      	ldr	r3, [pc, #112]	@ (800dc38 <CDC_Control_FS+0x158>)
 800dbc8:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype   = pbuf[6];
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	799a      	ldrb	r2, [r3, #6]
 800dbce:	4b1a      	ldr	r3, [pc, #104]	@ (800dc38 <CDC_Control_FS+0x158>)
 800dbd0:	719a      	strb	r2, [r3, #6]
    break;
 800dbd2:	e02a      	b.n	800dc2a <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800dbd4:	4b18      	ldr	r3, [pc, #96]	@ (800dc38 <CDC_Control_FS+0x158>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800dbde:	4b16      	ldr	r3, [pc, #88]	@ (800dc38 <CDC_Control_FS+0x158>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	0a1a      	lsrs	r2, r3, #8
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	b2d2      	uxtb	r2, r2
 800dbea:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800dbec:	4b12      	ldr	r3, [pc, #72]	@ (800dc38 <CDC_Control_FS+0x158>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	0c1a      	lsrs	r2, r3, #16
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	3302      	adds	r3, #2
 800dbf6:	b2d2      	uxtb	r2, r2
 800dbf8:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800dbfa:	4b0f      	ldr	r3, [pc, #60]	@ (800dc38 <CDC_Control_FS+0x158>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	0e1a      	lsrs	r2, r3, #24
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	3303      	adds	r3, #3
 800dc04:	b2d2      	uxtb	r2, r2
 800dc06:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	3304      	adds	r3, #4
 800dc0c:	4a0a      	ldr	r2, [pc, #40]	@ (800dc38 <CDC_Control_FS+0x158>)
 800dc0e:	7912      	ldrb	r2, [r2, #4]
 800dc10:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	3305      	adds	r3, #5
 800dc16:	4a08      	ldr	r2, [pc, #32]	@ (800dc38 <CDC_Control_FS+0x158>)
 800dc18:	7952      	ldrb	r2, [r2, #5]
 800dc1a:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	3306      	adds	r3, #6
 800dc20:	4a05      	ldr	r2, [pc, #20]	@ (800dc38 <CDC_Control_FS+0x158>)
 800dc22:	7992      	ldrb	r2, [r2, #6]
 800dc24:	701a      	strb	r2, [r3, #0]
    break;
 800dc26:	e000      	b.n	800dc2a <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc28:	bf00      	nop
  }

  return (USBD_OK);
 800dc2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	370c      	adds	r7, #12
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr
 800dc38:	2000009c 	.word	0x2000009c

0800dc3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_Process_Recv_Data(Buf, *Len);
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 fff5 	bl	800ec3c <CDC_Process_Recv_Data>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dc52:	6879      	ldr	r1, [r7, #4]
 800dc54:	4805      	ldr	r0, [pc, #20]	@ (800dc6c <CDC_Receive_FS+0x30>)
 800dc56:	f7fc f817 	bl	8009c88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dc5a:	4804      	ldr	r0, [pc, #16]	@ (800dc6c <CDC_Receive_FS+0x30>)
 800dc5c:	f7fc f872 	bl	8009d44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dc60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3708      	adds	r7, #8
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	20004608 	.word	0x20004608

0800dc70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dc80:	4b0d      	ldr	r3, [pc, #52]	@ (800dcb8 <CDC_Transmit_FS+0x48>)
 800dc82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dc86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d001      	beq.n	800dc96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dc92:	2301      	movs	r3, #1
 800dc94:	e00b      	b.n	800dcae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dc96:	887b      	ldrh	r3, [r7, #2]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	4806      	ldr	r0, [pc, #24]	@ (800dcb8 <CDC_Transmit_FS+0x48>)
 800dc9e:	f7fb ffd1 	bl	8009c44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dca2:	4805      	ldr	r0, [pc, #20]	@ (800dcb8 <CDC_Transmit_FS+0x48>)
 800dca4:	f7fc f80e 	bl	8009cc4 <USBD_CDC_TransmitPacket>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dcac:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	20004608 	.word	0x20004608

0800dcbc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b087      	sub	sp, #28
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dcca:	2300      	movs	r3, #0
 800dccc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dcce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	371c      	adds	r7, #28
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
	...

0800dce0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	4603      	mov	r3, r0
 800dce8:	6039      	str	r1, [r7, #0]
 800dcea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	2212      	movs	r2, #18
 800dcf0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dcf2:	4b03      	ldr	r3, [pc, #12]	@ (800dd00 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	200000d8 	.word	0x200000d8

0800dd04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	6039      	str	r1, [r7, #0]
 800dd0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	2204      	movs	r2, #4
 800dd14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd16:	4b03      	ldr	r3, [pc, #12]	@ (800dd24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	370c      	adds	r7, #12
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr
 800dd24:	200000f8 	.word	0x200000f8

0800dd28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	4603      	mov	r3, r0
 800dd30:	6039      	str	r1, [r7, #0]
 800dd32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd34:	79fb      	ldrb	r3, [r7, #7]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d105      	bne.n	800dd46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	4907      	ldr	r1, [pc, #28]	@ (800dd5c <USBD_FS_ProductStrDescriptor+0x34>)
 800dd3e:	4808      	ldr	r0, [pc, #32]	@ (800dd60 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd40:	f7fd fa76 	bl	800b230 <USBD_GetString>
 800dd44:	e004      	b.n	800dd50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd46:	683a      	ldr	r2, [r7, #0]
 800dd48:	4904      	ldr	r1, [pc, #16]	@ (800dd5c <USBD_FS_ProductStrDescriptor+0x34>)
 800dd4a:	4805      	ldr	r0, [pc, #20]	@ (800dd60 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd4c:	f7fd fa70 	bl	800b230 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd50:	4b02      	ldr	r3, [pc, #8]	@ (800dd5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	200058e4 	.word	0x200058e4
 800dd60:	080145b8 	.word	0x080145b8

0800dd64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	6039      	str	r1, [r7, #0]
 800dd6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd70:	683a      	ldr	r2, [r7, #0]
 800dd72:	4904      	ldr	r1, [pc, #16]	@ (800dd84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd74:	4804      	ldr	r0, [pc, #16]	@ (800dd88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd76:	f7fd fa5b 	bl	800b230 <USBD_GetString>
  return USBD_StrDesc;
 800dd7a:	4b02      	ldr	r3, [pc, #8]	@ (800dd84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	200058e4 	.word	0x200058e4
 800dd88:	080145d0 	.word	0x080145d0

0800dd8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	4603      	mov	r3, r0
 800dd94:	6039      	str	r1, [r7, #0]
 800dd96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	221a      	movs	r2, #26
 800dd9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd9e:	f000 f855 	bl	800de4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dda2:	4b02      	ldr	r3, [pc, #8]	@ (800ddac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	200000fc 	.word	0x200000fc

0800ddb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	6039      	str	r1, [r7, #0]
 800ddba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddbc:	79fb      	ldrb	r3, [r7, #7]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d105      	bne.n	800ddce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	4907      	ldr	r1, [pc, #28]	@ (800dde4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddc6:	4808      	ldr	r0, [pc, #32]	@ (800dde8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddc8:	f7fd fa32 	bl	800b230 <USBD_GetString>
 800ddcc:	e004      	b.n	800ddd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	4904      	ldr	r1, [pc, #16]	@ (800dde4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddd2:	4805      	ldr	r0, [pc, #20]	@ (800dde8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddd4:	f7fd fa2c 	bl	800b230 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddd8:	4b02      	ldr	r3, [pc, #8]	@ (800dde4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3708      	adds	r7, #8
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	200058e4 	.word	0x200058e4
 800dde8:	080145e4 	.word	0x080145e4

0800ddec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	6039      	str	r1, [r7, #0]
 800ddf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ddf8:	79fb      	ldrb	r3, [r7, #7]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d105      	bne.n	800de0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ddfe:	683a      	ldr	r2, [r7, #0]
 800de00:	4907      	ldr	r1, [pc, #28]	@ (800de20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de02:	4808      	ldr	r0, [pc, #32]	@ (800de24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de04:	f7fd fa14 	bl	800b230 <USBD_GetString>
 800de08:	e004      	b.n	800de14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	4904      	ldr	r1, [pc, #16]	@ (800de20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de0e:	4805      	ldr	r0, [pc, #20]	@ (800de24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de10:	f7fd fa0e 	bl	800b230 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de14:	4b02      	ldr	r3, [pc, #8]	@ (800de20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de16:	4618      	mov	r0, r3
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	200058e4 	.word	0x200058e4
 800de24:	080145f0 	.word	0x080145f0

0800de28 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	4603      	mov	r3, r0
 800de30:	6039      	str	r1, [r7, #0]
 800de32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	220c      	movs	r2, #12
 800de38:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800de3a:	4b03      	ldr	r3, [pc, #12]	@ (800de48 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr
 800de48:	200000ec 	.word	0x200000ec

0800de4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de52:	4b0f      	ldr	r3, [pc, #60]	@ (800de90 <Get_SerialNum+0x44>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de58:	4b0e      	ldr	r3, [pc, #56]	@ (800de94 <Get_SerialNum+0x48>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de5e:	4b0e      	ldr	r3, [pc, #56]	@ (800de98 <Get_SerialNum+0x4c>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4413      	add	r3, r2
 800de6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d009      	beq.n	800de86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de72:	2208      	movs	r2, #8
 800de74:	4909      	ldr	r1, [pc, #36]	@ (800de9c <Get_SerialNum+0x50>)
 800de76:	68f8      	ldr	r0, [r7, #12]
 800de78:	f000 f814 	bl	800dea4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de7c:	2204      	movs	r2, #4
 800de7e:	4908      	ldr	r1, [pc, #32]	@ (800dea0 <Get_SerialNum+0x54>)
 800de80:	68b8      	ldr	r0, [r7, #8]
 800de82:	f000 f80f 	bl	800dea4 <IntToUnicode>
  }
}
 800de86:	bf00      	nop
 800de88:	3710      	adds	r7, #16
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	1fff7a10 	.word	0x1fff7a10
 800de94:	1fff7a14 	.word	0x1fff7a14
 800de98:	1fff7a18 	.word	0x1fff7a18
 800de9c:	200000fe 	.word	0x200000fe
 800dea0:	2000010e 	.word	0x2000010e

0800dea4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b087      	sub	sp, #28
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	4613      	mov	r3, r2
 800deb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800deb6:	2300      	movs	r3, #0
 800deb8:	75fb      	strb	r3, [r7, #23]
 800deba:	e027      	b.n	800df0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	0f1b      	lsrs	r3, r3, #28
 800dec0:	2b09      	cmp	r3, #9
 800dec2:	d80b      	bhi.n	800dedc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	0f1b      	lsrs	r3, r3, #28
 800dec8:	b2da      	uxtb	r2, r3
 800deca:	7dfb      	ldrb	r3, [r7, #23]
 800decc:	005b      	lsls	r3, r3, #1
 800dece:	4619      	mov	r1, r3
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	440b      	add	r3, r1
 800ded4:	3230      	adds	r2, #48	@ 0x30
 800ded6:	b2d2      	uxtb	r2, r2
 800ded8:	701a      	strb	r2, [r3, #0]
 800deda:	e00a      	b.n	800def2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	0f1b      	lsrs	r3, r3, #28
 800dee0:	b2da      	uxtb	r2, r3
 800dee2:	7dfb      	ldrb	r3, [r7, #23]
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	4619      	mov	r1, r3
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	440b      	add	r3, r1
 800deec:	3237      	adds	r2, #55	@ 0x37
 800deee:	b2d2      	uxtb	r2, r2
 800def0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	011b      	lsls	r3, r3, #4
 800def6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800def8:	7dfb      	ldrb	r3, [r7, #23]
 800defa:	005b      	lsls	r3, r3, #1
 800defc:	3301      	adds	r3, #1
 800defe:	68ba      	ldr	r2, [r7, #8]
 800df00:	4413      	add	r3, r2
 800df02:	2200      	movs	r2, #0
 800df04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800df06:	7dfb      	ldrb	r3, [r7, #23]
 800df08:	3301      	adds	r3, #1
 800df0a:	75fb      	strb	r3, [r7, #23]
 800df0c:	7dfa      	ldrb	r2, [r7, #23]
 800df0e:	79fb      	ldrb	r3, [r7, #7]
 800df10:	429a      	cmp	r2, r3
 800df12:	d3d3      	bcc.n	800debc <IntToUnicode+0x18>
  }
}
 800df14:	bf00      	nop
 800df16:	bf00      	nop
 800df18:	371c      	adds	r7, #28
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr
	...

0800df24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b0a0      	sub	sp, #128	@ 0x80
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df2c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800df30:	2200      	movs	r2, #0
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	605a      	str	r2, [r3, #4]
 800df36:	609a      	str	r2, [r3, #8]
 800df38:	60da      	str	r2, [r3, #12]
 800df3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800df3c:	f107 0310 	add.w	r3, r7, #16
 800df40:	225c      	movs	r2, #92	@ 0x5c
 800df42:	2100      	movs	r1, #0
 800df44:	4618      	mov	r0, r3
 800df46:	f002 ff66 	bl	8010e16 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800df52:	d149      	bne.n	800dfe8 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800df54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800df58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800df5a:	2300      	movs	r3, #0
 800df5c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800df5e:	f107 0310 	add.w	r3, r7, #16
 800df62:	4618      	mov	r0, r3
 800df64:	f7f7 f9be 	bl	80052e4 <HAL_RCCEx_PeriphCLKConfig>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d001      	beq.n	800df72 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800df6e:	f7f3 fbd9 	bl	8001724 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df72:	2300      	movs	r3, #0
 800df74:	60fb      	str	r3, [r7, #12]
 800df76:	4b1e      	ldr	r3, [pc, #120]	@ (800dff0 <HAL_PCD_MspInit+0xcc>)
 800df78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df7a:	4a1d      	ldr	r2, [pc, #116]	@ (800dff0 <HAL_PCD_MspInit+0xcc>)
 800df7c:	f043 0301 	orr.w	r3, r3, #1
 800df80:	6313      	str	r3, [r2, #48]	@ 0x30
 800df82:	4b1b      	ldr	r3, [pc, #108]	@ (800dff0 <HAL_PCD_MspInit+0xcc>)
 800df84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df86:	f003 0301 	and.w	r3, r3, #1
 800df8a:	60fb      	str	r3, [r7, #12]
 800df8c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800df8e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800df92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df94:	2302      	movs	r3, #2
 800df96:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df98:	2300      	movs	r3, #0
 800df9a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df9c:	2303      	movs	r3, #3
 800df9e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dfa0:	230a      	movs	r3, #10
 800dfa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfa4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	4812      	ldr	r0, [pc, #72]	@ (800dff4 <HAL_PCD_MspInit+0xd0>)
 800dfac:	f7f5 fbea 	bl	8003784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dfb0:	4b0f      	ldr	r3, [pc, #60]	@ (800dff0 <HAL_PCD_MspInit+0xcc>)
 800dfb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfb4:	4a0e      	ldr	r2, [pc, #56]	@ (800dff0 <HAL_PCD_MspInit+0xcc>)
 800dfb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfba:	6353      	str	r3, [r2, #52]	@ 0x34
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	60bb      	str	r3, [r7, #8]
 800dfc0:	4b0b      	ldr	r3, [pc, #44]	@ (800dff0 <HAL_PCD_MspInit+0xcc>)
 800dfc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfc4:	4a0a      	ldr	r2, [pc, #40]	@ (800dff0 <HAL_PCD_MspInit+0xcc>)
 800dfc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dfca:	6453      	str	r3, [r2, #68]	@ 0x44
 800dfcc:	4b08      	ldr	r3, [pc, #32]	@ (800dff0 <HAL_PCD_MspInit+0xcc>)
 800dfce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dfd4:	60bb      	str	r3, [r7, #8]
 800dfd6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800dfd8:	2200      	movs	r2, #0
 800dfda:	2105      	movs	r1, #5
 800dfdc:	2043      	movs	r0, #67	@ 0x43
 800dfde:	f7f4 ffa5 	bl	8002f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dfe2:	2043      	movs	r0, #67	@ 0x43
 800dfe4:	f7f4 ffbe 	bl	8002f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dfe8:	bf00      	nop
 800dfea:	3780      	adds	r7, #128	@ 0x80
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	40023800 	.word	0x40023800
 800dff4:	40020000 	.word	0x40020000

0800dff8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e00c:	4619      	mov	r1, r3
 800e00e:	4610      	mov	r0, r2
 800e010:	f7fb ff81 	bl	8009f16 <USBD_LL_SetupStage>
}
 800e014:	bf00      	nop
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	460b      	mov	r3, r1
 800e026:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e02e:	78fa      	ldrb	r2, [r7, #3]
 800e030:	6879      	ldr	r1, [r7, #4]
 800e032:	4613      	mov	r3, r2
 800e034:	00db      	lsls	r3, r3, #3
 800e036:	4413      	add	r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	440b      	add	r3, r1
 800e03c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	78fb      	ldrb	r3, [r7, #3]
 800e044:	4619      	mov	r1, r3
 800e046:	f7fb ffbb 	bl	8009fc0 <USBD_LL_DataOutStage>
}
 800e04a:	bf00      	nop
 800e04c:	3708      	adds	r7, #8
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e052:	b580      	push	{r7, lr}
 800e054:	b082      	sub	sp, #8
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
 800e05a:	460b      	mov	r3, r1
 800e05c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e064:	78fa      	ldrb	r2, [r7, #3]
 800e066:	6879      	ldr	r1, [r7, #4]
 800e068:	4613      	mov	r3, r2
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	4413      	add	r3, r2
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	440b      	add	r3, r1
 800e072:	3320      	adds	r3, #32
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	78fb      	ldrb	r3, [r7, #3]
 800e078:	4619      	mov	r1, r3
 800e07a:	f7fc f854 	bl	800a126 <USBD_LL_DataInStage>
}
 800e07e:	bf00      	nop
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}

0800e086 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e086:	b580      	push	{r7, lr}
 800e088:	b082      	sub	sp, #8
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e094:	4618      	mov	r0, r3
 800e096:	f7fc f98e 	bl	800a3b6 <USBD_LL_SOF>
}
 800e09a:	bf00      	nop
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b084      	sub	sp, #16
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	79db      	ldrb	r3, [r3, #7]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d102      	bne.n	800e0bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	73fb      	strb	r3, [r7, #15]
 800e0ba:	e008      	b.n	800e0ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	79db      	ldrb	r3, [r3, #7]
 800e0c0:	2b02      	cmp	r3, #2
 800e0c2:	d102      	bne.n	800e0ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	73fb      	strb	r3, [r7, #15]
 800e0c8:	e001      	b.n	800e0ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e0ca:	f7f3 fb2b 	bl	8001724 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e0d4:	7bfa      	ldrb	r2, [r7, #15]
 800e0d6:	4611      	mov	r1, r2
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7fc f928 	bl	800a32e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7fc f8d0 	bl	800a28a <USBD_LL_Reset>
}
 800e0ea:	bf00      	nop
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
	...

0800e0f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e102:	4618      	mov	r0, r3
 800e104:	f7fc f923 	bl	800a34e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	6812      	ldr	r2, [r2, #0]
 800e116:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e11a:	f043 0301 	orr.w	r3, r3, #1
 800e11e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	7adb      	ldrb	r3, [r3, #11]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d005      	beq.n	800e134 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e128:	4b04      	ldr	r3, [pc, #16]	@ (800e13c <HAL_PCD_SuspendCallback+0x48>)
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	4a03      	ldr	r2, [pc, #12]	@ (800e13c <HAL_PCD_SuspendCallback+0x48>)
 800e12e:	f043 0306 	orr.w	r3, r3, #6
 800e132:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e134:	bf00      	nop
 800e136:	3708      	adds	r7, #8
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	e000ed00 	.word	0xe000ed00

0800e140 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fc f919 	bl	800a386 <USBD_LL_Resume>
}
 800e154:	bf00      	nop
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e16e:	78fa      	ldrb	r2, [r7, #3]
 800e170:	4611      	mov	r1, r2
 800e172:	4618      	mov	r0, r3
 800e174:	f7fc f971 	bl	800a45a <USBD_LL_IsoOUTIncomplete>
}
 800e178:	bf00      	nop
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	460b      	mov	r3, r1
 800e18a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e192:	78fa      	ldrb	r2, [r7, #3]
 800e194:	4611      	mov	r1, r2
 800e196:	4618      	mov	r0, r3
 800e198:	f7fc f92d 	bl	800a3f6 <USBD_LL_IsoINIncomplete>
}
 800e19c:	bf00      	nop
 800e19e:	3708      	adds	r7, #8
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fc f983 	bl	800a4be <USBD_LL_DevConnected>
}
 800e1b8:	bf00      	nop
 800e1ba:	3708      	adds	r7, #8
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fc f980 	bl	800a4d4 <USBD_LL_DevDisconnected>
}
 800e1d4:	bf00      	nop
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d13c      	bne.n	800e266 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e1ec:	4a20      	ldr	r2, [pc, #128]	@ (800e270 <USBD_LL_Init+0x94>)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	4a1e      	ldr	r2, [pc, #120]	@ (800e270 <USBD_LL_Init+0x94>)
 800e1f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e1fc:	4b1c      	ldr	r3, [pc, #112]	@ (800e270 <USBD_LL_Init+0x94>)
 800e1fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e202:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e204:	4b1a      	ldr	r3, [pc, #104]	@ (800e270 <USBD_LL_Init+0x94>)
 800e206:	2206      	movs	r2, #6
 800e208:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e20a:	4b19      	ldr	r3, [pc, #100]	@ (800e270 <USBD_LL_Init+0x94>)
 800e20c:	2202      	movs	r2, #2
 800e20e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e210:	4b17      	ldr	r3, [pc, #92]	@ (800e270 <USBD_LL_Init+0x94>)
 800e212:	2200      	movs	r2, #0
 800e214:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e216:	4b16      	ldr	r3, [pc, #88]	@ (800e270 <USBD_LL_Init+0x94>)
 800e218:	2202      	movs	r2, #2
 800e21a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e21c:	4b14      	ldr	r3, [pc, #80]	@ (800e270 <USBD_LL_Init+0x94>)
 800e21e:	2200      	movs	r2, #0
 800e220:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e222:	4b13      	ldr	r3, [pc, #76]	@ (800e270 <USBD_LL_Init+0x94>)
 800e224:	2200      	movs	r2, #0
 800e226:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e228:	4b11      	ldr	r3, [pc, #68]	@ (800e270 <USBD_LL_Init+0x94>)
 800e22a:	2200      	movs	r2, #0
 800e22c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e22e:	4b10      	ldr	r3, [pc, #64]	@ (800e270 <USBD_LL_Init+0x94>)
 800e230:	2200      	movs	r2, #0
 800e232:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e234:	4b0e      	ldr	r3, [pc, #56]	@ (800e270 <USBD_LL_Init+0x94>)
 800e236:	2200      	movs	r2, #0
 800e238:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e23a:	480d      	ldr	r0, [pc, #52]	@ (800e270 <USBD_LL_Init+0x94>)
 800e23c:	f7f5 fc69 	bl	8003b12 <HAL_PCD_Init>
 800e240:	4603      	mov	r3, r0
 800e242:	2b00      	cmp	r3, #0
 800e244:	d001      	beq.n	800e24a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e246:	f7f3 fa6d 	bl	8001724 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e24a:	2180      	movs	r1, #128	@ 0x80
 800e24c:	4808      	ldr	r0, [pc, #32]	@ (800e270 <USBD_LL_Init+0x94>)
 800e24e:	f7f6 fec8 	bl	8004fe2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e252:	2240      	movs	r2, #64	@ 0x40
 800e254:	2100      	movs	r1, #0
 800e256:	4806      	ldr	r0, [pc, #24]	@ (800e270 <USBD_LL_Init+0x94>)
 800e258:	f7f6 fe7c 	bl	8004f54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e25c:	2280      	movs	r2, #128	@ 0x80
 800e25e:	2101      	movs	r1, #1
 800e260:	4803      	ldr	r0, [pc, #12]	@ (800e270 <USBD_LL_Init+0x94>)
 800e262:	f7f6 fe77 	bl	8004f54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e266:	2300      	movs	r3, #0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3708      	adds	r7, #8
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}
 800e270:	20005ae4 	.word	0x20005ae4

0800e274 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b084      	sub	sp, #16
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e280:	2300      	movs	r3, #0
 800e282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7f5 fd57 	bl	8003d3e <HAL_PCD_Start>
 800e290:	4603      	mov	r3, r0
 800e292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e294:	7bfb      	ldrb	r3, [r7, #15]
 800e296:	4618      	mov	r0, r3
 800e298:	f000 f990 	bl	800e5bc <USBD_Get_USB_Status>
 800e29c:	4603      	mov	r3, r0
 800e29e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3710      	adds	r7, #16
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b084      	sub	sp, #16
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	4608      	mov	r0, r1
 800e2b4:	4611      	mov	r1, r2
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	70fb      	strb	r3, [r7, #3]
 800e2bc:	460b      	mov	r3, r1
 800e2be:	70bb      	strb	r3, [r7, #2]
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e2d2:	78bb      	ldrb	r3, [r7, #2]
 800e2d4:	883a      	ldrh	r2, [r7, #0]
 800e2d6:	78f9      	ldrb	r1, [r7, #3]
 800e2d8:	f7f6 fa58 	bl	800478c <HAL_PCD_EP_Open>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2e0:	7bfb      	ldrb	r3, [r7, #15]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f000 f96a 	bl	800e5bc <USBD_Get_USB_Status>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b084      	sub	sp, #16
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	460b      	mov	r3, r1
 800e300:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e302:	2300      	movs	r3, #0
 800e304:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e306:	2300      	movs	r3, #0
 800e308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e310:	78fa      	ldrb	r2, [r7, #3]
 800e312:	4611      	mov	r1, r2
 800e314:	4618      	mov	r0, r3
 800e316:	f7f6 faa1 	bl	800485c <HAL_PCD_EP_Close>
 800e31a:	4603      	mov	r3, r0
 800e31c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e31e:	7bfb      	ldrb	r3, [r7, #15]
 800e320:	4618      	mov	r0, r3
 800e322:	f000 f94b 	bl	800e5bc <USBD_Get_USB_Status>
 800e326:	4603      	mov	r3, r0
 800e328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e32a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	460b      	mov	r3, r1
 800e33e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e340:	2300      	movs	r3, #0
 800e342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e344:	2300      	movs	r3, #0
 800e346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e34e:	78fa      	ldrb	r2, [r7, #3]
 800e350:	4611      	mov	r1, r2
 800e352:	4618      	mov	r0, r3
 800e354:	f7f6 fb59 	bl	8004a0a <HAL_PCD_EP_SetStall>
 800e358:	4603      	mov	r3, r0
 800e35a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e35c:	7bfb      	ldrb	r3, [r7, #15]
 800e35e:	4618      	mov	r0, r3
 800e360:	f000 f92c 	bl	800e5bc <USBD_Get_USB_Status>
 800e364:	4603      	mov	r3, r0
 800e366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e368:	7bbb      	ldrb	r3, [r7, #14]
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	b084      	sub	sp, #16
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
 800e37a:	460b      	mov	r3, r1
 800e37c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e37e:	2300      	movs	r3, #0
 800e380:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e382:	2300      	movs	r3, #0
 800e384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e38c:	78fa      	ldrb	r2, [r7, #3]
 800e38e:	4611      	mov	r1, r2
 800e390:	4618      	mov	r0, r3
 800e392:	f7f6 fb9d 	bl	8004ad0 <HAL_PCD_EP_ClrStall>
 800e396:	4603      	mov	r3, r0
 800e398:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e39a:	7bfb      	ldrb	r3, [r7, #15]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f000 f90d 	bl	800e5bc <USBD_Get_USB_Status>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3710      	adds	r7, #16
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e3c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	da0b      	bge.n	800e3e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e3cc:	78fb      	ldrb	r3, [r7, #3]
 800e3ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3d2:	68f9      	ldr	r1, [r7, #12]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	00db      	lsls	r3, r3, #3
 800e3d8:	4413      	add	r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	440b      	add	r3, r1
 800e3de:	3316      	adds	r3, #22
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	e00b      	b.n	800e3fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e3e4:	78fb      	ldrb	r3, [r7, #3]
 800e3e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3ea:	68f9      	ldr	r1, [r7, #12]
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	00db      	lsls	r3, r3, #3
 800e3f0:	4413      	add	r3, r2
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	440b      	add	r3, r1
 800e3f6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e3fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3714      	adds	r7, #20
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	460b      	mov	r3, r1
 800e412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e414:	2300      	movs	r3, #0
 800e416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e418:	2300      	movs	r3, #0
 800e41a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e422:	78fa      	ldrb	r2, [r7, #3]
 800e424:	4611      	mov	r1, r2
 800e426:	4618      	mov	r0, r3
 800e428:	f7f6 f98c 	bl	8004744 <HAL_PCD_SetAddress>
 800e42c:	4603      	mov	r3, r0
 800e42e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e430:	7bfb      	ldrb	r3, [r7, #15]
 800e432:	4618      	mov	r0, r3
 800e434:	f000 f8c2 	bl	800e5bc <USBD_Get_USB_Status>
 800e438:	4603      	mov	r3, r0
 800e43a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e43c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e446:	b580      	push	{r7, lr}
 800e448:	b086      	sub	sp, #24
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	60f8      	str	r0, [r7, #12]
 800e44e:	607a      	str	r2, [r7, #4]
 800e450:	603b      	str	r3, [r7, #0]
 800e452:	460b      	mov	r3, r1
 800e454:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e456:	2300      	movs	r3, #0
 800e458:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e45a:	2300      	movs	r3, #0
 800e45c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e464:	7af9      	ldrb	r1, [r7, #11]
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	f7f6 fa94 	bl	8004996 <HAL_PCD_EP_Transmit>
 800e46e:	4603      	mov	r3, r0
 800e470:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e472:	7dfb      	ldrb	r3, [r7, #23]
 800e474:	4618      	mov	r0, r3
 800e476:	f000 f8a1 	bl	800e5bc <USBD_Get_USB_Status>
 800e47a:	4603      	mov	r3, r0
 800e47c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e47e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e480:	4618      	mov	r0, r3
 800e482:	3718      	adds	r7, #24
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b086      	sub	sp, #24
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	607a      	str	r2, [r7, #4]
 800e492:	603b      	str	r3, [r7, #0]
 800e494:	460b      	mov	r3, r1
 800e496:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e498:	2300      	movs	r3, #0
 800e49a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e49c:	2300      	movs	r3, #0
 800e49e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e4a6:	7af9      	ldrb	r1, [r7, #11]
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	f7f6 fa20 	bl	80048f0 <HAL_PCD_EP_Receive>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4b4:	7dfb      	ldrb	r3, [r7, #23]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f000 f880 	bl	800e5bc <USBD_Get_USB_Status>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3718      	adds	r7, #24
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b082      	sub	sp, #8
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4dc:	78fa      	ldrb	r2, [r7, #3]
 800e4de:	4611      	mov	r1, r2
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7f6 fa40 	bl	8004966 <HAL_PCD_EP_GetRxCount>
 800e4e6:	4603      	mov	r3, r0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e4fc:	78fb      	ldrb	r3, [r7, #3]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d002      	beq.n	800e508 <HAL_PCDEx_LPM_Callback+0x18>
 800e502:	2b01      	cmp	r3, #1
 800e504:	d01f      	beq.n	800e546 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e506:	e03b      	b.n	800e580 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	7adb      	ldrb	r3, [r3, #11]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d007      	beq.n	800e520 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800e510:	f7f3 f88a 	bl	8001628 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e514:	4b1c      	ldr	r3, [pc, #112]	@ (800e588 <HAL_PCDEx_LPM_Callback+0x98>)
 800e516:	691b      	ldr	r3, [r3, #16]
 800e518:	4a1b      	ldr	r2, [pc, #108]	@ (800e588 <HAL_PCDEx_LPM_Callback+0x98>)
 800e51a:	f023 0306 	bic.w	r3, r3, #6
 800e51e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	6812      	ldr	r2, [r2, #0]
 800e52e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e532:	f023 0301 	bic.w	r3, r3, #1
 800e536:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fb ff21 	bl	800a386 <USBD_LL_Resume>
    break;
 800e544:	e01c      	b.n	800e580 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	6812      	ldr	r2, [r2, #0]
 800e554:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e558:	f043 0301 	orr.w	r3, r3, #1
 800e55c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e564:	4618      	mov	r0, r3
 800e566:	f7fb fef2 	bl	800a34e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	7adb      	ldrb	r3, [r3, #11]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d005      	beq.n	800e57e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e572:	4b05      	ldr	r3, [pc, #20]	@ (800e588 <HAL_PCDEx_LPM_Callback+0x98>)
 800e574:	691b      	ldr	r3, [r3, #16]
 800e576:	4a04      	ldr	r2, [pc, #16]	@ (800e588 <HAL_PCDEx_LPM_Callback+0x98>)
 800e578:	f043 0306 	orr.w	r3, r3, #6
 800e57c:	6113      	str	r3, [r2, #16]
    break;
 800e57e:	bf00      	nop
}
 800e580:	bf00      	nop
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	e000ed00 	.word	0xe000ed00

0800e58c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e594:	4b03      	ldr	r3, [pc, #12]	@ (800e5a4 <USBD_static_malloc+0x18>)
}
 800e596:	4618      	mov	r0, r3
 800e598:	370c      	adds	r7, #12
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	20005fc8 	.word	0x20005fc8

0800e5a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]

}
 800e5b0:	bf00      	nop
 800e5b2:	370c      	adds	r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr

0800e5bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b085      	sub	sp, #20
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e5ca:	79fb      	ldrb	r3, [r7, #7]
 800e5cc:	2b03      	cmp	r3, #3
 800e5ce:	d817      	bhi.n	800e600 <USBD_Get_USB_Status+0x44>
 800e5d0:	a201      	add	r2, pc, #4	@ (adr r2, 800e5d8 <USBD_Get_USB_Status+0x1c>)
 800e5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d6:	bf00      	nop
 800e5d8:	0800e5e9 	.word	0x0800e5e9
 800e5dc:	0800e5ef 	.word	0x0800e5ef
 800e5e0:	0800e5f5 	.word	0x0800e5f5
 800e5e4:	0800e5fb 	.word	0x0800e5fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e5ec:	e00b      	b.n	800e606 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e5ee:	2303      	movs	r3, #3
 800e5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800e5f2:	e008      	b.n	800e606 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e5f8:	e005      	b.n	800e606 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e5fa:	2303      	movs	r3, #3
 800e5fc:	73fb      	strb	r3, [r7, #15]
    break;
 800e5fe:	e002      	b.n	800e606 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e600:	2303      	movs	r3, #3
 800e602:	73fb      	strb	r3, [r7, #15]
    break;
 800e604:	bf00      	nop
  }
  return usb_status;
 800e606:	7bfb      	ldrb	r3, [r7, #15]
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3714      	adds	r7, #20
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <JogCmd_fromCharArray>:
		return cmd;
	}
	memcpy(&cmd, data, sizeof(MotorCmd));
	return cmd;
}
JogCmd JogCmd_fromCharArray(const uint8_t *data, size_t size) {
 800e614:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e616:	b08f      	sub	sp, #60	@ 0x3c
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
	JogCmd msg;
	if (size < sizeof(msg)) {
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b24      	cmp	r3, #36	@ 0x24
 800e624:	d81f      	bhi.n	800e666 <JogCmd_fromCharArray+0x52>
		// 返回一个默认初始化的结构体，这里简单地清零
		memset(&msg, 0, sizeof(msg));
 800e626:	f107 0310 	add.w	r3, r7, #16
 800e62a:	2225      	movs	r2, #37	@ 0x25
 800e62c:	2100      	movs	r1, #0
 800e62e:	4618      	mov	r0, r3
 800e630:	f002 fbf1 	bl	8010e16 <memset>
		return msg;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f107 0410 	add.w	r4, r7, #16
 800e63a:	469c      	mov	ip, r3
 800e63c:	f104 0e20 	add.w	lr, r4, #32
 800e640:	4665      	mov	r5, ip
 800e642:	4626      	mov	r6, r4
 800e644:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e646:	6028      	str	r0, [r5, #0]
 800e648:	6069      	str	r1, [r5, #4]
 800e64a:	60aa      	str	r2, [r5, #8]
 800e64c:	60eb      	str	r3, [r5, #12]
 800e64e:	3410      	adds	r4, #16
 800e650:	f10c 0c10 	add.w	ip, ip, #16
 800e654:	4574      	cmp	r4, lr
 800e656:	d1f3      	bne.n	800e640 <JogCmd_fromCharArray+0x2c>
 800e658:	4663      	mov	r3, ip
 800e65a:	4622      	mov	r2, r4
 800e65c:	6810      	ldr	r0, [r2, #0]
 800e65e:	6018      	str	r0, [r3, #0]
 800e660:	7912      	ldrb	r2, [r2, #4]
 800e662:	711a      	strb	r2, [r3, #4]
 800e664:	e02e      	b.n	800e6c4 <JogCmd_fromCharArray+0xb0>
	}
	memcpy(&msg, data, sizeof(JogCmd));
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	461c      	mov	r4, r3
 800e66a:	f107 0610 	add.w	r6, r7, #16
 800e66e:	f104 0c20 	add.w	ip, r4, #32
 800e672:	4635      	mov	r5, r6
 800e674:	4623      	mov	r3, r4
 800e676:	6818      	ldr	r0, [r3, #0]
 800e678:	6859      	ldr	r1, [r3, #4]
 800e67a:	689a      	ldr	r2, [r3, #8]
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e680:	3410      	adds	r4, #16
 800e682:	3610      	adds	r6, #16
 800e684:	4564      	cmp	r4, ip
 800e686:	d1f4      	bne.n	800e672 <JogCmd_fromCharArray+0x5e>
 800e688:	4633      	mov	r3, r6
 800e68a:	4622      	mov	r2, r4
 800e68c:	6810      	ldr	r0, [r2, #0]
 800e68e:	6018      	str	r0, [r3, #0]
 800e690:	7912      	ldrb	r2, [r2, #4]
 800e692:	711a      	strb	r2, [r3, #4]
	return msg;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f107 0410 	add.w	r4, r7, #16
 800e69a:	469c      	mov	ip, r3
 800e69c:	f104 0e20 	add.w	lr, r4, #32
 800e6a0:	4665      	mov	r5, ip
 800e6a2:	4626      	mov	r6, r4
 800e6a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e6a6:	6028      	str	r0, [r5, #0]
 800e6a8:	6069      	str	r1, [r5, #4]
 800e6aa:	60aa      	str	r2, [r5, #8]
 800e6ac:	60eb      	str	r3, [r5, #12]
 800e6ae:	3410      	adds	r4, #16
 800e6b0:	f10c 0c10 	add.w	ip, ip, #16
 800e6b4:	4574      	cmp	r4, lr
 800e6b6:	d1f3      	bne.n	800e6a0 <JogCmd_fromCharArray+0x8c>
 800e6b8:	4663      	mov	r3, ip
 800e6ba:	4622      	mov	r2, r4
 800e6bc:	6810      	ldr	r0, [r2, #0]
 800e6be:	6018      	str	r0, [r3, #0]
 800e6c0:	7912      	ldrb	r2, [r2, #4]
 800e6c2:	711a      	strb	r2, [r3, #4]
}
 800e6c4:	68f8      	ldr	r0, [r7, #12]
 800e6c6:	373c      	adds	r7, #60	@ 0x3c
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e6cc <Board_Init>:

#include "board.h"

Board board;

void Board_Init() {
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
//	GO_Config config2 = { 1, 0, -1 };
//	board.steer_motor = GO_Motor_Create(config2);
//	A1_Config config1 = { 0, 0, -1 };
//	board.roll_motor = A1_Motor_Create(config1);

	RE35_Config config3 = { 0, 4, 1, 0 };
 800e6d2:	4b2f      	ldr	r3, [pc, #188]	@ (800e790 <Board_Init+0xc4>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	60fb      	str	r3, [r7, #12]
	board.cable_motor = RE35_Motor_Create(config3);
 800e6d8:	68f8      	ldr	r0, [r7, #12]
 800e6da:	f000 fb61 	bl	800eda0 <RE35_Motor_Create>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	4a2c      	ldr	r2, [pc, #176]	@ (800e794 <Board_Init+0xc8>)
 800e6e2:	6093      	str	r3, [r2, #8]
	RE35_Config config4 = { 1, 8, 1, 5 };
 800e6e4:	4b2c      	ldr	r3, [pc, #176]	@ (800e798 <Board_Init+0xcc>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	60bb      	str	r3, [r7, #8]
	board.archor_motor = RE35_Motor_Create(config4);
 800e6ea:	68b8      	ldr	r0, [r7, #8]
 800e6ec:	f000 fb58 	bl	800eda0 <RE35_Motor_Create>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	4a28      	ldr	r2, [pc, #160]	@ (800e794 <Board_Init+0xc8>)
 800e6f4:	60d3      	str	r3, [r2, #12]
	GO_Config config2 = { 1, 0, -1 };
 800e6f6:	4a29      	ldr	r2, [pc, #164]	@ (800e79c <Board_Init+0xd0>)
 800e6f8:	1d3b      	adds	r3, r7, #4
 800e6fa:	6812      	ldr	r2, [r2, #0]
 800e6fc:	4611      	mov	r1, r2
 800e6fe:	8019      	strh	r1, [r3, #0]
 800e700:	3302      	adds	r3, #2
 800e702:	0c12      	lsrs	r2, r2, #16
 800e704:	701a      	strb	r2, [r3, #0]
	board.steer_motor = GO_Motor_Create(config2);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f001 f806 	bl	800f718 <GO_Motor_Create>
 800e70c:	4603      	mov	r3, r0
 800e70e:	4a21      	ldr	r2, [pc, #132]	@ (800e794 <Board_Init+0xc8>)
 800e710:	6053      	str	r3, [r2, #4]
	A1_Config config1 = { 0, 0, 1 };
 800e712:	2300      	movs	r3, #0
 800e714:	703b      	strb	r3, [r7, #0]
 800e716:	2300      	movs	r3, #0
 800e718:	707b      	strb	r3, [r7, #1]
 800e71a:	2301      	movs	r3, #1
 800e71c:	70bb      	strb	r3, [r7, #2]
	board.roll_motor = A1_Motor_Create(config1);
 800e71e:	6838      	ldr	r0, [r7, #0]
 800e720:	f000 fcd8 	bl	800f0d4 <A1_Motor_Create>
 800e724:	4603      	mov	r3, r0
 800e726:	4a1b      	ldr	r2, [pc, #108]	@ (800e794 <Board_Init+0xc8>)
 800e728:	6013      	str	r3, [r2, #0]

	RE35_Motor_Init(board.cable_motor, VEL_POS);
 800e72a:	4b1a      	ldr	r3, [pc, #104]	@ (800e794 <Board_Init+0xc8>)
 800e72c:	689b      	ldr	r3, [r3, #8]
 800e72e:	2105      	movs	r1, #5
 800e730:	4618      	mov	r0, r3
 800e732:	f000 fb50 	bl	800edd6 <RE35_Motor_Init>
	RE35_Motor_Init(board.archor_motor, VEL_POS);
 800e736:	4b17      	ldr	r3, [pc, #92]	@ (800e794 <Board_Init+0xc8>)
 800e738:	68db      	ldr	r3, [r3, #12]
 800e73a:	2105      	movs	r1, #5
 800e73c:	4618      	mov	r0, r3
 800e73e:	f000 fb4a 	bl	800edd6 <RE35_Motor_Init>
	GO_Motor_SetCmd(board.steer_motor, GO_MODE_W, 0, 0, 0);	//获取零位
 800e742:	4b14      	ldr	r3, [pc, #80]	@ (800e794 <Board_Init+0xc8>)
 800e744:	685b      	ldr	r3, [r3, #4]
 800e746:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 800e7a0 <Board_Init+0xd4>
 800e74a:	eddf 0a15 	vldr	s1, [pc, #84]	@ 800e7a0 <Board_Init+0xd4>
 800e74e:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800e7a0 <Board_Init+0xd4>
 800e752:	2102      	movs	r1, #2
 800e754:	4618      	mov	r0, r3
 800e756:	f001 f80b 	bl	800f770 <GO_Motor_SetCmd>
	GO_Motor_Send(board.steer_motor);
 800e75a:	4b0e      	ldr	r3, [pc, #56]	@ (800e794 <Board_Init+0xc8>)
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	4618      	mov	r0, r3
 800e760:	f001 f9b2 	bl	800fac8 <GO_Motor_Send>
	A1_Motor_SetCmd(board.roll_motor, A1_MODE_W, 0, 0, 0);	//获取零位
 800e764:	4b0b      	ldr	r3, [pc, #44]	@ (800e794 <Board_Init+0xc8>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 800e7a0 <Board_Init+0xd4>
 800e76c:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 800e7a0 <Board_Init+0xd4>
 800e770:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800e7a0 <Board_Init+0xd4>
 800e774:	2102      	movs	r1, #2
 800e776:	4618      	mov	r0, r3
 800e778:	f000 fcce 	bl	800f118 <A1_Motor_SetCmd>
	A1_Motor_Send(board.roll_motor);
 800e77c:	4b05      	ldr	r3, [pc, #20]	@ (800e794 <Board_Init+0xc8>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4618      	mov	r0, r3
 800e782:	f000 fe55 	bl	800f430 <A1_Motor_Send>
}
 800e786:	bf00      	nop
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	08014600 	.word	0x08014600
 800e794:	200061e8 	.word	0x200061e8
 800e798:	08014604 	.word	0x08014604
 800e79c:	08014608 	.word	0x08014608
 800e7a0:	00000000 	.word	0x00000000

0800e7a4 <BSP_Init>:
CAN_info CAN_port[2];

JogCmd temp_jog_cmd;
RobotFBData robot_fb_data;

void BSP_Init() {
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
	unitree_port[0].port = RS485_DIR1_GPIO_Port;  // A1 motor
 800e7aa:	4b2b      	ldr	r3, [pc, #172]	@ (800e858 <BSP_Init+0xb4>)
 800e7ac:	4a2b      	ldr	r2, [pc, #172]	@ (800e85c <BSP_Init+0xb8>)
 800e7ae:	601a      	str	r2, [r3, #0]
	unitree_port[0].pin = RS485_DIR1_Pin;
 800e7b0:	4b29      	ldr	r3, [pc, #164]	@ (800e858 <BSP_Init+0xb4>)
 800e7b2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e7b6:	809a      	strh	r2, [r3, #4]
	unitree_port[0].uart.handle = &huart1;
 800e7b8:	4b27      	ldr	r3, [pc, #156]	@ (800e858 <BSP_Init+0xb4>)
 800e7ba:	4a29      	ldr	r2, [pc, #164]	@ (800e860 <BSP_Init+0xbc>)
 800e7bc:	609a      	str	r2, [r3, #8]
	unitree_port[1].port = RS485_DIR2_GPIO_Port;  // GO motor
 800e7be:	4b26      	ldr	r3, [pc, #152]	@ (800e858 <BSP_Init+0xb4>)
 800e7c0:	4a28      	ldr	r2, [pc, #160]	@ (800e864 <BSP_Init+0xc0>)
 800e7c2:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	unitree_port[1].pin = RS485_DIR2_Pin;
 800e7c6:	4b24      	ldr	r3, [pc, #144]	@ (800e858 <BSP_Init+0xb4>)
 800e7c8:	2208      	movs	r2, #8
 800e7ca:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
	unitree_port[1].uart.handle = &huart6;
 800e7ce:	4b22      	ldr	r3, [pc, #136]	@ (800e858 <BSP_Init+0xb4>)
 800e7d0:	4a25      	ldr	r2, [pc, #148]	@ (800e868 <BSP_Init+0xc4>)
 800e7d2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	for (uint8_t i = 0; i < 2; ++i) {
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	71fb      	strb	r3, [r7, #7]
 800e7da:	e030      	b.n	800e83e <BSP_Init+0x9a>
		// 使能串口空闲中断
		__HAL_UART_ENABLE_IT(unitree_port[i].uart.handle, UART_IT_IDLE);
 800e7dc:	79fb      	ldrb	r3, [r7, #7]
 800e7de:	4a1e      	ldr	r2, [pc, #120]	@ (800e858 <BSP_Init+0xb4>)
 800e7e0:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800e7e4:	fb01 f303 	mul.w	r3, r1, r3
 800e7e8:	4413      	add	r3, r2
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	68da      	ldr	r2, [r3, #12]
 800e7f2:	79fb      	ldrb	r3, [r7, #7]
 800e7f4:	4918      	ldr	r1, [pc, #96]	@ (800e858 <BSP_Init+0xb4>)
 800e7f6:	f44f 7086 	mov.w	r0, #268	@ 0x10c
 800e7fa:	fb00 f303 	mul.w	r3, r0, r3
 800e7fe:	440b      	add	r3, r1
 800e800:	3308      	adds	r3, #8
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f042 0210 	orr.w	r2, r2, #16
 800e80a:	60da      	str	r2, [r3, #12]
		// 开启DMA接收
		HAL_UART_Receive_DMA(unitree_port[i].uart.handle, unitree_port[i].uart.rx_buff, UART_BUFFER_SIZE);
 800e80c:	79fb      	ldrb	r3, [r7, #7]
 800e80e:	4a12      	ldr	r2, [pc, #72]	@ (800e858 <BSP_Init+0xb4>)
 800e810:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800e814:	fb01 f303 	mul.w	r3, r1, r3
 800e818:	4413      	add	r3, r2
 800e81a:	3308      	adds	r3, #8
 800e81c:	6818      	ldr	r0, [r3, #0]
 800e81e:	79fb      	ldrb	r3, [r7, #7]
 800e820:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800e824:	fb02 f303 	mul.w	r3, r2, r3
 800e828:	3308      	adds	r3, #8
 800e82a:	4a0b      	ldr	r2, [pc, #44]	@ (800e858 <BSP_Init+0xb4>)
 800e82c:	4413      	add	r3, r2
 800e82e:	3304      	adds	r3, #4
 800e830:	22ff      	movs	r2, #255	@ 0xff
 800e832:	4619      	mov	r1, r3
 800e834:	f7f8 f8b6 	bl	80069a4 <HAL_UART_Receive_DMA>
	for (uint8_t i = 0; i < 2; ++i) {
 800e838:	79fb      	ldrb	r3, [r7, #7]
 800e83a:	3301      	adds	r3, #1
 800e83c:	71fb      	strb	r3, [r7, #7]
 800e83e:	79fb      	ldrb	r3, [r7, #7]
 800e840:	2b01      	cmp	r3, #1
 800e842:	d9cb      	bls.n	800e7dc <BSP_Init+0x38>
	}

	CAN_port[0].handle = &hcan1;
 800e844:	4b09      	ldr	r3, [pc, #36]	@ (800e86c <BSP_Init+0xc8>)
 800e846:	4a0a      	ldr	r2, [pc, #40]	@ (800e870 <BSP_Init+0xcc>)
 800e848:	601a      	str	r2, [r3, #0]
	CAN_port[1].handle = &hcan2;
 800e84a:	4b08      	ldr	r3, [pc, #32]	@ (800e86c <BSP_Init+0xc8>)
 800e84c:	4a09      	ldr	r2, [pc, #36]	@ (800e874 <BSP_Init+0xd0>)
 800e84e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e850:	bf00      	nop
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	200061f8 	.word	0x200061f8
 800e85c:	40020800 	.word	0x40020800
 800e860:	2000069c 	.word	0x2000069c
 800e864:	40020400 	.word	0x40020400
 800e868:	200006e4 	.word	0x200006e4
 800e86c:	20006410 	.word	0x20006410
 800e870:	20000300 	.word	0x20000300
 800e874:	20000328 	.word	0x20000328

0800e878 <RS485_Send_DMA>:
	if (HAL_UART_Transmit(unitree_port[ind].uart.handle, data, size, timeout) != HAL_OK)  // 判断是否发送正常，如果出现异常则进入异常中断函数
		Error_Handler();
//	HAL_GPIO_WritePin(unitree_port[ind].port, unitree_port[ind].pin, GPIO_PIN_RESET);
}

void RS485_Send_DMA(uint8_t ind, const uint8_t *data, uint16_t size) {
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	4603      	mov	r3, r0
 800e880:	6039      	str	r1, [r7, #0]
 800e882:	71fb      	strb	r3, [r7, #7]
 800e884:	4613      	mov	r3, r2
 800e886:	80bb      	strh	r3, [r7, #4]
	// 串口1有板载485芯片，需要自己控制数据流向，发送时需要将控制口SET；串口6外接TTL转485模块，自动控制数据流向，无需SET。
	// 为保证代码一致性和美观性，以下代码中二者不做区分
	HAL_GPIO_WritePin(unitree_port[ind].port, unitree_port[ind].pin, GPIO_PIN_SET);
 800e888:	79fb      	ldrb	r3, [r7, #7]
 800e88a:	4a28      	ldr	r2, [pc, #160]	@ (800e92c <RS485_Send_DMA+0xb4>)
 800e88c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800e890:	fb01 f303 	mul.w	r3, r1, r3
 800e894:	4413      	add	r3, r2
 800e896:	6818      	ldr	r0, [r3, #0]
 800e898:	79fb      	ldrb	r3, [r7, #7]
 800e89a:	4a24      	ldr	r2, [pc, #144]	@ (800e92c <RS485_Send_DMA+0xb4>)
 800e89c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800e8a0:	fb01 f303 	mul.w	r3, r1, r3
 800e8a4:	4413      	add	r3, r2
 800e8a6:	3304      	adds	r3, #4
 800e8a8:	881b      	ldrh	r3, [r3, #0]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	f7f5 f8fd 	bl	8003aac <HAL_GPIO_WritePin>
	if (HAL_UART_Transmit_DMA(unitree_port[ind].uart.handle, data, size) != HAL_OK)  // 判断是否发送正常，如果出现异常则进入异常中断函数
 800e8b2:	79fb      	ldrb	r3, [r7, #7]
 800e8b4:	4a1d      	ldr	r2, [pc, #116]	@ (800e92c <RS485_Send_DMA+0xb4>)
 800e8b6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800e8ba:	fb01 f303 	mul.w	r3, r1, r3
 800e8be:	4413      	add	r3, r2
 800e8c0:	3308      	adds	r3, #8
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	88ba      	ldrh	r2, [r7, #4]
 800e8c6:	6839      	ldr	r1, [r7, #0]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7f7 fffb 	bl	80068c4 <HAL_UART_Transmit_DMA>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d001      	beq.n	800e8d8 <RS485_Send_DMA+0x60>
		Error_Handler();
 800e8d4:	f7f2 ff26 	bl	8001724 <Error_Handler>
	while (__HAL_UART_GET_FLAG(unitree_port[ind].uart.handle, UART_FLAG_TC) != SET) {
 800e8d8:	bf00      	nop
 800e8da:	79fb      	ldrb	r3, [r7, #7]
 800e8dc:	4a13      	ldr	r2, [pc, #76]	@ (800e92c <RS485_Send_DMA+0xb4>)
 800e8de:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800e8e2:	fb01 f303 	mul.w	r3, r1, r3
 800e8e6:	4413      	add	r3, r2
 800e8e8:	3308      	adds	r3, #8
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8f4:	2b40      	cmp	r3, #64	@ 0x40
 800e8f6:	d1f0      	bne.n	800e8da <RS485_Send_DMA+0x62>
	}  // 等待数据发送完成
	HAL_GPIO_WritePin(unitree_port[ind].port, unitree_port[ind].pin, GPIO_PIN_RESET);
 800e8f8:	79fb      	ldrb	r3, [r7, #7]
 800e8fa:	4a0c      	ldr	r2, [pc, #48]	@ (800e92c <RS485_Send_DMA+0xb4>)
 800e8fc:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800e900:	fb01 f303 	mul.w	r3, r1, r3
 800e904:	4413      	add	r3, r2
 800e906:	6818      	ldr	r0, [r3, #0]
 800e908:	79fb      	ldrb	r3, [r7, #7]
 800e90a:	4a08      	ldr	r2, [pc, #32]	@ (800e92c <RS485_Send_DMA+0xb4>)
 800e90c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800e910:	fb01 f303 	mul.w	r3, r1, r3
 800e914:	4413      	add	r3, r2
 800e916:	3304      	adds	r3, #4
 800e918:	881b      	ldrh	r3, [r3, #0]
 800e91a:	2200      	movs	r2, #0
 800e91c:	4619      	mov	r1, r3
 800e91e:	f7f5 f8c5 	bl	8003aac <HAL_GPIO_WritePin>
}
 800e922:	bf00      	nop
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	200061f8 	.word	0x200061f8

0800e930 <USER_UART_IRQHandler>:

/* 放在"stm32f4xx_it.c"里形如"void USART2_IRQHandler(void)"类的函数中，只要用了DMA接收的串口都放 */
void USER_UART_IRQHandler(UART_HandleTypeDef *huart) {
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
	// 判断是否进入空闲中断
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET) {
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f003 0310 	and.w	r3, r3, #16
 800e942:	2b10      	cmp	r3, #16
 800e944:	d138      	bne.n	800e9b8 <USER_UART_IRQHandler+0x88>
		__HAL_UART_CLEAR_IDLEFLAG(huart);  // 清楚空闲中断标志
 800e946:	2300      	movs	r3, #0
 800e948:	60bb      	str	r3, [r7, #8]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	60bb      	str	r3, [r7, #8]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	60bb      	str	r3, [r7, #8]
 800e95a:	68bb      	ldr	r3, [r7, #8]
		HAL_UART_DMAStop(huart);           // 暂停本次DMA传输，进行数据处理
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f7f8 f846 	bl	80069ee <HAL_UART_DMAStop>
		uint8_t data_length = UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);  // 计算接收到的数据长度
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	43db      	mvns	r3, r3
 800e96e:	73fb      	strb	r3, [r7, #15]
		// 数据处理回调函数
		if (huart == unitree_port[0].uart.handle) {
 800e970:	4b13      	ldr	r3, [pc, #76]	@ (800e9c0 <USER_UART_IRQHandler+0x90>)
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	429a      	cmp	r2, r3
 800e978:	d10c      	bne.n	800e994 <USER_UART_IRQHandler+0x64>
			A1_Motor_RecvData_Process(board.roll_motor, unitree_port[0].uart.rx_buff, data_length);
 800e97a:	4b12      	ldr	r3, [pc, #72]	@ (800e9c4 <USER_UART_IRQHandler+0x94>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	7bfa      	ldrb	r2, [r7, #15]
 800e980:	4911      	ldr	r1, [pc, #68]	@ (800e9c8 <USER_UART_IRQHandler+0x98>)
 800e982:	4618      	mov	r0, r3
 800e984:	f000 fe1c 	bl	800f5c0 <A1_Motor_RecvData_Process>
			HAL_UART_Receive_DMA(huart, unitree_port[0].uart.rx_buff, UART_BUFFER_SIZE);  // 重启DMA接收
 800e988:	22ff      	movs	r2, #255	@ 0xff
 800e98a:	490f      	ldr	r1, [pc, #60]	@ (800e9c8 <USER_UART_IRQHandler+0x98>)
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f7f8 f809 	bl	80069a4 <HAL_UART_Receive_DMA>
		} else if (huart == unitree_port[1].uart.handle) {
			GO_Motor_RecvData_Process(board.steer_motor, unitree_port[1].uart.rx_buff, data_length);
			HAL_UART_Receive_DMA(huart, unitree_port[1].uart.rx_buff, UART_BUFFER_SIZE);  // 重启DMA接收
		}
	}
}
 800e992:	e011      	b.n	800e9b8 <USER_UART_IRQHandler+0x88>
		} else if (huart == unitree_port[1].uart.handle) {
 800e994:	4b0a      	ldr	r3, [pc, #40]	@ (800e9c0 <USER_UART_IRQHandler+0x90>)
 800e996:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800e99a:	687a      	ldr	r2, [r7, #4]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d10b      	bne.n	800e9b8 <USER_UART_IRQHandler+0x88>
			GO_Motor_RecvData_Process(board.steer_motor, unitree_port[1].uart.rx_buff, data_length);
 800e9a0:	4b08      	ldr	r3, [pc, #32]	@ (800e9c4 <USER_UART_IRQHandler+0x94>)
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	7bfa      	ldrb	r2, [r7, #15]
 800e9a6:	4909      	ldr	r1, [pc, #36]	@ (800e9cc <USER_UART_IRQHandler+0x9c>)
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f001 f953 	bl	800fc54 <GO_Motor_RecvData_Process>
			HAL_UART_Receive_DMA(huart, unitree_port[1].uart.rx_buff, UART_BUFFER_SIZE);  // 重启DMA接收
 800e9ae:	22ff      	movs	r2, #255	@ 0xff
 800e9b0:	4906      	ldr	r1, [pc, #24]	@ (800e9cc <USER_UART_IRQHandler+0x9c>)
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f7f7 fff6 	bl	80069a4 <HAL_UART_Receive_DMA>
}
 800e9b8:	bf00      	nop
 800e9ba:	3710      	adds	r7, #16
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	200061f8 	.word	0x200061f8
 800e9c4:	200061e8 	.word	0x200061e8
 800e9c8:	20006204 	.word	0x20006204
 800e9cc:	20006310 	.word	0x20006310

0800e9d0 <CAN_Filter_Init>:

/* CAN过滤器初始化 */
void CAN_Filter_Init() {
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b08a      	sub	sp, #40	@ 0x28
 800e9d4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef fcan = { 0 };
 800e9d6:	463b      	mov	r3, r7
 800e9d8:	2228      	movs	r2, #40	@ 0x28
 800e9da:	2100      	movs	r1, #0
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f002 fa1a 	bl	8010e16 <memset>

	fcan.FilterBank = 0;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	617b      	str	r3, [r7, #20]
	fcan.FilterMode = CAN_FILTERMODE_IDMASK;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	61bb      	str	r3, [r7, #24]
	fcan.FilterScale = CAN_FILTERSCALE_32BIT;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	61fb      	str	r3, [r7, #28]
	fcan.FilterIdHigh = 0;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	603b      	str	r3, [r7, #0]
	fcan.FilterIdLow = 0;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	607b      	str	r3, [r7, #4]
	fcan.FilterMaskIdHigh = 0;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	60bb      	str	r3, [r7, #8]
	fcan.FilterMaskIdLow = 0;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	60fb      	str	r3, [r7, #12]
	fcan.FilterFIFOAssignment = CAN_RX_FIFO0;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	613b      	str	r3, [r7, #16]
	fcan.FilterActivation = ENABLE;
 800ea02:	2301      	movs	r3, #1
 800ea04:	623b      	str	r3, [r7, #32]
	fcan.SlaveStartFilterBank = 0;
 800ea06:	2300      	movs	r3, #0
 800ea08:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &fcan) != HAL_OK)
 800ea0a:	463b      	mov	r3, r7
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	481c      	ldr	r0, [pc, #112]	@ (800ea80 <CAN_Filter_Init+0xb0>)
 800ea10:	f7f3 fc68 	bl	80022e4 <HAL_CAN_ConfigFilter>
 800ea14:	4603      	mov	r3, r0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d001      	beq.n	800ea1e <CAN_Filter_Init+0x4e>
		Error_Handler();
 800ea1a:	f7f2 fe83 	bl	8001724 <Error_Handler>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800ea1e:	2102      	movs	r1, #2
 800ea20:	4817      	ldr	r0, [pc, #92]	@ (800ea80 <CAN_Filter_Init+0xb0>)
 800ea22:	f7f3 ff75 	bl	8002910 <HAL_CAN_ActivateNotification>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <CAN_Filter_Init+0x60>
		Error_Handler();
 800ea2c:	f7f2 fe7a 	bl	8001724 <Error_Handler>
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800ea30:	4813      	ldr	r0, [pc, #76]	@ (800ea80 <CAN_Filter_Init+0xb0>)
 800ea32:	f7f3 fd37 	bl	80024a4 <HAL_CAN_Start>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d001      	beq.n	800ea40 <CAN_Filter_Init+0x70>
		Error_Handler();
 800ea3c:	f7f2 fe72 	bl	8001724 <Error_Handler>

	if (HAL_CAN_ConfigFilter(&hcan2, &fcan) != HAL_OK)
 800ea40:	463b      	mov	r3, r7
 800ea42:	4619      	mov	r1, r3
 800ea44:	480f      	ldr	r0, [pc, #60]	@ (800ea84 <CAN_Filter_Init+0xb4>)
 800ea46:	f7f3 fc4d 	bl	80022e4 <HAL_CAN_ConfigFilter>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d001      	beq.n	800ea54 <CAN_Filter_Init+0x84>
		Error_Handler();
 800ea50:	f7f2 fe68 	bl	8001724 <Error_Handler>
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800ea54:	2102      	movs	r1, #2
 800ea56:	480b      	ldr	r0, [pc, #44]	@ (800ea84 <CAN_Filter_Init+0xb4>)
 800ea58:	f7f3 ff5a 	bl	8002910 <HAL_CAN_ActivateNotification>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d001      	beq.n	800ea66 <CAN_Filter_Init+0x96>
		Error_Handler();
 800ea62:	f7f2 fe5f 	bl	8001724 <Error_Handler>
	if (HAL_CAN_Start(&hcan2) != HAL_OK)
 800ea66:	4807      	ldr	r0, [pc, #28]	@ (800ea84 <CAN_Filter_Init+0xb4>)
 800ea68:	f7f3 fd1c 	bl	80024a4 <HAL_CAN_Start>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d001      	beq.n	800ea76 <CAN_Filter_Init+0xa6>
		Error_Handler();
 800ea72:	f7f2 fe57 	bl	8001724 <Error_Handler>
}
 800ea76:	bf00      	nop
 800ea78:	3728      	adds	r7, #40	@ 0x28
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	20000300 	.word	0x20000300
 800ea84:	20000328 	.word	0x20000328

0800ea88 <CAN_Send_Msg>:

/* CAN发送数据函数 */
void CAN_Send_Msg(uint8_t can_ind, uint8_t id, uint8_t *msg, uint8_t len) {
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	603a      	str	r2, [r7, #0]
 800ea90:	461a      	mov	r2, r3
 800ea92:	4603      	mov	r3, r0
 800ea94:	71fb      	strb	r3, [r7, #7]
 800ea96:	460b      	mov	r3, r1
 800ea98:	71bb      	strb	r3, [r7, #6]
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	717b      	strb	r3, [r7, #5]
	CAN_port[can_ind].TxHeader.StdId = id;
 800ea9e:	79fa      	ldrb	r2, [r7, #7]
 800eaa0:	79b9      	ldrb	r1, [r7, #6]
 800eaa2:	4842      	ldr	r0, [pc, #264]	@ (800ebac <CAN_Send_Msg+0x124>)
 800eaa4:	4613      	mov	r3, r2
 800eaa6:	00db      	lsls	r3, r3, #3
 800eaa8:	1a9b      	subs	r3, r3, r2
 800eaaa:	00db      	lsls	r3, r3, #3
 800eaac:	4403      	add	r3, r0
 800eaae:	3304      	adds	r3, #4
 800eab0:	6019      	str	r1, [r3, #0]
	CAN_port[can_ind].TxHeader.ExtId = 0;
 800eab2:	79fa      	ldrb	r2, [r7, #7]
 800eab4:	493d      	ldr	r1, [pc, #244]	@ (800ebac <CAN_Send_Msg+0x124>)
 800eab6:	4613      	mov	r3, r2
 800eab8:	00db      	lsls	r3, r3, #3
 800eaba:	1a9b      	subs	r3, r3, r2
 800eabc:	00db      	lsls	r3, r3, #3
 800eabe:	440b      	add	r3, r1
 800eac0:	3308      	adds	r3, #8
 800eac2:	2200      	movs	r2, #0
 800eac4:	601a      	str	r2, [r3, #0]
	CAN_port[can_ind].TxHeader.IDE = CAN_ID_STD;
 800eac6:	79fa      	ldrb	r2, [r7, #7]
 800eac8:	4938      	ldr	r1, [pc, #224]	@ (800ebac <CAN_Send_Msg+0x124>)
 800eaca:	4613      	mov	r3, r2
 800eacc:	00db      	lsls	r3, r3, #3
 800eace:	1a9b      	subs	r3, r3, r2
 800ead0:	00db      	lsls	r3, r3, #3
 800ead2:	440b      	add	r3, r1
 800ead4:	330c      	adds	r3, #12
 800ead6:	2200      	movs	r2, #0
 800ead8:	601a      	str	r2, [r3, #0]
	CAN_port[can_ind].TxHeader.RTR = CAN_RTR_DATA;
 800eada:	79fa      	ldrb	r2, [r7, #7]
 800eadc:	4933      	ldr	r1, [pc, #204]	@ (800ebac <CAN_Send_Msg+0x124>)
 800eade:	4613      	mov	r3, r2
 800eae0:	00db      	lsls	r3, r3, #3
 800eae2:	1a9b      	subs	r3, r3, r2
 800eae4:	00db      	lsls	r3, r3, #3
 800eae6:	440b      	add	r3, r1
 800eae8:	3310      	adds	r3, #16
 800eaea:	2200      	movs	r2, #0
 800eaec:	601a      	str	r2, [r3, #0]
	CAN_port[can_ind].TxHeader.DLC = len;
 800eaee:	79fa      	ldrb	r2, [r7, #7]
 800eaf0:	7979      	ldrb	r1, [r7, #5]
 800eaf2:	482e      	ldr	r0, [pc, #184]	@ (800ebac <CAN_Send_Msg+0x124>)
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	00db      	lsls	r3, r3, #3
 800eaf8:	1a9b      	subs	r3, r3, r2
 800eafa:	00db      	lsls	r3, r3, #3
 800eafc:	4403      	add	r3, r0
 800eafe:	3314      	adds	r3, #20
 800eb00:	6019      	str	r1, [r3, #0]
	CAN_port[can_ind].TxHeader.TransmitGlobalTime = DISABLE;
 800eb02:	79fa      	ldrb	r2, [r7, #7]
 800eb04:	4929      	ldr	r1, [pc, #164]	@ (800ebac <CAN_Send_Msg+0x124>)
 800eb06:	4613      	mov	r3, r2
 800eb08:	00db      	lsls	r3, r3, #3
 800eb0a:	1a9b      	subs	r3, r3, r2
 800eb0c:	00db      	lsls	r3, r3, #3
 800eb0e:	440b      	add	r3, r1
 800eb10:	3318      	adds	r3, #24
 800eb12:	2200      	movs	r2, #0
 800eb14:	701a      	strb	r2, [r3, #0]

	//	while(HAL_CAN_GetTxMailboxesFreeLevel(CAN_port[can_ind].handle) == 0) {}

	/*找到空的发送邮箱，把数据发送出去*/
	if (HAL_CAN_AddTxMessage(CAN_port[can_ind].handle, &CAN_port[can_ind].TxHeader, msg, (uint32_t*) CAN_TX_MAILBOX0)
 800eb16:	79fa      	ldrb	r2, [r7, #7]
 800eb18:	4924      	ldr	r1, [pc, #144]	@ (800ebac <CAN_Send_Msg+0x124>)
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	00db      	lsls	r3, r3, #3
 800eb1e:	1a9b      	subs	r3, r3, r2
 800eb20:	00db      	lsls	r3, r3, #3
 800eb22:	440b      	add	r3, r1
 800eb24:	6818      	ldr	r0, [r3, #0]
 800eb26:	79fa      	ldrb	r2, [r7, #7]
 800eb28:	4613      	mov	r3, r2
 800eb2a:	00db      	lsls	r3, r3, #3
 800eb2c:	1a9b      	subs	r3, r3, r2
 800eb2e:	00db      	lsls	r3, r3, #3
 800eb30:	4a1e      	ldr	r2, [pc, #120]	@ (800ebac <CAN_Send_Msg+0x124>)
 800eb32:	4413      	add	r3, r2
 800eb34:	1d19      	adds	r1, r3, #4
 800eb36:	2301      	movs	r3, #1
 800eb38:	683a      	ldr	r2, [r7, #0]
 800eb3a:	f7f3 fcf7 	bl	800252c <HAL_CAN_AddTxMessage>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d02f      	beq.n	800eba4 <CAN_Send_Msg+0x11c>
	        != HAL_OK) {
		if (HAL_CAN_AddTxMessage(CAN_port[can_ind].handle, &CAN_port[can_ind].TxHeader, msg,
 800eb44:	79fa      	ldrb	r2, [r7, #7]
 800eb46:	4919      	ldr	r1, [pc, #100]	@ (800ebac <CAN_Send_Msg+0x124>)
 800eb48:	4613      	mov	r3, r2
 800eb4a:	00db      	lsls	r3, r3, #3
 800eb4c:	1a9b      	subs	r3, r3, r2
 800eb4e:	00db      	lsls	r3, r3, #3
 800eb50:	440b      	add	r3, r1
 800eb52:	6818      	ldr	r0, [r3, #0]
 800eb54:	79fa      	ldrb	r2, [r7, #7]
 800eb56:	4613      	mov	r3, r2
 800eb58:	00db      	lsls	r3, r3, #3
 800eb5a:	1a9b      	subs	r3, r3, r2
 800eb5c:	00db      	lsls	r3, r3, #3
 800eb5e:	4a13      	ldr	r2, [pc, #76]	@ (800ebac <CAN_Send_Msg+0x124>)
 800eb60:	4413      	add	r3, r2
 800eb62:	1d19      	adds	r1, r3, #4
 800eb64:	2302      	movs	r3, #2
 800eb66:	683a      	ldr	r2, [r7, #0]
 800eb68:	f7f3 fce0 	bl	800252c <HAL_CAN_AddTxMessage>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d018      	beq.n	800eba4 <CAN_Send_Msg+0x11c>
		        (uint32_t*) CAN_TX_MAILBOX1) != HAL_OK) {
			if (HAL_CAN_AddTxMessage(CAN_port[can_ind].handle, &CAN_port[can_ind].TxHeader, msg,
 800eb72:	79fa      	ldrb	r2, [r7, #7]
 800eb74:	490d      	ldr	r1, [pc, #52]	@ (800ebac <CAN_Send_Msg+0x124>)
 800eb76:	4613      	mov	r3, r2
 800eb78:	00db      	lsls	r3, r3, #3
 800eb7a:	1a9b      	subs	r3, r3, r2
 800eb7c:	00db      	lsls	r3, r3, #3
 800eb7e:	440b      	add	r3, r1
 800eb80:	6818      	ldr	r0, [r3, #0]
 800eb82:	79fa      	ldrb	r2, [r7, #7]
 800eb84:	4613      	mov	r3, r2
 800eb86:	00db      	lsls	r3, r3, #3
 800eb88:	1a9b      	subs	r3, r3, r2
 800eb8a:	00db      	lsls	r3, r3, #3
 800eb8c:	4a07      	ldr	r2, [pc, #28]	@ (800ebac <CAN_Send_Msg+0x124>)
 800eb8e:	4413      	add	r3, r2
 800eb90:	1d19      	adds	r1, r3, #4
 800eb92:	2304      	movs	r3, #4
 800eb94:	683a      	ldr	r2, [r7, #0]
 800eb96:	f7f3 fcc9 	bl	800252c <HAL_CAN_AddTxMessage>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d001      	beq.n	800eba4 <CAN_Send_Msg+0x11c>
			        (uint32_t*) CAN_TX_MAILBOX2) != HAL_OK)
				Error_Handler();
 800eba0:	f7f2 fdc0 	bl	8001724 <Error_Handler>
		}
	}
}
 800eba4:	bf00      	nop
 800eba6:	3708      	adds	r7, #8
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	20006410 	.word	0x20006410

0800ebb0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* CAN接收中断回调函数 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
	uint8_t rxdata[8] = { 0 };
 800ebb8:	2300      	movs	r3, #0
 800ebba:	60bb      	str	r3, [r7, #8]
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	60fb      	str	r3, [r7, #12]
	if (hcan->Instance == CAN1) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a17      	ldr	r2, [pc, #92]	@ (800ec24 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d111      	bne.n	800ebee <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
		HAL_CAN_GetRxMessage(CAN_port[0].handle, CAN_RX_FIFO0, &CAN_port[0].RxHeader, rxdata);
 800ebca:	4b17      	ldr	r3, [pc, #92]	@ (800ec28 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800ebcc:	6818      	ldr	r0, [r3, #0]
 800ebce:	f107 0308 	add.w	r3, r7, #8
 800ebd2:	4a16      	ldr	r2, [pc, #88]	@ (800ec2c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	f7f3 fd79 	bl	80026cc <HAL_CAN_GetRxMessage>
		RE35_Motor_RecvData_Process(board.cable_motor, CAN_port[0].RxHeader.StdId, rxdata);
 800ebda:	4b15      	ldr	r3, [pc, #84]	@ (800ec30 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800ebdc:	689b      	ldr	r3, [r3, #8]
 800ebde:	4a12      	ldr	r2, [pc, #72]	@ (800ec28 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800ebe0:	69d1      	ldr	r1, [r2, #28]
 800ebe2:	f107 0208 	add.w	r2, r7, #8
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f000 f9de 	bl	800efa8 <RE35_Motor_RecvData_Process>
	} else if (hcan->Instance == CAN2) {
		HAL_CAN_GetRxMessage(CAN_port[1].handle, CAN_RX_FIFO0, &CAN_port[1].RxHeader, rxdata);
		RE35_Motor_RecvData_Process(board.archor_motor, CAN_port[1].RxHeader.StdId, rxdata);
	}
}
 800ebec:	e015      	b.n	800ec1a <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
	} else if (hcan->Instance == CAN2) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a10      	ldr	r2, [pc, #64]	@ (800ec34 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d110      	bne.n	800ec1a <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
		HAL_CAN_GetRxMessage(CAN_port[1].handle, CAN_RX_FIFO0, &CAN_port[1].RxHeader, rxdata);
 800ebf8:	4b0b      	ldr	r3, [pc, #44]	@ (800ec28 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800ebfa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ebfc:	f107 0308 	add.w	r3, r7, #8
 800ec00:	4a0d      	ldr	r2, [pc, #52]	@ (800ec38 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800ec02:	2100      	movs	r1, #0
 800ec04:	f7f3 fd62 	bl	80026cc <HAL_CAN_GetRxMessage>
		RE35_Motor_RecvData_Process(board.archor_motor, CAN_port[1].RxHeader.StdId, rxdata);
 800ec08:	4b09      	ldr	r3, [pc, #36]	@ (800ec30 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800ec0a:	68db      	ldr	r3, [r3, #12]
 800ec0c:	4a06      	ldr	r2, [pc, #24]	@ (800ec28 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800ec0e:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 800ec10:	f107 0208 	add.w	r2, r7, #8
 800ec14:	4618      	mov	r0, r3
 800ec16:	f000 f9c7 	bl	800efa8 <RE35_Motor_RecvData_Process>
}
 800ec1a:	bf00      	nop
 800ec1c:	3710      	adds	r7, #16
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	40006400 	.word	0x40006400
 800ec28:	20006410 	.word	0x20006410
 800ec2c:	2000642c 	.word	0x2000642c
 800ec30:	200061e8 	.word	0x200061e8
 800ec34:	40006800 	.word	0x40006800
 800ec38:	20006464 	.word	0x20006464

0800ec3c <CDC_Process_Recv_Data>:

/* 虚拟串口接收数据处理函数 */
void CDC_Process_Recv_Data(uint8_t *data, uint32_t Len) {
 800ec3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec3e:	b08d      	sub	sp, #52	@ 0x34
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ec44:	62b9      	str	r1, [r7, #40]	@ 0x28
	if (data[0] == ARCHOR_RESET) {
 800ec46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d103      	bne.n	800ec56 <CDC_Process_Recv_Data+0x1a>
		board.archor_motor->reset_flag = false;
 800ec4e:	4b15      	ldr	r3, [pc, #84]	@ (800eca4 <CDC_Process_Recv_Data+0x68>)
 800ec50:	68db      	ldr	r3, [r3, #12]
 800ec52:	2200      	movs	r2, #0
 800ec54:	761a      	strb	r2, [r3, #24]
	}
	temp_jog_cmd = JogCmd_fromCharArray(data, Len);
 800ec56:	4d14      	ldr	r5, [pc, #80]	@ (800eca8 <CDC_Process_Recv_Data+0x6c>)
 800ec58:	463b      	mov	r3, r7
 800ec5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7ff fcd8 	bl	800e614 <JogCmd_fromCharArray>
 800ec64:	463c      	mov	r4, r7
 800ec66:	462e      	mov	r6, r5
 800ec68:	f104 0c20 	add.w	ip, r4, #32
 800ec6c:	4635      	mov	r5, r6
 800ec6e:	4623      	mov	r3, r4
 800ec70:	6818      	ldr	r0, [r3, #0]
 800ec72:	6859      	ldr	r1, [r3, #4]
 800ec74:	689a      	ldr	r2, [r3, #8]
 800ec76:	68db      	ldr	r3, [r3, #12]
 800ec78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec7a:	3410      	adds	r4, #16
 800ec7c:	3610      	adds	r6, #16
 800ec7e:	4564      	cmp	r4, ip
 800ec80:	d1f4      	bne.n	800ec6c <CDC_Process_Recv_Data+0x30>
 800ec82:	4633      	mov	r3, r6
 800ec84:	4622      	mov	r2, r4
 800ec86:	6810      	ldr	r0, [r2, #0]
 800ec88:	6018      	str	r0, [r3, #0]
 800ec8a:	7912      	ldrb	r2, [r2, #4]
 800ec8c:	711a      	strb	r2, [r3, #4]
	osMessagePut(JogCmdQueueHandle, (uint32_t) &temp_jog_cmd, 0);
 800ec8e:	4b07      	ldr	r3, [pc, #28]	@ (800ecac <CDC_Process_Recv_Data+0x70>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4905      	ldr	r1, [pc, #20]	@ (800eca8 <CDC_Process_Recv_Data+0x6c>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fc fc7c 	bl	800b594 <osMessagePut>
}
 800ec9c:	bf00      	nop
 800ec9e:	3734      	adds	r7, #52	@ 0x34
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eca4:	200061e8 	.word	0x200061e8
 800eca8:	20006480 	.word	0x20006480
 800ecac:	20000360 	.word	0x20000360

0800ecb0 <Process_Cmd>:

void Process_Cmd(JogCmd *cmd) {
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
	RE35_Motor_SetCmd(board.cable_motor, cmd->cable_cmd.motor_mode, (int32_t) cmd->cable_cmd.vel,
 800ecb8:	4b37      	ldr	r3, [pc, #220]	@ (800ed98 <Process_Cmd+0xe8>)
 800ecba:	6898      	ldr	r0, [r3, #8]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	7859      	ldrb	r1, [r3, #1]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ecc6:	ee07 3a90 	vmov	s15, r3
 800ecca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	        (int32_t) cmd->cable_cmd.pos); //  接收的速度：RPM，接收的位置：qc
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 3006 	ldr.w	r3, [r3, #6]
	RE35_Motor_SetCmd(board.cable_motor, cmd->cable_cmd.motor_mode, (int32_t) cmd->cable_cmd.vel,
 800ecd4:	ee07 3a10 	vmov	s14, r3
 800ecd8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ecdc:	ee17 3a10 	vmov	r3, s14
 800ece0:	ee17 2a90 	vmov	r2, s15
 800ece4:	f000 f8ce 	bl	800ee84 <RE35_Motor_SetCmd>
	RE35_Motor_SetCmd(board.archor_motor, cmd->archor_cmd.motor_mode, (int32_t) cmd->archor_cmd.vel,
 800ece8:	4b2b      	ldr	r3, [pc, #172]	@ (800ed98 <Process_Cmd+0xe8>)
 800ecea:	68d8      	ldr	r0, [r3, #12]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	7a99      	ldrb	r1, [r3, #10]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800ecf6:	ee07 3a90 	vmov	s15, r3
 800ecfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	        (int32_t) cmd->archor_cmd.pos);  //  接收的速度：RPM，接收的位置：qc
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 300f 	ldr.w	r3, [r3, #15]
	RE35_Motor_SetCmd(board.archor_motor, cmd->archor_cmd.motor_mode, (int32_t) cmd->archor_cmd.vel,
 800ed04:	ee07 3a10 	vmov	s14, r3
 800ed08:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ed0c:	ee17 3a10 	vmov	r3, s14
 800ed10:	ee17 2a90 	vmov	r2, s15
 800ed14:	f000 f8b6 	bl	800ee84 <RE35_Motor_SetCmd>
	GO_Motor_SetCmd(board.steer_motor, cmd->steer_cmd.motor_mode, 0, cmd->steer_cmd.vel, cmd->steer_cmd.pos); //  接收的速度：rad/s，接收的位置：rad
 800ed18:	4b1f      	ldr	r3, [pc, #124]	@ (800ed98 <Process_Cmd+0xe8>)
 800ed1a:	685a      	ldr	r2, [r3, #4]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	7cd9      	ldrb	r1, [r3, #19]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6958      	ldr	r0, [r3, #20]
 800ed24:	4603      	mov	r3, r0
 800ed26:	4618      	mov	r0, r3
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	699b      	ldr	r3, [r3, #24]
 800ed2c:	ee01 3a10 	vmov	s2, r3
 800ed30:	ee00 0a90 	vmov	s1, r0
 800ed34:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800ed9c <Process_Cmd+0xec>
 800ed38:	4610      	mov	r0, r2
 800ed3a:	f000 fd19 	bl	800f770 <GO_Motor_SetCmd>
	A1_Motor_SetCmd(board.roll_motor, cmd->roll_cmd.motor_mode, 0, cmd->roll_cmd.vel, cmd->roll_cmd.pos); //  接收的速度：rad/s，接收的位置：rad
 800ed3e:	4b16      	ldr	r3, [pc, #88]	@ (800ed98 <Process_Cmd+0xe8>)
 800ed40:	681a      	ldr	r2, [r3, #0]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	7f19      	ldrb	r1, [r3, #28]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f8d3 001d 	ldr.w	r0, [r3, #29]
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	4618      	mov	r0, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 3021 	ldr.w	r3, [r3, #33]	@ 0x21
 800ed56:	ee01 3a10 	vmov	s2, r3
 800ed5a:	ee00 0a90 	vmov	s1, r0
 800ed5e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800ed9c <Process_Cmd+0xec>
 800ed62:	4610      	mov	r0, r2
 800ed64:	f000 f9d8 	bl	800f118 <A1_Motor_SetCmd>

	RE35_Motor_Send(board.cable_motor);
 800ed68:	4b0b      	ldr	r3, [pc, #44]	@ (800ed98 <Process_Cmd+0xe8>)
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f000 f90a 	bl	800ef86 <RE35_Motor_Send>
	RE35_Motor_Send(board.archor_motor);
 800ed72:	4b09      	ldr	r3, [pc, #36]	@ (800ed98 <Process_Cmd+0xe8>)
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	4618      	mov	r0, r3
 800ed78:	f000 f905 	bl	800ef86 <RE35_Motor_Send>
	GO_Motor_Send(board.steer_motor);
 800ed7c:	4b06      	ldr	r3, [pc, #24]	@ (800ed98 <Process_Cmd+0xe8>)
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	4618      	mov	r0, r3
 800ed82:	f000 fea1 	bl	800fac8 <GO_Motor_Send>
	A1_Motor_Send(board.roll_motor);
 800ed86:	4b04      	ldr	r3, [pc, #16]	@ (800ed98 <Process_Cmd+0xe8>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f000 fb50 	bl	800f430 <A1_Motor_Send>
}
 800ed90:	bf00      	nop
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	200061e8 	.word	0x200061e8
 800ed9c:	00000000 	.word	0x00000000

0800eda0 <RE35_Motor_Create>:
#define ENCODER_LINES_NUM 2000	// 编码器线数
#define PWM_LIM 5000	// pwm限制值
#define LEAD 5	// 丝杠导程（mm）
#define REEL_D 30	// 绕线轮直径（mm）

RE35_Motor* RE35_Motor_Create(RE35_Config config) {
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
	RE35_Motor *obj = (RE35_Motor*) malloc(sizeof(RE35_Motor));
 800eda8:	201c      	movs	r0, #28
 800edaa:	f000 ffed 	bl	800fd88 <malloc>
 800edae:	4603      	mov	r3, r0
 800edb0:	60fb      	str	r3, [r7, #12]
	if (obj == NULL) {
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d101      	bne.n	800edbc <RE35_Motor_Create+0x1c>
		// 如果内存分配失败，返回 NULL
		return NULL;
 800edb8:	2300      	movs	r3, #0
 800edba:	e008      	b.n	800edce <RE35_Motor_Create+0x2e>
	}
	memset(obj, 0, sizeof(RE35_Motor));
 800edbc:	221c      	movs	r2, #28
 800edbe:	2100      	movs	r1, #0
 800edc0:	68f8      	ldr	r0, [r7, #12]
 800edc2:	f002 f828 	bl	8010e16 <memset>

	obj->config = config;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	601a      	str	r2, [r3, #0]

	return obj;
 800edcc:	68fb      	ldr	r3, [r7, #12]
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <RE35_Motor_Init>:

void RE35_Motor_Init(RE35_Motor *obj, RE35_Run_Mode mode) {
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b084      	sub	sp, #16
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
 800edde:	460b      	mov	r3, r1
 800ede0:	70fb      	strb	r3, [r7, #3]
	obj->cmd.mode = mode;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	78fa      	ldrb	r2, [r7, #3]
 800ede6:	715a      	strb	r2, [r3, #5]

	// 发送复位指令
	obj->cmd.cmd_id = 0x000 | (obj->config.driver_id << 4);  // 复位指令（帧ID，由驱动器编号和功能序号决定）
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	785b      	ldrb	r3, [r3, #1]
 800edec:	011b      	lsls	r3, r3, #4
 800edee:	b2da      	uxtb	r2, r3
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	711a      	strb	r2, [r3, #4]
	for (uint8_t i = 0; i < 8; ++i)
 800edf4:	2300      	movs	r3, #0
 800edf6:	73fb      	strb	r3, [r7, #15]
 800edf8:	e007      	b.n	800ee0a <RE35_Motor_Init+0x34>
		obj->cmd.tx_data[i] = 0x55;
 800edfa:	7bfb      	ldrb	r3, [r7, #15]
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	4413      	add	r3, r2
 800ee00:	2255      	movs	r2, #85	@ 0x55
 800ee02:	719a      	strb	r2, [r3, #6]
	for (uint8_t i = 0; i < 8; ++i)
 800ee04:	7bfb      	ldrb	r3, [r7, #15]
 800ee06:	3301      	adds	r3, #1
 800ee08:	73fb      	strb	r3, [r7, #15]
 800ee0a:	7bfb      	ldrb	r3, [r7, #15]
 800ee0c:	2b07      	cmp	r3, #7
 800ee0e:	d9f4      	bls.n	800edfa <RE35_Motor_Init+0x24>
	RE35_Motor_Send(obj);
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 f8b8 	bl	800ef86 <RE35_Motor_Send>
	HAL_Delay(500);
 800ee16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ee1a:	f7f3 f943 	bl	80020a4 <HAL_Delay>

	if (mode != ZERO_RESET) {
 800ee1e:	78fb      	ldrb	r3, [r7, #3]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d02b      	beq.n	800ee7c <RE35_Motor_Init+0xa6>
		// 发送模式选择指令
		obj->cmd.cmd_id = 0x001 | (obj->config.driver_id << 4);   // 模式选择指令
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	785b      	ldrb	r3, [r3, #1]
 800ee28:	011b      	lsls	r3, r3, #4
 800ee2a:	b25b      	sxtb	r3, r3
 800ee2c:	f043 0301 	orr.w	r3, r3, #1
 800ee30:	b25b      	sxtb	r3, r3
 800ee32:	b2da      	uxtb	r2, r3
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	711a      	strb	r2, [r3, #4]
		obj->cmd.tx_data[0] = mode;  // 选择mode对应模式
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	78fa      	ldrb	r2, [r7, #3]
 800ee3c:	719a      	strb	r2, [r3, #6]
		RE35_Motor_Send(obj);
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 f8a1 	bl	800ef86 <RE35_Motor_Send>
		HAL_Delay(500);
 800ee44:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ee48:	f7f3 f92c 	bl	80020a4 <HAL_Delay>
		// 发送配置指令
		obj->cmd.cmd_id = 0x00A | (obj->config.driver_id << 4);  // 配置指令
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	785b      	ldrb	r3, [r3, #1]
 800ee50:	011b      	lsls	r3, r3, #4
 800ee52:	b25b      	sxtb	r3, r3
 800ee54:	f043 030a 	orr.w	r3, r3, #10
 800ee58:	b25b      	sxtb	r3, r3
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	711a      	strb	r2, [r3, #4]
		obj->cmd.tx_data[0] = 0x01;    // 以 1 毫秒为周期对外发送电流、速度、位置等信息
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2201      	movs	r2, #1
 800ee64:	719a      	strb	r2, [r3, #6]
		obj->cmd.tx_data[1] = obj->config.period;  // 以 period 毫秒为周期对外发送CTL1/CTL2的电平状态
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	78da      	ldrb	r2, [r3, #3]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	71da      	strb	r2, [r3, #7]
		RE35_Motor_Send(obj);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 f889 	bl	800ef86 <RE35_Motor_Send>
		HAL_Delay(500);
 800ee74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ee78:	f7f3 f914 	bl	80020a4 <HAL_Delay>
	}
}
 800ee7c:	bf00      	nop
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <RE35_Motor_SetCmd>:

void RE35_Motor_SetCmd(RE35_Motor *obj, RE35_Run_Mode mode, int32_t speed, int32_t angle) {
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b088      	sub	sp, #32
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	607a      	str	r2, [r7, #4]
 800ee8e:	603b      	str	r3, [r7, #0]
 800ee90:	460b      	mov	r3, r1
 800ee92:	72fb      	strb	r3, [r7, #11]
	if (obj->cmd.mode != mode)
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	795b      	ldrb	r3, [r3, #5]
 800ee98:	7afa      	ldrb	r2, [r7, #11]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d004      	beq.n	800eea8 <RE35_Motor_SetCmd+0x24>
		RE35_Motor_Init(obj, mode);
 800ee9e:	7afb      	ldrb	r3, [r7, #11]
 800eea0:	4619      	mov	r1, r3
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f7ff ff97 	bl	800edd6 <RE35_Motor_Init>

	switch (mode) {
 800eea8:	7afb      	ldrb	r3, [r7, #11]
 800eeaa:	2b03      	cmp	r3, #3
 800eeac:	d002      	beq.n	800eeb4 <RE35_Motor_SetCmd+0x30>
 800eeae:	2b05      	cmp	r3, #5
 800eeb0:	d030      	beq.n	800ef14 <RE35_Motor_SetCmd+0x90>
			obj->cmd.tx_data[5] = (uint8_t) ((temp_angle >> 16) & 0xff);
			obj->cmd.tx_data[6] = (uint8_t) ((temp_angle >> 8) & 0xff);
			obj->cmd.tx_data[7] = (uint8_t) (temp_angle & 0xff);
			break;
		default:
			break;
 800eeb2:	e064      	b.n	800ef7e <RE35_Motor_SetCmd+0xfa>
			int32_t temp_speed = speed * obj->config.dir;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800eeba:	461a      	mov	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	fb02 f303 	mul.w	r3, r2, r3
 800eec2:	617b      	str	r3, [r7, #20]
			obj->cmd.cmd_id = 0x004 | (obj->config.driver_id << 4);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	785b      	ldrb	r3, [r3, #1]
 800eec8:	011b      	lsls	r3, r3, #4
 800eeca:	b25b      	sxtb	r3, r3
 800eecc:	f043 0304 	orr.w	r3, r3, #4
 800eed0:	b25b      	sxtb	r3, r3
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	711a      	strb	r2, [r3, #4]
			obj->cmd.tx_data[0] = (uint8_t) ((PWM_LIM >> 8) & 0xff);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2213      	movs	r2, #19
 800eedc:	719a      	strb	r2, [r3, #6]
			obj->cmd.tx_data[1] = (uint8_t) (PWM_LIM & 0xff);
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2288      	movs	r2, #136	@ 0x88
 800eee2:	71da      	strb	r2, [r3, #7]
			obj->cmd.tx_data[2] = (uint8_t) ((temp_speed >> 8) & 0xff);
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	121b      	asrs	r3, r3, #8
 800eee8:	b2da      	uxtb	r2, r3
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	721a      	strb	r2, [r3, #8]
			obj->cmd.tx_data[3] = (uint8_t) (temp_speed & 0xff);
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	b2da      	uxtb	r2, r3
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	725a      	strb	r2, [r3, #9]
			for (uint8_t i = 4; i < 8; ++i)
 800eef6:	2304      	movs	r3, #4
 800eef8:	77fb      	strb	r3, [r7, #31]
 800eefa:	e007      	b.n	800ef0c <RE35_Motor_SetCmd+0x88>
				obj->cmd.tx_data[i] = 0x55;
 800eefc:	7ffb      	ldrb	r3, [r7, #31]
 800eefe:	68fa      	ldr	r2, [r7, #12]
 800ef00:	4413      	add	r3, r2
 800ef02:	2255      	movs	r2, #85	@ 0x55
 800ef04:	719a      	strb	r2, [r3, #6]
			for (uint8_t i = 4; i < 8; ++i)
 800ef06:	7ffb      	ldrb	r3, [r7, #31]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	77fb      	strb	r3, [r7, #31]
 800ef0c:	7ffb      	ldrb	r3, [r7, #31]
 800ef0e:	2b07      	cmp	r3, #7
 800ef10:	d9f4      	bls.n	800eefc <RE35_Motor_SetCmd+0x78>
			break;
 800ef12:	e034      	b.n	800ef7e <RE35_Motor_SetCmd+0xfa>
			int32_t temp_angle = angle * obj->config.dir;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	fb02 f303 	mul.w	r3, r2, r3
 800ef22:	61bb      	str	r3, [r7, #24]
			obj->cmd.cmd_id = 0x006 | (obj->config.driver_id << 4);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	785b      	ldrb	r3, [r3, #1]
 800ef28:	011b      	lsls	r3, r3, #4
 800ef2a:	b25b      	sxtb	r3, r3
 800ef2c:	f043 0306 	orr.w	r3, r3, #6
 800ef30:	b25b      	sxtb	r3, r3
 800ef32:	b2da      	uxtb	r2, r3
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	711a      	strb	r2, [r3, #4]
			obj->cmd.tx_data[0] = (uint8_t) ((PWM_LIM >> 8) & 0xff);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2213      	movs	r2, #19
 800ef3c:	719a      	strb	r2, [r3, #6]
			obj->cmd.tx_data[1] = (uint8_t) (PWM_LIM & 0xff);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2288      	movs	r2, #136	@ 0x88
 800ef42:	71da      	strb	r2, [r3, #7]
			obj->cmd.tx_data[2] = (uint8_t) ((speed >> 8) & 0xff);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	121b      	asrs	r3, r3, #8
 800ef48:	b2da      	uxtb	r2, r3
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	721a      	strb	r2, [r3, #8]
			obj->cmd.tx_data[3] = (uint8_t) (speed & 0xff);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	725a      	strb	r2, [r3, #9]
			obj->cmd.tx_data[4] = (uint8_t) ((temp_angle >> 24) & 0xff);
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	161b      	asrs	r3, r3, #24
 800ef5a:	b2da      	uxtb	r2, r3
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	729a      	strb	r2, [r3, #10]
			obj->cmd.tx_data[5] = (uint8_t) ((temp_angle >> 16) & 0xff);
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	141b      	asrs	r3, r3, #16
 800ef64:	b2da      	uxtb	r2, r3
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	72da      	strb	r2, [r3, #11]
			obj->cmd.tx_data[6] = (uint8_t) ((temp_angle >> 8) & 0xff);
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	121b      	asrs	r3, r3, #8
 800ef6e:	b2da      	uxtb	r2, r3
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	731a      	strb	r2, [r3, #12]
			obj->cmd.tx_data[7] = (uint8_t) (temp_angle & 0xff);
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	b2da      	uxtb	r2, r3
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	735a      	strb	r2, [r3, #13]
			break;
 800ef7c:	bf00      	nop
	}
}
 800ef7e:	bf00      	nop
 800ef80:	3720      	adds	r7, #32
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <RE35_Motor_Send>:

void RE35_Motor_Send(RE35_Motor *obj) {
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b082      	sub	sp, #8
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
	CAN_Send_Msg(obj->config.can_ind, obj->cmd.cmd_id, obj->cmd.tx_data, sizeof(obj->cmd.tx_data));
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	7818      	ldrb	r0, [r3, #0]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	7919      	ldrb	r1, [r3, #4]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	1d9a      	adds	r2, r3, #6
 800ef9a:	2308      	movs	r3, #8
 800ef9c:	f7ff fd74 	bl	800ea88 <CAN_Send_Msg>
}
 800efa0:	bf00      	nop
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <RE35_Motor_RecvData_Process>:

void RE35_Motor_RecvData_Process(RE35_Motor *obj, uint32_t recv_id, uint8_t *data) {
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b086      	sub	sp, #24
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	607a      	str	r2, [r7, #4]
	uint8_t temp_id = recv_id & 0x0f;
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	f003 030f 	and.w	r3, r3, #15
 800efbc:	75fb      	strb	r3, [r7, #23]

	if (temp_id == 0x0b) {
 800efbe:	7dfb      	ldrb	r3, [r7, #23]
 800efc0:	2b0b      	cmp	r3, #11
 800efc2:	d166      	bne.n	800f092 <RE35_Motor_RecvData_Process+0xea>
		// 接收到电流、速度、位置等信息
		uint8_t id = (recv_id - 0x0b) >> 4;
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	3b0b      	subs	r3, #11
 800efc8:	091b      	lsrs	r3, r3, #4
 800efca:	75bb      	strb	r3, [r7, #22]

		if (id <= 4) {
 800efcc:	7dbb      	ldrb	r3, [r7, #22]
 800efce:	2b04      	cmp	r3, #4
 800efd0:	d82f      	bhi.n	800f032 <RE35_Motor_RecvData_Process+0x8a>
			robot_fb_data.cable_fb_data.id = id;
 800efd2:	4a3f      	ldr	r2, [pc, #252]	@ (800f0d0 <RE35_Motor_RecvData_Process+0x128>)
 800efd4:	7dbb      	ldrb	r3, [r7, #22]
 800efd6:	7013      	strb	r3, [r2, #0]
			robot_fb_data.cable_fb_data.vel = (data[2] << 8) | data[3];
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	3302      	adds	r3, #2
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	021b      	lsls	r3, r3, #8
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	3203      	adds	r2, #3
 800efe4:	7812      	ldrb	r2, [r2, #0]
 800efe6:	4313      	orrs	r3, r2
 800efe8:	ee07 3a90 	vmov	s15, r3
 800efec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eff0:	4b37      	ldr	r3, [pc, #220]	@ (800f0d0 <RE35_Motor_RecvData_Process+0x128>)
 800eff2:	3301      	adds	r3, #1
 800eff4:	ee17 2a90 	vmov	r2, s15
 800eff8:	601a      	str	r2, [r3, #0]
			robot_fb_data.cable_fb_data.pos = (data[4] << 24) | (data[5] << 16) | (data[6] << 8) | data[7];
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	3304      	adds	r3, #4
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	061a      	lsls	r2, r3, #24
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	3305      	adds	r3, #5
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	041b      	lsls	r3, r3, #16
 800f00a:	431a      	orrs	r2, r3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	3306      	adds	r3, #6
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	021b      	lsls	r3, r3, #8
 800f014:	4313      	orrs	r3, r2
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	3207      	adds	r2, #7
 800f01a:	7812      	ldrb	r2, [r2, #0]
 800f01c:	4313      	orrs	r3, r2
 800f01e:	ee07 3a90 	vmov	s15, r3
 800f022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f026:	4b2a      	ldr	r3, [pc, #168]	@ (800f0d0 <RE35_Motor_RecvData_Process+0x128>)
 800f028:	3305      	adds	r3, #5
 800f02a:	ee17 2a90 	vmov	r2, s15
 800f02e:	601a      	str	r2, [r3, #0]
			RE35_Motor_SetCmd(obj, obj->cmd.mode, 0, 0);
			RE35_Motor_Send(obj);
			obj->reset_flag = true;
		}
	}
}
 800f030:	e04a      	b.n	800f0c8 <RE35_Motor_RecvData_Process+0x120>
			robot_fb_data.archor_fb_data.id = id;
 800f032:	4a27      	ldr	r2, [pc, #156]	@ (800f0d0 <RE35_Motor_RecvData_Process+0x128>)
 800f034:	7dbb      	ldrb	r3, [r7, #22]
 800f036:	7253      	strb	r3, [r2, #9]
			robot_fb_data.archor_fb_data.vel = (data[2] << 8) | data[3];
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	3302      	adds	r3, #2
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	021b      	lsls	r3, r3, #8
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	3203      	adds	r2, #3
 800f044:	7812      	ldrb	r2, [r2, #0]
 800f046:	4313      	orrs	r3, r2
 800f048:	ee07 3a90 	vmov	s15, r3
 800f04c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f050:	4b1f      	ldr	r3, [pc, #124]	@ (800f0d0 <RE35_Motor_RecvData_Process+0x128>)
 800f052:	330a      	adds	r3, #10
 800f054:	ee17 2a90 	vmov	r2, s15
 800f058:	601a      	str	r2, [r3, #0]
			robot_fb_data.archor_fb_data.pos = (data[4] << 24) | (data[5] << 16) | (data[6] << 8) | data[7];
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	3304      	adds	r3, #4
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	061a      	lsls	r2, r3, #24
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	3305      	adds	r3, #5
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	041b      	lsls	r3, r3, #16
 800f06a:	431a      	orrs	r2, r3
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	3306      	adds	r3, #6
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	021b      	lsls	r3, r3, #8
 800f074:	4313      	orrs	r3, r2
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	3207      	adds	r2, #7
 800f07a:	7812      	ldrb	r2, [r2, #0]
 800f07c:	4313      	orrs	r3, r2
 800f07e:	ee07 3a90 	vmov	s15, r3
 800f082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f086:	4b12      	ldr	r3, [pc, #72]	@ (800f0d0 <RE35_Motor_RecvData_Process+0x128>)
 800f088:	330e      	adds	r3, #14
 800f08a:	ee17 2a90 	vmov	r2, s15
 800f08e:	601a      	str	r2, [r3, #0]
}
 800f090:	e01a      	b.n	800f0c8 <RE35_Motor_RecvData_Process+0x120>
	} else if (temp_id == 0x0c && data[0] == 0x01) {
 800f092:	7dfb      	ldrb	r3, [r7, #23]
 800f094:	2b0c      	cmp	r3, #12
 800f096:	d117      	bne.n	800f0c8 <RE35_Motor_RecvData_Process+0x120>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d113      	bne.n	800f0c8 <RE35_Motor_RecvData_Process+0x120>
		if (obj->reset_flag == false) {
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	7e1b      	ldrb	r3, [r3, #24]
 800f0a4:	f083 0301 	eor.w	r3, r3, #1
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d00c      	beq.n	800f0c8 <RE35_Motor_RecvData_Process+0x120>
			RE35_Motor_SetCmd(obj, obj->cmd.mode, 0, 0);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	7959      	ldrb	r1, [r3, #5]
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f7ff fee4 	bl	800ee84 <RE35_Motor_SetCmd>
			RE35_Motor_Send(obj);
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f7ff ff62 	bl	800ef86 <RE35_Motor_Send>
			obj->reset_flag = true;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	761a      	strb	r2, [r3, #24]
}
 800f0c8:	bf00      	nop
 800f0ca:	3718      	adds	r7, #24
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	200064a8 	.word	0x200064a8

0800f0d4 <A1_Motor_Create>:
#include <string.h>

#define A1_REDUCTION_RATIO 9.1f
#define WHEEL_R 0.1175  // 轮胎半径（m）

A1_Motor* A1_Motor_Create(A1_Config config) {
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
	A1_Motor *obj = (A1_Motor*) malloc(sizeof(A1_Motor));
 800f0dc:	20a8      	movs	r0, #168	@ 0xa8
 800f0de:	f000 fe53 	bl	800fd88 <malloc>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	60fb      	str	r3, [r7, #12]
	if (obj == NULL) {
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d101      	bne.n	800f0f0 <A1_Motor_Create+0x1c>
		// 如果内存分配失败，返回 NULL
		return NULL;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	e00d      	b.n	800f10c <A1_Motor_Create+0x38>
	}
	memset(obj, 0, sizeof(A1_Motor));
 800f0f0:	22a8      	movs	r2, #168	@ 0xa8
 800f0f2:	2100      	movs	r1, #0
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f001 fe8e 	bl	8010e16 <memset>

	obj->config = config;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	1d3a      	adds	r2, r7, #4
 800f0fe:	6812      	ldr	r2, [r2, #0]
 800f100:	4611      	mov	r1, r2
 800f102:	8019      	strh	r1, [r3, #0]
 800f104:	3302      	adds	r3, #2
 800f106:	0c12      	lsrs	r2, r2, #16
 800f108:	701a      	strb	r2, [r3, #0]

	return obj;
 800f10a:	68fb      	ldr	r3, [r7, #12]
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3710      	adds	r7, #16
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	0000      	movs	r0, r0
	...

0800f118 <A1_Motor_SetCmd>:

void A1_Motor_SetCmd(A1_Motor *obj, A1_Ctrl_Mode mode, float T, float W, float Pos) {
 800f118:	b580      	push	{r7, lr}
 800f11a:	b086      	sub	sp, #24
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6178      	str	r0, [r7, #20]
 800f120:	460b      	mov	r3, r1
 800f122:	ed87 0a03 	vstr	s0, [r7, #12]
 800f126:	edc7 0a02 	vstr	s1, [r7, #8]
 800f12a:	ed87 1a01 	vstr	s2, [r7, #4]
 800f12e:	74fb      	strb	r3, [r7, #19]
	obj->motor_cmd.id = obj->config.id;
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	785b      	ldrb	r3, [r3, #1]
 800f134:	461a      	mov	r2, r3
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	switch (mode) {
 800f13c:	7cfb      	ldrb	r3, [r7, #19]
 800f13e:	2b04      	cmp	r3, #4
 800f140:	f200 80d5 	bhi.w	800f2ee <A1_Motor_SetCmd+0x1d6>
 800f144:	a201      	add	r2, pc, #4	@ (adr r2, 800f14c <A1_Motor_SetCmd+0x34>)
 800f146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f14a:	bf00      	nop
 800f14c:	0800f161 	.word	0x0800f161
 800f150:	0800f193 	.word	0x0800f193
 800f154:	0800f1c3 	.word	0x0800f1c3
 800f158:	0800f22d 	.word	0x0800f22d
 800f15c:	0800f281 	.word	0x0800f281
		case A1_MODE_STOP:
			obj->motor_cmd.mode = STOP;
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	2200      	movs	r2, #0
 800f164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
			obj->motor_cmd.K_P = 0;
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	f04f 0200 	mov.w	r2, #0
 800f16e:	679a      	str	r2, [r3, #120]	@ 0x78
			obj->motor_cmd.K_W = 0;
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	f04f 0200 	mov.w	r2, #0
 800f176:	67da      	str	r2, [r3, #124]	@ 0x7c
			obj->motor_cmd.T = 0;
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	f04f 0200 	mov.w	r2, #0
 800f17e:	66da      	str	r2, [r3, #108]	@ 0x6c
			obj->motor_cmd.W = 0;
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	f04f 0200 	mov.w	r2, #0
 800f186:	671a      	str	r2, [r3, #112]	@ 0x70
			obj->motor_cmd.Pos = 0;
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	f04f 0200 	mov.w	r2, #0
 800f18e:	675a      	str	r2, [r3, #116]	@ 0x74
			break;
 800f190:	e0ae      	b.n	800f2f0 <A1_Motor_SetCmd+0x1d8>
		case A1_MODE_T:
			obj->motor_cmd.mode = CLOSED_LOOP;
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	220a      	movs	r2, #10
 800f196:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
			obj->motor_cmd.K_P = 0;
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	f04f 0200 	mov.w	r2, #0
 800f1a0:	679a      	str	r2, [r3, #120]	@ 0x78
			obj->motor_cmd.K_W = 0;
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	f04f 0200 	mov.w	r2, #0
 800f1a8:	67da      	str	r2, [r3, #124]	@ 0x7c
			obj->motor_cmd.T = T;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	68fa      	ldr	r2, [r7, #12]
 800f1ae:	66da      	str	r2, [r3, #108]	@ 0x6c
			obj->motor_cmd.W = 0;
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	f04f 0200 	mov.w	r2, #0
 800f1b6:	671a      	str	r2, [r3, #112]	@ 0x70
			obj->motor_cmd.Pos = 0;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	f04f 0200 	mov.w	r2, #0
 800f1be:	675a      	str	r2, [r3, #116]	@ 0x74
			break;
 800f1c0:	e096      	b.n	800f2f0 <A1_Motor_SetCmd+0x1d8>
		case A1_MODE_W:
			obj->motor_cmd.mode = CLOSED_LOOP;
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	220a      	movs	r2, #10
 800f1c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
			obj->motor_cmd.K_P = 0;
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	f04f 0200 	mov.w	r2, #0
 800f1d0:	679a      	str	r2, [r3, #120]	@ 0x78
			obj->motor_cmd.K_W = 20;
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	4a4a      	ldr	r2, [pc, #296]	@ (800f300 <A1_Motor_SetCmd+0x1e8>)
 800f1d6:	67da      	str	r2, [r3, #124]	@ 0x7c
			obj->motor_cmd.T = 0;
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	f04f 0200 	mov.w	r2, #0
 800f1de:	66da      	str	r2, [r3, #108]	@ 0x6c
			obj->motor_cmd.W = W * A1_REDUCTION_RATIO * obj->config.dir / WHEEL_R;
 800f1e0:	edd7 7a02 	vldr	s15, [r7, #8]
 800f1e4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800f304 <A1_Motor_SetCmd+0x1ec>
 800f1e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f1f2:	ee07 3a90 	vmov	s15, r3
 800f1f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1fe:	ee17 0a90 	vmov	r0, s15
 800f202:	f7f1 f9c1 	bl	8000588 <__aeabi_f2d>
 800f206:	a33c      	add	r3, pc, #240	@ (adr r3, 800f2f8 <A1_Motor_SetCmd+0x1e0>)
 800f208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20c:	f7f1 fb3e 	bl	800088c <__aeabi_ddiv>
 800f210:	4602      	mov	r2, r0
 800f212:	460b      	mov	r3, r1
 800f214:	4610      	mov	r0, r2
 800f216:	4619      	mov	r1, r3
 800f218:	f7f1 fd06 	bl	8000c28 <__aeabi_d2f>
 800f21c:	4602      	mov	r2, r0
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	671a      	str	r2, [r3, #112]	@ 0x70
			obj->motor_cmd.Pos = 0;
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	f04f 0200 	mov.w	r2, #0
 800f228:	675a      	str	r2, [r3, #116]	@ 0x74
			break;
 800f22a:	e061      	b.n	800f2f0 <A1_Motor_SetCmd+0x1d8>
		case A1_MODE_POS:
			obj->motor_cmd.mode = CLOSED_LOOP;
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	220a      	movs	r2, #10
 800f230:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
			obj->motor_cmd.K_P = 0.001;
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	4a34      	ldr	r2, [pc, #208]	@ (800f308 <A1_Motor_SetCmd+0x1f0>)
 800f238:	679a      	str	r2, [r3, #120]	@ 0x78
			obj->motor_cmd.K_W = 0.001;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	4a32      	ldr	r2, [pc, #200]	@ (800f308 <A1_Motor_SetCmd+0x1f0>)
 800f23e:	67da      	str	r2, [r3, #124]	@ 0x7c
			obj->motor_cmd.T = 0;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	f04f 0200 	mov.w	r2, #0
 800f246:	66da      	str	r2, [r3, #108]	@ 0x6c
			obj->motor_cmd.W = 0;
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	f04f 0200 	mov.w	r2, #0
 800f24e:	671a      	str	r2, [r3, #112]	@ 0x70
			obj->motor_cmd.Pos = obj->init_pos + Pos * A1_REDUCTION_RATIO * obj->config.dir;
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	ed93 7a29 	vldr	s14, [r3, #164]	@ 0xa4
 800f256:	edd7 7a01 	vldr	s15, [r7, #4]
 800f25a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800f304 <A1_Motor_SetCmd+0x1ec>
 800f25e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f268:	ee07 3a90 	vmov	s15, r3
 800f26c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f274:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
			break;
 800f27e:	e037      	b.n	800f2f0 <A1_Motor_SetCmd+0x1d8>
		case A1_MODE_HB:
			obj->motor_cmd.mode = CLOSED_LOOP;
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	220a      	movs	r2, #10
 800f284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
			obj->motor_cmd.K_P = 0.05;
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	4a20      	ldr	r2, [pc, #128]	@ (800f30c <A1_Motor_SetCmd+0x1f4>)
 800f28c:	679a      	str	r2, [r3, #120]	@ 0x78
			obj->motor_cmd.K_W = 3;
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	4a1f      	ldr	r2, [pc, #124]	@ (800f310 <A1_Motor_SetCmd+0x1f8>)
 800f292:	67da      	str	r2, [r3, #124]	@ 0x7c
			obj->motor_cmd.T = T;
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	66da      	str	r2, [r3, #108]	@ 0x6c
			obj->motor_cmd.W = W * A1_REDUCTION_RATIO * obj->config.dir;
 800f29a:	edd7 7a02 	vldr	s15, [r7, #8]
 800f29e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800f304 <A1_Motor_SetCmd+0x1ec>
 800f2a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f2ac:	ee07 3a90 	vmov	s15, r3
 800f2b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
			obj->motor_cmd.Pos = obj->init_pos + Pos * A1_REDUCTION_RATIO * obj->config.dir;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	ed93 7a29 	vldr	s14, [r3, #164]	@ 0xa4
 800f2c4:	edd7 7a01 	vldr	s15, [r7, #4]
 800f2c8:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f304 <A1_Motor_SetCmd+0x1ec>
 800f2cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f2d6:	ee07 3a90 	vmov	s15, r3
 800f2da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f2de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
			break;
 800f2ec:	e000      	b.n	800f2f0 <A1_Motor_SetCmd+0x1d8>
		default:
			break;
 800f2ee:	bf00      	nop
	}
}
 800f2f0:	bf00      	nop
 800f2f2:	3718      	adds	r7, #24
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	e147ae14 	.word	0xe147ae14
 800f2fc:	3fbe147a 	.word	0x3fbe147a
 800f300:	41a00000 	.word	0x41a00000
 800f304:	4111999a 	.word	0x4111999a
 800f308:	3a83126f 	.word	0x3a83126f
 800f30c:	3d4ccccd 	.word	0x3d4ccccd
 800f310:	40400000 	.word	0x40400000

0800f314 <A1_Modify_Data>:

void A1_Modify_Data(A1Cmd *motor_s) {
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
	// Header
	motor_s->motor_send_data.head.start[0] = 0xFE;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	22fe      	movs	r2, #254	@ 0xfe
 800f320:	761a      	strb	r2, [r3, #24]
	motor_s->motor_send_data.head.start[1] = 0xEE;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	22ee      	movs	r2, #238	@ 0xee
 800f326:	765a      	strb	r2, [r3, #25]
	motor_s->motor_send_data.head.motorID = motor_s->id;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	881b      	ldrh	r3, [r3, #0]
 800f32c:	b2da      	uxtb	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	769a      	strb	r2, [r3, #26]
	motor_s->motor_send_data.head.reserved = 0;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2200      	movs	r2, #0
 800f336:	76da      	strb	r2, [r3, #27]
	// Command
	motor_s->motor_send_data.Mdata.mode = motor_s->mode;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	885b      	ldrh	r3, [r3, #2]
 800f33c:	b2da      	uxtb	r2, r3
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	771a      	strb	r2, [r3, #28]
	motor_s->motor_send_data.Mdata.ModifyBit = 0xFF;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	22ff      	movs	r2, #255	@ 0xff
 800f346:	775a      	strb	r2, [r3, #29]
	motor_s->motor_send_data.Mdata.ReadBit = 0;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	779a      	strb	r2, [r3, #30]
	motor_s->motor_send_data.Mdata.reserved = 0;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	77da      	strb	r2, [r3, #31]
	motor_s->motor_send_data.Mdata.Modify.u32 = 0;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	621a      	str	r2, [r3, #32]
	// T
	motor_s->motor_send_data.Mdata.T = (int16_t) (motor_s->T * 256) & 0xFFFF;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f360:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800f41c <A1_Modify_Data+0x108>
 800f364:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f36c:	ee17 3a90 	vmov	r3, s15
 800f370:	b21a      	sxth	r2, r3
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	849a      	strh	r2, [r3, #36]	@ 0x24
	// W
	motor_s->motor_send_data.Mdata.W = (int16_t) (motor_s->W * 128) & 0xFFFF;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	edd3 7a02 	vldr	s15, [r3, #8]
 800f37c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800f420 <A1_Modify_Data+0x10c>
 800f380:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f388:	ee17 3a90 	vmov	r3, s15
 800f38c:	b21a      	sxth	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	84da      	strh	r2, [r3, #38]	@ 0x26
	// Pos
	motor_s->motor_send_data.Mdata.Pos = (int32_t) (motor_s->Pos * 2607.5945876176f);  //*16384/2π
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	edd3 7a03 	vldr	s15, [r3, #12]
 800f398:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800f424 <A1_Modify_Data+0x110>
 800f39c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f3a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3a4:	ee17 2a90 	vmov	r2, s15
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	629a      	str	r2, [r3, #40]	@ 0x28
	// K_P
	motor_s->motor_send_data.Mdata.K_P = (int16_t) (motor_s->K_P * 2048) & 0xFFFF;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	edd3 7a04 	vldr	s15, [r3, #16]
 800f3b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800f428 <A1_Modify_Data+0x114>
 800f3b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f3ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3be:	ee17 3a90 	vmov	r3, s15
 800f3c2:	b21a      	sxth	r2, r3
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
	// K_W
	motor_s->motor_send_data.Mdata.K_W = (int16_t) (motor_s->K_W * 1024) & 0xFFFF;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	edd3 7a05 	vldr	s15, [r3, #20]
 800f3ce:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800f42c <A1_Modify_Data+0x118>
 800f3d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f3d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3da:	ee17 3a90 	vmov	r3, s15
 800f3de:	b21a      	sxth	r2, r3
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
	// LowHzMotorCmdIndex & LowHzMotorCmdIndex & Res
	motor_s->motor_send_data.Mdata.LowHzMotorCmdIndex = 0;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	motor_s->motor_send_data.Mdata.LowHzMotorCmdByte = 0;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	motor_s->motor_send_data.Mdata.Res.u32 = 0;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	865a      	strh	r2, [r3, #50]	@ 0x32
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	869a      	strh	r2, [r3, #52]	@ 0x34
	// CRC Data
	motor_s->motor_send_data.CRCdata.u32 = crc32_core((uint32_t*) (&(motor_s->motor_send_data)), 7);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	3318      	adds	r3, #24
 800f402:	2107      	movs	r1, #7
 800f404:	4618      	mov	r0, r3
 800f406:	f000 f939 	bl	800f67c <crc32_core>
 800f40a:	4602      	mov	r2, r0
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8c3 2036 	str.w	r2, [r3, #54]	@ 0x36
}
 800f412:	bf00      	nop
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	43800000 	.word	0x43800000
 800f420:	43000000 	.word	0x43000000
 800f424:	4522f983 	.word	0x4522f983
 800f428:	45000000 	.word	0x45000000
 800f42c:	44800000 	.word	0x44800000

0800f430 <A1_Motor_Send>:

void A1_Get_Send_Data(A1Cmd *motor_s, uint8_t *buf) {
	memcpy(buf, &(motor_s->motor_send_data), sizeof(MasterComdDataV3));
}

void A1_Motor_Send(A1_Motor *obj) {
 800f430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f432:	b08d      	sub	sp, #52	@ 0x34
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
	A1_Modify_Data(&(obj->motor_cmd));
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	3368      	adds	r3, #104	@ 0x68
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7ff ff69 	bl	800f314 <A1_Modify_Data>

	uint8_t tx_buf[34] = {0};
 800f442:	2300      	movs	r3, #0
 800f444:	60fb      	str	r3, [r7, #12]
 800f446:	f107 0310 	add.w	r3, r7, #16
 800f44a:	221e      	movs	r2, #30
 800f44c:	2100      	movs	r1, #0
 800f44e:	4618      	mov	r0, r3
 800f450:	f001 fce1 	bl	8010e16 <memset>
	memcpy(tx_buf, &(obj->motor_cmd.motor_send_data), sizeof(tx_buf));
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	3380      	adds	r3, #128	@ 0x80
 800f458:	461c      	mov	r4, r3
 800f45a:	f107 060c 	add.w	r6, r7, #12
 800f45e:	f104 0c20 	add.w	ip, r4, #32
 800f462:	4635      	mov	r5, r6
 800f464:	4623      	mov	r3, r4
 800f466:	6818      	ldr	r0, [r3, #0]
 800f468:	6859      	ldr	r1, [r3, #4]
 800f46a:	689a      	ldr	r2, [r3, #8]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f470:	3410      	adds	r4, #16
 800f472:	3610      	adds	r6, #16
 800f474:	4564      	cmp	r4, ip
 800f476:	d1f4      	bne.n	800f462 <A1_Motor_Send+0x32>
 800f478:	4632      	mov	r2, r6
 800f47a:	4623      	mov	r3, r4
 800f47c:	881b      	ldrh	r3, [r3, #0]
 800f47e:	8013      	strh	r3, [r2, #0]
	RS485_Send_DMA(obj->config.rs485_ind, tx_buf, sizeof(tx_buf));
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	f107 010c 	add.w	r1, r7, #12
 800f488:	2222      	movs	r2, #34	@ 0x22
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7ff f9f4 	bl	800e878 <RS485_Send_DMA>
}
 800f490:	bf00      	nop
 800f492:	3734      	adds	r7, #52	@ 0x34
 800f494:	46bd      	mov	sp, r7
 800f496:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f498 <A1_Extract_Data>:

bool A1_Extract_Data(A1Data *motor_r, uint8_t *data) {
 800f498:	b590      	push	{r4, r7, lr}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
	memcpy(&(motor_r->motor_recv_data), data, sizeof(ServoComdDataV3));
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	3315      	adds	r3, #21
 800f4a6:	224e      	movs	r2, #78	@ 0x4e
 800f4a8:	6839      	ldr	r1, [r7, #0]
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f001 fd99 	bl	8010fe2 <memcpy>

	motor_r->id = motor_r->motor_recv_data.head.motorID;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	7ddb      	ldrb	r3, [r3, #23]
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	801a      	strh	r2, [r3, #0]
	motor_r->mode = motor_r->motor_recv_data.Mdata.mode;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	7e5a      	ldrb	r2, [r3, #25]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	709a      	strb	r2, [r3, #2]
	motor_r->T = motor_r->motor_recv_data.Mdata.T / 256.0f;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f9b3 3021 	ldrsh.w	r3, [r3, #33]	@ 0x21
 800f4c8:	b21b      	sxth	r3, r3
 800f4ca:	ee07 3a90 	vmov	s15, r3
 800f4ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f4d2:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800f5b0 <A1_Extract_Data+0x118>
 800f4d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	edc3 7a01 	vstr	s15, [r3, #4]
	motor_r->W = motor_r->motor_recv_data.Mdata.W / 128.0f;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f9b3 3023 	ldrsh.w	r3, [r3, #35]	@ 0x23
 800f4e6:	b21b      	sxth	r3, r3
 800f4e8:	ee07 3a90 	vmov	s15, r3
 800f4ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f4f0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800f5b4 <A1_Extract_Data+0x11c>
 800f4f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	edc3 7a02 	vstr	s15, [r3, #8]
	motor_r->LW = motor_r->motor_recv_data.Mdata.LW;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 3025 	ldr.w	r3, [r3, #37]	@ 0x25
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	60d3      	str	r3, [r2, #12]
	motor_r->Pos = motor_r->motor_recv_data.Mdata.Pos * 2 * M_PI / 16384;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8d3 3033 	ldr.w	r3, [r3, #51]	@ 0x33
 800f50e:	005b      	lsls	r3, r3, #1
 800f510:	4618      	mov	r0, r3
 800f512:	f7f1 f827 	bl	8000564 <__aeabi_i2d>
 800f516:	a324      	add	r3, pc, #144	@ (adr r3, 800f5a8 <A1_Extract_Data+0x110>)
 800f518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51c:	f7f1 f88c 	bl	8000638 <__aeabi_dmul>
 800f520:	4602      	mov	r2, r0
 800f522:	460b      	mov	r3, r1
 800f524:	4610      	mov	r0, r2
 800f526:	4619      	mov	r1, r3
 800f528:	f04f 0200 	mov.w	r2, #0
 800f52c:	4b22      	ldr	r3, [pc, #136]	@ (800f5b8 <A1_Extract_Data+0x120>)
 800f52e:	f7f1 f9ad 	bl	800088c <__aeabi_ddiv>
 800f532:	4602      	mov	r2, r0
 800f534:	460b      	mov	r3, r1
 800f536:	4610      	mov	r0, r2
 800f538:	4619      	mov	r1, r3
 800f53a:	f7f1 fb75 	bl	8000c28 <__aeabi_d2f>
 800f53e:	4602      	mov	r2, r0
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	611a      	str	r2, [r3, #16]

	// CRC data
	motor_r->motor_recv_data.CRCdata.u32 = data[74] | ((uint32_t) data[75] << 8) | ((uint32_t) data[76] << 16)
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	334a      	adds	r3, #74	@ 0x4a
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	461a      	mov	r2, r3
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	334b      	adds	r3, #75	@ 0x4b
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	021b      	lsls	r3, r3, #8
 800f554:	431a      	orrs	r2, r3
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	334c      	adds	r3, #76	@ 0x4c
 800f55a:	781b      	ldrb	r3, [r3, #0]
 800f55c:	041b      	lsls	r3, r3, #16
 800f55e:	431a      	orrs	r2, r3
	        | ((uint32_t) data[77] << 24);
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	334d      	adds	r3, #77	@ 0x4d
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	061b      	lsls	r3, r3, #24
 800f568:	431a      	orrs	r2, r3
	motor_r->motor_recv_data.CRCdata.u32 = data[74] | ((uint32_t) data[75] << 8) | ((uint32_t) data[76] << 16)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8c3 205f 	str.w	r2, [r3, #95]	@ 0x5f

	if (motor_r->motor_recv_data.CRCdata.u32 == crc32_core((uint32_t*) data, 18))
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8d3 405f 	ldr.w	r4, [r3, #95]	@ 0x5f
 800f576:	2112      	movs	r1, #18
 800f578:	6838      	ldr	r0, [r7, #0]
 800f57a:	f000 f87f 	bl	800f67c <crc32_core>
 800f57e:	4603      	mov	r3, r0
 800f580:	429c      	cmp	r4, r3
 800f582:	d105      	bne.n	800f590 <A1_Extract_Data+0xf8>
		return motor_r->correct = true;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2201      	movs	r2, #1
 800f588:	751a      	strb	r2, [r3, #20]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	7d1b      	ldrb	r3, [r3, #20]
 800f58e:	e004      	b.n	800f59a <A1_Extract_Data+0x102>
	else
		return motor_r->correct = false;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	751a      	strb	r2, [r3, #20]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	7d1b      	ldrb	r3, [r3, #20]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	370c      	adds	r7, #12
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd90      	pop	{r4, r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	f3af 8000 	nop.w
 800f5a8:	54442d18 	.word	0x54442d18
 800f5ac:	400921fb 	.word	0x400921fb
 800f5b0:	43800000 	.word	0x43800000
 800f5b4:	43000000 	.word	0x43000000
 800f5b8:	40d00000 	.word	0x40d00000
 800f5bc:	00000000 	.word	0x00000000

0800f5c0 <A1_Motor_RecvData_Process>:

void A1_Get_Recv_Data(A1Data *motor_r, uint8_t *buf) {
	memcpy(buf, &(motor_r->motor_recv_data), sizeof(ServoComdDataV3));
}

void A1_Motor_RecvData_Process(A1_Motor *obj, uint8_t *data, uint8_t len) {
 800f5c0:	b5b0      	push	{r4, r5, r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	71fb      	strb	r3, [r7, #7]
	A1_Extract_Data(&(obj->motor_data), data);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	3304      	adds	r3, #4
 800f5d2:	68b9      	ldr	r1, [r7, #8]
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7ff ff5f 	bl	800f498 <A1_Extract_Data>

	static bool firstTime = true; // 静态变量，只在第一次调用时初始化
	if (firstTime) {
 800f5da:	4b25      	ldr	r3, [pc, #148]	@ (800f670 <A1_Motor_RecvData_Process+0xb0>)
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d007      	beq.n	800f5f2 <A1_Motor_RecvData_Process+0x32>
		obj->init_pos = obj->motor_data.Pos; // 获取零位
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	695a      	ldr	r2, [r3, #20]
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		firstTime = false; // 确保下次中断不会覆盖数据
 800f5ec:	4b20      	ldr	r3, [pc, #128]	@ (800f670 <A1_Motor_RecvData_Process+0xb0>)
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	701a      	strb	r2, [r3, #0]
	}

	robot_fb_data.roll_fb_data.id = obj->motor_data.id;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	889b      	ldrh	r3, [r3, #4]
 800f5f6:	b2da      	uxtb	r2, r3
 800f5f8:	4b1e      	ldr	r3, [pc, #120]	@ (800f674 <A1_Motor_RecvData_Process+0xb4>)
 800f5fa:	76da      	strb	r2, [r3, #27]
	robot_fb_data.roll_fb_data.vel = obj->motor_data.LW * WHEEL_R / (A1_REDUCTION_RATIO * obj->config.dir);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	691b      	ldr	r3, [r3, #16]
 800f600:	4618      	mov	r0, r3
 800f602:	f7f0 ffc1 	bl	8000588 <__aeabi_f2d>
 800f606:	a318      	add	r3, pc, #96	@ (adr r3, 800f668 <A1_Motor_RecvData_Process+0xa8>)
 800f608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60c:	f7f1 f814 	bl	8000638 <__aeabi_dmul>
 800f610:	4602      	mov	r2, r0
 800f612:	460b      	mov	r3, r1
 800f614:	4614      	mov	r4, r2
 800f616:	461d      	mov	r5, r3
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f61e:	ee07 3a90 	vmov	s15, r3
 800f622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f626:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800f678 <A1_Motor_RecvData_Process+0xb8>
 800f62a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f62e:	ee17 0a90 	vmov	r0, s15
 800f632:	f7f0 ffa9 	bl	8000588 <__aeabi_f2d>
 800f636:	4602      	mov	r2, r0
 800f638:	460b      	mov	r3, r1
 800f63a:	4620      	mov	r0, r4
 800f63c:	4629      	mov	r1, r5
 800f63e:	f7f1 f925 	bl	800088c <__aeabi_ddiv>
 800f642:	4602      	mov	r2, r0
 800f644:	460b      	mov	r3, r1
 800f646:	4610      	mov	r0, r2
 800f648:	4619      	mov	r1, r3
 800f64a:	f7f1 faed 	bl	8000c28 <__aeabi_d2f>
 800f64e:	4602      	mov	r2, r0
 800f650:	4b08      	ldr	r3, [pc, #32]	@ (800f674 <A1_Motor_RecvData_Process+0xb4>)
 800f652:	61da      	str	r2, [r3, #28]
	robot_fb_data.roll_fb_data.pos = obj->motor_data.Pos;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	695a      	ldr	r2, [r3, #20]
 800f658:	4b06      	ldr	r3, [pc, #24]	@ (800f674 <A1_Motor_RecvData_Process+0xb4>)
 800f65a:	621a      	str	r2, [r3, #32]
}
 800f65c:	bf00      	nop
 800f65e:	3710      	adds	r7, #16
 800f660:	46bd      	mov	sp, r7
 800f662:	bdb0      	pop	{r4, r5, r7, pc}
 800f664:	f3af 8000 	nop.w
 800f668:	e147ae14 	.word	0xe147ae14
 800f66c:	3fbe147a 	.word	0x3fbe147a
 800f670:	20000116 	.word	0x20000116
 800f674:	200064a8 	.word	0x200064a8
 800f678:	4111999a 	.word	0x4111999a

0800f67c <crc32_core>:

float A1_Convert_Vel(float vel) {
	return vel / WHEEL_R;  //   m/s转换为rad/s
}

uint32_t crc32_core(uint32_t *ptr, uint32_t len) {
 800f67c:	b480      	push	{r7}
 800f67e:	b089      	sub	sp, #36	@ 0x24
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
	uint32_t xbit = 0;
 800f686:	2300      	movs	r3, #0
 800f688:	61fb      	str	r3, [r7, #28]
	uint32_t data = 0;
 800f68a:	2300      	movs	r3, #0
 800f68c:	60fb      	str	r3, [r7, #12]
	uint32_t CRC32 = 0xFFFFFFFF;
 800f68e:	f04f 33ff 	mov.w	r3, #4294967295
 800f692:	61bb      	str	r3, [r7, #24]
	const uint32_t dwPolynomial = 0x04c11db7;
 800f694:	4b1f      	ldr	r3, [pc, #124]	@ (800f714 <crc32_core+0x98>)
 800f696:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < len; i++) {
 800f698:	2300      	movs	r3, #0
 800f69a:	617b      	str	r3, [r7, #20]
 800f69c:	e02e      	b.n	800f6fc <crc32_core+0x80>
		xbit = 1 << 31;
 800f69e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f6a2:	61fb      	str	r3, [r7, #28]
		data = ptr[i];
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	009b      	lsls	r3, r3, #2
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	4413      	add	r3, r2
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	60fb      	str	r3, [r7, #12]
		for (uint32_t bits = 0; bits < 32; bits++) {
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	613b      	str	r3, [r7, #16]
 800f6b4:	e01c      	b.n	800f6f0 <crc32_core+0x74>
			if (CRC32 & 0x80000000) {
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	da07      	bge.n	800f6cc <crc32_core+0x50>
				CRC32 <<= 1;
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	005b      	lsls	r3, r3, #1
 800f6c0:	61bb      	str	r3, [r7, #24]
				CRC32 ^= dwPolynomial;
 800f6c2:	69ba      	ldr	r2, [r7, #24]
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	4053      	eors	r3, r2
 800f6c8:	61bb      	str	r3, [r7, #24]
 800f6ca:	e002      	b.n	800f6d2 <crc32_core+0x56>
			} else
				CRC32 <<= 1;
 800f6cc:	69bb      	ldr	r3, [r7, #24]
 800f6ce:	005b      	lsls	r3, r3, #1
 800f6d0:	61bb      	str	r3, [r7, #24]
			if (data & xbit)
 800f6d2:	68fa      	ldr	r2, [r7, #12]
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	4013      	ands	r3, r2
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d003      	beq.n	800f6e4 <crc32_core+0x68>
				CRC32 ^= dwPolynomial;
 800f6dc:	69ba      	ldr	r2, [r7, #24]
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	4053      	eors	r3, r2
 800f6e2:	61bb      	str	r3, [r7, #24]
			xbit >>= 1;
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	085b      	lsrs	r3, r3, #1
 800f6e8:	61fb      	str	r3, [r7, #28]
		for (uint32_t bits = 0; bits < 32; bits++) {
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	613b      	str	r3, [r7, #16]
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	2b1f      	cmp	r3, #31
 800f6f4:	d9df      	bls.n	800f6b6 <crc32_core+0x3a>
	for (uint32_t i = 0; i < len; i++) {
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	617b      	str	r3, [r7, #20]
 800f6fc:	697a      	ldr	r2, [r7, #20]
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	429a      	cmp	r2, r3
 800f702:	d3cc      	bcc.n	800f69e <crc32_core+0x22>
		}
	}
	return CRC32;
 800f704:	69bb      	ldr	r3, [r7, #24]
}
 800f706:	4618      	mov	r0, r3
 800f708:	3724      	adds	r7, #36	@ 0x24
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop
 800f714:	04c11db7 	.word	0x04c11db7

0800f718 <GO_Motor_Create>:
#include "usbd_cdc_if.h"
#include "utilities.h"

#define GO_REDUCTION_RATIO 6.33f

GO_Motor* GO_Motor_Create(GO_Config config) {
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
	GO_Motor *obj = (GO_Motor*) malloc(sizeof(GO_Motor));
 800f720:	2050      	movs	r0, #80	@ 0x50
 800f722:	f000 fb31 	bl	800fd88 <malloc>
 800f726:	4603      	mov	r3, r0
 800f728:	60fb      	str	r3, [r7, #12]
	if (obj == NULL) {
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d101      	bne.n	800f734 <GO_Motor_Create+0x1c>
		// 如果内存分配失败，返回 NULL
		return NULL;
 800f730:	2300      	movs	r3, #0
 800f732:	e017      	b.n	800f764 <GO_Motor_Create+0x4c>
	}
	memset(obj, 0, sizeof(GO_Motor));
 800f734:	2250      	movs	r2, #80	@ 0x50
 800f736:	2100      	movs	r1, #0
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f001 fb6c 	bl	8010e16 <memset>

	obj->config = config;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	1d3a      	adds	r2, r7, #4
 800f742:	6812      	ldr	r2, [r2, #0]
 800f744:	4611      	mov	r1, r2
 800f746:	8019      	strh	r1, [r3, #0]
 800f748:	3302      	adds	r3, #2
 800f74a:	0c12      	lsrs	r2, r2, #16
 800f74c:	701a      	strb	r2, [r3, #0]
	GO_Motor_SetCmd(obj, GO_MODE_POS, 0, 0, 0);
 800f74e:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 800f76c <GO_Motor_Create+0x54>
 800f752:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800f76c <GO_Motor_Create+0x54>
 800f756:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 800f76c <GO_Motor_Create+0x54>
 800f75a:	2103      	movs	r1, #3
 800f75c:	68f8      	ldr	r0, [r7, #12]
 800f75e:	f000 f807 	bl	800f770 <GO_Motor_SetCmd>

	return obj;
 800f762:	68fb      	ldr	r3, [r7, #12]
}
 800f764:	4618      	mov	r0, r3
 800f766:	3710      	adds	r7, #16
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	00000000 	.word	0x00000000

0800f770 <GO_Motor_SetCmd>:

void GO_Motor_SetCmd(GO_Motor *obj, GO_Ctrl_Mode mode, float T, float W, float Pos) {
 800f770:	b480      	push	{r7}
 800f772:	b087      	sub	sp, #28
 800f774:	af00      	add	r7, sp, #0
 800f776:	6178      	str	r0, [r7, #20]
 800f778:	460b      	mov	r3, r1
 800f77a:	ed87 0a03 	vstr	s0, [r7, #12]
 800f77e:	edc7 0a02 	vstr	s1, [r7, #8]
 800f782:	ed87 1a01 	vstr	s2, [r7, #4]
 800f786:	74fb      	strb	r3, [r7, #19]
	obj->motor_cmd.id = obj->config.id;
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	785b      	ldrb	r3, [r3, #1]
 800f78c:	461a      	mov	r2, r3
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	845a      	strh	r2, [r3, #34]	@ 0x22
	switch (mode) {
 800f792:	7cfb      	ldrb	r3, [r7, #19]
 800f794:	2b04      	cmp	r3, #4
 800f796:	f200 80de 	bhi.w	800f956 <GO_Motor_SetCmd+0x1e6>
 800f79a:	a201      	add	r2, pc, #4	@ (adr r2, 800f7a0 <GO_Motor_SetCmd+0x30>)
 800f79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a0:	0800f7b5 	.word	0x0800f7b5
 800f7a4:	0800f7ef 	.word	0x0800f7ef
 800f7a8:	0800f827 	.word	0x0800f827
 800f7ac:	0800f87d 	.word	0x0800f87d
 800f7b0:	0800f8dd 	.word	0x0800f8dd
		case GO_MODE_STOP:
			obj->motor_cmd.mode = BRAKE;
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	849a      	strh	r2, [r3, #36]	@ 0x24
			obj->motor_cmd.K_P = 0;
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	f04f 0200 	mov.w	r2, #0
 800f7c0:	f8c3 2032 	str.w	r2, [r3, #50]	@ 0x32
			obj->motor_cmd.K_W = 0;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f04f 0200 	mov.w	r2, #0
 800f7ca:	f8c3 2036 	str.w	r2, [r3, #54]	@ 0x36
			obj->motor_cmd.T = 0;
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	f04f 0200 	mov.w	r2, #0
 800f7d4:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
			obj->motor_cmd.W = 0;
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	f04f 0200 	mov.w	r2, #0
 800f7de:	f8c3 202a 	str.w	r2, [r3, #42]	@ 0x2a
			obj->motor_cmd.Pos = 0;
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	f04f 0200 	mov.w	r2, #0
 800f7e8:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
			break;
 800f7ec:	e0b4      	b.n	800f958 <GO_Motor_SetCmd+0x1e8>
		case GO_MODE_T:
			obj->motor_cmd.mode = FOC;
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	849a      	strh	r2, [r3, #36]	@ 0x24
			obj->motor_cmd.K_P = 0;
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	f04f 0200 	mov.w	r2, #0
 800f7fa:	f8c3 2032 	str.w	r2, [r3, #50]	@ 0x32
			obj->motor_cmd.K_W = 0;
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	f04f 0200 	mov.w	r2, #0
 800f804:	f8c3 2036 	str.w	r2, [r3, #54]	@ 0x36
			obj->motor_cmd.T = T;
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
			obj->motor_cmd.W = 0;
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	f04f 0200 	mov.w	r2, #0
 800f816:	f8c3 202a 	str.w	r2, [r3, #42]	@ 0x2a
			obj->motor_cmd.Pos = 0;
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	f04f 0200 	mov.w	r2, #0
 800f820:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
			break;
 800f824:	e098      	b.n	800f958 <GO_Motor_SetCmd+0x1e8>
		case GO_MODE_W:
			obj->motor_cmd.mode = FOC;
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	2201      	movs	r2, #1
 800f82a:	849a      	strh	r2, [r3, #36]	@ 0x24
			obj->motor_cmd.K_P = 0;
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	f04f 0200 	mov.w	r2, #0
 800f832:	f8c3 2032 	str.w	r2, [r3, #50]	@ 0x32
			obj->motor_cmd.K_W = 0.02;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	4a4a      	ldr	r2, [pc, #296]	@ (800f964 <GO_Motor_SetCmd+0x1f4>)
 800f83a:	f8c3 2036 	str.w	r2, [r3, #54]	@ 0x36
			obj->motor_cmd.T = 0;
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	f04f 0200 	mov.w	r2, #0
 800f844:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
			obj->motor_cmd.W = W * GO_REDUCTION_RATIO * obj->config.dir;
 800f848:	edd7 7a02 	vldr	s15, [r7, #8]
 800f84c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800f968 <GO_Motor_SetCmd+0x1f8>
 800f850:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f85a:	ee07 3a90 	vmov	s15, r3
 800f85e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f862:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	ee17 2a90 	vmov	r2, s15
 800f86c:	f8c3 202a 	str.w	r2, [r3, #42]	@ 0x2a
			obj->motor_cmd.Pos = 0;
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	f04f 0200 	mov.w	r2, #0
 800f876:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
			break;
 800f87a:	e06d      	b.n	800f958 <GO_Motor_SetCmd+0x1e8>
		case GO_MODE_POS:
			obj->motor_cmd.mode = FOC;
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	2201      	movs	r2, #1
 800f880:	849a      	strh	r2, [r3, #36]	@ 0x24
			obj->motor_cmd.K_P = 1.5;
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800f888:	f8c3 2032 	str.w	r2, [r3, #50]	@ 0x32
			obj->motor_cmd.K_W = 0.1;
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	4a37      	ldr	r2, [pc, #220]	@ (800f96c <GO_Motor_SetCmd+0x1fc>)
 800f890:	f8c3 2036 	str.w	r2, [r3, #54]	@ 0x36
			obj->motor_cmd.T = 0;
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	f04f 0200 	mov.w	r2, #0
 800f89a:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
			obj->motor_cmd.W = 0;
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	f04f 0200 	mov.w	r2, #0
 800f8a4:	f8c3 202a 	str.w	r2, [r3, #42]	@ 0x2a
			obj->motor_cmd.Pos = obj->init_pos + Pos * GO_REDUCTION_RATIO * obj->config.dir;
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800f8ae:	edd7 7a01 	vldr	s15, [r7, #4]
 800f8b2:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 800f968 <GO_Motor_SetCmd+0x1f8>
 800f8b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f8c0:	ee07 3a90 	vmov	s15, r3
 800f8c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	ee17 2a90 	vmov	r2, s15
 800f8d6:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
			break;
 800f8da:	e03d      	b.n	800f958 <GO_Motor_SetCmd+0x1e8>
		case GO_MODE_HB:
			obj->motor_cmd.mode = FOC;
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	2201      	movs	r2, #1
 800f8e0:	849a      	strh	r2, [r3, #36]	@ 0x24
			obj->motor_cmd.K_P = 1.5;
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800f8e8:	f8c3 2032 	str.w	r2, [r3, #50]	@ 0x32
			obj->motor_cmd.K_W = 0.05;
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	4a20      	ldr	r2, [pc, #128]	@ (800f970 <GO_Motor_SetCmd+0x200>)
 800f8f0:	f8c3 2036 	str.w	r2, [r3, #54]	@ 0x36
			obj->motor_cmd.T = T;
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	68fa      	ldr	r2, [r7, #12]
 800f8f8:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
			obj->motor_cmd.W = W * GO_REDUCTION_RATIO * obj->config.dir;
 800f8fc:	edd7 7a02 	vldr	s15, [r7, #8]
 800f900:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800f968 <GO_Motor_SetCmd+0x1f8>
 800f904:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f90e:	ee07 3a90 	vmov	s15, r3
 800f912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	ee17 2a90 	vmov	r2, s15
 800f920:	f8c3 202a 	str.w	r2, [r3, #42]	@ 0x2a
			obj->motor_cmd.Pos = obj->init_pos + Pos * GO_REDUCTION_RATIO * obj->config.dir;
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800f92a:	edd7 7a01 	vldr	s15, [r7, #4]
 800f92e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f968 <GO_Motor_SetCmd+0x1f8>
 800f932:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f93c:	ee07 3a90 	vmov	s15, r3
 800f940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	ee17 2a90 	vmov	r2, s15
 800f952:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
		default:
			break;
 800f956:	bf00      	nop
	}
}
 800f958:	bf00      	nop
 800f95a:	371c      	adds	r7, #28
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr
 800f964:	3ca3d70a 	.word	0x3ca3d70a
 800f968:	40ca8f5c 	.word	0x40ca8f5c
 800f96c:	3dcccccd 	.word	0x3dcccccd
 800f970:	3d4ccccd 	.word	0x3d4ccccd
 800f974:	00000000 	.word	0x00000000

0800f978 <GO_Modify_Data>:

void GO_Modify_Data(GOCmd *motor_s) {
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
	// Header
	motor_s->motor_send_data.head[0] = 0XFE;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	22fe      	movs	r2, #254	@ 0xfe
 800f984:	761a      	strb	r2, [r3, #24]
	motor_s->motor_send_data.head[1] = 0xEE;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	22ee      	movs	r2, #238	@ 0xee
 800f98a:	765a      	strb	r2, [r3, #25]
	// Mode
	motor_s->motor_send_data.mode.id = motor_s->id;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	b29b      	uxth	r3, r3
 800f992:	f003 030f 	and.w	r3, r3, #15
 800f996:	b2d9      	uxtb	r1, r3
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	7e93      	ldrb	r3, [r2, #26]
 800f99c:	f361 0303 	bfi	r3, r1, #0, #4
 800f9a0:	7693      	strb	r3, [r2, #26]
	motor_s->motor_send_data.mode.status = motor_s->mode;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	885b      	ldrh	r3, [r3, #2]
 800f9a6:	b29b      	uxth	r3, r3
 800f9a8:	f003 0307 	and.w	r3, r3, #7
 800f9ac:	b2d9      	uxtb	r1, r3
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	7e93      	ldrb	r3, [r2, #26]
 800f9b2:	f361 1306 	bfi	r3, r1, #4, #3
 800f9b6:	7693      	strb	r3, [r2, #26]
	motor_s->motor_send_data.mode.none = 0;
 800f9b8:	687a      	ldr	r2, [r7, #4]
 800f9ba:	7e93      	ldrb	r3, [r2, #26]
 800f9bc:	f36f 13c7 	bfc	r3, #7, #1
 800f9c0:	7693      	strb	r3, [r2, #26]
	// Command
	motor_s->motor_send_data.comd.tor_des = (int16_t) (motor_s->T * 256);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 800fab8 <GO_Modify_Data+0x140>
 800f9ca:	ee07 3a10 	vmov	s14, r3
 800f9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9d6:	ee17 3a90 	vmov	r3, s15
 800f9da:	b21a      	sxth	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8a3 201b 	strh.w	r2, [r3, #27]
	motor_s->motor_send_data.comd.spd_des = (int16_t) (motor_s->W * 128 / M_PI);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	689b      	ldr	r3, [r3, #8]
 800f9e6:	eddf 7a35 	vldr	s15, [pc, #212]	@ 800fabc <GO_Modify_Data+0x144>
 800f9ea:	ee07 3a10 	vmov	s14, r3
 800f9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9f2:	ee17 0a90 	vmov	r0, s15
 800f9f6:	f7f0 fdc7 	bl	8000588 <__aeabi_f2d>
 800f9fa:	a32d      	add	r3, pc, #180	@ (adr r3, 800fab0 <GO_Modify_Data+0x138>)
 800f9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa00:	f7f0 ff44 	bl	800088c <__aeabi_ddiv>
 800fa04:	4602      	mov	r2, r0
 800fa06:	460b      	mov	r3, r1
 800fa08:	4610      	mov	r0, r2
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	f7f1 f8c4 	bl	8000b98 <__aeabi_d2iz>
 800fa10:	4603      	mov	r3, r0
 800fa12:	b21a      	sxth	r2, r3
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8a3 201d 	strh.w	r2, [r3, #29]
	motor_s->motor_send_data.comd.pos_des = (int32_t) (motor_s->Pos * 16384 / M_PI);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	eddf 7a28 	vldr	s15, [pc, #160]	@ 800fac0 <GO_Modify_Data+0x148>
 800fa22:	ee07 3a10 	vmov	s14, r3
 800fa26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa2a:	ee17 0a90 	vmov	r0, s15
 800fa2e:	f7f0 fdab 	bl	8000588 <__aeabi_f2d>
 800fa32:	a31f      	add	r3, pc, #124	@ (adr r3, 800fab0 <GO_Modify_Data+0x138>)
 800fa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa38:	f7f0 ff28 	bl	800088c <__aeabi_ddiv>
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	460b      	mov	r3, r1
 800fa40:	4610      	mov	r0, r2
 800fa42:	4619      	mov	r1, r3
 800fa44:	f7f1 f8a8 	bl	8000b98 <__aeabi_d2iz>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8c3 201f 	str.w	r2, [r3, #31]
	motor_s->motor_send_data.comd.k_pos = (uint16_t) (motor_s->K_P * 1280);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	691b      	ldr	r3, [r3, #16]
 800fa54:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800fac4 <GO_Modify_Data+0x14c>
 800fa58:	ee07 3a10 	vmov	s14, r3
 800fa5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa64:	ee17 3a90 	vmov	r3, s15
 800fa68:	b29a      	uxth	r2, r3
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8a3 2023 	strh.w	r2, [r3, #35]	@ 0x23
	motor_s->motor_send_data.comd.k_spd = (uint16_t) (motor_s->K_W * 1280);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	695b      	ldr	r3, [r3, #20]
 800fa74:	eddf 7a13 	vldr	s15, [pc, #76]	@ 800fac4 <GO_Modify_Data+0x14c>
 800fa78:	ee07 3a10 	vmov	s14, r3
 800fa7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa84:	ee17 3a90 	vmov	r3, s15
 800fa88:	b29a      	uxth	r2, r3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8a3 2025 	strh.w	r2, [r3, #37]	@ 0x25
	// CRC Data
	motor_s->motor_send_data.CRC16 = crc_ccitt(0, (uint8_t*) &motor_s->motor_send_data, 15);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	3318      	adds	r3, #24
 800fa94:	220f      	movs	r2, #15
 800fa96:	4619      	mov	r1, r3
 800fa98:	2000      	movs	r0, #0
 800fa9a:	f000 f945 	bl	800fd28 <crc_ccitt>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	461a      	mov	r2, r3
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8a3 2027 	strh.w	r2, [r3, #39]	@ 0x27
}
 800faa8:	bf00      	nop
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	54442d18 	.word	0x54442d18
 800fab4:	400921fb 	.word	0x400921fb
 800fab8:	43800000 	.word	0x43800000
 800fabc:	43000000 	.word	0x43000000
 800fac0:	46800000 	.word	0x46800000
 800fac4:	44a00000 	.word	0x44a00000

0800fac8 <GO_Motor_Send>:

void GO_Get_Send_Data(GOCmd *motor_s, uint8_t *buf) {
	memcpy(buf, &(motor_s->motor_send_data), sizeof(ControlData_t));
}

void GO_Motor_Send(GO_Motor *obj) {
 800fac8:	b5b0      	push	{r4, r5, r7, lr}
 800faca:	b088      	sub	sp, #32
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
	GO_Modify_Data(&(obj->motor_cmd));
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	3322      	adds	r3, #34	@ 0x22
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7ff ff4f 	bl	800f978 <GO_Modify_Data>

	uint8_t tx_buf[17];
	memcpy(tx_buf, &obj->motor_cmd.motor_send_data, sizeof(tx_buf));
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	333a      	adds	r3, #58	@ 0x3a
 800fade:	f107 040c 	add.w	r4, r7, #12
 800fae2:	461d      	mov	r5, r3
 800fae4:	6828      	ldr	r0, [r5, #0]
 800fae6:	6869      	ldr	r1, [r5, #4]
 800fae8:	68aa      	ldr	r2, [r5, #8]
 800faea:	68eb      	ldr	r3, [r5, #12]
 800faec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800faee:	7c2b      	ldrb	r3, [r5, #16]
 800faf0:	7023      	strb	r3, [r4, #0]

	RS485_Send_DMA(obj->config.rs485_ind, tx_buf, sizeof(tx_buf));
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	f107 010c 	add.w	r1, r7, #12
 800fafa:	2211      	movs	r2, #17
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7fe febb 	bl	800e878 <RS485_Send_DMA>
}
 800fb02:	bf00      	nop
 800fb04:	3720      	adds	r7, #32
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bdb0      	pop	{r4, r5, r7, pc}
 800fb0a:	0000      	movs	r0, r0
 800fb0c:	0000      	movs	r0, r0
	...

0800fb10 <GO_Extract_Data>:

bool GO_Extract_Data(GOData *motor_r, uint8_t *data) {
 800fb10:	b590      	push	{r4, r7, lr}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
	memcpy(&(motor_r->motor_recv_data), data, sizeof(MotorData_t));
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	330f      	adds	r3, #15
 800fb1e:	2210      	movs	r2, #16
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f001 fa5d 	bl	8010fe2 <memcpy>

	motor_r->id = motor_r->motor_recv_data.mode.id;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	7c5b      	ldrb	r3, [r3, #17]
 800fb2c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	461a      	mov	r2, r3
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	705a      	strb	r2, [r3, #1]
	motor_r->mode = motor_r->motor_recv_data.mode.status;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	7c5b      	ldrb	r3, [r3, #17]
 800fb3c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	461a      	mov	r2, r3
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	709a      	strb	r2, [r3, #2]
	motor_r->T = motor_r->motor_recv_data.fbk.torque / 256.0f;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800fb4e:	b21b      	sxth	r3, r3
 800fb50:	ee07 3a90 	vmov	s15, r3
 800fb54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb58:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800fc48 <GO_Extract_Data+0x138>
 800fb5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	3303      	adds	r3, #3
 800fb64:	ee16 2a90 	vmov	r2, s13
 800fb68:	601a      	str	r2, [r3, #0]
	motor_r->W = motor_r->motor_recv_data.fbk.speed * M_PI / 128;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800fb70:	b21b      	sxth	r3, r3
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7f0 fcf6 	bl	8000564 <__aeabi_i2d>
 800fb78:	a331      	add	r3, pc, #196	@ (adr r3, 800fc40 <GO_Extract_Data+0x130>)
 800fb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7e:	f7f0 fd5b 	bl	8000638 <__aeabi_dmul>
 800fb82:	4602      	mov	r2, r0
 800fb84:	460b      	mov	r3, r1
 800fb86:	4610      	mov	r0, r2
 800fb88:	4619      	mov	r1, r3
 800fb8a:	f04f 0200 	mov.w	r2, #0
 800fb8e:	4b2f      	ldr	r3, [pc, #188]	@ (800fc4c <GO_Extract_Data+0x13c>)
 800fb90:	f7f0 fe7c 	bl	800088c <__aeabi_ddiv>
 800fb94:	4602      	mov	r2, r0
 800fb96:	460b      	mov	r3, r1
 800fb98:	4610      	mov	r0, r2
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	f7f1 f844 	bl	8000c28 <__aeabi_d2f>
 800fba0:	4602      	mov	r2, r0
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	3307      	adds	r3, #7
 800fba6:	601a      	str	r2, [r3, #0]
	motor_r->Pos = motor_r->motor_recv_data.fbk.pos * M_PI / 16384;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 3016 	ldr.w	r3, [r3, #22]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7f0 fcd8 	bl	8000564 <__aeabi_i2d>
 800fbb4:	a322      	add	r3, pc, #136	@ (adr r3, 800fc40 <GO_Extract_Data+0x130>)
 800fbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbba:	f7f0 fd3d 	bl	8000638 <__aeabi_dmul>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	4610      	mov	r0, r2
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	f04f 0200 	mov.w	r2, #0
 800fbca:	4b21      	ldr	r3, [pc, #132]	@ (800fc50 <GO_Extract_Data+0x140>)
 800fbcc:	f7f0 fe5e 	bl	800088c <__aeabi_ddiv>
 800fbd0:	4602      	mov	r2, r0
 800fbd2:	460b      	mov	r3, r1
 800fbd4:	4610      	mov	r0, r2
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	f7f1 f826 	bl	8000c28 <__aeabi_d2f>
 800fbdc:	4602      	mov	r2, r0
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	330b      	adds	r3, #11
 800fbe2:	601a      	str	r2, [r3, #0]

	// CRC data
	motor_r->motor_recv_data.CRC16 = (uint16_t) data[15] | ((uint16_t) data[16] << 8);
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	330f      	adds	r3, #15
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	b21a      	sxth	r2, r3
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	3310      	adds	r3, #16
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	021b      	lsls	r3, r3, #8
 800fbf4:	b21b      	sxth	r3, r3
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	b21b      	sxth	r3, r3
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8a3 201d 	strh.w	r2, [r3, #29]
	if (motor_r->motor_recv_data.CRC16 == crc_ccitt(0, (uint8_t*) &motor_r->motor_recv_data, 14))
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8b3 301d 	ldrh.w	r3, [r3, #29]
 800fc08:	b29c      	uxth	r4, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	330f      	adds	r3, #15
 800fc0e:	220e      	movs	r2, #14
 800fc10:	4619      	mov	r1, r3
 800fc12:	2000      	movs	r0, #0
 800fc14:	f000 f888 	bl	800fd28 <crc_ccitt>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	429c      	cmp	r4, r3
 800fc1c:	d105      	bne.n	800fc2a <GO_Extract_Data+0x11a>
		return motor_r->correct = true;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2201      	movs	r2, #1
 800fc22:	701a      	strb	r2, [r3, #0]
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	e004      	b.n	800fc34 <GO_Extract_Data+0x124>
	else
		return motor_r->correct = false;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	701a      	strb	r2, [r3, #0]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	781b      	ldrb	r3, [r3, #0]
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	370c      	adds	r7, #12
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd90      	pop	{r4, r7, pc}
 800fc3c:	f3af 8000 	nop.w
 800fc40:	54442d18 	.word	0x54442d18
 800fc44:	400921fb 	.word	0x400921fb
 800fc48:	43800000 	.word	0x43800000
 800fc4c:	40600000 	.word	0x40600000
 800fc50:	40d00000 	.word	0x40d00000

0800fc54 <GO_Motor_RecvData_Process>:

void GO_Get_Recv_Data(GOData *motor_r, uint8_t *buf) {
	memcpy(buf, &(motor_r->motor_recv_data), sizeof(MotorData_t));
}

void GO_Motor_RecvData_Process(GO_Motor *obj, uint8_t *data, uint8_t len) {
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	4613      	mov	r3, r2
 800fc60:	71fb      	strb	r3, [r7, #7]
	GO_Extract_Data(&(obj->motor_data), data);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	3303      	adds	r3, #3
 800fc66:	68b9      	ldr	r1, [r7, #8]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7ff ff51 	bl	800fb10 <GO_Extract_Data>

	static int firstTime = 1; // 静态变量，只在第一次调用时初始化
	if (firstTime) {
 800fc6e:	4b1d      	ldr	r3, [pc, #116]	@ (800fce4 <GO_Motor_RecvData_Process+0x90>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d007      	beq.n	800fc86 <GO_Motor_RecvData_Process+0x32>
		obj->init_pos = obj->motor_data.Pos; // 获取零位
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800fc7c:	68fa      	ldr	r2, [r7, #12]
 800fc7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
		firstTime = 0; // 确保下次中断不会覆盖数据
 800fc80:	4b18      	ldr	r3, [pc, #96]	@ (800fce4 <GO_Motor_RecvData_Process+0x90>)
 800fc82:	2200      	movs	r2, #0
 800fc84:	601a      	str	r2, [r3, #0]
	}

	robot_fb_data.steer_fb_data.id = obj->motor_data.id;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	791a      	ldrb	r2, [r3, #4]
 800fc8a:	4b17      	ldr	r3, [pc, #92]	@ (800fce8 <GO_Motor_RecvData_Process+0x94>)
 800fc8c:	749a      	strb	r2, [r3, #18]
	robot_fb_data.steer_fb_data.vel = obj->motor_data.W;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f8d3 200a 	ldr.w	r2, [r3, #10]
 800fc94:	4613      	mov	r3, r2
 800fc96:	461a      	mov	r2, r3
 800fc98:	4b13      	ldr	r3, [pc, #76]	@ (800fce8 <GO_Motor_RecvData_Process+0x94>)
 800fc9a:	3313      	adds	r3, #19
 800fc9c:	601a      	str	r2, [r3, #0]
	robot_fb_data.steer_fb_data.pos = (obj->motor_data.Pos - obj->init_pos) / (GO_REDUCTION_RATIO * obj->config.dir);
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800fca4:	4613      	mov	r3, r2
 800fca6:	461a      	mov	r2, r3
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fcae:	ee07 2a10 	vmov	s14, r2
 800fcb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800fcbc:	ee07 3a90 	vmov	s15, r3
 800fcc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcc4:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800fcec <GO_Motor_RecvData_Process+0x98>
 800fcc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fccc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fcd0:	4b05      	ldr	r3, [pc, #20]	@ (800fce8 <GO_Motor_RecvData_Process+0x94>)
 800fcd2:	3317      	adds	r3, #23
 800fcd4:	ee16 2a90 	vmov	r2, s13
 800fcd8:	601a      	str	r2, [r3, #0]
}
 800fcda:	bf00      	nop
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	20000118 	.word	0x20000118
 800fce8:	200064a8 	.word	0x200064a8
 800fcec:	40ca8f5c 	.word	0x40ca8f5c

0800fcf0 <crc_ccitt_byte>:
        0x2f72, 0x3efb, 0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232, 0x5ac5, 0x4b4c, 0x79d7, 0x685e,
        0x1ce1, 0x0d68, 0x3ff3, 0x2e7a, 0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1, 0x6b46, 0x7acf,
        0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9, 0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
        0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78 };

static uint16_t crc_ccitt_byte(uint16_t crc, const uint8_t c) {
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	460a      	mov	r2, r1
 800fcfa:	80fb      	strh	r3, [r7, #6]
 800fcfc:	4613      	mov	r3, r2
 800fcfe:	717b      	strb	r3, [r7, #5]
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 800fd00:	88fb      	ldrh	r3, [r7, #6]
 800fd02:	0a1b      	lsrs	r3, r3, #8
 800fd04:	b29a      	uxth	r2, r3
 800fd06:	88f9      	ldrh	r1, [r7, #6]
 800fd08:	797b      	ldrb	r3, [r7, #5]
 800fd0a:	404b      	eors	r3, r1
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	4905      	ldr	r1, [pc, #20]	@ (800fd24 <crc_ccitt_byte+0x34>)
 800fd10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fd14:	4053      	eors	r3, r2
 800fd16:	b29b      	uxth	r3, r3
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	370c      	adds	r7, #12
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr
 800fd24:	0801462c 	.word	0x0801462c

0800fd28 <crc_ccitt>:
 *	buffer
 *	@crc: previous CRC value
 *	@buffer: data pointer
 *	@len: number of bytes in the buffer
 */
uint16_t crc_ccitt(uint16_t crc, uint8_t const *buffer, size_t len) {
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b084      	sub	sp, #16
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	4603      	mov	r3, r0
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
 800fd34:	81fb      	strh	r3, [r7, #14]
	while (len--)
 800fd36:	e00a      	b.n	800fd4e <crc_ccitt+0x26>
		crc = crc_ccitt_byte(crc, *buffer++);
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	1c5a      	adds	r2, r3, #1
 800fd3c:	60ba      	str	r2, [r7, #8]
 800fd3e:	781a      	ldrb	r2, [r3, #0]
 800fd40:	89fb      	ldrh	r3, [r7, #14]
 800fd42:	4611      	mov	r1, r2
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7ff ffd3 	bl	800fcf0 <crc_ccitt_byte>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	81fb      	strh	r3, [r7, #14]
	while (len--)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	1e5a      	subs	r2, r3, #1
 800fd52:	607a      	str	r2, [r7, #4]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1ef      	bne.n	800fd38 <crc_ccitt+0x10>
	return crc;
 800fd58:	89fb      	ldrh	r3, [r7, #14]
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3710      	adds	r7, #16
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
	...

0800fd64 <__io_putchar>:

float rad2deg(float radian) {
	return radian * (180.0 / M_PI);
}

PUTCHAR_PROTOTYPE {
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800fd6c:	1d39      	adds	r1, r7, #4
 800fd6e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd72:	2201      	movs	r2, #1
 800fd74:	4803      	ldr	r0, [pc, #12]	@ (800fd84 <__io_putchar+0x20>)
 800fd76:	f7f6 fd19 	bl	80067ac <HAL_UART_Transmit>
	return ch;
 800fd7a:	687b      	ldr	r3, [r7, #4]
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3708      	adds	r7, #8
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	20000654 	.word	0x20000654

0800fd88 <malloc>:
 800fd88:	4b02      	ldr	r3, [pc, #8]	@ (800fd94 <malloc+0xc>)
 800fd8a:	4601      	mov	r1, r0
 800fd8c:	6818      	ldr	r0, [r3, #0]
 800fd8e:	f000 b825 	b.w	800fddc <_malloc_r>
 800fd92:	bf00      	nop
 800fd94:	20000128 	.word	0x20000128

0800fd98 <sbrk_aligned>:
 800fd98:	b570      	push	{r4, r5, r6, lr}
 800fd9a:	4e0f      	ldr	r6, [pc, #60]	@ (800fdd8 <sbrk_aligned+0x40>)
 800fd9c:	460c      	mov	r4, r1
 800fd9e:	6831      	ldr	r1, [r6, #0]
 800fda0:	4605      	mov	r5, r0
 800fda2:	b911      	cbnz	r1, 800fdaa <sbrk_aligned+0x12>
 800fda4:	f001 f8ce 	bl	8010f44 <_sbrk_r>
 800fda8:	6030      	str	r0, [r6, #0]
 800fdaa:	4621      	mov	r1, r4
 800fdac:	4628      	mov	r0, r5
 800fdae:	f001 f8c9 	bl	8010f44 <_sbrk_r>
 800fdb2:	1c43      	adds	r3, r0, #1
 800fdb4:	d103      	bne.n	800fdbe <sbrk_aligned+0x26>
 800fdb6:	f04f 34ff 	mov.w	r4, #4294967295
 800fdba:	4620      	mov	r0, r4
 800fdbc:	bd70      	pop	{r4, r5, r6, pc}
 800fdbe:	1cc4      	adds	r4, r0, #3
 800fdc0:	f024 0403 	bic.w	r4, r4, #3
 800fdc4:	42a0      	cmp	r0, r4
 800fdc6:	d0f8      	beq.n	800fdba <sbrk_aligned+0x22>
 800fdc8:	1a21      	subs	r1, r4, r0
 800fdca:	4628      	mov	r0, r5
 800fdcc:	f001 f8ba 	bl	8010f44 <_sbrk_r>
 800fdd0:	3001      	adds	r0, #1
 800fdd2:	d1f2      	bne.n	800fdba <sbrk_aligned+0x22>
 800fdd4:	e7ef      	b.n	800fdb6 <sbrk_aligned+0x1e>
 800fdd6:	bf00      	nop
 800fdd8:	200064cc 	.word	0x200064cc

0800fddc <_malloc_r>:
 800fddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fde0:	1ccd      	adds	r5, r1, #3
 800fde2:	f025 0503 	bic.w	r5, r5, #3
 800fde6:	3508      	adds	r5, #8
 800fde8:	2d0c      	cmp	r5, #12
 800fdea:	bf38      	it	cc
 800fdec:	250c      	movcc	r5, #12
 800fdee:	2d00      	cmp	r5, #0
 800fdf0:	4606      	mov	r6, r0
 800fdf2:	db01      	blt.n	800fdf8 <_malloc_r+0x1c>
 800fdf4:	42a9      	cmp	r1, r5
 800fdf6:	d904      	bls.n	800fe02 <_malloc_r+0x26>
 800fdf8:	230c      	movs	r3, #12
 800fdfa:	6033      	str	r3, [r6, #0]
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fed8 <_malloc_r+0xfc>
 800fe06:	f000 f869 	bl	800fedc <__malloc_lock>
 800fe0a:	f8d8 3000 	ldr.w	r3, [r8]
 800fe0e:	461c      	mov	r4, r3
 800fe10:	bb44      	cbnz	r4, 800fe64 <_malloc_r+0x88>
 800fe12:	4629      	mov	r1, r5
 800fe14:	4630      	mov	r0, r6
 800fe16:	f7ff ffbf 	bl	800fd98 <sbrk_aligned>
 800fe1a:	1c43      	adds	r3, r0, #1
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	d158      	bne.n	800fed2 <_malloc_r+0xf6>
 800fe20:	f8d8 4000 	ldr.w	r4, [r8]
 800fe24:	4627      	mov	r7, r4
 800fe26:	2f00      	cmp	r7, #0
 800fe28:	d143      	bne.n	800feb2 <_malloc_r+0xd6>
 800fe2a:	2c00      	cmp	r4, #0
 800fe2c:	d04b      	beq.n	800fec6 <_malloc_r+0xea>
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	4639      	mov	r1, r7
 800fe32:	4630      	mov	r0, r6
 800fe34:	eb04 0903 	add.w	r9, r4, r3
 800fe38:	f001 f884 	bl	8010f44 <_sbrk_r>
 800fe3c:	4581      	cmp	r9, r0
 800fe3e:	d142      	bne.n	800fec6 <_malloc_r+0xea>
 800fe40:	6821      	ldr	r1, [r4, #0]
 800fe42:	1a6d      	subs	r5, r5, r1
 800fe44:	4629      	mov	r1, r5
 800fe46:	4630      	mov	r0, r6
 800fe48:	f7ff ffa6 	bl	800fd98 <sbrk_aligned>
 800fe4c:	3001      	adds	r0, #1
 800fe4e:	d03a      	beq.n	800fec6 <_malloc_r+0xea>
 800fe50:	6823      	ldr	r3, [r4, #0]
 800fe52:	442b      	add	r3, r5
 800fe54:	6023      	str	r3, [r4, #0]
 800fe56:	f8d8 3000 	ldr.w	r3, [r8]
 800fe5a:	685a      	ldr	r2, [r3, #4]
 800fe5c:	bb62      	cbnz	r2, 800feb8 <_malloc_r+0xdc>
 800fe5e:	f8c8 7000 	str.w	r7, [r8]
 800fe62:	e00f      	b.n	800fe84 <_malloc_r+0xa8>
 800fe64:	6822      	ldr	r2, [r4, #0]
 800fe66:	1b52      	subs	r2, r2, r5
 800fe68:	d420      	bmi.n	800feac <_malloc_r+0xd0>
 800fe6a:	2a0b      	cmp	r2, #11
 800fe6c:	d917      	bls.n	800fe9e <_malloc_r+0xc2>
 800fe6e:	1961      	adds	r1, r4, r5
 800fe70:	42a3      	cmp	r3, r4
 800fe72:	6025      	str	r5, [r4, #0]
 800fe74:	bf18      	it	ne
 800fe76:	6059      	strne	r1, [r3, #4]
 800fe78:	6863      	ldr	r3, [r4, #4]
 800fe7a:	bf08      	it	eq
 800fe7c:	f8c8 1000 	streq.w	r1, [r8]
 800fe80:	5162      	str	r2, [r4, r5]
 800fe82:	604b      	str	r3, [r1, #4]
 800fe84:	4630      	mov	r0, r6
 800fe86:	f000 f82f 	bl	800fee8 <__malloc_unlock>
 800fe8a:	f104 000b 	add.w	r0, r4, #11
 800fe8e:	1d23      	adds	r3, r4, #4
 800fe90:	f020 0007 	bic.w	r0, r0, #7
 800fe94:	1ac2      	subs	r2, r0, r3
 800fe96:	bf1c      	itt	ne
 800fe98:	1a1b      	subne	r3, r3, r0
 800fe9a:	50a3      	strne	r3, [r4, r2]
 800fe9c:	e7af      	b.n	800fdfe <_malloc_r+0x22>
 800fe9e:	6862      	ldr	r2, [r4, #4]
 800fea0:	42a3      	cmp	r3, r4
 800fea2:	bf0c      	ite	eq
 800fea4:	f8c8 2000 	streq.w	r2, [r8]
 800fea8:	605a      	strne	r2, [r3, #4]
 800feaa:	e7eb      	b.n	800fe84 <_malloc_r+0xa8>
 800feac:	4623      	mov	r3, r4
 800feae:	6864      	ldr	r4, [r4, #4]
 800feb0:	e7ae      	b.n	800fe10 <_malloc_r+0x34>
 800feb2:	463c      	mov	r4, r7
 800feb4:	687f      	ldr	r7, [r7, #4]
 800feb6:	e7b6      	b.n	800fe26 <_malloc_r+0x4a>
 800feb8:	461a      	mov	r2, r3
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	42a3      	cmp	r3, r4
 800febe:	d1fb      	bne.n	800feb8 <_malloc_r+0xdc>
 800fec0:	2300      	movs	r3, #0
 800fec2:	6053      	str	r3, [r2, #4]
 800fec4:	e7de      	b.n	800fe84 <_malloc_r+0xa8>
 800fec6:	230c      	movs	r3, #12
 800fec8:	6033      	str	r3, [r6, #0]
 800feca:	4630      	mov	r0, r6
 800fecc:	f000 f80c 	bl	800fee8 <__malloc_unlock>
 800fed0:	e794      	b.n	800fdfc <_malloc_r+0x20>
 800fed2:	6005      	str	r5, [r0, #0]
 800fed4:	e7d6      	b.n	800fe84 <_malloc_r+0xa8>
 800fed6:	bf00      	nop
 800fed8:	200064d0 	.word	0x200064d0

0800fedc <__malloc_lock>:
 800fedc:	4801      	ldr	r0, [pc, #4]	@ (800fee4 <__malloc_lock+0x8>)
 800fede:	f001 b87e 	b.w	8010fde <__retarget_lock_acquire_recursive>
 800fee2:	bf00      	nop
 800fee4:	20006614 	.word	0x20006614

0800fee8 <__malloc_unlock>:
 800fee8:	4801      	ldr	r0, [pc, #4]	@ (800fef0 <__malloc_unlock+0x8>)
 800feea:	f001 b879 	b.w	8010fe0 <__retarget_lock_release_recursive>
 800feee:	bf00      	nop
 800fef0:	20006614 	.word	0x20006614

0800fef4 <__cvt>:
 800fef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fef8:	ec57 6b10 	vmov	r6, r7, d0
 800fefc:	2f00      	cmp	r7, #0
 800fefe:	460c      	mov	r4, r1
 800ff00:	4619      	mov	r1, r3
 800ff02:	463b      	mov	r3, r7
 800ff04:	bfbb      	ittet	lt
 800ff06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ff0a:	461f      	movlt	r7, r3
 800ff0c:	2300      	movge	r3, #0
 800ff0e:	232d      	movlt	r3, #45	@ 0x2d
 800ff10:	700b      	strb	r3, [r1, #0]
 800ff12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ff18:	4691      	mov	r9, r2
 800ff1a:	f023 0820 	bic.w	r8, r3, #32
 800ff1e:	bfbc      	itt	lt
 800ff20:	4632      	movlt	r2, r6
 800ff22:	4616      	movlt	r6, r2
 800ff24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ff28:	d005      	beq.n	800ff36 <__cvt+0x42>
 800ff2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ff2e:	d100      	bne.n	800ff32 <__cvt+0x3e>
 800ff30:	3401      	adds	r4, #1
 800ff32:	2102      	movs	r1, #2
 800ff34:	e000      	b.n	800ff38 <__cvt+0x44>
 800ff36:	2103      	movs	r1, #3
 800ff38:	ab03      	add	r3, sp, #12
 800ff3a:	9301      	str	r3, [sp, #4]
 800ff3c:	ab02      	add	r3, sp, #8
 800ff3e:	9300      	str	r3, [sp, #0]
 800ff40:	ec47 6b10 	vmov	d0, r6, r7
 800ff44:	4653      	mov	r3, sl
 800ff46:	4622      	mov	r2, r4
 800ff48:	f001 f8ea 	bl	8011120 <_dtoa_r>
 800ff4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ff50:	4605      	mov	r5, r0
 800ff52:	d119      	bne.n	800ff88 <__cvt+0x94>
 800ff54:	f019 0f01 	tst.w	r9, #1
 800ff58:	d00e      	beq.n	800ff78 <__cvt+0x84>
 800ff5a:	eb00 0904 	add.w	r9, r0, r4
 800ff5e:	2200      	movs	r2, #0
 800ff60:	2300      	movs	r3, #0
 800ff62:	4630      	mov	r0, r6
 800ff64:	4639      	mov	r1, r7
 800ff66:	f7f0 fdcf 	bl	8000b08 <__aeabi_dcmpeq>
 800ff6a:	b108      	cbz	r0, 800ff70 <__cvt+0x7c>
 800ff6c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ff70:	2230      	movs	r2, #48	@ 0x30
 800ff72:	9b03      	ldr	r3, [sp, #12]
 800ff74:	454b      	cmp	r3, r9
 800ff76:	d31e      	bcc.n	800ffb6 <__cvt+0xc2>
 800ff78:	9b03      	ldr	r3, [sp, #12]
 800ff7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff7c:	1b5b      	subs	r3, r3, r5
 800ff7e:	4628      	mov	r0, r5
 800ff80:	6013      	str	r3, [r2, #0]
 800ff82:	b004      	add	sp, #16
 800ff84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ff8c:	eb00 0904 	add.w	r9, r0, r4
 800ff90:	d1e5      	bne.n	800ff5e <__cvt+0x6a>
 800ff92:	7803      	ldrb	r3, [r0, #0]
 800ff94:	2b30      	cmp	r3, #48	@ 0x30
 800ff96:	d10a      	bne.n	800ffae <__cvt+0xba>
 800ff98:	2200      	movs	r2, #0
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	4639      	mov	r1, r7
 800ffa0:	f7f0 fdb2 	bl	8000b08 <__aeabi_dcmpeq>
 800ffa4:	b918      	cbnz	r0, 800ffae <__cvt+0xba>
 800ffa6:	f1c4 0401 	rsb	r4, r4, #1
 800ffaa:	f8ca 4000 	str.w	r4, [sl]
 800ffae:	f8da 3000 	ldr.w	r3, [sl]
 800ffb2:	4499      	add	r9, r3
 800ffb4:	e7d3      	b.n	800ff5e <__cvt+0x6a>
 800ffb6:	1c59      	adds	r1, r3, #1
 800ffb8:	9103      	str	r1, [sp, #12]
 800ffba:	701a      	strb	r2, [r3, #0]
 800ffbc:	e7d9      	b.n	800ff72 <__cvt+0x7e>

0800ffbe <__exponent>:
 800ffbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffc0:	2900      	cmp	r1, #0
 800ffc2:	bfba      	itte	lt
 800ffc4:	4249      	neglt	r1, r1
 800ffc6:	232d      	movlt	r3, #45	@ 0x2d
 800ffc8:	232b      	movge	r3, #43	@ 0x2b
 800ffca:	2909      	cmp	r1, #9
 800ffcc:	7002      	strb	r2, [r0, #0]
 800ffce:	7043      	strb	r3, [r0, #1]
 800ffd0:	dd29      	ble.n	8010026 <__exponent+0x68>
 800ffd2:	f10d 0307 	add.w	r3, sp, #7
 800ffd6:	461d      	mov	r5, r3
 800ffd8:	270a      	movs	r7, #10
 800ffda:	461a      	mov	r2, r3
 800ffdc:	fbb1 f6f7 	udiv	r6, r1, r7
 800ffe0:	fb07 1416 	mls	r4, r7, r6, r1
 800ffe4:	3430      	adds	r4, #48	@ 0x30
 800ffe6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ffea:	460c      	mov	r4, r1
 800ffec:	2c63      	cmp	r4, #99	@ 0x63
 800ffee:	f103 33ff 	add.w	r3, r3, #4294967295
 800fff2:	4631      	mov	r1, r6
 800fff4:	dcf1      	bgt.n	800ffda <__exponent+0x1c>
 800fff6:	3130      	adds	r1, #48	@ 0x30
 800fff8:	1e94      	subs	r4, r2, #2
 800fffa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fffe:	1c41      	adds	r1, r0, #1
 8010000:	4623      	mov	r3, r4
 8010002:	42ab      	cmp	r3, r5
 8010004:	d30a      	bcc.n	801001c <__exponent+0x5e>
 8010006:	f10d 0309 	add.w	r3, sp, #9
 801000a:	1a9b      	subs	r3, r3, r2
 801000c:	42ac      	cmp	r4, r5
 801000e:	bf88      	it	hi
 8010010:	2300      	movhi	r3, #0
 8010012:	3302      	adds	r3, #2
 8010014:	4403      	add	r3, r0
 8010016:	1a18      	subs	r0, r3, r0
 8010018:	b003      	add	sp, #12
 801001a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801001c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010020:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010024:	e7ed      	b.n	8010002 <__exponent+0x44>
 8010026:	2330      	movs	r3, #48	@ 0x30
 8010028:	3130      	adds	r1, #48	@ 0x30
 801002a:	7083      	strb	r3, [r0, #2]
 801002c:	70c1      	strb	r1, [r0, #3]
 801002e:	1d03      	adds	r3, r0, #4
 8010030:	e7f1      	b.n	8010016 <__exponent+0x58>
	...

08010034 <_printf_float>:
 8010034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010038:	b08d      	sub	sp, #52	@ 0x34
 801003a:	460c      	mov	r4, r1
 801003c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010040:	4616      	mov	r6, r2
 8010042:	461f      	mov	r7, r3
 8010044:	4605      	mov	r5, r0
 8010046:	f000 feef 	bl	8010e28 <_localeconv_r>
 801004a:	6803      	ldr	r3, [r0, #0]
 801004c:	9304      	str	r3, [sp, #16]
 801004e:	4618      	mov	r0, r3
 8010050:	f7f0 f92e 	bl	80002b0 <strlen>
 8010054:	2300      	movs	r3, #0
 8010056:	930a      	str	r3, [sp, #40]	@ 0x28
 8010058:	f8d8 3000 	ldr.w	r3, [r8]
 801005c:	9005      	str	r0, [sp, #20]
 801005e:	3307      	adds	r3, #7
 8010060:	f023 0307 	bic.w	r3, r3, #7
 8010064:	f103 0208 	add.w	r2, r3, #8
 8010068:	f894 a018 	ldrb.w	sl, [r4, #24]
 801006c:	f8d4 b000 	ldr.w	fp, [r4]
 8010070:	f8c8 2000 	str.w	r2, [r8]
 8010074:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010078:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801007c:	9307      	str	r3, [sp, #28]
 801007e:	f8cd 8018 	str.w	r8, [sp, #24]
 8010082:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801008a:	4b9c      	ldr	r3, [pc, #624]	@ (80102fc <_printf_float+0x2c8>)
 801008c:	f04f 32ff 	mov.w	r2, #4294967295
 8010090:	f7f0 fd6c 	bl	8000b6c <__aeabi_dcmpun>
 8010094:	bb70      	cbnz	r0, 80100f4 <_printf_float+0xc0>
 8010096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801009a:	4b98      	ldr	r3, [pc, #608]	@ (80102fc <_printf_float+0x2c8>)
 801009c:	f04f 32ff 	mov.w	r2, #4294967295
 80100a0:	f7f0 fd46 	bl	8000b30 <__aeabi_dcmple>
 80100a4:	bb30      	cbnz	r0, 80100f4 <_printf_float+0xc0>
 80100a6:	2200      	movs	r2, #0
 80100a8:	2300      	movs	r3, #0
 80100aa:	4640      	mov	r0, r8
 80100ac:	4649      	mov	r1, r9
 80100ae:	f7f0 fd35 	bl	8000b1c <__aeabi_dcmplt>
 80100b2:	b110      	cbz	r0, 80100ba <_printf_float+0x86>
 80100b4:	232d      	movs	r3, #45	@ 0x2d
 80100b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100ba:	4a91      	ldr	r2, [pc, #580]	@ (8010300 <_printf_float+0x2cc>)
 80100bc:	4b91      	ldr	r3, [pc, #580]	@ (8010304 <_printf_float+0x2d0>)
 80100be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80100c2:	bf94      	ite	ls
 80100c4:	4690      	movls	r8, r2
 80100c6:	4698      	movhi	r8, r3
 80100c8:	2303      	movs	r3, #3
 80100ca:	6123      	str	r3, [r4, #16]
 80100cc:	f02b 0304 	bic.w	r3, fp, #4
 80100d0:	6023      	str	r3, [r4, #0]
 80100d2:	f04f 0900 	mov.w	r9, #0
 80100d6:	9700      	str	r7, [sp, #0]
 80100d8:	4633      	mov	r3, r6
 80100da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80100dc:	4621      	mov	r1, r4
 80100de:	4628      	mov	r0, r5
 80100e0:	f000 f9d2 	bl	8010488 <_printf_common>
 80100e4:	3001      	adds	r0, #1
 80100e6:	f040 808d 	bne.w	8010204 <_printf_float+0x1d0>
 80100ea:	f04f 30ff 	mov.w	r0, #4294967295
 80100ee:	b00d      	add	sp, #52	@ 0x34
 80100f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f4:	4642      	mov	r2, r8
 80100f6:	464b      	mov	r3, r9
 80100f8:	4640      	mov	r0, r8
 80100fa:	4649      	mov	r1, r9
 80100fc:	f7f0 fd36 	bl	8000b6c <__aeabi_dcmpun>
 8010100:	b140      	cbz	r0, 8010114 <_printf_float+0xe0>
 8010102:	464b      	mov	r3, r9
 8010104:	2b00      	cmp	r3, #0
 8010106:	bfbc      	itt	lt
 8010108:	232d      	movlt	r3, #45	@ 0x2d
 801010a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801010e:	4a7e      	ldr	r2, [pc, #504]	@ (8010308 <_printf_float+0x2d4>)
 8010110:	4b7e      	ldr	r3, [pc, #504]	@ (801030c <_printf_float+0x2d8>)
 8010112:	e7d4      	b.n	80100be <_printf_float+0x8a>
 8010114:	6863      	ldr	r3, [r4, #4]
 8010116:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801011a:	9206      	str	r2, [sp, #24]
 801011c:	1c5a      	adds	r2, r3, #1
 801011e:	d13b      	bne.n	8010198 <_printf_float+0x164>
 8010120:	2306      	movs	r3, #6
 8010122:	6063      	str	r3, [r4, #4]
 8010124:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010128:	2300      	movs	r3, #0
 801012a:	6022      	str	r2, [r4, #0]
 801012c:	9303      	str	r3, [sp, #12]
 801012e:	ab0a      	add	r3, sp, #40	@ 0x28
 8010130:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010134:	ab09      	add	r3, sp, #36	@ 0x24
 8010136:	9300      	str	r3, [sp, #0]
 8010138:	6861      	ldr	r1, [r4, #4]
 801013a:	ec49 8b10 	vmov	d0, r8, r9
 801013e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010142:	4628      	mov	r0, r5
 8010144:	f7ff fed6 	bl	800fef4 <__cvt>
 8010148:	9b06      	ldr	r3, [sp, #24]
 801014a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801014c:	2b47      	cmp	r3, #71	@ 0x47
 801014e:	4680      	mov	r8, r0
 8010150:	d129      	bne.n	80101a6 <_printf_float+0x172>
 8010152:	1cc8      	adds	r0, r1, #3
 8010154:	db02      	blt.n	801015c <_printf_float+0x128>
 8010156:	6863      	ldr	r3, [r4, #4]
 8010158:	4299      	cmp	r1, r3
 801015a:	dd41      	ble.n	80101e0 <_printf_float+0x1ac>
 801015c:	f1aa 0a02 	sub.w	sl, sl, #2
 8010160:	fa5f fa8a 	uxtb.w	sl, sl
 8010164:	3901      	subs	r1, #1
 8010166:	4652      	mov	r2, sl
 8010168:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801016c:	9109      	str	r1, [sp, #36]	@ 0x24
 801016e:	f7ff ff26 	bl	800ffbe <__exponent>
 8010172:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010174:	1813      	adds	r3, r2, r0
 8010176:	2a01      	cmp	r2, #1
 8010178:	4681      	mov	r9, r0
 801017a:	6123      	str	r3, [r4, #16]
 801017c:	dc02      	bgt.n	8010184 <_printf_float+0x150>
 801017e:	6822      	ldr	r2, [r4, #0]
 8010180:	07d2      	lsls	r2, r2, #31
 8010182:	d501      	bpl.n	8010188 <_printf_float+0x154>
 8010184:	3301      	adds	r3, #1
 8010186:	6123      	str	r3, [r4, #16]
 8010188:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801018c:	2b00      	cmp	r3, #0
 801018e:	d0a2      	beq.n	80100d6 <_printf_float+0xa2>
 8010190:	232d      	movs	r3, #45	@ 0x2d
 8010192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010196:	e79e      	b.n	80100d6 <_printf_float+0xa2>
 8010198:	9a06      	ldr	r2, [sp, #24]
 801019a:	2a47      	cmp	r2, #71	@ 0x47
 801019c:	d1c2      	bne.n	8010124 <_printf_float+0xf0>
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d1c0      	bne.n	8010124 <_printf_float+0xf0>
 80101a2:	2301      	movs	r3, #1
 80101a4:	e7bd      	b.n	8010122 <_printf_float+0xee>
 80101a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80101aa:	d9db      	bls.n	8010164 <_printf_float+0x130>
 80101ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80101b0:	d118      	bne.n	80101e4 <_printf_float+0x1b0>
 80101b2:	2900      	cmp	r1, #0
 80101b4:	6863      	ldr	r3, [r4, #4]
 80101b6:	dd0b      	ble.n	80101d0 <_printf_float+0x19c>
 80101b8:	6121      	str	r1, [r4, #16]
 80101ba:	b913      	cbnz	r3, 80101c2 <_printf_float+0x18e>
 80101bc:	6822      	ldr	r2, [r4, #0]
 80101be:	07d0      	lsls	r0, r2, #31
 80101c0:	d502      	bpl.n	80101c8 <_printf_float+0x194>
 80101c2:	3301      	adds	r3, #1
 80101c4:	440b      	add	r3, r1
 80101c6:	6123      	str	r3, [r4, #16]
 80101c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80101ca:	f04f 0900 	mov.w	r9, #0
 80101ce:	e7db      	b.n	8010188 <_printf_float+0x154>
 80101d0:	b913      	cbnz	r3, 80101d8 <_printf_float+0x1a4>
 80101d2:	6822      	ldr	r2, [r4, #0]
 80101d4:	07d2      	lsls	r2, r2, #31
 80101d6:	d501      	bpl.n	80101dc <_printf_float+0x1a8>
 80101d8:	3302      	adds	r3, #2
 80101da:	e7f4      	b.n	80101c6 <_printf_float+0x192>
 80101dc:	2301      	movs	r3, #1
 80101de:	e7f2      	b.n	80101c6 <_printf_float+0x192>
 80101e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80101e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101e6:	4299      	cmp	r1, r3
 80101e8:	db05      	blt.n	80101f6 <_printf_float+0x1c2>
 80101ea:	6823      	ldr	r3, [r4, #0]
 80101ec:	6121      	str	r1, [r4, #16]
 80101ee:	07d8      	lsls	r0, r3, #31
 80101f0:	d5ea      	bpl.n	80101c8 <_printf_float+0x194>
 80101f2:	1c4b      	adds	r3, r1, #1
 80101f4:	e7e7      	b.n	80101c6 <_printf_float+0x192>
 80101f6:	2900      	cmp	r1, #0
 80101f8:	bfd4      	ite	le
 80101fa:	f1c1 0202 	rsble	r2, r1, #2
 80101fe:	2201      	movgt	r2, #1
 8010200:	4413      	add	r3, r2
 8010202:	e7e0      	b.n	80101c6 <_printf_float+0x192>
 8010204:	6823      	ldr	r3, [r4, #0]
 8010206:	055a      	lsls	r2, r3, #21
 8010208:	d407      	bmi.n	801021a <_printf_float+0x1e6>
 801020a:	6923      	ldr	r3, [r4, #16]
 801020c:	4642      	mov	r2, r8
 801020e:	4631      	mov	r1, r6
 8010210:	4628      	mov	r0, r5
 8010212:	47b8      	blx	r7
 8010214:	3001      	adds	r0, #1
 8010216:	d12b      	bne.n	8010270 <_printf_float+0x23c>
 8010218:	e767      	b.n	80100ea <_printf_float+0xb6>
 801021a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801021e:	f240 80dd 	bls.w	80103dc <_printf_float+0x3a8>
 8010222:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010226:	2200      	movs	r2, #0
 8010228:	2300      	movs	r3, #0
 801022a:	f7f0 fc6d 	bl	8000b08 <__aeabi_dcmpeq>
 801022e:	2800      	cmp	r0, #0
 8010230:	d033      	beq.n	801029a <_printf_float+0x266>
 8010232:	4a37      	ldr	r2, [pc, #220]	@ (8010310 <_printf_float+0x2dc>)
 8010234:	2301      	movs	r3, #1
 8010236:	4631      	mov	r1, r6
 8010238:	4628      	mov	r0, r5
 801023a:	47b8      	blx	r7
 801023c:	3001      	adds	r0, #1
 801023e:	f43f af54 	beq.w	80100ea <_printf_float+0xb6>
 8010242:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010246:	4543      	cmp	r3, r8
 8010248:	db02      	blt.n	8010250 <_printf_float+0x21c>
 801024a:	6823      	ldr	r3, [r4, #0]
 801024c:	07d8      	lsls	r0, r3, #31
 801024e:	d50f      	bpl.n	8010270 <_printf_float+0x23c>
 8010250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010254:	4631      	mov	r1, r6
 8010256:	4628      	mov	r0, r5
 8010258:	47b8      	blx	r7
 801025a:	3001      	adds	r0, #1
 801025c:	f43f af45 	beq.w	80100ea <_printf_float+0xb6>
 8010260:	f04f 0900 	mov.w	r9, #0
 8010264:	f108 38ff 	add.w	r8, r8, #4294967295
 8010268:	f104 0a1a 	add.w	sl, r4, #26
 801026c:	45c8      	cmp	r8, r9
 801026e:	dc09      	bgt.n	8010284 <_printf_float+0x250>
 8010270:	6823      	ldr	r3, [r4, #0]
 8010272:	079b      	lsls	r3, r3, #30
 8010274:	f100 8103 	bmi.w	801047e <_printf_float+0x44a>
 8010278:	68e0      	ldr	r0, [r4, #12]
 801027a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801027c:	4298      	cmp	r0, r3
 801027e:	bfb8      	it	lt
 8010280:	4618      	movlt	r0, r3
 8010282:	e734      	b.n	80100ee <_printf_float+0xba>
 8010284:	2301      	movs	r3, #1
 8010286:	4652      	mov	r2, sl
 8010288:	4631      	mov	r1, r6
 801028a:	4628      	mov	r0, r5
 801028c:	47b8      	blx	r7
 801028e:	3001      	adds	r0, #1
 8010290:	f43f af2b 	beq.w	80100ea <_printf_float+0xb6>
 8010294:	f109 0901 	add.w	r9, r9, #1
 8010298:	e7e8      	b.n	801026c <_printf_float+0x238>
 801029a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801029c:	2b00      	cmp	r3, #0
 801029e:	dc39      	bgt.n	8010314 <_printf_float+0x2e0>
 80102a0:	4a1b      	ldr	r2, [pc, #108]	@ (8010310 <_printf_float+0x2dc>)
 80102a2:	2301      	movs	r3, #1
 80102a4:	4631      	mov	r1, r6
 80102a6:	4628      	mov	r0, r5
 80102a8:	47b8      	blx	r7
 80102aa:	3001      	adds	r0, #1
 80102ac:	f43f af1d 	beq.w	80100ea <_printf_float+0xb6>
 80102b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80102b4:	ea59 0303 	orrs.w	r3, r9, r3
 80102b8:	d102      	bne.n	80102c0 <_printf_float+0x28c>
 80102ba:	6823      	ldr	r3, [r4, #0]
 80102bc:	07d9      	lsls	r1, r3, #31
 80102be:	d5d7      	bpl.n	8010270 <_printf_float+0x23c>
 80102c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102c4:	4631      	mov	r1, r6
 80102c6:	4628      	mov	r0, r5
 80102c8:	47b8      	blx	r7
 80102ca:	3001      	adds	r0, #1
 80102cc:	f43f af0d 	beq.w	80100ea <_printf_float+0xb6>
 80102d0:	f04f 0a00 	mov.w	sl, #0
 80102d4:	f104 0b1a 	add.w	fp, r4, #26
 80102d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102da:	425b      	negs	r3, r3
 80102dc:	4553      	cmp	r3, sl
 80102de:	dc01      	bgt.n	80102e4 <_printf_float+0x2b0>
 80102e0:	464b      	mov	r3, r9
 80102e2:	e793      	b.n	801020c <_printf_float+0x1d8>
 80102e4:	2301      	movs	r3, #1
 80102e6:	465a      	mov	r2, fp
 80102e8:	4631      	mov	r1, r6
 80102ea:	4628      	mov	r0, r5
 80102ec:	47b8      	blx	r7
 80102ee:	3001      	adds	r0, #1
 80102f0:	f43f aefb 	beq.w	80100ea <_printf_float+0xb6>
 80102f4:	f10a 0a01 	add.w	sl, sl, #1
 80102f8:	e7ee      	b.n	80102d8 <_printf_float+0x2a4>
 80102fa:	bf00      	nop
 80102fc:	7fefffff 	.word	0x7fefffff
 8010300:	0801482c 	.word	0x0801482c
 8010304:	08014830 	.word	0x08014830
 8010308:	08014834 	.word	0x08014834
 801030c:	08014838 	.word	0x08014838
 8010310:	0801483c 	.word	0x0801483c
 8010314:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010316:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801031a:	4553      	cmp	r3, sl
 801031c:	bfa8      	it	ge
 801031e:	4653      	movge	r3, sl
 8010320:	2b00      	cmp	r3, #0
 8010322:	4699      	mov	r9, r3
 8010324:	dc36      	bgt.n	8010394 <_printf_float+0x360>
 8010326:	f04f 0b00 	mov.w	fp, #0
 801032a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801032e:	f104 021a 	add.w	r2, r4, #26
 8010332:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010334:	9306      	str	r3, [sp, #24]
 8010336:	eba3 0309 	sub.w	r3, r3, r9
 801033a:	455b      	cmp	r3, fp
 801033c:	dc31      	bgt.n	80103a2 <_printf_float+0x36e>
 801033e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010340:	459a      	cmp	sl, r3
 8010342:	dc3a      	bgt.n	80103ba <_printf_float+0x386>
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	07da      	lsls	r2, r3, #31
 8010348:	d437      	bmi.n	80103ba <_printf_float+0x386>
 801034a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801034c:	ebaa 0903 	sub.w	r9, sl, r3
 8010350:	9b06      	ldr	r3, [sp, #24]
 8010352:	ebaa 0303 	sub.w	r3, sl, r3
 8010356:	4599      	cmp	r9, r3
 8010358:	bfa8      	it	ge
 801035a:	4699      	movge	r9, r3
 801035c:	f1b9 0f00 	cmp.w	r9, #0
 8010360:	dc33      	bgt.n	80103ca <_printf_float+0x396>
 8010362:	f04f 0800 	mov.w	r8, #0
 8010366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801036a:	f104 0b1a 	add.w	fp, r4, #26
 801036e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010370:	ebaa 0303 	sub.w	r3, sl, r3
 8010374:	eba3 0309 	sub.w	r3, r3, r9
 8010378:	4543      	cmp	r3, r8
 801037a:	f77f af79 	ble.w	8010270 <_printf_float+0x23c>
 801037e:	2301      	movs	r3, #1
 8010380:	465a      	mov	r2, fp
 8010382:	4631      	mov	r1, r6
 8010384:	4628      	mov	r0, r5
 8010386:	47b8      	blx	r7
 8010388:	3001      	adds	r0, #1
 801038a:	f43f aeae 	beq.w	80100ea <_printf_float+0xb6>
 801038e:	f108 0801 	add.w	r8, r8, #1
 8010392:	e7ec      	b.n	801036e <_printf_float+0x33a>
 8010394:	4642      	mov	r2, r8
 8010396:	4631      	mov	r1, r6
 8010398:	4628      	mov	r0, r5
 801039a:	47b8      	blx	r7
 801039c:	3001      	adds	r0, #1
 801039e:	d1c2      	bne.n	8010326 <_printf_float+0x2f2>
 80103a0:	e6a3      	b.n	80100ea <_printf_float+0xb6>
 80103a2:	2301      	movs	r3, #1
 80103a4:	4631      	mov	r1, r6
 80103a6:	4628      	mov	r0, r5
 80103a8:	9206      	str	r2, [sp, #24]
 80103aa:	47b8      	blx	r7
 80103ac:	3001      	adds	r0, #1
 80103ae:	f43f ae9c 	beq.w	80100ea <_printf_float+0xb6>
 80103b2:	9a06      	ldr	r2, [sp, #24]
 80103b4:	f10b 0b01 	add.w	fp, fp, #1
 80103b8:	e7bb      	b.n	8010332 <_printf_float+0x2fe>
 80103ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103be:	4631      	mov	r1, r6
 80103c0:	4628      	mov	r0, r5
 80103c2:	47b8      	blx	r7
 80103c4:	3001      	adds	r0, #1
 80103c6:	d1c0      	bne.n	801034a <_printf_float+0x316>
 80103c8:	e68f      	b.n	80100ea <_printf_float+0xb6>
 80103ca:	9a06      	ldr	r2, [sp, #24]
 80103cc:	464b      	mov	r3, r9
 80103ce:	4442      	add	r2, r8
 80103d0:	4631      	mov	r1, r6
 80103d2:	4628      	mov	r0, r5
 80103d4:	47b8      	blx	r7
 80103d6:	3001      	adds	r0, #1
 80103d8:	d1c3      	bne.n	8010362 <_printf_float+0x32e>
 80103da:	e686      	b.n	80100ea <_printf_float+0xb6>
 80103dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80103e0:	f1ba 0f01 	cmp.w	sl, #1
 80103e4:	dc01      	bgt.n	80103ea <_printf_float+0x3b6>
 80103e6:	07db      	lsls	r3, r3, #31
 80103e8:	d536      	bpl.n	8010458 <_printf_float+0x424>
 80103ea:	2301      	movs	r3, #1
 80103ec:	4642      	mov	r2, r8
 80103ee:	4631      	mov	r1, r6
 80103f0:	4628      	mov	r0, r5
 80103f2:	47b8      	blx	r7
 80103f4:	3001      	adds	r0, #1
 80103f6:	f43f ae78 	beq.w	80100ea <_printf_float+0xb6>
 80103fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103fe:	4631      	mov	r1, r6
 8010400:	4628      	mov	r0, r5
 8010402:	47b8      	blx	r7
 8010404:	3001      	adds	r0, #1
 8010406:	f43f ae70 	beq.w	80100ea <_printf_float+0xb6>
 801040a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801040e:	2200      	movs	r2, #0
 8010410:	2300      	movs	r3, #0
 8010412:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010416:	f7f0 fb77 	bl	8000b08 <__aeabi_dcmpeq>
 801041a:	b9c0      	cbnz	r0, 801044e <_printf_float+0x41a>
 801041c:	4653      	mov	r3, sl
 801041e:	f108 0201 	add.w	r2, r8, #1
 8010422:	4631      	mov	r1, r6
 8010424:	4628      	mov	r0, r5
 8010426:	47b8      	blx	r7
 8010428:	3001      	adds	r0, #1
 801042a:	d10c      	bne.n	8010446 <_printf_float+0x412>
 801042c:	e65d      	b.n	80100ea <_printf_float+0xb6>
 801042e:	2301      	movs	r3, #1
 8010430:	465a      	mov	r2, fp
 8010432:	4631      	mov	r1, r6
 8010434:	4628      	mov	r0, r5
 8010436:	47b8      	blx	r7
 8010438:	3001      	adds	r0, #1
 801043a:	f43f ae56 	beq.w	80100ea <_printf_float+0xb6>
 801043e:	f108 0801 	add.w	r8, r8, #1
 8010442:	45d0      	cmp	r8, sl
 8010444:	dbf3      	blt.n	801042e <_printf_float+0x3fa>
 8010446:	464b      	mov	r3, r9
 8010448:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801044c:	e6df      	b.n	801020e <_printf_float+0x1da>
 801044e:	f04f 0800 	mov.w	r8, #0
 8010452:	f104 0b1a 	add.w	fp, r4, #26
 8010456:	e7f4      	b.n	8010442 <_printf_float+0x40e>
 8010458:	2301      	movs	r3, #1
 801045a:	4642      	mov	r2, r8
 801045c:	e7e1      	b.n	8010422 <_printf_float+0x3ee>
 801045e:	2301      	movs	r3, #1
 8010460:	464a      	mov	r2, r9
 8010462:	4631      	mov	r1, r6
 8010464:	4628      	mov	r0, r5
 8010466:	47b8      	blx	r7
 8010468:	3001      	adds	r0, #1
 801046a:	f43f ae3e 	beq.w	80100ea <_printf_float+0xb6>
 801046e:	f108 0801 	add.w	r8, r8, #1
 8010472:	68e3      	ldr	r3, [r4, #12]
 8010474:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010476:	1a5b      	subs	r3, r3, r1
 8010478:	4543      	cmp	r3, r8
 801047a:	dcf0      	bgt.n	801045e <_printf_float+0x42a>
 801047c:	e6fc      	b.n	8010278 <_printf_float+0x244>
 801047e:	f04f 0800 	mov.w	r8, #0
 8010482:	f104 0919 	add.w	r9, r4, #25
 8010486:	e7f4      	b.n	8010472 <_printf_float+0x43e>

08010488 <_printf_common>:
 8010488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801048c:	4616      	mov	r6, r2
 801048e:	4698      	mov	r8, r3
 8010490:	688a      	ldr	r2, [r1, #8]
 8010492:	690b      	ldr	r3, [r1, #16]
 8010494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010498:	4293      	cmp	r3, r2
 801049a:	bfb8      	it	lt
 801049c:	4613      	movlt	r3, r2
 801049e:	6033      	str	r3, [r6, #0]
 80104a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80104a4:	4607      	mov	r7, r0
 80104a6:	460c      	mov	r4, r1
 80104a8:	b10a      	cbz	r2, 80104ae <_printf_common+0x26>
 80104aa:	3301      	adds	r3, #1
 80104ac:	6033      	str	r3, [r6, #0]
 80104ae:	6823      	ldr	r3, [r4, #0]
 80104b0:	0699      	lsls	r1, r3, #26
 80104b2:	bf42      	ittt	mi
 80104b4:	6833      	ldrmi	r3, [r6, #0]
 80104b6:	3302      	addmi	r3, #2
 80104b8:	6033      	strmi	r3, [r6, #0]
 80104ba:	6825      	ldr	r5, [r4, #0]
 80104bc:	f015 0506 	ands.w	r5, r5, #6
 80104c0:	d106      	bne.n	80104d0 <_printf_common+0x48>
 80104c2:	f104 0a19 	add.w	sl, r4, #25
 80104c6:	68e3      	ldr	r3, [r4, #12]
 80104c8:	6832      	ldr	r2, [r6, #0]
 80104ca:	1a9b      	subs	r3, r3, r2
 80104cc:	42ab      	cmp	r3, r5
 80104ce:	dc26      	bgt.n	801051e <_printf_common+0x96>
 80104d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80104d4:	6822      	ldr	r2, [r4, #0]
 80104d6:	3b00      	subs	r3, #0
 80104d8:	bf18      	it	ne
 80104da:	2301      	movne	r3, #1
 80104dc:	0692      	lsls	r2, r2, #26
 80104de:	d42b      	bmi.n	8010538 <_printf_common+0xb0>
 80104e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80104e4:	4641      	mov	r1, r8
 80104e6:	4638      	mov	r0, r7
 80104e8:	47c8      	blx	r9
 80104ea:	3001      	adds	r0, #1
 80104ec:	d01e      	beq.n	801052c <_printf_common+0xa4>
 80104ee:	6823      	ldr	r3, [r4, #0]
 80104f0:	6922      	ldr	r2, [r4, #16]
 80104f2:	f003 0306 	and.w	r3, r3, #6
 80104f6:	2b04      	cmp	r3, #4
 80104f8:	bf02      	ittt	eq
 80104fa:	68e5      	ldreq	r5, [r4, #12]
 80104fc:	6833      	ldreq	r3, [r6, #0]
 80104fe:	1aed      	subeq	r5, r5, r3
 8010500:	68a3      	ldr	r3, [r4, #8]
 8010502:	bf0c      	ite	eq
 8010504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010508:	2500      	movne	r5, #0
 801050a:	4293      	cmp	r3, r2
 801050c:	bfc4      	itt	gt
 801050e:	1a9b      	subgt	r3, r3, r2
 8010510:	18ed      	addgt	r5, r5, r3
 8010512:	2600      	movs	r6, #0
 8010514:	341a      	adds	r4, #26
 8010516:	42b5      	cmp	r5, r6
 8010518:	d11a      	bne.n	8010550 <_printf_common+0xc8>
 801051a:	2000      	movs	r0, #0
 801051c:	e008      	b.n	8010530 <_printf_common+0xa8>
 801051e:	2301      	movs	r3, #1
 8010520:	4652      	mov	r2, sl
 8010522:	4641      	mov	r1, r8
 8010524:	4638      	mov	r0, r7
 8010526:	47c8      	blx	r9
 8010528:	3001      	adds	r0, #1
 801052a:	d103      	bne.n	8010534 <_printf_common+0xac>
 801052c:	f04f 30ff 	mov.w	r0, #4294967295
 8010530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010534:	3501      	adds	r5, #1
 8010536:	e7c6      	b.n	80104c6 <_printf_common+0x3e>
 8010538:	18e1      	adds	r1, r4, r3
 801053a:	1c5a      	adds	r2, r3, #1
 801053c:	2030      	movs	r0, #48	@ 0x30
 801053e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010542:	4422      	add	r2, r4
 8010544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801054c:	3302      	adds	r3, #2
 801054e:	e7c7      	b.n	80104e0 <_printf_common+0x58>
 8010550:	2301      	movs	r3, #1
 8010552:	4622      	mov	r2, r4
 8010554:	4641      	mov	r1, r8
 8010556:	4638      	mov	r0, r7
 8010558:	47c8      	blx	r9
 801055a:	3001      	adds	r0, #1
 801055c:	d0e6      	beq.n	801052c <_printf_common+0xa4>
 801055e:	3601      	adds	r6, #1
 8010560:	e7d9      	b.n	8010516 <_printf_common+0x8e>
	...

08010564 <_printf_i>:
 8010564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010568:	7e0f      	ldrb	r7, [r1, #24]
 801056a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801056c:	2f78      	cmp	r7, #120	@ 0x78
 801056e:	4691      	mov	r9, r2
 8010570:	4680      	mov	r8, r0
 8010572:	460c      	mov	r4, r1
 8010574:	469a      	mov	sl, r3
 8010576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801057a:	d807      	bhi.n	801058c <_printf_i+0x28>
 801057c:	2f62      	cmp	r7, #98	@ 0x62
 801057e:	d80a      	bhi.n	8010596 <_printf_i+0x32>
 8010580:	2f00      	cmp	r7, #0
 8010582:	f000 80d2 	beq.w	801072a <_printf_i+0x1c6>
 8010586:	2f58      	cmp	r7, #88	@ 0x58
 8010588:	f000 80b9 	beq.w	80106fe <_printf_i+0x19a>
 801058c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010594:	e03a      	b.n	801060c <_printf_i+0xa8>
 8010596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801059a:	2b15      	cmp	r3, #21
 801059c:	d8f6      	bhi.n	801058c <_printf_i+0x28>
 801059e:	a101      	add	r1, pc, #4	@ (adr r1, 80105a4 <_printf_i+0x40>)
 80105a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105a4:	080105fd 	.word	0x080105fd
 80105a8:	08010611 	.word	0x08010611
 80105ac:	0801058d 	.word	0x0801058d
 80105b0:	0801058d 	.word	0x0801058d
 80105b4:	0801058d 	.word	0x0801058d
 80105b8:	0801058d 	.word	0x0801058d
 80105bc:	08010611 	.word	0x08010611
 80105c0:	0801058d 	.word	0x0801058d
 80105c4:	0801058d 	.word	0x0801058d
 80105c8:	0801058d 	.word	0x0801058d
 80105cc:	0801058d 	.word	0x0801058d
 80105d0:	08010711 	.word	0x08010711
 80105d4:	0801063b 	.word	0x0801063b
 80105d8:	080106cb 	.word	0x080106cb
 80105dc:	0801058d 	.word	0x0801058d
 80105e0:	0801058d 	.word	0x0801058d
 80105e4:	08010733 	.word	0x08010733
 80105e8:	0801058d 	.word	0x0801058d
 80105ec:	0801063b 	.word	0x0801063b
 80105f0:	0801058d 	.word	0x0801058d
 80105f4:	0801058d 	.word	0x0801058d
 80105f8:	080106d3 	.word	0x080106d3
 80105fc:	6833      	ldr	r3, [r6, #0]
 80105fe:	1d1a      	adds	r2, r3, #4
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	6032      	str	r2, [r6, #0]
 8010604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801060c:	2301      	movs	r3, #1
 801060e:	e09d      	b.n	801074c <_printf_i+0x1e8>
 8010610:	6833      	ldr	r3, [r6, #0]
 8010612:	6820      	ldr	r0, [r4, #0]
 8010614:	1d19      	adds	r1, r3, #4
 8010616:	6031      	str	r1, [r6, #0]
 8010618:	0606      	lsls	r6, r0, #24
 801061a:	d501      	bpl.n	8010620 <_printf_i+0xbc>
 801061c:	681d      	ldr	r5, [r3, #0]
 801061e:	e003      	b.n	8010628 <_printf_i+0xc4>
 8010620:	0645      	lsls	r5, r0, #25
 8010622:	d5fb      	bpl.n	801061c <_printf_i+0xb8>
 8010624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010628:	2d00      	cmp	r5, #0
 801062a:	da03      	bge.n	8010634 <_printf_i+0xd0>
 801062c:	232d      	movs	r3, #45	@ 0x2d
 801062e:	426d      	negs	r5, r5
 8010630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010634:	4859      	ldr	r0, [pc, #356]	@ (801079c <_printf_i+0x238>)
 8010636:	230a      	movs	r3, #10
 8010638:	e011      	b.n	801065e <_printf_i+0xfa>
 801063a:	6821      	ldr	r1, [r4, #0]
 801063c:	6833      	ldr	r3, [r6, #0]
 801063e:	0608      	lsls	r0, r1, #24
 8010640:	f853 5b04 	ldr.w	r5, [r3], #4
 8010644:	d402      	bmi.n	801064c <_printf_i+0xe8>
 8010646:	0649      	lsls	r1, r1, #25
 8010648:	bf48      	it	mi
 801064a:	b2ad      	uxthmi	r5, r5
 801064c:	2f6f      	cmp	r7, #111	@ 0x6f
 801064e:	4853      	ldr	r0, [pc, #332]	@ (801079c <_printf_i+0x238>)
 8010650:	6033      	str	r3, [r6, #0]
 8010652:	bf14      	ite	ne
 8010654:	230a      	movne	r3, #10
 8010656:	2308      	moveq	r3, #8
 8010658:	2100      	movs	r1, #0
 801065a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801065e:	6866      	ldr	r6, [r4, #4]
 8010660:	60a6      	str	r6, [r4, #8]
 8010662:	2e00      	cmp	r6, #0
 8010664:	bfa2      	ittt	ge
 8010666:	6821      	ldrge	r1, [r4, #0]
 8010668:	f021 0104 	bicge.w	r1, r1, #4
 801066c:	6021      	strge	r1, [r4, #0]
 801066e:	b90d      	cbnz	r5, 8010674 <_printf_i+0x110>
 8010670:	2e00      	cmp	r6, #0
 8010672:	d04b      	beq.n	801070c <_printf_i+0x1a8>
 8010674:	4616      	mov	r6, r2
 8010676:	fbb5 f1f3 	udiv	r1, r5, r3
 801067a:	fb03 5711 	mls	r7, r3, r1, r5
 801067e:	5dc7      	ldrb	r7, [r0, r7]
 8010680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010684:	462f      	mov	r7, r5
 8010686:	42bb      	cmp	r3, r7
 8010688:	460d      	mov	r5, r1
 801068a:	d9f4      	bls.n	8010676 <_printf_i+0x112>
 801068c:	2b08      	cmp	r3, #8
 801068e:	d10b      	bne.n	80106a8 <_printf_i+0x144>
 8010690:	6823      	ldr	r3, [r4, #0]
 8010692:	07df      	lsls	r7, r3, #31
 8010694:	d508      	bpl.n	80106a8 <_printf_i+0x144>
 8010696:	6923      	ldr	r3, [r4, #16]
 8010698:	6861      	ldr	r1, [r4, #4]
 801069a:	4299      	cmp	r1, r3
 801069c:	bfde      	ittt	le
 801069e:	2330      	movle	r3, #48	@ 0x30
 80106a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80106a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80106a8:	1b92      	subs	r2, r2, r6
 80106aa:	6122      	str	r2, [r4, #16]
 80106ac:	f8cd a000 	str.w	sl, [sp]
 80106b0:	464b      	mov	r3, r9
 80106b2:	aa03      	add	r2, sp, #12
 80106b4:	4621      	mov	r1, r4
 80106b6:	4640      	mov	r0, r8
 80106b8:	f7ff fee6 	bl	8010488 <_printf_common>
 80106bc:	3001      	adds	r0, #1
 80106be:	d14a      	bne.n	8010756 <_printf_i+0x1f2>
 80106c0:	f04f 30ff 	mov.w	r0, #4294967295
 80106c4:	b004      	add	sp, #16
 80106c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ca:	6823      	ldr	r3, [r4, #0]
 80106cc:	f043 0320 	orr.w	r3, r3, #32
 80106d0:	6023      	str	r3, [r4, #0]
 80106d2:	4833      	ldr	r0, [pc, #204]	@ (80107a0 <_printf_i+0x23c>)
 80106d4:	2778      	movs	r7, #120	@ 0x78
 80106d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80106da:	6823      	ldr	r3, [r4, #0]
 80106dc:	6831      	ldr	r1, [r6, #0]
 80106de:	061f      	lsls	r7, r3, #24
 80106e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80106e4:	d402      	bmi.n	80106ec <_printf_i+0x188>
 80106e6:	065f      	lsls	r7, r3, #25
 80106e8:	bf48      	it	mi
 80106ea:	b2ad      	uxthmi	r5, r5
 80106ec:	6031      	str	r1, [r6, #0]
 80106ee:	07d9      	lsls	r1, r3, #31
 80106f0:	bf44      	itt	mi
 80106f2:	f043 0320 	orrmi.w	r3, r3, #32
 80106f6:	6023      	strmi	r3, [r4, #0]
 80106f8:	b11d      	cbz	r5, 8010702 <_printf_i+0x19e>
 80106fa:	2310      	movs	r3, #16
 80106fc:	e7ac      	b.n	8010658 <_printf_i+0xf4>
 80106fe:	4827      	ldr	r0, [pc, #156]	@ (801079c <_printf_i+0x238>)
 8010700:	e7e9      	b.n	80106d6 <_printf_i+0x172>
 8010702:	6823      	ldr	r3, [r4, #0]
 8010704:	f023 0320 	bic.w	r3, r3, #32
 8010708:	6023      	str	r3, [r4, #0]
 801070a:	e7f6      	b.n	80106fa <_printf_i+0x196>
 801070c:	4616      	mov	r6, r2
 801070e:	e7bd      	b.n	801068c <_printf_i+0x128>
 8010710:	6833      	ldr	r3, [r6, #0]
 8010712:	6825      	ldr	r5, [r4, #0]
 8010714:	6961      	ldr	r1, [r4, #20]
 8010716:	1d18      	adds	r0, r3, #4
 8010718:	6030      	str	r0, [r6, #0]
 801071a:	062e      	lsls	r6, r5, #24
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	d501      	bpl.n	8010724 <_printf_i+0x1c0>
 8010720:	6019      	str	r1, [r3, #0]
 8010722:	e002      	b.n	801072a <_printf_i+0x1c6>
 8010724:	0668      	lsls	r0, r5, #25
 8010726:	d5fb      	bpl.n	8010720 <_printf_i+0x1bc>
 8010728:	8019      	strh	r1, [r3, #0]
 801072a:	2300      	movs	r3, #0
 801072c:	6123      	str	r3, [r4, #16]
 801072e:	4616      	mov	r6, r2
 8010730:	e7bc      	b.n	80106ac <_printf_i+0x148>
 8010732:	6833      	ldr	r3, [r6, #0]
 8010734:	1d1a      	adds	r2, r3, #4
 8010736:	6032      	str	r2, [r6, #0]
 8010738:	681e      	ldr	r6, [r3, #0]
 801073a:	6862      	ldr	r2, [r4, #4]
 801073c:	2100      	movs	r1, #0
 801073e:	4630      	mov	r0, r6
 8010740:	f7ef fd66 	bl	8000210 <memchr>
 8010744:	b108      	cbz	r0, 801074a <_printf_i+0x1e6>
 8010746:	1b80      	subs	r0, r0, r6
 8010748:	6060      	str	r0, [r4, #4]
 801074a:	6863      	ldr	r3, [r4, #4]
 801074c:	6123      	str	r3, [r4, #16]
 801074e:	2300      	movs	r3, #0
 8010750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010754:	e7aa      	b.n	80106ac <_printf_i+0x148>
 8010756:	6923      	ldr	r3, [r4, #16]
 8010758:	4632      	mov	r2, r6
 801075a:	4649      	mov	r1, r9
 801075c:	4640      	mov	r0, r8
 801075e:	47d0      	blx	sl
 8010760:	3001      	adds	r0, #1
 8010762:	d0ad      	beq.n	80106c0 <_printf_i+0x15c>
 8010764:	6823      	ldr	r3, [r4, #0]
 8010766:	079b      	lsls	r3, r3, #30
 8010768:	d413      	bmi.n	8010792 <_printf_i+0x22e>
 801076a:	68e0      	ldr	r0, [r4, #12]
 801076c:	9b03      	ldr	r3, [sp, #12]
 801076e:	4298      	cmp	r0, r3
 8010770:	bfb8      	it	lt
 8010772:	4618      	movlt	r0, r3
 8010774:	e7a6      	b.n	80106c4 <_printf_i+0x160>
 8010776:	2301      	movs	r3, #1
 8010778:	4632      	mov	r2, r6
 801077a:	4649      	mov	r1, r9
 801077c:	4640      	mov	r0, r8
 801077e:	47d0      	blx	sl
 8010780:	3001      	adds	r0, #1
 8010782:	d09d      	beq.n	80106c0 <_printf_i+0x15c>
 8010784:	3501      	adds	r5, #1
 8010786:	68e3      	ldr	r3, [r4, #12]
 8010788:	9903      	ldr	r1, [sp, #12]
 801078a:	1a5b      	subs	r3, r3, r1
 801078c:	42ab      	cmp	r3, r5
 801078e:	dcf2      	bgt.n	8010776 <_printf_i+0x212>
 8010790:	e7eb      	b.n	801076a <_printf_i+0x206>
 8010792:	2500      	movs	r5, #0
 8010794:	f104 0619 	add.w	r6, r4, #25
 8010798:	e7f5      	b.n	8010786 <_printf_i+0x222>
 801079a:	bf00      	nop
 801079c:	0801483e 	.word	0x0801483e
 80107a0:	0801484f 	.word	0x0801484f

080107a4 <_scanf_float>:
 80107a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a8:	b087      	sub	sp, #28
 80107aa:	4617      	mov	r7, r2
 80107ac:	9303      	str	r3, [sp, #12]
 80107ae:	688b      	ldr	r3, [r1, #8]
 80107b0:	1e5a      	subs	r2, r3, #1
 80107b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80107b6:	bf81      	itttt	hi
 80107b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80107bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80107c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80107c4:	608b      	strhi	r3, [r1, #8]
 80107c6:	680b      	ldr	r3, [r1, #0]
 80107c8:	460a      	mov	r2, r1
 80107ca:	f04f 0500 	mov.w	r5, #0
 80107ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80107d2:	f842 3b1c 	str.w	r3, [r2], #28
 80107d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80107da:	4680      	mov	r8, r0
 80107dc:	460c      	mov	r4, r1
 80107de:	bf98      	it	ls
 80107e0:	f04f 0b00 	movls.w	fp, #0
 80107e4:	9201      	str	r2, [sp, #4]
 80107e6:	4616      	mov	r6, r2
 80107e8:	46aa      	mov	sl, r5
 80107ea:	46a9      	mov	r9, r5
 80107ec:	9502      	str	r5, [sp, #8]
 80107ee:	68a2      	ldr	r2, [r4, #8]
 80107f0:	b152      	cbz	r2, 8010808 <_scanf_float+0x64>
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80107f8:	d864      	bhi.n	80108c4 <_scanf_float+0x120>
 80107fa:	2b40      	cmp	r3, #64	@ 0x40
 80107fc:	d83c      	bhi.n	8010878 <_scanf_float+0xd4>
 80107fe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010802:	b2c8      	uxtb	r0, r1
 8010804:	280e      	cmp	r0, #14
 8010806:	d93a      	bls.n	801087e <_scanf_float+0xda>
 8010808:	f1b9 0f00 	cmp.w	r9, #0
 801080c:	d003      	beq.n	8010816 <_scanf_float+0x72>
 801080e:	6823      	ldr	r3, [r4, #0]
 8010810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	f10a 3aff 	add.w	sl, sl, #4294967295
 801081a:	f1ba 0f01 	cmp.w	sl, #1
 801081e:	f200 8117 	bhi.w	8010a50 <_scanf_float+0x2ac>
 8010822:	9b01      	ldr	r3, [sp, #4]
 8010824:	429e      	cmp	r6, r3
 8010826:	f200 8108 	bhi.w	8010a3a <_scanf_float+0x296>
 801082a:	2001      	movs	r0, #1
 801082c:	b007      	add	sp, #28
 801082e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010832:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010836:	2a0d      	cmp	r2, #13
 8010838:	d8e6      	bhi.n	8010808 <_scanf_float+0x64>
 801083a:	a101      	add	r1, pc, #4	@ (adr r1, 8010840 <_scanf_float+0x9c>)
 801083c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010840:	08010987 	.word	0x08010987
 8010844:	08010809 	.word	0x08010809
 8010848:	08010809 	.word	0x08010809
 801084c:	08010809 	.word	0x08010809
 8010850:	080109e7 	.word	0x080109e7
 8010854:	080109bf 	.word	0x080109bf
 8010858:	08010809 	.word	0x08010809
 801085c:	08010809 	.word	0x08010809
 8010860:	08010995 	.word	0x08010995
 8010864:	08010809 	.word	0x08010809
 8010868:	08010809 	.word	0x08010809
 801086c:	08010809 	.word	0x08010809
 8010870:	08010809 	.word	0x08010809
 8010874:	0801094d 	.word	0x0801094d
 8010878:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801087c:	e7db      	b.n	8010836 <_scanf_float+0x92>
 801087e:	290e      	cmp	r1, #14
 8010880:	d8c2      	bhi.n	8010808 <_scanf_float+0x64>
 8010882:	a001      	add	r0, pc, #4	@ (adr r0, 8010888 <_scanf_float+0xe4>)
 8010884:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010888:	0801093d 	.word	0x0801093d
 801088c:	08010809 	.word	0x08010809
 8010890:	0801093d 	.word	0x0801093d
 8010894:	080109d3 	.word	0x080109d3
 8010898:	08010809 	.word	0x08010809
 801089c:	080108e5 	.word	0x080108e5
 80108a0:	08010923 	.word	0x08010923
 80108a4:	08010923 	.word	0x08010923
 80108a8:	08010923 	.word	0x08010923
 80108ac:	08010923 	.word	0x08010923
 80108b0:	08010923 	.word	0x08010923
 80108b4:	08010923 	.word	0x08010923
 80108b8:	08010923 	.word	0x08010923
 80108bc:	08010923 	.word	0x08010923
 80108c0:	08010923 	.word	0x08010923
 80108c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80108c6:	d809      	bhi.n	80108dc <_scanf_float+0x138>
 80108c8:	2b60      	cmp	r3, #96	@ 0x60
 80108ca:	d8b2      	bhi.n	8010832 <_scanf_float+0x8e>
 80108cc:	2b54      	cmp	r3, #84	@ 0x54
 80108ce:	d07b      	beq.n	80109c8 <_scanf_float+0x224>
 80108d0:	2b59      	cmp	r3, #89	@ 0x59
 80108d2:	d199      	bne.n	8010808 <_scanf_float+0x64>
 80108d4:	2d07      	cmp	r5, #7
 80108d6:	d197      	bne.n	8010808 <_scanf_float+0x64>
 80108d8:	2508      	movs	r5, #8
 80108da:	e02c      	b.n	8010936 <_scanf_float+0x192>
 80108dc:	2b74      	cmp	r3, #116	@ 0x74
 80108de:	d073      	beq.n	80109c8 <_scanf_float+0x224>
 80108e0:	2b79      	cmp	r3, #121	@ 0x79
 80108e2:	e7f6      	b.n	80108d2 <_scanf_float+0x12e>
 80108e4:	6821      	ldr	r1, [r4, #0]
 80108e6:	05c8      	lsls	r0, r1, #23
 80108e8:	d51b      	bpl.n	8010922 <_scanf_float+0x17e>
 80108ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80108ee:	6021      	str	r1, [r4, #0]
 80108f0:	f109 0901 	add.w	r9, r9, #1
 80108f4:	f1bb 0f00 	cmp.w	fp, #0
 80108f8:	d003      	beq.n	8010902 <_scanf_float+0x15e>
 80108fa:	3201      	adds	r2, #1
 80108fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010900:	60a2      	str	r2, [r4, #8]
 8010902:	68a3      	ldr	r3, [r4, #8]
 8010904:	3b01      	subs	r3, #1
 8010906:	60a3      	str	r3, [r4, #8]
 8010908:	6923      	ldr	r3, [r4, #16]
 801090a:	3301      	adds	r3, #1
 801090c:	6123      	str	r3, [r4, #16]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	3b01      	subs	r3, #1
 8010912:	2b00      	cmp	r3, #0
 8010914:	607b      	str	r3, [r7, #4]
 8010916:	f340 8087 	ble.w	8010a28 <_scanf_float+0x284>
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	3301      	adds	r3, #1
 801091e:	603b      	str	r3, [r7, #0]
 8010920:	e765      	b.n	80107ee <_scanf_float+0x4a>
 8010922:	eb1a 0105 	adds.w	r1, sl, r5
 8010926:	f47f af6f 	bne.w	8010808 <_scanf_float+0x64>
 801092a:	6822      	ldr	r2, [r4, #0]
 801092c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010930:	6022      	str	r2, [r4, #0]
 8010932:	460d      	mov	r5, r1
 8010934:	468a      	mov	sl, r1
 8010936:	f806 3b01 	strb.w	r3, [r6], #1
 801093a:	e7e2      	b.n	8010902 <_scanf_float+0x15e>
 801093c:	6822      	ldr	r2, [r4, #0]
 801093e:	0610      	lsls	r0, r2, #24
 8010940:	f57f af62 	bpl.w	8010808 <_scanf_float+0x64>
 8010944:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010948:	6022      	str	r2, [r4, #0]
 801094a:	e7f4      	b.n	8010936 <_scanf_float+0x192>
 801094c:	f1ba 0f00 	cmp.w	sl, #0
 8010950:	d10e      	bne.n	8010970 <_scanf_float+0x1cc>
 8010952:	f1b9 0f00 	cmp.w	r9, #0
 8010956:	d10e      	bne.n	8010976 <_scanf_float+0x1d2>
 8010958:	6822      	ldr	r2, [r4, #0]
 801095a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801095e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010962:	d108      	bne.n	8010976 <_scanf_float+0x1d2>
 8010964:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010968:	6022      	str	r2, [r4, #0]
 801096a:	f04f 0a01 	mov.w	sl, #1
 801096e:	e7e2      	b.n	8010936 <_scanf_float+0x192>
 8010970:	f1ba 0f02 	cmp.w	sl, #2
 8010974:	d055      	beq.n	8010a22 <_scanf_float+0x27e>
 8010976:	2d01      	cmp	r5, #1
 8010978:	d002      	beq.n	8010980 <_scanf_float+0x1dc>
 801097a:	2d04      	cmp	r5, #4
 801097c:	f47f af44 	bne.w	8010808 <_scanf_float+0x64>
 8010980:	3501      	adds	r5, #1
 8010982:	b2ed      	uxtb	r5, r5
 8010984:	e7d7      	b.n	8010936 <_scanf_float+0x192>
 8010986:	f1ba 0f01 	cmp.w	sl, #1
 801098a:	f47f af3d 	bne.w	8010808 <_scanf_float+0x64>
 801098e:	f04f 0a02 	mov.w	sl, #2
 8010992:	e7d0      	b.n	8010936 <_scanf_float+0x192>
 8010994:	b97d      	cbnz	r5, 80109b6 <_scanf_float+0x212>
 8010996:	f1b9 0f00 	cmp.w	r9, #0
 801099a:	f47f af38 	bne.w	801080e <_scanf_float+0x6a>
 801099e:	6822      	ldr	r2, [r4, #0]
 80109a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80109a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80109a8:	f040 8108 	bne.w	8010bbc <_scanf_float+0x418>
 80109ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80109b0:	6022      	str	r2, [r4, #0]
 80109b2:	2501      	movs	r5, #1
 80109b4:	e7bf      	b.n	8010936 <_scanf_float+0x192>
 80109b6:	2d03      	cmp	r5, #3
 80109b8:	d0e2      	beq.n	8010980 <_scanf_float+0x1dc>
 80109ba:	2d05      	cmp	r5, #5
 80109bc:	e7de      	b.n	801097c <_scanf_float+0x1d8>
 80109be:	2d02      	cmp	r5, #2
 80109c0:	f47f af22 	bne.w	8010808 <_scanf_float+0x64>
 80109c4:	2503      	movs	r5, #3
 80109c6:	e7b6      	b.n	8010936 <_scanf_float+0x192>
 80109c8:	2d06      	cmp	r5, #6
 80109ca:	f47f af1d 	bne.w	8010808 <_scanf_float+0x64>
 80109ce:	2507      	movs	r5, #7
 80109d0:	e7b1      	b.n	8010936 <_scanf_float+0x192>
 80109d2:	6822      	ldr	r2, [r4, #0]
 80109d4:	0591      	lsls	r1, r2, #22
 80109d6:	f57f af17 	bpl.w	8010808 <_scanf_float+0x64>
 80109da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80109de:	6022      	str	r2, [r4, #0]
 80109e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80109e4:	e7a7      	b.n	8010936 <_scanf_float+0x192>
 80109e6:	6822      	ldr	r2, [r4, #0]
 80109e8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80109ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80109f0:	d006      	beq.n	8010a00 <_scanf_float+0x25c>
 80109f2:	0550      	lsls	r0, r2, #21
 80109f4:	f57f af08 	bpl.w	8010808 <_scanf_float+0x64>
 80109f8:	f1b9 0f00 	cmp.w	r9, #0
 80109fc:	f000 80de 	beq.w	8010bbc <_scanf_float+0x418>
 8010a00:	0591      	lsls	r1, r2, #22
 8010a02:	bf58      	it	pl
 8010a04:	9902      	ldrpl	r1, [sp, #8]
 8010a06:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010a0a:	bf58      	it	pl
 8010a0c:	eba9 0101 	subpl.w	r1, r9, r1
 8010a10:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010a14:	bf58      	it	pl
 8010a16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010a1a:	6022      	str	r2, [r4, #0]
 8010a1c:	f04f 0900 	mov.w	r9, #0
 8010a20:	e789      	b.n	8010936 <_scanf_float+0x192>
 8010a22:	f04f 0a03 	mov.w	sl, #3
 8010a26:	e786      	b.n	8010936 <_scanf_float+0x192>
 8010a28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010a2c:	4639      	mov	r1, r7
 8010a2e:	4640      	mov	r0, r8
 8010a30:	4798      	blx	r3
 8010a32:	2800      	cmp	r0, #0
 8010a34:	f43f aedb 	beq.w	80107ee <_scanf_float+0x4a>
 8010a38:	e6e6      	b.n	8010808 <_scanf_float+0x64>
 8010a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010a42:	463a      	mov	r2, r7
 8010a44:	4640      	mov	r0, r8
 8010a46:	4798      	blx	r3
 8010a48:	6923      	ldr	r3, [r4, #16]
 8010a4a:	3b01      	subs	r3, #1
 8010a4c:	6123      	str	r3, [r4, #16]
 8010a4e:	e6e8      	b.n	8010822 <_scanf_float+0x7e>
 8010a50:	1e6b      	subs	r3, r5, #1
 8010a52:	2b06      	cmp	r3, #6
 8010a54:	d824      	bhi.n	8010aa0 <_scanf_float+0x2fc>
 8010a56:	2d02      	cmp	r5, #2
 8010a58:	d836      	bhi.n	8010ac8 <_scanf_float+0x324>
 8010a5a:	9b01      	ldr	r3, [sp, #4]
 8010a5c:	429e      	cmp	r6, r3
 8010a5e:	f67f aee4 	bls.w	801082a <_scanf_float+0x86>
 8010a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010a6a:	463a      	mov	r2, r7
 8010a6c:	4640      	mov	r0, r8
 8010a6e:	4798      	blx	r3
 8010a70:	6923      	ldr	r3, [r4, #16]
 8010a72:	3b01      	subs	r3, #1
 8010a74:	6123      	str	r3, [r4, #16]
 8010a76:	e7f0      	b.n	8010a5a <_scanf_float+0x2b6>
 8010a78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a7c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010a80:	463a      	mov	r2, r7
 8010a82:	4640      	mov	r0, r8
 8010a84:	4798      	blx	r3
 8010a86:	6923      	ldr	r3, [r4, #16]
 8010a88:	3b01      	subs	r3, #1
 8010a8a:	6123      	str	r3, [r4, #16]
 8010a8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a90:	fa5f fa8a 	uxtb.w	sl, sl
 8010a94:	f1ba 0f02 	cmp.w	sl, #2
 8010a98:	d1ee      	bne.n	8010a78 <_scanf_float+0x2d4>
 8010a9a:	3d03      	subs	r5, #3
 8010a9c:	b2ed      	uxtb	r5, r5
 8010a9e:	1b76      	subs	r6, r6, r5
 8010aa0:	6823      	ldr	r3, [r4, #0]
 8010aa2:	05da      	lsls	r2, r3, #23
 8010aa4:	d530      	bpl.n	8010b08 <_scanf_float+0x364>
 8010aa6:	055b      	lsls	r3, r3, #21
 8010aa8:	d511      	bpl.n	8010ace <_scanf_float+0x32a>
 8010aaa:	9b01      	ldr	r3, [sp, #4]
 8010aac:	429e      	cmp	r6, r3
 8010aae:	f67f aebc 	bls.w	801082a <_scanf_float+0x86>
 8010ab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010ab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010aba:	463a      	mov	r2, r7
 8010abc:	4640      	mov	r0, r8
 8010abe:	4798      	blx	r3
 8010ac0:	6923      	ldr	r3, [r4, #16]
 8010ac2:	3b01      	subs	r3, #1
 8010ac4:	6123      	str	r3, [r4, #16]
 8010ac6:	e7f0      	b.n	8010aaa <_scanf_float+0x306>
 8010ac8:	46aa      	mov	sl, r5
 8010aca:	46b3      	mov	fp, r6
 8010acc:	e7de      	b.n	8010a8c <_scanf_float+0x2e8>
 8010ace:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010ad2:	6923      	ldr	r3, [r4, #16]
 8010ad4:	2965      	cmp	r1, #101	@ 0x65
 8010ad6:	f103 33ff 	add.w	r3, r3, #4294967295
 8010ada:	f106 35ff 	add.w	r5, r6, #4294967295
 8010ade:	6123      	str	r3, [r4, #16]
 8010ae0:	d00c      	beq.n	8010afc <_scanf_float+0x358>
 8010ae2:	2945      	cmp	r1, #69	@ 0x45
 8010ae4:	d00a      	beq.n	8010afc <_scanf_float+0x358>
 8010ae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010aea:	463a      	mov	r2, r7
 8010aec:	4640      	mov	r0, r8
 8010aee:	4798      	blx	r3
 8010af0:	6923      	ldr	r3, [r4, #16]
 8010af2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010af6:	3b01      	subs	r3, #1
 8010af8:	1eb5      	subs	r5, r6, #2
 8010afa:	6123      	str	r3, [r4, #16]
 8010afc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010b00:	463a      	mov	r2, r7
 8010b02:	4640      	mov	r0, r8
 8010b04:	4798      	blx	r3
 8010b06:	462e      	mov	r6, r5
 8010b08:	6822      	ldr	r2, [r4, #0]
 8010b0a:	f012 0210 	ands.w	r2, r2, #16
 8010b0e:	d001      	beq.n	8010b14 <_scanf_float+0x370>
 8010b10:	2000      	movs	r0, #0
 8010b12:	e68b      	b.n	801082c <_scanf_float+0x88>
 8010b14:	7032      	strb	r2, [r6, #0]
 8010b16:	6823      	ldr	r3, [r4, #0]
 8010b18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010b20:	d11c      	bne.n	8010b5c <_scanf_float+0x3b8>
 8010b22:	9b02      	ldr	r3, [sp, #8]
 8010b24:	454b      	cmp	r3, r9
 8010b26:	eba3 0209 	sub.w	r2, r3, r9
 8010b2a:	d123      	bne.n	8010b74 <_scanf_float+0x3d0>
 8010b2c:	9901      	ldr	r1, [sp, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	4640      	mov	r0, r8
 8010b32:	f002 fbb9 	bl	80132a8 <_strtod_r>
 8010b36:	9b03      	ldr	r3, [sp, #12]
 8010b38:	6821      	ldr	r1, [r4, #0]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f011 0f02 	tst.w	r1, #2
 8010b40:	ec57 6b10 	vmov	r6, r7, d0
 8010b44:	f103 0204 	add.w	r2, r3, #4
 8010b48:	d01f      	beq.n	8010b8a <_scanf_float+0x3e6>
 8010b4a:	9903      	ldr	r1, [sp, #12]
 8010b4c:	600a      	str	r2, [r1, #0]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	e9c3 6700 	strd	r6, r7, [r3]
 8010b54:	68e3      	ldr	r3, [r4, #12]
 8010b56:	3301      	adds	r3, #1
 8010b58:	60e3      	str	r3, [r4, #12]
 8010b5a:	e7d9      	b.n	8010b10 <_scanf_float+0x36c>
 8010b5c:	9b04      	ldr	r3, [sp, #16]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d0e4      	beq.n	8010b2c <_scanf_float+0x388>
 8010b62:	9905      	ldr	r1, [sp, #20]
 8010b64:	230a      	movs	r3, #10
 8010b66:	3101      	adds	r1, #1
 8010b68:	4640      	mov	r0, r8
 8010b6a:	f002 fc1d 	bl	80133a8 <_strtol_r>
 8010b6e:	9b04      	ldr	r3, [sp, #16]
 8010b70:	9e05      	ldr	r6, [sp, #20]
 8010b72:	1ac2      	subs	r2, r0, r3
 8010b74:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010b78:	429e      	cmp	r6, r3
 8010b7a:	bf28      	it	cs
 8010b7c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010b80:	4910      	ldr	r1, [pc, #64]	@ (8010bc4 <_scanf_float+0x420>)
 8010b82:	4630      	mov	r0, r6
 8010b84:	f000 f8e4 	bl	8010d50 <siprintf>
 8010b88:	e7d0      	b.n	8010b2c <_scanf_float+0x388>
 8010b8a:	f011 0f04 	tst.w	r1, #4
 8010b8e:	9903      	ldr	r1, [sp, #12]
 8010b90:	600a      	str	r2, [r1, #0]
 8010b92:	d1dc      	bne.n	8010b4e <_scanf_float+0x3aa>
 8010b94:	681d      	ldr	r5, [r3, #0]
 8010b96:	4632      	mov	r2, r6
 8010b98:	463b      	mov	r3, r7
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	4639      	mov	r1, r7
 8010b9e:	f7ef ffe5 	bl	8000b6c <__aeabi_dcmpun>
 8010ba2:	b128      	cbz	r0, 8010bb0 <_scanf_float+0x40c>
 8010ba4:	4808      	ldr	r0, [pc, #32]	@ (8010bc8 <_scanf_float+0x424>)
 8010ba6:	f000 fa2b 	bl	8011000 <nanf>
 8010baa:	ed85 0a00 	vstr	s0, [r5]
 8010bae:	e7d1      	b.n	8010b54 <_scanf_float+0x3b0>
 8010bb0:	4630      	mov	r0, r6
 8010bb2:	4639      	mov	r1, r7
 8010bb4:	f7f0 f838 	bl	8000c28 <__aeabi_d2f>
 8010bb8:	6028      	str	r0, [r5, #0]
 8010bba:	e7cb      	b.n	8010b54 <_scanf_float+0x3b0>
 8010bbc:	f04f 0900 	mov.w	r9, #0
 8010bc0:	e629      	b.n	8010816 <_scanf_float+0x72>
 8010bc2:	bf00      	nop
 8010bc4:	08014860 	.word	0x08014860
 8010bc8:	08014bf5 	.word	0x08014bf5

08010bcc <std>:
 8010bcc:	2300      	movs	r3, #0
 8010bce:	b510      	push	{r4, lr}
 8010bd0:	4604      	mov	r4, r0
 8010bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8010bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bda:	6083      	str	r3, [r0, #8]
 8010bdc:	8181      	strh	r1, [r0, #12]
 8010bde:	6643      	str	r3, [r0, #100]	@ 0x64
 8010be0:	81c2      	strh	r2, [r0, #14]
 8010be2:	6183      	str	r3, [r0, #24]
 8010be4:	4619      	mov	r1, r3
 8010be6:	2208      	movs	r2, #8
 8010be8:	305c      	adds	r0, #92	@ 0x5c
 8010bea:	f000 f914 	bl	8010e16 <memset>
 8010bee:	4b0d      	ldr	r3, [pc, #52]	@ (8010c24 <std+0x58>)
 8010bf0:	6263      	str	r3, [r4, #36]	@ 0x24
 8010bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8010c28 <std+0x5c>)
 8010bf4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8010c2c <std+0x60>)
 8010bf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8010c30 <std+0x64>)
 8010bfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8010bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8010c34 <std+0x68>)
 8010c00:	6224      	str	r4, [r4, #32]
 8010c02:	429c      	cmp	r4, r3
 8010c04:	d006      	beq.n	8010c14 <std+0x48>
 8010c06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010c0a:	4294      	cmp	r4, r2
 8010c0c:	d002      	beq.n	8010c14 <std+0x48>
 8010c0e:	33d0      	adds	r3, #208	@ 0xd0
 8010c10:	429c      	cmp	r4, r3
 8010c12:	d105      	bne.n	8010c20 <std+0x54>
 8010c14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c1c:	f000 b9de 	b.w	8010fdc <__retarget_lock_init_recursive>
 8010c20:	bd10      	pop	{r4, pc}
 8010c22:	bf00      	nop
 8010c24:	08010d91 	.word	0x08010d91
 8010c28:	08010db3 	.word	0x08010db3
 8010c2c:	08010deb 	.word	0x08010deb
 8010c30:	08010e0f 	.word	0x08010e0f
 8010c34:	200064d4 	.word	0x200064d4

08010c38 <stdio_exit_handler>:
 8010c38:	4a02      	ldr	r2, [pc, #8]	@ (8010c44 <stdio_exit_handler+0xc>)
 8010c3a:	4903      	ldr	r1, [pc, #12]	@ (8010c48 <stdio_exit_handler+0x10>)
 8010c3c:	4803      	ldr	r0, [pc, #12]	@ (8010c4c <stdio_exit_handler+0x14>)
 8010c3e:	f000 b869 	b.w	8010d14 <_fwalk_sglue>
 8010c42:	bf00      	nop
 8010c44:	2000011c 	.word	0x2000011c
 8010c48:	08013765 	.word	0x08013765
 8010c4c:	2000012c 	.word	0x2000012c

08010c50 <cleanup_stdio>:
 8010c50:	6841      	ldr	r1, [r0, #4]
 8010c52:	4b0c      	ldr	r3, [pc, #48]	@ (8010c84 <cleanup_stdio+0x34>)
 8010c54:	4299      	cmp	r1, r3
 8010c56:	b510      	push	{r4, lr}
 8010c58:	4604      	mov	r4, r0
 8010c5a:	d001      	beq.n	8010c60 <cleanup_stdio+0x10>
 8010c5c:	f002 fd82 	bl	8013764 <_fflush_r>
 8010c60:	68a1      	ldr	r1, [r4, #8]
 8010c62:	4b09      	ldr	r3, [pc, #36]	@ (8010c88 <cleanup_stdio+0x38>)
 8010c64:	4299      	cmp	r1, r3
 8010c66:	d002      	beq.n	8010c6e <cleanup_stdio+0x1e>
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f002 fd7b 	bl	8013764 <_fflush_r>
 8010c6e:	68e1      	ldr	r1, [r4, #12]
 8010c70:	4b06      	ldr	r3, [pc, #24]	@ (8010c8c <cleanup_stdio+0x3c>)
 8010c72:	4299      	cmp	r1, r3
 8010c74:	d004      	beq.n	8010c80 <cleanup_stdio+0x30>
 8010c76:	4620      	mov	r0, r4
 8010c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c7c:	f002 bd72 	b.w	8013764 <_fflush_r>
 8010c80:	bd10      	pop	{r4, pc}
 8010c82:	bf00      	nop
 8010c84:	200064d4 	.word	0x200064d4
 8010c88:	2000653c 	.word	0x2000653c
 8010c8c:	200065a4 	.word	0x200065a4

08010c90 <global_stdio_init.part.0>:
 8010c90:	b510      	push	{r4, lr}
 8010c92:	4b0b      	ldr	r3, [pc, #44]	@ (8010cc0 <global_stdio_init.part.0+0x30>)
 8010c94:	4c0b      	ldr	r4, [pc, #44]	@ (8010cc4 <global_stdio_init.part.0+0x34>)
 8010c96:	4a0c      	ldr	r2, [pc, #48]	@ (8010cc8 <global_stdio_init.part.0+0x38>)
 8010c98:	601a      	str	r2, [r3, #0]
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	2104      	movs	r1, #4
 8010ca0:	f7ff ff94 	bl	8010bcc <std>
 8010ca4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010ca8:	2201      	movs	r2, #1
 8010caa:	2109      	movs	r1, #9
 8010cac:	f7ff ff8e 	bl	8010bcc <std>
 8010cb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010cb4:	2202      	movs	r2, #2
 8010cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cba:	2112      	movs	r1, #18
 8010cbc:	f7ff bf86 	b.w	8010bcc <std>
 8010cc0:	2000660c 	.word	0x2000660c
 8010cc4:	200064d4 	.word	0x200064d4
 8010cc8:	08010c39 	.word	0x08010c39

08010ccc <__sfp_lock_acquire>:
 8010ccc:	4801      	ldr	r0, [pc, #4]	@ (8010cd4 <__sfp_lock_acquire+0x8>)
 8010cce:	f000 b986 	b.w	8010fde <__retarget_lock_acquire_recursive>
 8010cd2:	bf00      	nop
 8010cd4:	20006615 	.word	0x20006615

08010cd8 <__sfp_lock_release>:
 8010cd8:	4801      	ldr	r0, [pc, #4]	@ (8010ce0 <__sfp_lock_release+0x8>)
 8010cda:	f000 b981 	b.w	8010fe0 <__retarget_lock_release_recursive>
 8010cde:	bf00      	nop
 8010ce0:	20006615 	.word	0x20006615

08010ce4 <__sinit>:
 8010ce4:	b510      	push	{r4, lr}
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	f7ff fff0 	bl	8010ccc <__sfp_lock_acquire>
 8010cec:	6a23      	ldr	r3, [r4, #32]
 8010cee:	b11b      	cbz	r3, 8010cf8 <__sinit+0x14>
 8010cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cf4:	f7ff bff0 	b.w	8010cd8 <__sfp_lock_release>
 8010cf8:	4b04      	ldr	r3, [pc, #16]	@ (8010d0c <__sinit+0x28>)
 8010cfa:	6223      	str	r3, [r4, #32]
 8010cfc:	4b04      	ldr	r3, [pc, #16]	@ (8010d10 <__sinit+0x2c>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d1f5      	bne.n	8010cf0 <__sinit+0xc>
 8010d04:	f7ff ffc4 	bl	8010c90 <global_stdio_init.part.0>
 8010d08:	e7f2      	b.n	8010cf0 <__sinit+0xc>
 8010d0a:	bf00      	nop
 8010d0c:	08010c51 	.word	0x08010c51
 8010d10:	2000660c 	.word	0x2000660c

08010d14 <_fwalk_sglue>:
 8010d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d18:	4607      	mov	r7, r0
 8010d1a:	4688      	mov	r8, r1
 8010d1c:	4614      	mov	r4, r2
 8010d1e:	2600      	movs	r6, #0
 8010d20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d24:	f1b9 0901 	subs.w	r9, r9, #1
 8010d28:	d505      	bpl.n	8010d36 <_fwalk_sglue+0x22>
 8010d2a:	6824      	ldr	r4, [r4, #0]
 8010d2c:	2c00      	cmp	r4, #0
 8010d2e:	d1f7      	bne.n	8010d20 <_fwalk_sglue+0xc>
 8010d30:	4630      	mov	r0, r6
 8010d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d36:	89ab      	ldrh	r3, [r5, #12]
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	d907      	bls.n	8010d4c <_fwalk_sglue+0x38>
 8010d3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d40:	3301      	adds	r3, #1
 8010d42:	d003      	beq.n	8010d4c <_fwalk_sglue+0x38>
 8010d44:	4629      	mov	r1, r5
 8010d46:	4638      	mov	r0, r7
 8010d48:	47c0      	blx	r8
 8010d4a:	4306      	orrs	r6, r0
 8010d4c:	3568      	adds	r5, #104	@ 0x68
 8010d4e:	e7e9      	b.n	8010d24 <_fwalk_sglue+0x10>

08010d50 <siprintf>:
 8010d50:	b40e      	push	{r1, r2, r3}
 8010d52:	b500      	push	{lr}
 8010d54:	b09c      	sub	sp, #112	@ 0x70
 8010d56:	ab1d      	add	r3, sp, #116	@ 0x74
 8010d58:	9002      	str	r0, [sp, #8]
 8010d5a:	9006      	str	r0, [sp, #24]
 8010d5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010d60:	4809      	ldr	r0, [pc, #36]	@ (8010d88 <siprintf+0x38>)
 8010d62:	9107      	str	r1, [sp, #28]
 8010d64:	9104      	str	r1, [sp, #16]
 8010d66:	4909      	ldr	r1, [pc, #36]	@ (8010d8c <siprintf+0x3c>)
 8010d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d6c:	9105      	str	r1, [sp, #20]
 8010d6e:	6800      	ldr	r0, [r0, #0]
 8010d70:	9301      	str	r3, [sp, #4]
 8010d72:	a902      	add	r1, sp, #8
 8010d74:	f002 fb76 	bl	8013464 <_svfiprintf_r>
 8010d78:	9b02      	ldr	r3, [sp, #8]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	701a      	strb	r2, [r3, #0]
 8010d7e:	b01c      	add	sp, #112	@ 0x70
 8010d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d84:	b003      	add	sp, #12
 8010d86:	4770      	bx	lr
 8010d88:	20000128 	.word	0x20000128
 8010d8c:	ffff0208 	.word	0xffff0208

08010d90 <__sread>:
 8010d90:	b510      	push	{r4, lr}
 8010d92:	460c      	mov	r4, r1
 8010d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d98:	f000 f8c2 	bl	8010f20 <_read_r>
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	bfab      	itete	ge
 8010da0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010da2:	89a3      	ldrhlt	r3, [r4, #12]
 8010da4:	181b      	addge	r3, r3, r0
 8010da6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010daa:	bfac      	ite	ge
 8010dac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010dae:	81a3      	strhlt	r3, [r4, #12]
 8010db0:	bd10      	pop	{r4, pc}

08010db2 <__swrite>:
 8010db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010db6:	461f      	mov	r7, r3
 8010db8:	898b      	ldrh	r3, [r1, #12]
 8010dba:	05db      	lsls	r3, r3, #23
 8010dbc:	4605      	mov	r5, r0
 8010dbe:	460c      	mov	r4, r1
 8010dc0:	4616      	mov	r6, r2
 8010dc2:	d505      	bpl.n	8010dd0 <__swrite+0x1e>
 8010dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dc8:	2302      	movs	r3, #2
 8010dca:	2200      	movs	r2, #0
 8010dcc:	f000 f896 	bl	8010efc <_lseek_r>
 8010dd0:	89a3      	ldrh	r3, [r4, #12]
 8010dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010dda:	81a3      	strh	r3, [r4, #12]
 8010ddc:	4632      	mov	r2, r6
 8010dde:	463b      	mov	r3, r7
 8010de0:	4628      	mov	r0, r5
 8010de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010de6:	f000 b8bd 	b.w	8010f64 <_write_r>

08010dea <__sseek>:
 8010dea:	b510      	push	{r4, lr}
 8010dec:	460c      	mov	r4, r1
 8010dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010df2:	f000 f883 	bl	8010efc <_lseek_r>
 8010df6:	1c43      	adds	r3, r0, #1
 8010df8:	89a3      	ldrh	r3, [r4, #12]
 8010dfa:	bf15      	itete	ne
 8010dfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010dfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010e02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010e06:	81a3      	strheq	r3, [r4, #12]
 8010e08:	bf18      	it	ne
 8010e0a:	81a3      	strhne	r3, [r4, #12]
 8010e0c:	bd10      	pop	{r4, pc}

08010e0e <__sclose>:
 8010e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e12:	f000 b80d 	b.w	8010e30 <_close_r>

08010e16 <memset>:
 8010e16:	4402      	add	r2, r0
 8010e18:	4603      	mov	r3, r0
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d100      	bne.n	8010e20 <memset+0xa>
 8010e1e:	4770      	bx	lr
 8010e20:	f803 1b01 	strb.w	r1, [r3], #1
 8010e24:	e7f9      	b.n	8010e1a <memset+0x4>
	...

08010e28 <_localeconv_r>:
 8010e28:	4800      	ldr	r0, [pc, #0]	@ (8010e2c <_localeconv_r+0x4>)
 8010e2a:	4770      	bx	lr
 8010e2c:	20000268 	.word	0x20000268

08010e30 <_close_r>:
 8010e30:	b538      	push	{r3, r4, r5, lr}
 8010e32:	4d06      	ldr	r5, [pc, #24]	@ (8010e4c <_close_r+0x1c>)
 8010e34:	2300      	movs	r3, #0
 8010e36:	4604      	mov	r4, r0
 8010e38:	4608      	mov	r0, r1
 8010e3a:	602b      	str	r3, [r5, #0]
 8010e3c:	f7f0 fe0a 	bl	8001a54 <_close>
 8010e40:	1c43      	adds	r3, r0, #1
 8010e42:	d102      	bne.n	8010e4a <_close_r+0x1a>
 8010e44:	682b      	ldr	r3, [r5, #0]
 8010e46:	b103      	cbz	r3, 8010e4a <_close_r+0x1a>
 8010e48:	6023      	str	r3, [r4, #0]
 8010e4a:	bd38      	pop	{r3, r4, r5, pc}
 8010e4c:	20006610 	.word	0x20006610

08010e50 <_reclaim_reent>:
 8010e50:	4b29      	ldr	r3, [pc, #164]	@ (8010ef8 <_reclaim_reent+0xa8>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4283      	cmp	r3, r0
 8010e56:	b570      	push	{r4, r5, r6, lr}
 8010e58:	4604      	mov	r4, r0
 8010e5a:	d04b      	beq.n	8010ef4 <_reclaim_reent+0xa4>
 8010e5c:	69c3      	ldr	r3, [r0, #28]
 8010e5e:	b1ab      	cbz	r3, 8010e8c <_reclaim_reent+0x3c>
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	b16b      	cbz	r3, 8010e80 <_reclaim_reent+0x30>
 8010e64:	2500      	movs	r5, #0
 8010e66:	69e3      	ldr	r3, [r4, #28]
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	5959      	ldr	r1, [r3, r5]
 8010e6c:	2900      	cmp	r1, #0
 8010e6e:	d13b      	bne.n	8010ee8 <_reclaim_reent+0x98>
 8010e70:	3504      	adds	r5, #4
 8010e72:	2d80      	cmp	r5, #128	@ 0x80
 8010e74:	d1f7      	bne.n	8010e66 <_reclaim_reent+0x16>
 8010e76:	69e3      	ldr	r3, [r4, #28]
 8010e78:	4620      	mov	r0, r4
 8010e7a:	68d9      	ldr	r1, [r3, #12]
 8010e7c:	f000 ff14 	bl	8011ca8 <_free_r>
 8010e80:	69e3      	ldr	r3, [r4, #28]
 8010e82:	6819      	ldr	r1, [r3, #0]
 8010e84:	b111      	cbz	r1, 8010e8c <_reclaim_reent+0x3c>
 8010e86:	4620      	mov	r0, r4
 8010e88:	f000 ff0e 	bl	8011ca8 <_free_r>
 8010e8c:	6961      	ldr	r1, [r4, #20]
 8010e8e:	b111      	cbz	r1, 8010e96 <_reclaim_reent+0x46>
 8010e90:	4620      	mov	r0, r4
 8010e92:	f000 ff09 	bl	8011ca8 <_free_r>
 8010e96:	69e1      	ldr	r1, [r4, #28]
 8010e98:	b111      	cbz	r1, 8010ea0 <_reclaim_reent+0x50>
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	f000 ff04 	bl	8011ca8 <_free_r>
 8010ea0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010ea2:	b111      	cbz	r1, 8010eaa <_reclaim_reent+0x5a>
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	f000 feff 	bl	8011ca8 <_free_r>
 8010eaa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010eac:	b111      	cbz	r1, 8010eb4 <_reclaim_reent+0x64>
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f000 fefa 	bl	8011ca8 <_free_r>
 8010eb4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010eb6:	b111      	cbz	r1, 8010ebe <_reclaim_reent+0x6e>
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f000 fef5 	bl	8011ca8 <_free_r>
 8010ebe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010ec0:	b111      	cbz	r1, 8010ec8 <_reclaim_reent+0x78>
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	f000 fef0 	bl	8011ca8 <_free_r>
 8010ec8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010eca:	b111      	cbz	r1, 8010ed2 <_reclaim_reent+0x82>
 8010ecc:	4620      	mov	r0, r4
 8010ece:	f000 feeb 	bl	8011ca8 <_free_r>
 8010ed2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010ed4:	b111      	cbz	r1, 8010edc <_reclaim_reent+0x8c>
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	f000 fee6 	bl	8011ca8 <_free_r>
 8010edc:	6a23      	ldr	r3, [r4, #32]
 8010ede:	b14b      	cbz	r3, 8010ef4 <_reclaim_reent+0xa4>
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ee6:	4718      	bx	r3
 8010ee8:	680e      	ldr	r6, [r1, #0]
 8010eea:	4620      	mov	r0, r4
 8010eec:	f000 fedc 	bl	8011ca8 <_free_r>
 8010ef0:	4631      	mov	r1, r6
 8010ef2:	e7bb      	b.n	8010e6c <_reclaim_reent+0x1c>
 8010ef4:	bd70      	pop	{r4, r5, r6, pc}
 8010ef6:	bf00      	nop
 8010ef8:	20000128 	.word	0x20000128

08010efc <_lseek_r>:
 8010efc:	b538      	push	{r3, r4, r5, lr}
 8010efe:	4d07      	ldr	r5, [pc, #28]	@ (8010f1c <_lseek_r+0x20>)
 8010f00:	4604      	mov	r4, r0
 8010f02:	4608      	mov	r0, r1
 8010f04:	4611      	mov	r1, r2
 8010f06:	2200      	movs	r2, #0
 8010f08:	602a      	str	r2, [r5, #0]
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	f7f0 fdc9 	bl	8001aa2 <_lseek>
 8010f10:	1c43      	adds	r3, r0, #1
 8010f12:	d102      	bne.n	8010f1a <_lseek_r+0x1e>
 8010f14:	682b      	ldr	r3, [r5, #0]
 8010f16:	b103      	cbz	r3, 8010f1a <_lseek_r+0x1e>
 8010f18:	6023      	str	r3, [r4, #0]
 8010f1a:	bd38      	pop	{r3, r4, r5, pc}
 8010f1c:	20006610 	.word	0x20006610

08010f20 <_read_r>:
 8010f20:	b538      	push	{r3, r4, r5, lr}
 8010f22:	4d07      	ldr	r5, [pc, #28]	@ (8010f40 <_read_r+0x20>)
 8010f24:	4604      	mov	r4, r0
 8010f26:	4608      	mov	r0, r1
 8010f28:	4611      	mov	r1, r2
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	602a      	str	r2, [r5, #0]
 8010f2e:	461a      	mov	r2, r3
 8010f30:	f7f0 fd57 	bl	80019e2 <_read>
 8010f34:	1c43      	adds	r3, r0, #1
 8010f36:	d102      	bne.n	8010f3e <_read_r+0x1e>
 8010f38:	682b      	ldr	r3, [r5, #0]
 8010f3a:	b103      	cbz	r3, 8010f3e <_read_r+0x1e>
 8010f3c:	6023      	str	r3, [r4, #0]
 8010f3e:	bd38      	pop	{r3, r4, r5, pc}
 8010f40:	20006610 	.word	0x20006610

08010f44 <_sbrk_r>:
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	4d06      	ldr	r5, [pc, #24]	@ (8010f60 <_sbrk_r+0x1c>)
 8010f48:	2300      	movs	r3, #0
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	4608      	mov	r0, r1
 8010f4e:	602b      	str	r3, [r5, #0]
 8010f50:	f7f0 fdb4 	bl	8001abc <_sbrk>
 8010f54:	1c43      	adds	r3, r0, #1
 8010f56:	d102      	bne.n	8010f5e <_sbrk_r+0x1a>
 8010f58:	682b      	ldr	r3, [r5, #0]
 8010f5a:	b103      	cbz	r3, 8010f5e <_sbrk_r+0x1a>
 8010f5c:	6023      	str	r3, [r4, #0]
 8010f5e:	bd38      	pop	{r3, r4, r5, pc}
 8010f60:	20006610 	.word	0x20006610

08010f64 <_write_r>:
 8010f64:	b538      	push	{r3, r4, r5, lr}
 8010f66:	4d07      	ldr	r5, [pc, #28]	@ (8010f84 <_write_r+0x20>)
 8010f68:	4604      	mov	r4, r0
 8010f6a:	4608      	mov	r0, r1
 8010f6c:	4611      	mov	r1, r2
 8010f6e:	2200      	movs	r2, #0
 8010f70:	602a      	str	r2, [r5, #0]
 8010f72:	461a      	mov	r2, r3
 8010f74:	f7f0 fd52 	bl	8001a1c <_write>
 8010f78:	1c43      	adds	r3, r0, #1
 8010f7a:	d102      	bne.n	8010f82 <_write_r+0x1e>
 8010f7c:	682b      	ldr	r3, [r5, #0]
 8010f7e:	b103      	cbz	r3, 8010f82 <_write_r+0x1e>
 8010f80:	6023      	str	r3, [r4, #0]
 8010f82:	bd38      	pop	{r3, r4, r5, pc}
 8010f84:	20006610 	.word	0x20006610

08010f88 <__errno>:
 8010f88:	4b01      	ldr	r3, [pc, #4]	@ (8010f90 <__errno+0x8>)
 8010f8a:	6818      	ldr	r0, [r3, #0]
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop
 8010f90:	20000128 	.word	0x20000128

08010f94 <__libc_init_array>:
 8010f94:	b570      	push	{r4, r5, r6, lr}
 8010f96:	4d0d      	ldr	r5, [pc, #52]	@ (8010fcc <__libc_init_array+0x38>)
 8010f98:	4c0d      	ldr	r4, [pc, #52]	@ (8010fd0 <__libc_init_array+0x3c>)
 8010f9a:	1b64      	subs	r4, r4, r5
 8010f9c:	10a4      	asrs	r4, r4, #2
 8010f9e:	2600      	movs	r6, #0
 8010fa0:	42a6      	cmp	r6, r4
 8010fa2:	d109      	bne.n	8010fb8 <__libc_init_array+0x24>
 8010fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8010fd4 <__libc_init_array+0x40>)
 8010fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8010fd8 <__libc_init_array+0x44>)
 8010fa8:	f003 fab0 	bl	801450c <_init>
 8010fac:	1b64      	subs	r4, r4, r5
 8010fae:	10a4      	asrs	r4, r4, #2
 8010fb0:	2600      	movs	r6, #0
 8010fb2:	42a6      	cmp	r6, r4
 8010fb4:	d105      	bne.n	8010fc2 <__libc_init_array+0x2e>
 8010fb6:	bd70      	pop	{r4, r5, r6, pc}
 8010fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fbc:	4798      	blx	r3
 8010fbe:	3601      	adds	r6, #1
 8010fc0:	e7ee      	b.n	8010fa0 <__libc_init_array+0xc>
 8010fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fc6:	4798      	blx	r3
 8010fc8:	3601      	adds	r6, #1
 8010fca:	e7f2      	b.n	8010fb2 <__libc_init_array+0x1e>
 8010fcc:	08014c60 	.word	0x08014c60
 8010fd0:	08014c60 	.word	0x08014c60
 8010fd4:	08014c60 	.word	0x08014c60
 8010fd8:	08014c64 	.word	0x08014c64

08010fdc <__retarget_lock_init_recursive>:
 8010fdc:	4770      	bx	lr

08010fde <__retarget_lock_acquire_recursive>:
 8010fde:	4770      	bx	lr

08010fe0 <__retarget_lock_release_recursive>:
 8010fe0:	4770      	bx	lr

08010fe2 <memcpy>:
 8010fe2:	440a      	add	r2, r1
 8010fe4:	4291      	cmp	r1, r2
 8010fe6:	f100 33ff 	add.w	r3, r0, #4294967295
 8010fea:	d100      	bne.n	8010fee <memcpy+0xc>
 8010fec:	4770      	bx	lr
 8010fee:	b510      	push	{r4, lr}
 8010ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ff8:	4291      	cmp	r1, r2
 8010ffa:	d1f9      	bne.n	8010ff0 <memcpy+0xe>
 8010ffc:	bd10      	pop	{r4, pc}
	...

08011000 <nanf>:
 8011000:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011008 <nanf+0x8>
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop
 8011008:	7fc00000 	.word	0x7fc00000

0801100c <quorem>:
 801100c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011010:	6903      	ldr	r3, [r0, #16]
 8011012:	690c      	ldr	r4, [r1, #16]
 8011014:	42a3      	cmp	r3, r4
 8011016:	4607      	mov	r7, r0
 8011018:	db7e      	blt.n	8011118 <quorem+0x10c>
 801101a:	3c01      	subs	r4, #1
 801101c:	f101 0814 	add.w	r8, r1, #20
 8011020:	00a3      	lsls	r3, r4, #2
 8011022:	f100 0514 	add.w	r5, r0, #20
 8011026:	9300      	str	r3, [sp, #0]
 8011028:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801102c:	9301      	str	r3, [sp, #4]
 801102e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011032:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011036:	3301      	adds	r3, #1
 8011038:	429a      	cmp	r2, r3
 801103a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801103e:	fbb2 f6f3 	udiv	r6, r2, r3
 8011042:	d32e      	bcc.n	80110a2 <quorem+0x96>
 8011044:	f04f 0a00 	mov.w	sl, #0
 8011048:	46c4      	mov	ip, r8
 801104a:	46ae      	mov	lr, r5
 801104c:	46d3      	mov	fp, sl
 801104e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011052:	b298      	uxth	r0, r3
 8011054:	fb06 a000 	mla	r0, r6, r0, sl
 8011058:	0c02      	lsrs	r2, r0, #16
 801105a:	0c1b      	lsrs	r3, r3, #16
 801105c:	fb06 2303 	mla	r3, r6, r3, r2
 8011060:	f8de 2000 	ldr.w	r2, [lr]
 8011064:	b280      	uxth	r0, r0
 8011066:	b292      	uxth	r2, r2
 8011068:	1a12      	subs	r2, r2, r0
 801106a:	445a      	add	r2, fp
 801106c:	f8de 0000 	ldr.w	r0, [lr]
 8011070:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011074:	b29b      	uxth	r3, r3
 8011076:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801107a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801107e:	b292      	uxth	r2, r2
 8011080:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011084:	45e1      	cmp	r9, ip
 8011086:	f84e 2b04 	str.w	r2, [lr], #4
 801108a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801108e:	d2de      	bcs.n	801104e <quorem+0x42>
 8011090:	9b00      	ldr	r3, [sp, #0]
 8011092:	58eb      	ldr	r3, [r5, r3]
 8011094:	b92b      	cbnz	r3, 80110a2 <quorem+0x96>
 8011096:	9b01      	ldr	r3, [sp, #4]
 8011098:	3b04      	subs	r3, #4
 801109a:	429d      	cmp	r5, r3
 801109c:	461a      	mov	r2, r3
 801109e:	d32f      	bcc.n	8011100 <quorem+0xf4>
 80110a0:	613c      	str	r4, [r7, #16]
 80110a2:	4638      	mov	r0, r7
 80110a4:	f001 f90e 	bl	80122c4 <__mcmp>
 80110a8:	2800      	cmp	r0, #0
 80110aa:	db25      	blt.n	80110f8 <quorem+0xec>
 80110ac:	4629      	mov	r1, r5
 80110ae:	2000      	movs	r0, #0
 80110b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80110b4:	f8d1 c000 	ldr.w	ip, [r1]
 80110b8:	fa1f fe82 	uxth.w	lr, r2
 80110bc:	fa1f f38c 	uxth.w	r3, ip
 80110c0:	eba3 030e 	sub.w	r3, r3, lr
 80110c4:	4403      	add	r3, r0
 80110c6:	0c12      	lsrs	r2, r2, #16
 80110c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80110cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110d6:	45c1      	cmp	r9, r8
 80110d8:	f841 3b04 	str.w	r3, [r1], #4
 80110dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80110e0:	d2e6      	bcs.n	80110b0 <quorem+0xa4>
 80110e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80110e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80110ea:	b922      	cbnz	r2, 80110f6 <quorem+0xea>
 80110ec:	3b04      	subs	r3, #4
 80110ee:	429d      	cmp	r5, r3
 80110f0:	461a      	mov	r2, r3
 80110f2:	d30b      	bcc.n	801110c <quorem+0x100>
 80110f4:	613c      	str	r4, [r7, #16]
 80110f6:	3601      	adds	r6, #1
 80110f8:	4630      	mov	r0, r6
 80110fa:	b003      	add	sp, #12
 80110fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011100:	6812      	ldr	r2, [r2, #0]
 8011102:	3b04      	subs	r3, #4
 8011104:	2a00      	cmp	r2, #0
 8011106:	d1cb      	bne.n	80110a0 <quorem+0x94>
 8011108:	3c01      	subs	r4, #1
 801110a:	e7c6      	b.n	801109a <quorem+0x8e>
 801110c:	6812      	ldr	r2, [r2, #0]
 801110e:	3b04      	subs	r3, #4
 8011110:	2a00      	cmp	r2, #0
 8011112:	d1ef      	bne.n	80110f4 <quorem+0xe8>
 8011114:	3c01      	subs	r4, #1
 8011116:	e7ea      	b.n	80110ee <quorem+0xe2>
 8011118:	2000      	movs	r0, #0
 801111a:	e7ee      	b.n	80110fa <quorem+0xee>
 801111c:	0000      	movs	r0, r0
	...

08011120 <_dtoa_r>:
 8011120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011124:	69c7      	ldr	r7, [r0, #28]
 8011126:	b099      	sub	sp, #100	@ 0x64
 8011128:	ed8d 0b02 	vstr	d0, [sp, #8]
 801112c:	ec55 4b10 	vmov	r4, r5, d0
 8011130:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011132:	9109      	str	r1, [sp, #36]	@ 0x24
 8011134:	4683      	mov	fp, r0
 8011136:	920e      	str	r2, [sp, #56]	@ 0x38
 8011138:	9313      	str	r3, [sp, #76]	@ 0x4c
 801113a:	b97f      	cbnz	r7, 801115c <_dtoa_r+0x3c>
 801113c:	2010      	movs	r0, #16
 801113e:	f7fe fe23 	bl	800fd88 <malloc>
 8011142:	4602      	mov	r2, r0
 8011144:	f8cb 001c 	str.w	r0, [fp, #28]
 8011148:	b920      	cbnz	r0, 8011154 <_dtoa_r+0x34>
 801114a:	4ba7      	ldr	r3, [pc, #668]	@ (80113e8 <_dtoa_r+0x2c8>)
 801114c:	21ef      	movs	r1, #239	@ 0xef
 801114e:	48a7      	ldr	r0, [pc, #668]	@ (80113ec <_dtoa_r+0x2cc>)
 8011150:	f002 fb66 	bl	8013820 <__assert_func>
 8011154:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011158:	6007      	str	r7, [r0, #0]
 801115a:	60c7      	str	r7, [r0, #12]
 801115c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011160:	6819      	ldr	r1, [r3, #0]
 8011162:	b159      	cbz	r1, 801117c <_dtoa_r+0x5c>
 8011164:	685a      	ldr	r2, [r3, #4]
 8011166:	604a      	str	r2, [r1, #4]
 8011168:	2301      	movs	r3, #1
 801116a:	4093      	lsls	r3, r2
 801116c:	608b      	str	r3, [r1, #8]
 801116e:	4658      	mov	r0, fp
 8011170:	f000 fe24 	bl	8011dbc <_Bfree>
 8011174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011178:	2200      	movs	r2, #0
 801117a:	601a      	str	r2, [r3, #0]
 801117c:	1e2b      	subs	r3, r5, #0
 801117e:	bfb9      	ittee	lt
 8011180:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011184:	9303      	strlt	r3, [sp, #12]
 8011186:	2300      	movge	r3, #0
 8011188:	6033      	strge	r3, [r6, #0]
 801118a:	9f03      	ldr	r7, [sp, #12]
 801118c:	4b98      	ldr	r3, [pc, #608]	@ (80113f0 <_dtoa_r+0x2d0>)
 801118e:	bfbc      	itt	lt
 8011190:	2201      	movlt	r2, #1
 8011192:	6032      	strlt	r2, [r6, #0]
 8011194:	43bb      	bics	r3, r7
 8011196:	d112      	bne.n	80111be <_dtoa_r+0x9e>
 8011198:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801119a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801119e:	6013      	str	r3, [r2, #0]
 80111a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80111a4:	4323      	orrs	r3, r4
 80111a6:	f000 854d 	beq.w	8011c44 <_dtoa_r+0xb24>
 80111aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80111ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011404 <_dtoa_r+0x2e4>
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	f000 854f 	beq.w	8011c54 <_dtoa_r+0xb34>
 80111b6:	f10a 0303 	add.w	r3, sl, #3
 80111ba:	f000 bd49 	b.w	8011c50 <_dtoa_r+0xb30>
 80111be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80111c2:	2200      	movs	r2, #0
 80111c4:	ec51 0b17 	vmov	r0, r1, d7
 80111c8:	2300      	movs	r3, #0
 80111ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80111ce:	f7ef fc9b 	bl	8000b08 <__aeabi_dcmpeq>
 80111d2:	4680      	mov	r8, r0
 80111d4:	b158      	cbz	r0, 80111ee <_dtoa_r+0xce>
 80111d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80111d8:	2301      	movs	r3, #1
 80111da:	6013      	str	r3, [r2, #0]
 80111dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80111de:	b113      	cbz	r3, 80111e6 <_dtoa_r+0xc6>
 80111e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80111e2:	4b84      	ldr	r3, [pc, #528]	@ (80113f4 <_dtoa_r+0x2d4>)
 80111e4:	6013      	str	r3, [r2, #0]
 80111e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011408 <_dtoa_r+0x2e8>
 80111ea:	f000 bd33 	b.w	8011c54 <_dtoa_r+0xb34>
 80111ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80111f2:	aa16      	add	r2, sp, #88	@ 0x58
 80111f4:	a917      	add	r1, sp, #92	@ 0x5c
 80111f6:	4658      	mov	r0, fp
 80111f8:	f001 f984 	bl	8012504 <__d2b>
 80111fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011200:	4681      	mov	r9, r0
 8011202:	2e00      	cmp	r6, #0
 8011204:	d077      	beq.n	80112f6 <_dtoa_r+0x1d6>
 8011206:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011208:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801120c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011214:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011218:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801121c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011220:	4619      	mov	r1, r3
 8011222:	2200      	movs	r2, #0
 8011224:	4b74      	ldr	r3, [pc, #464]	@ (80113f8 <_dtoa_r+0x2d8>)
 8011226:	f7ef f84f 	bl	80002c8 <__aeabi_dsub>
 801122a:	a369      	add	r3, pc, #420	@ (adr r3, 80113d0 <_dtoa_r+0x2b0>)
 801122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011230:	f7ef fa02 	bl	8000638 <__aeabi_dmul>
 8011234:	a368      	add	r3, pc, #416	@ (adr r3, 80113d8 <_dtoa_r+0x2b8>)
 8011236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123a:	f7ef f847 	bl	80002cc <__adddf3>
 801123e:	4604      	mov	r4, r0
 8011240:	4630      	mov	r0, r6
 8011242:	460d      	mov	r5, r1
 8011244:	f7ef f98e 	bl	8000564 <__aeabi_i2d>
 8011248:	a365      	add	r3, pc, #404	@ (adr r3, 80113e0 <_dtoa_r+0x2c0>)
 801124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124e:	f7ef f9f3 	bl	8000638 <__aeabi_dmul>
 8011252:	4602      	mov	r2, r0
 8011254:	460b      	mov	r3, r1
 8011256:	4620      	mov	r0, r4
 8011258:	4629      	mov	r1, r5
 801125a:	f7ef f837 	bl	80002cc <__adddf3>
 801125e:	4604      	mov	r4, r0
 8011260:	460d      	mov	r5, r1
 8011262:	f7ef fc99 	bl	8000b98 <__aeabi_d2iz>
 8011266:	2200      	movs	r2, #0
 8011268:	4607      	mov	r7, r0
 801126a:	2300      	movs	r3, #0
 801126c:	4620      	mov	r0, r4
 801126e:	4629      	mov	r1, r5
 8011270:	f7ef fc54 	bl	8000b1c <__aeabi_dcmplt>
 8011274:	b140      	cbz	r0, 8011288 <_dtoa_r+0x168>
 8011276:	4638      	mov	r0, r7
 8011278:	f7ef f974 	bl	8000564 <__aeabi_i2d>
 801127c:	4622      	mov	r2, r4
 801127e:	462b      	mov	r3, r5
 8011280:	f7ef fc42 	bl	8000b08 <__aeabi_dcmpeq>
 8011284:	b900      	cbnz	r0, 8011288 <_dtoa_r+0x168>
 8011286:	3f01      	subs	r7, #1
 8011288:	2f16      	cmp	r7, #22
 801128a:	d851      	bhi.n	8011330 <_dtoa_r+0x210>
 801128c:	4b5b      	ldr	r3, [pc, #364]	@ (80113fc <_dtoa_r+0x2dc>)
 801128e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801129a:	f7ef fc3f 	bl	8000b1c <__aeabi_dcmplt>
 801129e:	2800      	cmp	r0, #0
 80112a0:	d048      	beq.n	8011334 <_dtoa_r+0x214>
 80112a2:	3f01      	subs	r7, #1
 80112a4:	2300      	movs	r3, #0
 80112a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80112a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80112aa:	1b9b      	subs	r3, r3, r6
 80112ac:	1e5a      	subs	r2, r3, #1
 80112ae:	bf44      	itt	mi
 80112b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80112b4:	2300      	movmi	r3, #0
 80112b6:	9208      	str	r2, [sp, #32]
 80112b8:	bf54      	ite	pl
 80112ba:	f04f 0800 	movpl.w	r8, #0
 80112be:	9308      	strmi	r3, [sp, #32]
 80112c0:	2f00      	cmp	r7, #0
 80112c2:	db39      	blt.n	8011338 <_dtoa_r+0x218>
 80112c4:	9b08      	ldr	r3, [sp, #32]
 80112c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80112c8:	443b      	add	r3, r7
 80112ca:	9308      	str	r3, [sp, #32]
 80112cc:	2300      	movs	r3, #0
 80112ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80112d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112d2:	2b09      	cmp	r3, #9
 80112d4:	d864      	bhi.n	80113a0 <_dtoa_r+0x280>
 80112d6:	2b05      	cmp	r3, #5
 80112d8:	bfc4      	itt	gt
 80112da:	3b04      	subgt	r3, #4
 80112dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80112de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112e0:	f1a3 0302 	sub.w	r3, r3, #2
 80112e4:	bfcc      	ite	gt
 80112e6:	2400      	movgt	r4, #0
 80112e8:	2401      	movle	r4, #1
 80112ea:	2b03      	cmp	r3, #3
 80112ec:	d863      	bhi.n	80113b6 <_dtoa_r+0x296>
 80112ee:	e8df f003 	tbb	[pc, r3]
 80112f2:	372a      	.short	0x372a
 80112f4:	5535      	.short	0x5535
 80112f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80112fa:	441e      	add	r6, r3
 80112fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011300:	2b20      	cmp	r3, #32
 8011302:	bfc1      	itttt	gt
 8011304:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011308:	409f      	lslgt	r7, r3
 801130a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801130e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011312:	bfd6      	itet	le
 8011314:	f1c3 0320 	rsble	r3, r3, #32
 8011318:	ea47 0003 	orrgt.w	r0, r7, r3
 801131c:	fa04 f003 	lslle.w	r0, r4, r3
 8011320:	f7ef f910 	bl	8000544 <__aeabi_ui2d>
 8011324:	2201      	movs	r2, #1
 8011326:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801132a:	3e01      	subs	r6, #1
 801132c:	9214      	str	r2, [sp, #80]	@ 0x50
 801132e:	e777      	b.n	8011220 <_dtoa_r+0x100>
 8011330:	2301      	movs	r3, #1
 8011332:	e7b8      	b.n	80112a6 <_dtoa_r+0x186>
 8011334:	9012      	str	r0, [sp, #72]	@ 0x48
 8011336:	e7b7      	b.n	80112a8 <_dtoa_r+0x188>
 8011338:	427b      	negs	r3, r7
 801133a:	930a      	str	r3, [sp, #40]	@ 0x28
 801133c:	2300      	movs	r3, #0
 801133e:	eba8 0807 	sub.w	r8, r8, r7
 8011342:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011344:	e7c4      	b.n	80112d0 <_dtoa_r+0x1b0>
 8011346:	2300      	movs	r3, #0
 8011348:	930b      	str	r3, [sp, #44]	@ 0x2c
 801134a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801134c:	2b00      	cmp	r3, #0
 801134e:	dc35      	bgt.n	80113bc <_dtoa_r+0x29c>
 8011350:	2301      	movs	r3, #1
 8011352:	9300      	str	r3, [sp, #0]
 8011354:	9307      	str	r3, [sp, #28]
 8011356:	461a      	mov	r2, r3
 8011358:	920e      	str	r2, [sp, #56]	@ 0x38
 801135a:	e00b      	b.n	8011374 <_dtoa_r+0x254>
 801135c:	2301      	movs	r3, #1
 801135e:	e7f3      	b.n	8011348 <_dtoa_r+0x228>
 8011360:	2300      	movs	r3, #0
 8011362:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011366:	18fb      	adds	r3, r7, r3
 8011368:	9300      	str	r3, [sp, #0]
 801136a:	3301      	adds	r3, #1
 801136c:	2b01      	cmp	r3, #1
 801136e:	9307      	str	r3, [sp, #28]
 8011370:	bfb8      	it	lt
 8011372:	2301      	movlt	r3, #1
 8011374:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011378:	2100      	movs	r1, #0
 801137a:	2204      	movs	r2, #4
 801137c:	f102 0514 	add.w	r5, r2, #20
 8011380:	429d      	cmp	r5, r3
 8011382:	d91f      	bls.n	80113c4 <_dtoa_r+0x2a4>
 8011384:	6041      	str	r1, [r0, #4]
 8011386:	4658      	mov	r0, fp
 8011388:	f000 fcd8 	bl	8011d3c <_Balloc>
 801138c:	4682      	mov	sl, r0
 801138e:	2800      	cmp	r0, #0
 8011390:	d13c      	bne.n	801140c <_dtoa_r+0x2ec>
 8011392:	4b1b      	ldr	r3, [pc, #108]	@ (8011400 <_dtoa_r+0x2e0>)
 8011394:	4602      	mov	r2, r0
 8011396:	f240 11af 	movw	r1, #431	@ 0x1af
 801139a:	e6d8      	b.n	801114e <_dtoa_r+0x2e>
 801139c:	2301      	movs	r3, #1
 801139e:	e7e0      	b.n	8011362 <_dtoa_r+0x242>
 80113a0:	2401      	movs	r4, #1
 80113a2:	2300      	movs	r3, #0
 80113a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80113a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80113a8:	f04f 33ff 	mov.w	r3, #4294967295
 80113ac:	9300      	str	r3, [sp, #0]
 80113ae:	9307      	str	r3, [sp, #28]
 80113b0:	2200      	movs	r2, #0
 80113b2:	2312      	movs	r3, #18
 80113b4:	e7d0      	b.n	8011358 <_dtoa_r+0x238>
 80113b6:	2301      	movs	r3, #1
 80113b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80113ba:	e7f5      	b.n	80113a8 <_dtoa_r+0x288>
 80113bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80113be:	9300      	str	r3, [sp, #0]
 80113c0:	9307      	str	r3, [sp, #28]
 80113c2:	e7d7      	b.n	8011374 <_dtoa_r+0x254>
 80113c4:	3101      	adds	r1, #1
 80113c6:	0052      	lsls	r2, r2, #1
 80113c8:	e7d8      	b.n	801137c <_dtoa_r+0x25c>
 80113ca:	bf00      	nop
 80113cc:	f3af 8000 	nop.w
 80113d0:	636f4361 	.word	0x636f4361
 80113d4:	3fd287a7 	.word	0x3fd287a7
 80113d8:	8b60c8b3 	.word	0x8b60c8b3
 80113dc:	3fc68a28 	.word	0x3fc68a28
 80113e0:	509f79fb 	.word	0x509f79fb
 80113e4:	3fd34413 	.word	0x3fd34413
 80113e8:	08014872 	.word	0x08014872
 80113ec:	08014889 	.word	0x08014889
 80113f0:	7ff00000 	.word	0x7ff00000
 80113f4:	0801483d 	.word	0x0801483d
 80113f8:	3ff80000 	.word	0x3ff80000
 80113fc:	08014980 	.word	0x08014980
 8011400:	080148e1 	.word	0x080148e1
 8011404:	0801486e 	.word	0x0801486e
 8011408:	0801483c 	.word	0x0801483c
 801140c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011410:	6018      	str	r0, [r3, #0]
 8011412:	9b07      	ldr	r3, [sp, #28]
 8011414:	2b0e      	cmp	r3, #14
 8011416:	f200 80a4 	bhi.w	8011562 <_dtoa_r+0x442>
 801141a:	2c00      	cmp	r4, #0
 801141c:	f000 80a1 	beq.w	8011562 <_dtoa_r+0x442>
 8011420:	2f00      	cmp	r7, #0
 8011422:	dd33      	ble.n	801148c <_dtoa_r+0x36c>
 8011424:	4bad      	ldr	r3, [pc, #692]	@ (80116dc <_dtoa_r+0x5bc>)
 8011426:	f007 020f 	and.w	r2, r7, #15
 801142a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801142e:	ed93 7b00 	vldr	d7, [r3]
 8011432:	05f8      	lsls	r0, r7, #23
 8011434:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011438:	ea4f 1427 	mov.w	r4, r7, asr #4
 801143c:	d516      	bpl.n	801146c <_dtoa_r+0x34c>
 801143e:	4ba8      	ldr	r3, [pc, #672]	@ (80116e0 <_dtoa_r+0x5c0>)
 8011440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011448:	f7ef fa20 	bl	800088c <__aeabi_ddiv>
 801144c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011450:	f004 040f 	and.w	r4, r4, #15
 8011454:	2603      	movs	r6, #3
 8011456:	4da2      	ldr	r5, [pc, #648]	@ (80116e0 <_dtoa_r+0x5c0>)
 8011458:	b954      	cbnz	r4, 8011470 <_dtoa_r+0x350>
 801145a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801145e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011462:	f7ef fa13 	bl	800088c <__aeabi_ddiv>
 8011466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801146a:	e028      	b.n	80114be <_dtoa_r+0x39e>
 801146c:	2602      	movs	r6, #2
 801146e:	e7f2      	b.n	8011456 <_dtoa_r+0x336>
 8011470:	07e1      	lsls	r1, r4, #31
 8011472:	d508      	bpl.n	8011486 <_dtoa_r+0x366>
 8011474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011478:	e9d5 2300 	ldrd	r2, r3, [r5]
 801147c:	f7ef f8dc 	bl	8000638 <__aeabi_dmul>
 8011480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011484:	3601      	adds	r6, #1
 8011486:	1064      	asrs	r4, r4, #1
 8011488:	3508      	adds	r5, #8
 801148a:	e7e5      	b.n	8011458 <_dtoa_r+0x338>
 801148c:	f000 80d2 	beq.w	8011634 <_dtoa_r+0x514>
 8011490:	427c      	negs	r4, r7
 8011492:	4b92      	ldr	r3, [pc, #584]	@ (80116dc <_dtoa_r+0x5bc>)
 8011494:	4d92      	ldr	r5, [pc, #584]	@ (80116e0 <_dtoa_r+0x5c0>)
 8011496:	f004 020f 	and.w	r2, r4, #15
 801149a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80114a6:	f7ef f8c7 	bl	8000638 <__aeabi_dmul>
 80114aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114ae:	1124      	asrs	r4, r4, #4
 80114b0:	2300      	movs	r3, #0
 80114b2:	2602      	movs	r6, #2
 80114b4:	2c00      	cmp	r4, #0
 80114b6:	f040 80b2 	bne.w	801161e <_dtoa_r+0x4fe>
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d1d3      	bne.n	8011466 <_dtoa_r+0x346>
 80114be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80114c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	f000 80b7 	beq.w	8011638 <_dtoa_r+0x518>
 80114ca:	4b86      	ldr	r3, [pc, #536]	@ (80116e4 <_dtoa_r+0x5c4>)
 80114cc:	2200      	movs	r2, #0
 80114ce:	4620      	mov	r0, r4
 80114d0:	4629      	mov	r1, r5
 80114d2:	f7ef fb23 	bl	8000b1c <__aeabi_dcmplt>
 80114d6:	2800      	cmp	r0, #0
 80114d8:	f000 80ae 	beq.w	8011638 <_dtoa_r+0x518>
 80114dc:	9b07      	ldr	r3, [sp, #28]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	f000 80aa 	beq.w	8011638 <_dtoa_r+0x518>
 80114e4:	9b00      	ldr	r3, [sp, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	dd37      	ble.n	801155a <_dtoa_r+0x43a>
 80114ea:	1e7b      	subs	r3, r7, #1
 80114ec:	9304      	str	r3, [sp, #16]
 80114ee:	4620      	mov	r0, r4
 80114f0:	4b7d      	ldr	r3, [pc, #500]	@ (80116e8 <_dtoa_r+0x5c8>)
 80114f2:	2200      	movs	r2, #0
 80114f4:	4629      	mov	r1, r5
 80114f6:	f7ef f89f 	bl	8000638 <__aeabi_dmul>
 80114fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114fe:	9c00      	ldr	r4, [sp, #0]
 8011500:	3601      	adds	r6, #1
 8011502:	4630      	mov	r0, r6
 8011504:	f7ef f82e 	bl	8000564 <__aeabi_i2d>
 8011508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801150c:	f7ef f894 	bl	8000638 <__aeabi_dmul>
 8011510:	4b76      	ldr	r3, [pc, #472]	@ (80116ec <_dtoa_r+0x5cc>)
 8011512:	2200      	movs	r2, #0
 8011514:	f7ee feda 	bl	80002cc <__adddf3>
 8011518:	4605      	mov	r5, r0
 801151a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801151e:	2c00      	cmp	r4, #0
 8011520:	f040 808d 	bne.w	801163e <_dtoa_r+0x51e>
 8011524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011528:	4b71      	ldr	r3, [pc, #452]	@ (80116f0 <_dtoa_r+0x5d0>)
 801152a:	2200      	movs	r2, #0
 801152c:	f7ee fecc 	bl	80002c8 <__aeabi_dsub>
 8011530:	4602      	mov	r2, r0
 8011532:	460b      	mov	r3, r1
 8011534:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011538:	462a      	mov	r2, r5
 801153a:	4633      	mov	r3, r6
 801153c:	f7ef fb0c 	bl	8000b58 <__aeabi_dcmpgt>
 8011540:	2800      	cmp	r0, #0
 8011542:	f040 828b 	bne.w	8011a5c <_dtoa_r+0x93c>
 8011546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801154a:	462a      	mov	r2, r5
 801154c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011550:	f7ef fae4 	bl	8000b1c <__aeabi_dcmplt>
 8011554:	2800      	cmp	r0, #0
 8011556:	f040 8128 	bne.w	80117aa <_dtoa_r+0x68a>
 801155a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801155e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011562:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011564:	2b00      	cmp	r3, #0
 8011566:	f2c0 815a 	blt.w	801181e <_dtoa_r+0x6fe>
 801156a:	2f0e      	cmp	r7, #14
 801156c:	f300 8157 	bgt.w	801181e <_dtoa_r+0x6fe>
 8011570:	4b5a      	ldr	r3, [pc, #360]	@ (80116dc <_dtoa_r+0x5bc>)
 8011572:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011576:	ed93 7b00 	vldr	d7, [r3]
 801157a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801157c:	2b00      	cmp	r3, #0
 801157e:	ed8d 7b00 	vstr	d7, [sp]
 8011582:	da03      	bge.n	801158c <_dtoa_r+0x46c>
 8011584:	9b07      	ldr	r3, [sp, #28]
 8011586:	2b00      	cmp	r3, #0
 8011588:	f340 8101 	ble.w	801178e <_dtoa_r+0x66e>
 801158c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011590:	4656      	mov	r6, sl
 8011592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011596:	4620      	mov	r0, r4
 8011598:	4629      	mov	r1, r5
 801159a:	f7ef f977 	bl	800088c <__aeabi_ddiv>
 801159e:	f7ef fafb 	bl	8000b98 <__aeabi_d2iz>
 80115a2:	4680      	mov	r8, r0
 80115a4:	f7ee ffde 	bl	8000564 <__aeabi_i2d>
 80115a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80115ac:	f7ef f844 	bl	8000638 <__aeabi_dmul>
 80115b0:	4602      	mov	r2, r0
 80115b2:	460b      	mov	r3, r1
 80115b4:	4620      	mov	r0, r4
 80115b6:	4629      	mov	r1, r5
 80115b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80115bc:	f7ee fe84 	bl	80002c8 <__aeabi_dsub>
 80115c0:	f806 4b01 	strb.w	r4, [r6], #1
 80115c4:	9d07      	ldr	r5, [sp, #28]
 80115c6:	eba6 040a 	sub.w	r4, r6, sl
 80115ca:	42a5      	cmp	r5, r4
 80115cc:	4602      	mov	r2, r0
 80115ce:	460b      	mov	r3, r1
 80115d0:	f040 8117 	bne.w	8011802 <_dtoa_r+0x6e2>
 80115d4:	f7ee fe7a 	bl	80002cc <__adddf3>
 80115d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80115dc:	4604      	mov	r4, r0
 80115de:	460d      	mov	r5, r1
 80115e0:	f7ef faba 	bl	8000b58 <__aeabi_dcmpgt>
 80115e4:	2800      	cmp	r0, #0
 80115e6:	f040 80f9 	bne.w	80117dc <_dtoa_r+0x6bc>
 80115ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80115ee:	4620      	mov	r0, r4
 80115f0:	4629      	mov	r1, r5
 80115f2:	f7ef fa89 	bl	8000b08 <__aeabi_dcmpeq>
 80115f6:	b118      	cbz	r0, 8011600 <_dtoa_r+0x4e0>
 80115f8:	f018 0f01 	tst.w	r8, #1
 80115fc:	f040 80ee 	bne.w	80117dc <_dtoa_r+0x6bc>
 8011600:	4649      	mov	r1, r9
 8011602:	4658      	mov	r0, fp
 8011604:	f000 fbda 	bl	8011dbc <_Bfree>
 8011608:	2300      	movs	r3, #0
 801160a:	7033      	strb	r3, [r6, #0]
 801160c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801160e:	3701      	adds	r7, #1
 8011610:	601f      	str	r7, [r3, #0]
 8011612:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011614:	2b00      	cmp	r3, #0
 8011616:	f000 831d 	beq.w	8011c54 <_dtoa_r+0xb34>
 801161a:	601e      	str	r6, [r3, #0]
 801161c:	e31a      	b.n	8011c54 <_dtoa_r+0xb34>
 801161e:	07e2      	lsls	r2, r4, #31
 8011620:	d505      	bpl.n	801162e <_dtoa_r+0x50e>
 8011622:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011626:	f7ef f807 	bl	8000638 <__aeabi_dmul>
 801162a:	3601      	adds	r6, #1
 801162c:	2301      	movs	r3, #1
 801162e:	1064      	asrs	r4, r4, #1
 8011630:	3508      	adds	r5, #8
 8011632:	e73f      	b.n	80114b4 <_dtoa_r+0x394>
 8011634:	2602      	movs	r6, #2
 8011636:	e742      	b.n	80114be <_dtoa_r+0x39e>
 8011638:	9c07      	ldr	r4, [sp, #28]
 801163a:	9704      	str	r7, [sp, #16]
 801163c:	e761      	b.n	8011502 <_dtoa_r+0x3e2>
 801163e:	4b27      	ldr	r3, [pc, #156]	@ (80116dc <_dtoa_r+0x5bc>)
 8011640:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011642:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011646:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801164a:	4454      	add	r4, sl
 801164c:	2900      	cmp	r1, #0
 801164e:	d053      	beq.n	80116f8 <_dtoa_r+0x5d8>
 8011650:	4928      	ldr	r1, [pc, #160]	@ (80116f4 <_dtoa_r+0x5d4>)
 8011652:	2000      	movs	r0, #0
 8011654:	f7ef f91a 	bl	800088c <__aeabi_ddiv>
 8011658:	4633      	mov	r3, r6
 801165a:	462a      	mov	r2, r5
 801165c:	f7ee fe34 	bl	80002c8 <__aeabi_dsub>
 8011660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011664:	4656      	mov	r6, sl
 8011666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801166a:	f7ef fa95 	bl	8000b98 <__aeabi_d2iz>
 801166e:	4605      	mov	r5, r0
 8011670:	f7ee ff78 	bl	8000564 <__aeabi_i2d>
 8011674:	4602      	mov	r2, r0
 8011676:	460b      	mov	r3, r1
 8011678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801167c:	f7ee fe24 	bl	80002c8 <__aeabi_dsub>
 8011680:	3530      	adds	r5, #48	@ 0x30
 8011682:	4602      	mov	r2, r0
 8011684:	460b      	mov	r3, r1
 8011686:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801168a:	f806 5b01 	strb.w	r5, [r6], #1
 801168e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011692:	f7ef fa43 	bl	8000b1c <__aeabi_dcmplt>
 8011696:	2800      	cmp	r0, #0
 8011698:	d171      	bne.n	801177e <_dtoa_r+0x65e>
 801169a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801169e:	4911      	ldr	r1, [pc, #68]	@ (80116e4 <_dtoa_r+0x5c4>)
 80116a0:	2000      	movs	r0, #0
 80116a2:	f7ee fe11 	bl	80002c8 <__aeabi_dsub>
 80116a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80116aa:	f7ef fa37 	bl	8000b1c <__aeabi_dcmplt>
 80116ae:	2800      	cmp	r0, #0
 80116b0:	f040 8095 	bne.w	80117de <_dtoa_r+0x6be>
 80116b4:	42a6      	cmp	r6, r4
 80116b6:	f43f af50 	beq.w	801155a <_dtoa_r+0x43a>
 80116ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80116be:	4b0a      	ldr	r3, [pc, #40]	@ (80116e8 <_dtoa_r+0x5c8>)
 80116c0:	2200      	movs	r2, #0
 80116c2:	f7ee ffb9 	bl	8000638 <__aeabi_dmul>
 80116c6:	4b08      	ldr	r3, [pc, #32]	@ (80116e8 <_dtoa_r+0x5c8>)
 80116c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80116cc:	2200      	movs	r2, #0
 80116ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116d2:	f7ee ffb1 	bl	8000638 <__aeabi_dmul>
 80116d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116da:	e7c4      	b.n	8011666 <_dtoa_r+0x546>
 80116dc:	08014980 	.word	0x08014980
 80116e0:	08014958 	.word	0x08014958
 80116e4:	3ff00000 	.word	0x3ff00000
 80116e8:	40240000 	.word	0x40240000
 80116ec:	401c0000 	.word	0x401c0000
 80116f0:	40140000 	.word	0x40140000
 80116f4:	3fe00000 	.word	0x3fe00000
 80116f8:	4631      	mov	r1, r6
 80116fa:	4628      	mov	r0, r5
 80116fc:	f7ee ff9c 	bl	8000638 <__aeabi_dmul>
 8011700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011704:	9415      	str	r4, [sp, #84]	@ 0x54
 8011706:	4656      	mov	r6, sl
 8011708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801170c:	f7ef fa44 	bl	8000b98 <__aeabi_d2iz>
 8011710:	4605      	mov	r5, r0
 8011712:	f7ee ff27 	bl	8000564 <__aeabi_i2d>
 8011716:	4602      	mov	r2, r0
 8011718:	460b      	mov	r3, r1
 801171a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801171e:	f7ee fdd3 	bl	80002c8 <__aeabi_dsub>
 8011722:	3530      	adds	r5, #48	@ 0x30
 8011724:	f806 5b01 	strb.w	r5, [r6], #1
 8011728:	4602      	mov	r2, r0
 801172a:	460b      	mov	r3, r1
 801172c:	42a6      	cmp	r6, r4
 801172e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011732:	f04f 0200 	mov.w	r2, #0
 8011736:	d124      	bne.n	8011782 <_dtoa_r+0x662>
 8011738:	4bac      	ldr	r3, [pc, #688]	@ (80119ec <_dtoa_r+0x8cc>)
 801173a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801173e:	f7ee fdc5 	bl	80002cc <__adddf3>
 8011742:	4602      	mov	r2, r0
 8011744:	460b      	mov	r3, r1
 8011746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801174a:	f7ef fa05 	bl	8000b58 <__aeabi_dcmpgt>
 801174e:	2800      	cmp	r0, #0
 8011750:	d145      	bne.n	80117de <_dtoa_r+0x6be>
 8011752:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011756:	49a5      	ldr	r1, [pc, #660]	@ (80119ec <_dtoa_r+0x8cc>)
 8011758:	2000      	movs	r0, #0
 801175a:	f7ee fdb5 	bl	80002c8 <__aeabi_dsub>
 801175e:	4602      	mov	r2, r0
 8011760:	460b      	mov	r3, r1
 8011762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011766:	f7ef f9d9 	bl	8000b1c <__aeabi_dcmplt>
 801176a:	2800      	cmp	r0, #0
 801176c:	f43f aef5 	beq.w	801155a <_dtoa_r+0x43a>
 8011770:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011772:	1e73      	subs	r3, r6, #1
 8011774:	9315      	str	r3, [sp, #84]	@ 0x54
 8011776:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801177a:	2b30      	cmp	r3, #48	@ 0x30
 801177c:	d0f8      	beq.n	8011770 <_dtoa_r+0x650>
 801177e:	9f04      	ldr	r7, [sp, #16]
 8011780:	e73e      	b.n	8011600 <_dtoa_r+0x4e0>
 8011782:	4b9b      	ldr	r3, [pc, #620]	@ (80119f0 <_dtoa_r+0x8d0>)
 8011784:	f7ee ff58 	bl	8000638 <__aeabi_dmul>
 8011788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801178c:	e7bc      	b.n	8011708 <_dtoa_r+0x5e8>
 801178e:	d10c      	bne.n	80117aa <_dtoa_r+0x68a>
 8011790:	4b98      	ldr	r3, [pc, #608]	@ (80119f4 <_dtoa_r+0x8d4>)
 8011792:	2200      	movs	r2, #0
 8011794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011798:	f7ee ff4e 	bl	8000638 <__aeabi_dmul>
 801179c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117a0:	f7ef f9d0 	bl	8000b44 <__aeabi_dcmpge>
 80117a4:	2800      	cmp	r0, #0
 80117a6:	f000 8157 	beq.w	8011a58 <_dtoa_r+0x938>
 80117aa:	2400      	movs	r4, #0
 80117ac:	4625      	mov	r5, r4
 80117ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117b0:	43db      	mvns	r3, r3
 80117b2:	9304      	str	r3, [sp, #16]
 80117b4:	4656      	mov	r6, sl
 80117b6:	2700      	movs	r7, #0
 80117b8:	4621      	mov	r1, r4
 80117ba:	4658      	mov	r0, fp
 80117bc:	f000 fafe 	bl	8011dbc <_Bfree>
 80117c0:	2d00      	cmp	r5, #0
 80117c2:	d0dc      	beq.n	801177e <_dtoa_r+0x65e>
 80117c4:	b12f      	cbz	r7, 80117d2 <_dtoa_r+0x6b2>
 80117c6:	42af      	cmp	r7, r5
 80117c8:	d003      	beq.n	80117d2 <_dtoa_r+0x6b2>
 80117ca:	4639      	mov	r1, r7
 80117cc:	4658      	mov	r0, fp
 80117ce:	f000 faf5 	bl	8011dbc <_Bfree>
 80117d2:	4629      	mov	r1, r5
 80117d4:	4658      	mov	r0, fp
 80117d6:	f000 faf1 	bl	8011dbc <_Bfree>
 80117da:	e7d0      	b.n	801177e <_dtoa_r+0x65e>
 80117dc:	9704      	str	r7, [sp, #16]
 80117de:	4633      	mov	r3, r6
 80117e0:	461e      	mov	r6, r3
 80117e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117e6:	2a39      	cmp	r2, #57	@ 0x39
 80117e8:	d107      	bne.n	80117fa <_dtoa_r+0x6da>
 80117ea:	459a      	cmp	sl, r3
 80117ec:	d1f8      	bne.n	80117e0 <_dtoa_r+0x6c0>
 80117ee:	9a04      	ldr	r2, [sp, #16]
 80117f0:	3201      	adds	r2, #1
 80117f2:	9204      	str	r2, [sp, #16]
 80117f4:	2230      	movs	r2, #48	@ 0x30
 80117f6:	f88a 2000 	strb.w	r2, [sl]
 80117fa:	781a      	ldrb	r2, [r3, #0]
 80117fc:	3201      	adds	r2, #1
 80117fe:	701a      	strb	r2, [r3, #0]
 8011800:	e7bd      	b.n	801177e <_dtoa_r+0x65e>
 8011802:	4b7b      	ldr	r3, [pc, #492]	@ (80119f0 <_dtoa_r+0x8d0>)
 8011804:	2200      	movs	r2, #0
 8011806:	f7ee ff17 	bl	8000638 <__aeabi_dmul>
 801180a:	2200      	movs	r2, #0
 801180c:	2300      	movs	r3, #0
 801180e:	4604      	mov	r4, r0
 8011810:	460d      	mov	r5, r1
 8011812:	f7ef f979 	bl	8000b08 <__aeabi_dcmpeq>
 8011816:	2800      	cmp	r0, #0
 8011818:	f43f aebb 	beq.w	8011592 <_dtoa_r+0x472>
 801181c:	e6f0      	b.n	8011600 <_dtoa_r+0x4e0>
 801181e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011820:	2a00      	cmp	r2, #0
 8011822:	f000 80db 	beq.w	80119dc <_dtoa_r+0x8bc>
 8011826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011828:	2a01      	cmp	r2, #1
 801182a:	f300 80bf 	bgt.w	80119ac <_dtoa_r+0x88c>
 801182e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011830:	2a00      	cmp	r2, #0
 8011832:	f000 80b7 	beq.w	80119a4 <_dtoa_r+0x884>
 8011836:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801183a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801183c:	4646      	mov	r6, r8
 801183e:	9a08      	ldr	r2, [sp, #32]
 8011840:	2101      	movs	r1, #1
 8011842:	441a      	add	r2, r3
 8011844:	4658      	mov	r0, fp
 8011846:	4498      	add	r8, r3
 8011848:	9208      	str	r2, [sp, #32]
 801184a:	f000 fbb5 	bl	8011fb8 <__i2b>
 801184e:	4605      	mov	r5, r0
 8011850:	b15e      	cbz	r6, 801186a <_dtoa_r+0x74a>
 8011852:	9b08      	ldr	r3, [sp, #32]
 8011854:	2b00      	cmp	r3, #0
 8011856:	dd08      	ble.n	801186a <_dtoa_r+0x74a>
 8011858:	42b3      	cmp	r3, r6
 801185a:	9a08      	ldr	r2, [sp, #32]
 801185c:	bfa8      	it	ge
 801185e:	4633      	movge	r3, r6
 8011860:	eba8 0803 	sub.w	r8, r8, r3
 8011864:	1af6      	subs	r6, r6, r3
 8011866:	1ad3      	subs	r3, r2, r3
 8011868:	9308      	str	r3, [sp, #32]
 801186a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801186c:	b1f3      	cbz	r3, 80118ac <_dtoa_r+0x78c>
 801186e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011870:	2b00      	cmp	r3, #0
 8011872:	f000 80b7 	beq.w	80119e4 <_dtoa_r+0x8c4>
 8011876:	b18c      	cbz	r4, 801189c <_dtoa_r+0x77c>
 8011878:	4629      	mov	r1, r5
 801187a:	4622      	mov	r2, r4
 801187c:	4658      	mov	r0, fp
 801187e:	f000 fc5b 	bl	8012138 <__pow5mult>
 8011882:	464a      	mov	r2, r9
 8011884:	4601      	mov	r1, r0
 8011886:	4605      	mov	r5, r0
 8011888:	4658      	mov	r0, fp
 801188a:	f000 fbab 	bl	8011fe4 <__multiply>
 801188e:	4649      	mov	r1, r9
 8011890:	9004      	str	r0, [sp, #16]
 8011892:	4658      	mov	r0, fp
 8011894:	f000 fa92 	bl	8011dbc <_Bfree>
 8011898:	9b04      	ldr	r3, [sp, #16]
 801189a:	4699      	mov	r9, r3
 801189c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801189e:	1b1a      	subs	r2, r3, r4
 80118a0:	d004      	beq.n	80118ac <_dtoa_r+0x78c>
 80118a2:	4649      	mov	r1, r9
 80118a4:	4658      	mov	r0, fp
 80118a6:	f000 fc47 	bl	8012138 <__pow5mult>
 80118aa:	4681      	mov	r9, r0
 80118ac:	2101      	movs	r1, #1
 80118ae:	4658      	mov	r0, fp
 80118b0:	f000 fb82 	bl	8011fb8 <__i2b>
 80118b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118b6:	4604      	mov	r4, r0
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	f000 81cf 	beq.w	8011c5c <_dtoa_r+0xb3c>
 80118be:	461a      	mov	r2, r3
 80118c0:	4601      	mov	r1, r0
 80118c2:	4658      	mov	r0, fp
 80118c4:	f000 fc38 	bl	8012138 <__pow5mult>
 80118c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	4604      	mov	r4, r0
 80118ce:	f300 8095 	bgt.w	80119fc <_dtoa_r+0x8dc>
 80118d2:	9b02      	ldr	r3, [sp, #8]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	f040 8087 	bne.w	80119e8 <_dtoa_r+0x8c8>
 80118da:	9b03      	ldr	r3, [sp, #12]
 80118dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	f040 8089 	bne.w	80119f8 <_dtoa_r+0x8d8>
 80118e6:	9b03      	ldr	r3, [sp, #12]
 80118e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80118ec:	0d1b      	lsrs	r3, r3, #20
 80118ee:	051b      	lsls	r3, r3, #20
 80118f0:	b12b      	cbz	r3, 80118fe <_dtoa_r+0x7de>
 80118f2:	9b08      	ldr	r3, [sp, #32]
 80118f4:	3301      	adds	r3, #1
 80118f6:	9308      	str	r3, [sp, #32]
 80118f8:	f108 0801 	add.w	r8, r8, #1
 80118fc:	2301      	movs	r3, #1
 80118fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011902:	2b00      	cmp	r3, #0
 8011904:	f000 81b0 	beq.w	8011c68 <_dtoa_r+0xb48>
 8011908:	6923      	ldr	r3, [r4, #16]
 801190a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801190e:	6918      	ldr	r0, [r3, #16]
 8011910:	f000 fb06 	bl	8011f20 <__hi0bits>
 8011914:	f1c0 0020 	rsb	r0, r0, #32
 8011918:	9b08      	ldr	r3, [sp, #32]
 801191a:	4418      	add	r0, r3
 801191c:	f010 001f 	ands.w	r0, r0, #31
 8011920:	d077      	beq.n	8011a12 <_dtoa_r+0x8f2>
 8011922:	f1c0 0320 	rsb	r3, r0, #32
 8011926:	2b04      	cmp	r3, #4
 8011928:	dd6b      	ble.n	8011a02 <_dtoa_r+0x8e2>
 801192a:	9b08      	ldr	r3, [sp, #32]
 801192c:	f1c0 001c 	rsb	r0, r0, #28
 8011930:	4403      	add	r3, r0
 8011932:	4480      	add	r8, r0
 8011934:	4406      	add	r6, r0
 8011936:	9308      	str	r3, [sp, #32]
 8011938:	f1b8 0f00 	cmp.w	r8, #0
 801193c:	dd05      	ble.n	801194a <_dtoa_r+0x82a>
 801193e:	4649      	mov	r1, r9
 8011940:	4642      	mov	r2, r8
 8011942:	4658      	mov	r0, fp
 8011944:	f000 fc52 	bl	80121ec <__lshift>
 8011948:	4681      	mov	r9, r0
 801194a:	9b08      	ldr	r3, [sp, #32]
 801194c:	2b00      	cmp	r3, #0
 801194e:	dd05      	ble.n	801195c <_dtoa_r+0x83c>
 8011950:	4621      	mov	r1, r4
 8011952:	461a      	mov	r2, r3
 8011954:	4658      	mov	r0, fp
 8011956:	f000 fc49 	bl	80121ec <__lshift>
 801195a:	4604      	mov	r4, r0
 801195c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801195e:	2b00      	cmp	r3, #0
 8011960:	d059      	beq.n	8011a16 <_dtoa_r+0x8f6>
 8011962:	4621      	mov	r1, r4
 8011964:	4648      	mov	r0, r9
 8011966:	f000 fcad 	bl	80122c4 <__mcmp>
 801196a:	2800      	cmp	r0, #0
 801196c:	da53      	bge.n	8011a16 <_dtoa_r+0x8f6>
 801196e:	1e7b      	subs	r3, r7, #1
 8011970:	9304      	str	r3, [sp, #16]
 8011972:	4649      	mov	r1, r9
 8011974:	2300      	movs	r3, #0
 8011976:	220a      	movs	r2, #10
 8011978:	4658      	mov	r0, fp
 801197a:	f000 fa41 	bl	8011e00 <__multadd>
 801197e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011980:	4681      	mov	r9, r0
 8011982:	2b00      	cmp	r3, #0
 8011984:	f000 8172 	beq.w	8011c6c <_dtoa_r+0xb4c>
 8011988:	2300      	movs	r3, #0
 801198a:	4629      	mov	r1, r5
 801198c:	220a      	movs	r2, #10
 801198e:	4658      	mov	r0, fp
 8011990:	f000 fa36 	bl	8011e00 <__multadd>
 8011994:	9b00      	ldr	r3, [sp, #0]
 8011996:	2b00      	cmp	r3, #0
 8011998:	4605      	mov	r5, r0
 801199a:	dc67      	bgt.n	8011a6c <_dtoa_r+0x94c>
 801199c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801199e:	2b02      	cmp	r3, #2
 80119a0:	dc41      	bgt.n	8011a26 <_dtoa_r+0x906>
 80119a2:	e063      	b.n	8011a6c <_dtoa_r+0x94c>
 80119a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80119a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80119aa:	e746      	b.n	801183a <_dtoa_r+0x71a>
 80119ac:	9b07      	ldr	r3, [sp, #28]
 80119ae:	1e5c      	subs	r4, r3, #1
 80119b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119b2:	42a3      	cmp	r3, r4
 80119b4:	bfbf      	itttt	lt
 80119b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80119b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80119ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80119bc:	1ae3      	sublt	r3, r4, r3
 80119be:	bfb4      	ite	lt
 80119c0:	18d2      	addlt	r2, r2, r3
 80119c2:	1b1c      	subge	r4, r3, r4
 80119c4:	9b07      	ldr	r3, [sp, #28]
 80119c6:	bfbc      	itt	lt
 80119c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80119ca:	2400      	movlt	r4, #0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	bfb5      	itete	lt
 80119d0:	eba8 0603 	sublt.w	r6, r8, r3
 80119d4:	9b07      	ldrge	r3, [sp, #28]
 80119d6:	2300      	movlt	r3, #0
 80119d8:	4646      	movge	r6, r8
 80119da:	e730      	b.n	801183e <_dtoa_r+0x71e>
 80119dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80119de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80119e0:	4646      	mov	r6, r8
 80119e2:	e735      	b.n	8011850 <_dtoa_r+0x730>
 80119e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80119e6:	e75c      	b.n	80118a2 <_dtoa_r+0x782>
 80119e8:	2300      	movs	r3, #0
 80119ea:	e788      	b.n	80118fe <_dtoa_r+0x7de>
 80119ec:	3fe00000 	.word	0x3fe00000
 80119f0:	40240000 	.word	0x40240000
 80119f4:	40140000 	.word	0x40140000
 80119f8:	9b02      	ldr	r3, [sp, #8]
 80119fa:	e780      	b.n	80118fe <_dtoa_r+0x7de>
 80119fc:	2300      	movs	r3, #0
 80119fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a00:	e782      	b.n	8011908 <_dtoa_r+0x7e8>
 8011a02:	d099      	beq.n	8011938 <_dtoa_r+0x818>
 8011a04:	9a08      	ldr	r2, [sp, #32]
 8011a06:	331c      	adds	r3, #28
 8011a08:	441a      	add	r2, r3
 8011a0a:	4498      	add	r8, r3
 8011a0c:	441e      	add	r6, r3
 8011a0e:	9208      	str	r2, [sp, #32]
 8011a10:	e792      	b.n	8011938 <_dtoa_r+0x818>
 8011a12:	4603      	mov	r3, r0
 8011a14:	e7f6      	b.n	8011a04 <_dtoa_r+0x8e4>
 8011a16:	9b07      	ldr	r3, [sp, #28]
 8011a18:	9704      	str	r7, [sp, #16]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	dc20      	bgt.n	8011a60 <_dtoa_r+0x940>
 8011a1e:	9300      	str	r3, [sp, #0]
 8011a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a22:	2b02      	cmp	r3, #2
 8011a24:	dd1e      	ble.n	8011a64 <_dtoa_r+0x944>
 8011a26:	9b00      	ldr	r3, [sp, #0]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	f47f aec0 	bne.w	80117ae <_dtoa_r+0x68e>
 8011a2e:	4621      	mov	r1, r4
 8011a30:	2205      	movs	r2, #5
 8011a32:	4658      	mov	r0, fp
 8011a34:	f000 f9e4 	bl	8011e00 <__multadd>
 8011a38:	4601      	mov	r1, r0
 8011a3a:	4604      	mov	r4, r0
 8011a3c:	4648      	mov	r0, r9
 8011a3e:	f000 fc41 	bl	80122c4 <__mcmp>
 8011a42:	2800      	cmp	r0, #0
 8011a44:	f77f aeb3 	ble.w	80117ae <_dtoa_r+0x68e>
 8011a48:	4656      	mov	r6, sl
 8011a4a:	2331      	movs	r3, #49	@ 0x31
 8011a4c:	f806 3b01 	strb.w	r3, [r6], #1
 8011a50:	9b04      	ldr	r3, [sp, #16]
 8011a52:	3301      	adds	r3, #1
 8011a54:	9304      	str	r3, [sp, #16]
 8011a56:	e6ae      	b.n	80117b6 <_dtoa_r+0x696>
 8011a58:	9c07      	ldr	r4, [sp, #28]
 8011a5a:	9704      	str	r7, [sp, #16]
 8011a5c:	4625      	mov	r5, r4
 8011a5e:	e7f3      	b.n	8011a48 <_dtoa_r+0x928>
 8011a60:	9b07      	ldr	r3, [sp, #28]
 8011a62:	9300      	str	r3, [sp, #0]
 8011a64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	f000 8104 	beq.w	8011c74 <_dtoa_r+0xb54>
 8011a6c:	2e00      	cmp	r6, #0
 8011a6e:	dd05      	ble.n	8011a7c <_dtoa_r+0x95c>
 8011a70:	4629      	mov	r1, r5
 8011a72:	4632      	mov	r2, r6
 8011a74:	4658      	mov	r0, fp
 8011a76:	f000 fbb9 	bl	80121ec <__lshift>
 8011a7a:	4605      	mov	r5, r0
 8011a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d05a      	beq.n	8011b38 <_dtoa_r+0xa18>
 8011a82:	6869      	ldr	r1, [r5, #4]
 8011a84:	4658      	mov	r0, fp
 8011a86:	f000 f959 	bl	8011d3c <_Balloc>
 8011a8a:	4606      	mov	r6, r0
 8011a8c:	b928      	cbnz	r0, 8011a9a <_dtoa_r+0x97a>
 8011a8e:	4b84      	ldr	r3, [pc, #528]	@ (8011ca0 <_dtoa_r+0xb80>)
 8011a90:	4602      	mov	r2, r0
 8011a92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011a96:	f7ff bb5a 	b.w	801114e <_dtoa_r+0x2e>
 8011a9a:	692a      	ldr	r2, [r5, #16]
 8011a9c:	3202      	adds	r2, #2
 8011a9e:	0092      	lsls	r2, r2, #2
 8011aa0:	f105 010c 	add.w	r1, r5, #12
 8011aa4:	300c      	adds	r0, #12
 8011aa6:	f7ff fa9c 	bl	8010fe2 <memcpy>
 8011aaa:	2201      	movs	r2, #1
 8011aac:	4631      	mov	r1, r6
 8011aae:	4658      	mov	r0, fp
 8011ab0:	f000 fb9c 	bl	80121ec <__lshift>
 8011ab4:	f10a 0301 	add.w	r3, sl, #1
 8011ab8:	9307      	str	r3, [sp, #28]
 8011aba:	9b00      	ldr	r3, [sp, #0]
 8011abc:	4453      	add	r3, sl
 8011abe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ac0:	9b02      	ldr	r3, [sp, #8]
 8011ac2:	f003 0301 	and.w	r3, r3, #1
 8011ac6:	462f      	mov	r7, r5
 8011ac8:	930a      	str	r3, [sp, #40]	@ 0x28
 8011aca:	4605      	mov	r5, r0
 8011acc:	9b07      	ldr	r3, [sp, #28]
 8011ace:	4621      	mov	r1, r4
 8011ad0:	3b01      	subs	r3, #1
 8011ad2:	4648      	mov	r0, r9
 8011ad4:	9300      	str	r3, [sp, #0]
 8011ad6:	f7ff fa99 	bl	801100c <quorem>
 8011ada:	4639      	mov	r1, r7
 8011adc:	9002      	str	r0, [sp, #8]
 8011ade:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011ae2:	4648      	mov	r0, r9
 8011ae4:	f000 fbee 	bl	80122c4 <__mcmp>
 8011ae8:	462a      	mov	r2, r5
 8011aea:	9008      	str	r0, [sp, #32]
 8011aec:	4621      	mov	r1, r4
 8011aee:	4658      	mov	r0, fp
 8011af0:	f000 fc04 	bl	80122fc <__mdiff>
 8011af4:	68c2      	ldr	r2, [r0, #12]
 8011af6:	4606      	mov	r6, r0
 8011af8:	bb02      	cbnz	r2, 8011b3c <_dtoa_r+0xa1c>
 8011afa:	4601      	mov	r1, r0
 8011afc:	4648      	mov	r0, r9
 8011afe:	f000 fbe1 	bl	80122c4 <__mcmp>
 8011b02:	4602      	mov	r2, r0
 8011b04:	4631      	mov	r1, r6
 8011b06:	4658      	mov	r0, fp
 8011b08:	920e      	str	r2, [sp, #56]	@ 0x38
 8011b0a:	f000 f957 	bl	8011dbc <_Bfree>
 8011b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b12:	9e07      	ldr	r6, [sp, #28]
 8011b14:	ea43 0102 	orr.w	r1, r3, r2
 8011b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b1a:	4319      	orrs	r1, r3
 8011b1c:	d110      	bne.n	8011b40 <_dtoa_r+0xa20>
 8011b1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011b22:	d029      	beq.n	8011b78 <_dtoa_r+0xa58>
 8011b24:	9b08      	ldr	r3, [sp, #32]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	dd02      	ble.n	8011b30 <_dtoa_r+0xa10>
 8011b2a:	9b02      	ldr	r3, [sp, #8]
 8011b2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011b30:	9b00      	ldr	r3, [sp, #0]
 8011b32:	f883 8000 	strb.w	r8, [r3]
 8011b36:	e63f      	b.n	80117b8 <_dtoa_r+0x698>
 8011b38:	4628      	mov	r0, r5
 8011b3a:	e7bb      	b.n	8011ab4 <_dtoa_r+0x994>
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	e7e1      	b.n	8011b04 <_dtoa_r+0x9e4>
 8011b40:	9b08      	ldr	r3, [sp, #32]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	db04      	blt.n	8011b50 <_dtoa_r+0xa30>
 8011b46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011b48:	430b      	orrs	r3, r1
 8011b4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011b4c:	430b      	orrs	r3, r1
 8011b4e:	d120      	bne.n	8011b92 <_dtoa_r+0xa72>
 8011b50:	2a00      	cmp	r2, #0
 8011b52:	dded      	ble.n	8011b30 <_dtoa_r+0xa10>
 8011b54:	4649      	mov	r1, r9
 8011b56:	2201      	movs	r2, #1
 8011b58:	4658      	mov	r0, fp
 8011b5a:	f000 fb47 	bl	80121ec <__lshift>
 8011b5e:	4621      	mov	r1, r4
 8011b60:	4681      	mov	r9, r0
 8011b62:	f000 fbaf 	bl	80122c4 <__mcmp>
 8011b66:	2800      	cmp	r0, #0
 8011b68:	dc03      	bgt.n	8011b72 <_dtoa_r+0xa52>
 8011b6a:	d1e1      	bne.n	8011b30 <_dtoa_r+0xa10>
 8011b6c:	f018 0f01 	tst.w	r8, #1
 8011b70:	d0de      	beq.n	8011b30 <_dtoa_r+0xa10>
 8011b72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011b76:	d1d8      	bne.n	8011b2a <_dtoa_r+0xa0a>
 8011b78:	9a00      	ldr	r2, [sp, #0]
 8011b7a:	2339      	movs	r3, #57	@ 0x39
 8011b7c:	7013      	strb	r3, [r2, #0]
 8011b7e:	4633      	mov	r3, r6
 8011b80:	461e      	mov	r6, r3
 8011b82:	3b01      	subs	r3, #1
 8011b84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011b88:	2a39      	cmp	r2, #57	@ 0x39
 8011b8a:	d052      	beq.n	8011c32 <_dtoa_r+0xb12>
 8011b8c:	3201      	adds	r2, #1
 8011b8e:	701a      	strb	r2, [r3, #0]
 8011b90:	e612      	b.n	80117b8 <_dtoa_r+0x698>
 8011b92:	2a00      	cmp	r2, #0
 8011b94:	dd07      	ble.n	8011ba6 <_dtoa_r+0xa86>
 8011b96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011b9a:	d0ed      	beq.n	8011b78 <_dtoa_r+0xa58>
 8011b9c:	9a00      	ldr	r2, [sp, #0]
 8011b9e:	f108 0301 	add.w	r3, r8, #1
 8011ba2:	7013      	strb	r3, [r2, #0]
 8011ba4:	e608      	b.n	80117b8 <_dtoa_r+0x698>
 8011ba6:	9b07      	ldr	r3, [sp, #28]
 8011ba8:	9a07      	ldr	r2, [sp, #28]
 8011baa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011bae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	d028      	beq.n	8011c06 <_dtoa_r+0xae6>
 8011bb4:	4649      	mov	r1, r9
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	220a      	movs	r2, #10
 8011bba:	4658      	mov	r0, fp
 8011bbc:	f000 f920 	bl	8011e00 <__multadd>
 8011bc0:	42af      	cmp	r7, r5
 8011bc2:	4681      	mov	r9, r0
 8011bc4:	f04f 0300 	mov.w	r3, #0
 8011bc8:	f04f 020a 	mov.w	r2, #10
 8011bcc:	4639      	mov	r1, r7
 8011bce:	4658      	mov	r0, fp
 8011bd0:	d107      	bne.n	8011be2 <_dtoa_r+0xac2>
 8011bd2:	f000 f915 	bl	8011e00 <__multadd>
 8011bd6:	4607      	mov	r7, r0
 8011bd8:	4605      	mov	r5, r0
 8011bda:	9b07      	ldr	r3, [sp, #28]
 8011bdc:	3301      	adds	r3, #1
 8011bde:	9307      	str	r3, [sp, #28]
 8011be0:	e774      	b.n	8011acc <_dtoa_r+0x9ac>
 8011be2:	f000 f90d 	bl	8011e00 <__multadd>
 8011be6:	4629      	mov	r1, r5
 8011be8:	4607      	mov	r7, r0
 8011bea:	2300      	movs	r3, #0
 8011bec:	220a      	movs	r2, #10
 8011bee:	4658      	mov	r0, fp
 8011bf0:	f000 f906 	bl	8011e00 <__multadd>
 8011bf4:	4605      	mov	r5, r0
 8011bf6:	e7f0      	b.n	8011bda <_dtoa_r+0xaba>
 8011bf8:	9b00      	ldr	r3, [sp, #0]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	bfcc      	ite	gt
 8011bfe:	461e      	movgt	r6, r3
 8011c00:	2601      	movle	r6, #1
 8011c02:	4456      	add	r6, sl
 8011c04:	2700      	movs	r7, #0
 8011c06:	4649      	mov	r1, r9
 8011c08:	2201      	movs	r2, #1
 8011c0a:	4658      	mov	r0, fp
 8011c0c:	f000 faee 	bl	80121ec <__lshift>
 8011c10:	4621      	mov	r1, r4
 8011c12:	4681      	mov	r9, r0
 8011c14:	f000 fb56 	bl	80122c4 <__mcmp>
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	dcb0      	bgt.n	8011b7e <_dtoa_r+0xa5e>
 8011c1c:	d102      	bne.n	8011c24 <_dtoa_r+0xb04>
 8011c1e:	f018 0f01 	tst.w	r8, #1
 8011c22:	d1ac      	bne.n	8011b7e <_dtoa_r+0xa5e>
 8011c24:	4633      	mov	r3, r6
 8011c26:	461e      	mov	r6, r3
 8011c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011c2c:	2a30      	cmp	r2, #48	@ 0x30
 8011c2e:	d0fa      	beq.n	8011c26 <_dtoa_r+0xb06>
 8011c30:	e5c2      	b.n	80117b8 <_dtoa_r+0x698>
 8011c32:	459a      	cmp	sl, r3
 8011c34:	d1a4      	bne.n	8011b80 <_dtoa_r+0xa60>
 8011c36:	9b04      	ldr	r3, [sp, #16]
 8011c38:	3301      	adds	r3, #1
 8011c3a:	9304      	str	r3, [sp, #16]
 8011c3c:	2331      	movs	r3, #49	@ 0x31
 8011c3e:	f88a 3000 	strb.w	r3, [sl]
 8011c42:	e5b9      	b.n	80117b8 <_dtoa_r+0x698>
 8011c44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011c46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011ca4 <_dtoa_r+0xb84>
 8011c4a:	b11b      	cbz	r3, 8011c54 <_dtoa_r+0xb34>
 8011c4c:	f10a 0308 	add.w	r3, sl, #8
 8011c50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011c52:	6013      	str	r3, [r2, #0]
 8011c54:	4650      	mov	r0, sl
 8011c56:	b019      	add	sp, #100	@ 0x64
 8011c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	f77f ae37 	ble.w	80118d2 <_dtoa_r+0x7b2>
 8011c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c68:	2001      	movs	r0, #1
 8011c6a:	e655      	b.n	8011918 <_dtoa_r+0x7f8>
 8011c6c:	9b00      	ldr	r3, [sp, #0]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	f77f aed6 	ble.w	8011a20 <_dtoa_r+0x900>
 8011c74:	4656      	mov	r6, sl
 8011c76:	4621      	mov	r1, r4
 8011c78:	4648      	mov	r0, r9
 8011c7a:	f7ff f9c7 	bl	801100c <quorem>
 8011c7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011c82:	f806 8b01 	strb.w	r8, [r6], #1
 8011c86:	9b00      	ldr	r3, [sp, #0]
 8011c88:	eba6 020a 	sub.w	r2, r6, sl
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	ddb3      	ble.n	8011bf8 <_dtoa_r+0xad8>
 8011c90:	4649      	mov	r1, r9
 8011c92:	2300      	movs	r3, #0
 8011c94:	220a      	movs	r2, #10
 8011c96:	4658      	mov	r0, fp
 8011c98:	f000 f8b2 	bl	8011e00 <__multadd>
 8011c9c:	4681      	mov	r9, r0
 8011c9e:	e7ea      	b.n	8011c76 <_dtoa_r+0xb56>
 8011ca0:	080148e1 	.word	0x080148e1
 8011ca4:	08014865 	.word	0x08014865

08011ca8 <_free_r>:
 8011ca8:	b538      	push	{r3, r4, r5, lr}
 8011caa:	4605      	mov	r5, r0
 8011cac:	2900      	cmp	r1, #0
 8011cae:	d041      	beq.n	8011d34 <_free_r+0x8c>
 8011cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cb4:	1f0c      	subs	r4, r1, #4
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	bfb8      	it	lt
 8011cba:	18e4      	addlt	r4, r4, r3
 8011cbc:	f7fe f90e 	bl	800fedc <__malloc_lock>
 8011cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8011d38 <_free_r+0x90>)
 8011cc2:	6813      	ldr	r3, [r2, #0]
 8011cc4:	b933      	cbnz	r3, 8011cd4 <_free_r+0x2c>
 8011cc6:	6063      	str	r3, [r4, #4]
 8011cc8:	6014      	str	r4, [r2, #0]
 8011cca:	4628      	mov	r0, r5
 8011ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cd0:	f7fe b90a 	b.w	800fee8 <__malloc_unlock>
 8011cd4:	42a3      	cmp	r3, r4
 8011cd6:	d908      	bls.n	8011cea <_free_r+0x42>
 8011cd8:	6820      	ldr	r0, [r4, #0]
 8011cda:	1821      	adds	r1, r4, r0
 8011cdc:	428b      	cmp	r3, r1
 8011cde:	bf01      	itttt	eq
 8011ce0:	6819      	ldreq	r1, [r3, #0]
 8011ce2:	685b      	ldreq	r3, [r3, #4]
 8011ce4:	1809      	addeq	r1, r1, r0
 8011ce6:	6021      	streq	r1, [r4, #0]
 8011ce8:	e7ed      	b.n	8011cc6 <_free_r+0x1e>
 8011cea:	461a      	mov	r2, r3
 8011cec:	685b      	ldr	r3, [r3, #4]
 8011cee:	b10b      	cbz	r3, 8011cf4 <_free_r+0x4c>
 8011cf0:	42a3      	cmp	r3, r4
 8011cf2:	d9fa      	bls.n	8011cea <_free_r+0x42>
 8011cf4:	6811      	ldr	r1, [r2, #0]
 8011cf6:	1850      	adds	r0, r2, r1
 8011cf8:	42a0      	cmp	r0, r4
 8011cfa:	d10b      	bne.n	8011d14 <_free_r+0x6c>
 8011cfc:	6820      	ldr	r0, [r4, #0]
 8011cfe:	4401      	add	r1, r0
 8011d00:	1850      	adds	r0, r2, r1
 8011d02:	4283      	cmp	r3, r0
 8011d04:	6011      	str	r1, [r2, #0]
 8011d06:	d1e0      	bne.n	8011cca <_free_r+0x22>
 8011d08:	6818      	ldr	r0, [r3, #0]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	6053      	str	r3, [r2, #4]
 8011d0e:	4408      	add	r0, r1
 8011d10:	6010      	str	r0, [r2, #0]
 8011d12:	e7da      	b.n	8011cca <_free_r+0x22>
 8011d14:	d902      	bls.n	8011d1c <_free_r+0x74>
 8011d16:	230c      	movs	r3, #12
 8011d18:	602b      	str	r3, [r5, #0]
 8011d1a:	e7d6      	b.n	8011cca <_free_r+0x22>
 8011d1c:	6820      	ldr	r0, [r4, #0]
 8011d1e:	1821      	adds	r1, r4, r0
 8011d20:	428b      	cmp	r3, r1
 8011d22:	bf04      	itt	eq
 8011d24:	6819      	ldreq	r1, [r3, #0]
 8011d26:	685b      	ldreq	r3, [r3, #4]
 8011d28:	6063      	str	r3, [r4, #4]
 8011d2a:	bf04      	itt	eq
 8011d2c:	1809      	addeq	r1, r1, r0
 8011d2e:	6021      	streq	r1, [r4, #0]
 8011d30:	6054      	str	r4, [r2, #4]
 8011d32:	e7ca      	b.n	8011cca <_free_r+0x22>
 8011d34:	bd38      	pop	{r3, r4, r5, pc}
 8011d36:	bf00      	nop
 8011d38:	200064d0 	.word	0x200064d0

08011d3c <_Balloc>:
 8011d3c:	b570      	push	{r4, r5, r6, lr}
 8011d3e:	69c6      	ldr	r6, [r0, #28]
 8011d40:	4604      	mov	r4, r0
 8011d42:	460d      	mov	r5, r1
 8011d44:	b976      	cbnz	r6, 8011d64 <_Balloc+0x28>
 8011d46:	2010      	movs	r0, #16
 8011d48:	f7fe f81e 	bl	800fd88 <malloc>
 8011d4c:	4602      	mov	r2, r0
 8011d4e:	61e0      	str	r0, [r4, #28]
 8011d50:	b920      	cbnz	r0, 8011d5c <_Balloc+0x20>
 8011d52:	4b18      	ldr	r3, [pc, #96]	@ (8011db4 <_Balloc+0x78>)
 8011d54:	4818      	ldr	r0, [pc, #96]	@ (8011db8 <_Balloc+0x7c>)
 8011d56:	216b      	movs	r1, #107	@ 0x6b
 8011d58:	f001 fd62 	bl	8013820 <__assert_func>
 8011d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d60:	6006      	str	r6, [r0, #0]
 8011d62:	60c6      	str	r6, [r0, #12]
 8011d64:	69e6      	ldr	r6, [r4, #28]
 8011d66:	68f3      	ldr	r3, [r6, #12]
 8011d68:	b183      	cbz	r3, 8011d8c <_Balloc+0x50>
 8011d6a:	69e3      	ldr	r3, [r4, #28]
 8011d6c:	68db      	ldr	r3, [r3, #12]
 8011d6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011d72:	b9b8      	cbnz	r0, 8011da4 <_Balloc+0x68>
 8011d74:	2101      	movs	r1, #1
 8011d76:	fa01 f605 	lsl.w	r6, r1, r5
 8011d7a:	1d72      	adds	r2, r6, #5
 8011d7c:	0092      	lsls	r2, r2, #2
 8011d7e:	4620      	mov	r0, r4
 8011d80:	f001 fd6c 	bl	801385c <_calloc_r>
 8011d84:	b160      	cbz	r0, 8011da0 <_Balloc+0x64>
 8011d86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011d8a:	e00e      	b.n	8011daa <_Balloc+0x6e>
 8011d8c:	2221      	movs	r2, #33	@ 0x21
 8011d8e:	2104      	movs	r1, #4
 8011d90:	4620      	mov	r0, r4
 8011d92:	f001 fd63 	bl	801385c <_calloc_r>
 8011d96:	69e3      	ldr	r3, [r4, #28]
 8011d98:	60f0      	str	r0, [r6, #12]
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d1e4      	bne.n	8011d6a <_Balloc+0x2e>
 8011da0:	2000      	movs	r0, #0
 8011da2:	bd70      	pop	{r4, r5, r6, pc}
 8011da4:	6802      	ldr	r2, [r0, #0]
 8011da6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011daa:	2300      	movs	r3, #0
 8011dac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011db0:	e7f7      	b.n	8011da2 <_Balloc+0x66>
 8011db2:	bf00      	nop
 8011db4:	08014872 	.word	0x08014872
 8011db8:	080148f2 	.word	0x080148f2

08011dbc <_Bfree>:
 8011dbc:	b570      	push	{r4, r5, r6, lr}
 8011dbe:	69c6      	ldr	r6, [r0, #28]
 8011dc0:	4605      	mov	r5, r0
 8011dc2:	460c      	mov	r4, r1
 8011dc4:	b976      	cbnz	r6, 8011de4 <_Bfree+0x28>
 8011dc6:	2010      	movs	r0, #16
 8011dc8:	f7fd ffde 	bl	800fd88 <malloc>
 8011dcc:	4602      	mov	r2, r0
 8011dce:	61e8      	str	r0, [r5, #28]
 8011dd0:	b920      	cbnz	r0, 8011ddc <_Bfree+0x20>
 8011dd2:	4b09      	ldr	r3, [pc, #36]	@ (8011df8 <_Bfree+0x3c>)
 8011dd4:	4809      	ldr	r0, [pc, #36]	@ (8011dfc <_Bfree+0x40>)
 8011dd6:	218f      	movs	r1, #143	@ 0x8f
 8011dd8:	f001 fd22 	bl	8013820 <__assert_func>
 8011ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011de0:	6006      	str	r6, [r0, #0]
 8011de2:	60c6      	str	r6, [r0, #12]
 8011de4:	b13c      	cbz	r4, 8011df6 <_Bfree+0x3a>
 8011de6:	69eb      	ldr	r3, [r5, #28]
 8011de8:	6862      	ldr	r2, [r4, #4]
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011df0:	6021      	str	r1, [r4, #0]
 8011df2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011df6:	bd70      	pop	{r4, r5, r6, pc}
 8011df8:	08014872 	.word	0x08014872
 8011dfc:	080148f2 	.word	0x080148f2

08011e00 <__multadd>:
 8011e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e04:	690d      	ldr	r5, [r1, #16]
 8011e06:	4607      	mov	r7, r0
 8011e08:	460c      	mov	r4, r1
 8011e0a:	461e      	mov	r6, r3
 8011e0c:	f101 0c14 	add.w	ip, r1, #20
 8011e10:	2000      	movs	r0, #0
 8011e12:	f8dc 3000 	ldr.w	r3, [ip]
 8011e16:	b299      	uxth	r1, r3
 8011e18:	fb02 6101 	mla	r1, r2, r1, r6
 8011e1c:	0c1e      	lsrs	r6, r3, #16
 8011e1e:	0c0b      	lsrs	r3, r1, #16
 8011e20:	fb02 3306 	mla	r3, r2, r6, r3
 8011e24:	b289      	uxth	r1, r1
 8011e26:	3001      	adds	r0, #1
 8011e28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011e2c:	4285      	cmp	r5, r0
 8011e2e:	f84c 1b04 	str.w	r1, [ip], #4
 8011e32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011e36:	dcec      	bgt.n	8011e12 <__multadd+0x12>
 8011e38:	b30e      	cbz	r6, 8011e7e <__multadd+0x7e>
 8011e3a:	68a3      	ldr	r3, [r4, #8]
 8011e3c:	42ab      	cmp	r3, r5
 8011e3e:	dc19      	bgt.n	8011e74 <__multadd+0x74>
 8011e40:	6861      	ldr	r1, [r4, #4]
 8011e42:	4638      	mov	r0, r7
 8011e44:	3101      	adds	r1, #1
 8011e46:	f7ff ff79 	bl	8011d3c <_Balloc>
 8011e4a:	4680      	mov	r8, r0
 8011e4c:	b928      	cbnz	r0, 8011e5a <__multadd+0x5a>
 8011e4e:	4602      	mov	r2, r0
 8011e50:	4b0c      	ldr	r3, [pc, #48]	@ (8011e84 <__multadd+0x84>)
 8011e52:	480d      	ldr	r0, [pc, #52]	@ (8011e88 <__multadd+0x88>)
 8011e54:	21ba      	movs	r1, #186	@ 0xba
 8011e56:	f001 fce3 	bl	8013820 <__assert_func>
 8011e5a:	6922      	ldr	r2, [r4, #16]
 8011e5c:	3202      	adds	r2, #2
 8011e5e:	f104 010c 	add.w	r1, r4, #12
 8011e62:	0092      	lsls	r2, r2, #2
 8011e64:	300c      	adds	r0, #12
 8011e66:	f7ff f8bc 	bl	8010fe2 <memcpy>
 8011e6a:	4621      	mov	r1, r4
 8011e6c:	4638      	mov	r0, r7
 8011e6e:	f7ff ffa5 	bl	8011dbc <_Bfree>
 8011e72:	4644      	mov	r4, r8
 8011e74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011e78:	3501      	adds	r5, #1
 8011e7a:	615e      	str	r6, [r3, #20]
 8011e7c:	6125      	str	r5, [r4, #16]
 8011e7e:	4620      	mov	r0, r4
 8011e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e84:	080148e1 	.word	0x080148e1
 8011e88:	080148f2 	.word	0x080148f2

08011e8c <__s2b>:
 8011e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e90:	460c      	mov	r4, r1
 8011e92:	4615      	mov	r5, r2
 8011e94:	461f      	mov	r7, r3
 8011e96:	2209      	movs	r2, #9
 8011e98:	3308      	adds	r3, #8
 8011e9a:	4606      	mov	r6, r0
 8011e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ea0:	2100      	movs	r1, #0
 8011ea2:	2201      	movs	r2, #1
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	db09      	blt.n	8011ebc <__s2b+0x30>
 8011ea8:	4630      	mov	r0, r6
 8011eaa:	f7ff ff47 	bl	8011d3c <_Balloc>
 8011eae:	b940      	cbnz	r0, 8011ec2 <__s2b+0x36>
 8011eb0:	4602      	mov	r2, r0
 8011eb2:	4b19      	ldr	r3, [pc, #100]	@ (8011f18 <__s2b+0x8c>)
 8011eb4:	4819      	ldr	r0, [pc, #100]	@ (8011f1c <__s2b+0x90>)
 8011eb6:	21d3      	movs	r1, #211	@ 0xd3
 8011eb8:	f001 fcb2 	bl	8013820 <__assert_func>
 8011ebc:	0052      	lsls	r2, r2, #1
 8011ebe:	3101      	adds	r1, #1
 8011ec0:	e7f0      	b.n	8011ea4 <__s2b+0x18>
 8011ec2:	9b08      	ldr	r3, [sp, #32]
 8011ec4:	6143      	str	r3, [r0, #20]
 8011ec6:	2d09      	cmp	r5, #9
 8011ec8:	f04f 0301 	mov.w	r3, #1
 8011ecc:	6103      	str	r3, [r0, #16]
 8011ece:	dd16      	ble.n	8011efe <__s2b+0x72>
 8011ed0:	f104 0909 	add.w	r9, r4, #9
 8011ed4:	46c8      	mov	r8, r9
 8011ed6:	442c      	add	r4, r5
 8011ed8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011edc:	4601      	mov	r1, r0
 8011ede:	3b30      	subs	r3, #48	@ 0x30
 8011ee0:	220a      	movs	r2, #10
 8011ee2:	4630      	mov	r0, r6
 8011ee4:	f7ff ff8c 	bl	8011e00 <__multadd>
 8011ee8:	45a0      	cmp	r8, r4
 8011eea:	d1f5      	bne.n	8011ed8 <__s2b+0x4c>
 8011eec:	f1a5 0408 	sub.w	r4, r5, #8
 8011ef0:	444c      	add	r4, r9
 8011ef2:	1b2d      	subs	r5, r5, r4
 8011ef4:	1963      	adds	r3, r4, r5
 8011ef6:	42bb      	cmp	r3, r7
 8011ef8:	db04      	blt.n	8011f04 <__s2b+0x78>
 8011efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011efe:	340a      	adds	r4, #10
 8011f00:	2509      	movs	r5, #9
 8011f02:	e7f6      	b.n	8011ef2 <__s2b+0x66>
 8011f04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011f08:	4601      	mov	r1, r0
 8011f0a:	3b30      	subs	r3, #48	@ 0x30
 8011f0c:	220a      	movs	r2, #10
 8011f0e:	4630      	mov	r0, r6
 8011f10:	f7ff ff76 	bl	8011e00 <__multadd>
 8011f14:	e7ee      	b.n	8011ef4 <__s2b+0x68>
 8011f16:	bf00      	nop
 8011f18:	080148e1 	.word	0x080148e1
 8011f1c:	080148f2 	.word	0x080148f2

08011f20 <__hi0bits>:
 8011f20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011f24:	4603      	mov	r3, r0
 8011f26:	bf36      	itet	cc
 8011f28:	0403      	lslcc	r3, r0, #16
 8011f2a:	2000      	movcs	r0, #0
 8011f2c:	2010      	movcc	r0, #16
 8011f2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011f32:	bf3c      	itt	cc
 8011f34:	021b      	lslcc	r3, r3, #8
 8011f36:	3008      	addcc	r0, #8
 8011f38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011f3c:	bf3c      	itt	cc
 8011f3e:	011b      	lslcc	r3, r3, #4
 8011f40:	3004      	addcc	r0, #4
 8011f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011f46:	bf3c      	itt	cc
 8011f48:	009b      	lslcc	r3, r3, #2
 8011f4a:	3002      	addcc	r0, #2
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	db05      	blt.n	8011f5c <__hi0bits+0x3c>
 8011f50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011f54:	f100 0001 	add.w	r0, r0, #1
 8011f58:	bf08      	it	eq
 8011f5a:	2020      	moveq	r0, #32
 8011f5c:	4770      	bx	lr

08011f5e <__lo0bits>:
 8011f5e:	6803      	ldr	r3, [r0, #0]
 8011f60:	4602      	mov	r2, r0
 8011f62:	f013 0007 	ands.w	r0, r3, #7
 8011f66:	d00b      	beq.n	8011f80 <__lo0bits+0x22>
 8011f68:	07d9      	lsls	r1, r3, #31
 8011f6a:	d421      	bmi.n	8011fb0 <__lo0bits+0x52>
 8011f6c:	0798      	lsls	r0, r3, #30
 8011f6e:	bf49      	itett	mi
 8011f70:	085b      	lsrmi	r3, r3, #1
 8011f72:	089b      	lsrpl	r3, r3, #2
 8011f74:	2001      	movmi	r0, #1
 8011f76:	6013      	strmi	r3, [r2, #0]
 8011f78:	bf5c      	itt	pl
 8011f7a:	6013      	strpl	r3, [r2, #0]
 8011f7c:	2002      	movpl	r0, #2
 8011f7e:	4770      	bx	lr
 8011f80:	b299      	uxth	r1, r3
 8011f82:	b909      	cbnz	r1, 8011f88 <__lo0bits+0x2a>
 8011f84:	0c1b      	lsrs	r3, r3, #16
 8011f86:	2010      	movs	r0, #16
 8011f88:	b2d9      	uxtb	r1, r3
 8011f8a:	b909      	cbnz	r1, 8011f90 <__lo0bits+0x32>
 8011f8c:	3008      	adds	r0, #8
 8011f8e:	0a1b      	lsrs	r3, r3, #8
 8011f90:	0719      	lsls	r1, r3, #28
 8011f92:	bf04      	itt	eq
 8011f94:	091b      	lsreq	r3, r3, #4
 8011f96:	3004      	addeq	r0, #4
 8011f98:	0799      	lsls	r1, r3, #30
 8011f9a:	bf04      	itt	eq
 8011f9c:	089b      	lsreq	r3, r3, #2
 8011f9e:	3002      	addeq	r0, #2
 8011fa0:	07d9      	lsls	r1, r3, #31
 8011fa2:	d403      	bmi.n	8011fac <__lo0bits+0x4e>
 8011fa4:	085b      	lsrs	r3, r3, #1
 8011fa6:	f100 0001 	add.w	r0, r0, #1
 8011faa:	d003      	beq.n	8011fb4 <__lo0bits+0x56>
 8011fac:	6013      	str	r3, [r2, #0]
 8011fae:	4770      	bx	lr
 8011fb0:	2000      	movs	r0, #0
 8011fb2:	4770      	bx	lr
 8011fb4:	2020      	movs	r0, #32
 8011fb6:	4770      	bx	lr

08011fb8 <__i2b>:
 8011fb8:	b510      	push	{r4, lr}
 8011fba:	460c      	mov	r4, r1
 8011fbc:	2101      	movs	r1, #1
 8011fbe:	f7ff febd 	bl	8011d3c <_Balloc>
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	b928      	cbnz	r0, 8011fd2 <__i2b+0x1a>
 8011fc6:	4b05      	ldr	r3, [pc, #20]	@ (8011fdc <__i2b+0x24>)
 8011fc8:	4805      	ldr	r0, [pc, #20]	@ (8011fe0 <__i2b+0x28>)
 8011fca:	f240 1145 	movw	r1, #325	@ 0x145
 8011fce:	f001 fc27 	bl	8013820 <__assert_func>
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	6144      	str	r4, [r0, #20]
 8011fd6:	6103      	str	r3, [r0, #16]
 8011fd8:	bd10      	pop	{r4, pc}
 8011fda:	bf00      	nop
 8011fdc:	080148e1 	.word	0x080148e1
 8011fe0:	080148f2 	.word	0x080148f2

08011fe4 <__multiply>:
 8011fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe8:	4614      	mov	r4, r2
 8011fea:	690a      	ldr	r2, [r1, #16]
 8011fec:	6923      	ldr	r3, [r4, #16]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	bfa8      	it	ge
 8011ff2:	4623      	movge	r3, r4
 8011ff4:	460f      	mov	r7, r1
 8011ff6:	bfa4      	itt	ge
 8011ff8:	460c      	movge	r4, r1
 8011ffa:	461f      	movge	r7, r3
 8011ffc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012000:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012004:	68a3      	ldr	r3, [r4, #8]
 8012006:	6861      	ldr	r1, [r4, #4]
 8012008:	eb0a 0609 	add.w	r6, sl, r9
 801200c:	42b3      	cmp	r3, r6
 801200e:	b085      	sub	sp, #20
 8012010:	bfb8      	it	lt
 8012012:	3101      	addlt	r1, #1
 8012014:	f7ff fe92 	bl	8011d3c <_Balloc>
 8012018:	b930      	cbnz	r0, 8012028 <__multiply+0x44>
 801201a:	4602      	mov	r2, r0
 801201c:	4b44      	ldr	r3, [pc, #272]	@ (8012130 <__multiply+0x14c>)
 801201e:	4845      	ldr	r0, [pc, #276]	@ (8012134 <__multiply+0x150>)
 8012020:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012024:	f001 fbfc 	bl	8013820 <__assert_func>
 8012028:	f100 0514 	add.w	r5, r0, #20
 801202c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012030:	462b      	mov	r3, r5
 8012032:	2200      	movs	r2, #0
 8012034:	4543      	cmp	r3, r8
 8012036:	d321      	bcc.n	801207c <__multiply+0x98>
 8012038:	f107 0114 	add.w	r1, r7, #20
 801203c:	f104 0214 	add.w	r2, r4, #20
 8012040:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012044:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012048:	9302      	str	r3, [sp, #8]
 801204a:	1b13      	subs	r3, r2, r4
 801204c:	3b15      	subs	r3, #21
 801204e:	f023 0303 	bic.w	r3, r3, #3
 8012052:	3304      	adds	r3, #4
 8012054:	f104 0715 	add.w	r7, r4, #21
 8012058:	42ba      	cmp	r2, r7
 801205a:	bf38      	it	cc
 801205c:	2304      	movcc	r3, #4
 801205e:	9301      	str	r3, [sp, #4]
 8012060:	9b02      	ldr	r3, [sp, #8]
 8012062:	9103      	str	r1, [sp, #12]
 8012064:	428b      	cmp	r3, r1
 8012066:	d80c      	bhi.n	8012082 <__multiply+0x9e>
 8012068:	2e00      	cmp	r6, #0
 801206a:	dd03      	ble.n	8012074 <__multiply+0x90>
 801206c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012070:	2b00      	cmp	r3, #0
 8012072:	d05b      	beq.n	801212c <__multiply+0x148>
 8012074:	6106      	str	r6, [r0, #16]
 8012076:	b005      	add	sp, #20
 8012078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801207c:	f843 2b04 	str.w	r2, [r3], #4
 8012080:	e7d8      	b.n	8012034 <__multiply+0x50>
 8012082:	f8b1 a000 	ldrh.w	sl, [r1]
 8012086:	f1ba 0f00 	cmp.w	sl, #0
 801208a:	d024      	beq.n	80120d6 <__multiply+0xf2>
 801208c:	f104 0e14 	add.w	lr, r4, #20
 8012090:	46a9      	mov	r9, r5
 8012092:	f04f 0c00 	mov.w	ip, #0
 8012096:	f85e 7b04 	ldr.w	r7, [lr], #4
 801209a:	f8d9 3000 	ldr.w	r3, [r9]
 801209e:	fa1f fb87 	uxth.w	fp, r7
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80120a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80120ac:	f8d9 7000 	ldr.w	r7, [r9]
 80120b0:	4463      	add	r3, ip
 80120b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80120b6:	fb0a c70b 	mla	r7, sl, fp, ip
 80120ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80120be:	b29b      	uxth	r3, r3
 80120c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80120c4:	4572      	cmp	r2, lr
 80120c6:	f849 3b04 	str.w	r3, [r9], #4
 80120ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80120ce:	d8e2      	bhi.n	8012096 <__multiply+0xb2>
 80120d0:	9b01      	ldr	r3, [sp, #4]
 80120d2:	f845 c003 	str.w	ip, [r5, r3]
 80120d6:	9b03      	ldr	r3, [sp, #12]
 80120d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80120dc:	3104      	adds	r1, #4
 80120de:	f1b9 0f00 	cmp.w	r9, #0
 80120e2:	d021      	beq.n	8012128 <__multiply+0x144>
 80120e4:	682b      	ldr	r3, [r5, #0]
 80120e6:	f104 0c14 	add.w	ip, r4, #20
 80120ea:	46ae      	mov	lr, r5
 80120ec:	f04f 0a00 	mov.w	sl, #0
 80120f0:	f8bc b000 	ldrh.w	fp, [ip]
 80120f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80120f8:	fb09 770b 	mla	r7, r9, fp, r7
 80120fc:	4457      	add	r7, sl
 80120fe:	b29b      	uxth	r3, r3
 8012100:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012104:	f84e 3b04 	str.w	r3, [lr], #4
 8012108:	f85c 3b04 	ldr.w	r3, [ip], #4
 801210c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012110:	f8be 3000 	ldrh.w	r3, [lr]
 8012114:	fb09 330a 	mla	r3, r9, sl, r3
 8012118:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801211c:	4562      	cmp	r2, ip
 801211e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012122:	d8e5      	bhi.n	80120f0 <__multiply+0x10c>
 8012124:	9f01      	ldr	r7, [sp, #4]
 8012126:	51eb      	str	r3, [r5, r7]
 8012128:	3504      	adds	r5, #4
 801212a:	e799      	b.n	8012060 <__multiply+0x7c>
 801212c:	3e01      	subs	r6, #1
 801212e:	e79b      	b.n	8012068 <__multiply+0x84>
 8012130:	080148e1 	.word	0x080148e1
 8012134:	080148f2 	.word	0x080148f2

08012138 <__pow5mult>:
 8012138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801213c:	4615      	mov	r5, r2
 801213e:	f012 0203 	ands.w	r2, r2, #3
 8012142:	4607      	mov	r7, r0
 8012144:	460e      	mov	r6, r1
 8012146:	d007      	beq.n	8012158 <__pow5mult+0x20>
 8012148:	4c25      	ldr	r4, [pc, #148]	@ (80121e0 <__pow5mult+0xa8>)
 801214a:	3a01      	subs	r2, #1
 801214c:	2300      	movs	r3, #0
 801214e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012152:	f7ff fe55 	bl	8011e00 <__multadd>
 8012156:	4606      	mov	r6, r0
 8012158:	10ad      	asrs	r5, r5, #2
 801215a:	d03d      	beq.n	80121d8 <__pow5mult+0xa0>
 801215c:	69fc      	ldr	r4, [r7, #28]
 801215e:	b97c      	cbnz	r4, 8012180 <__pow5mult+0x48>
 8012160:	2010      	movs	r0, #16
 8012162:	f7fd fe11 	bl	800fd88 <malloc>
 8012166:	4602      	mov	r2, r0
 8012168:	61f8      	str	r0, [r7, #28]
 801216a:	b928      	cbnz	r0, 8012178 <__pow5mult+0x40>
 801216c:	4b1d      	ldr	r3, [pc, #116]	@ (80121e4 <__pow5mult+0xac>)
 801216e:	481e      	ldr	r0, [pc, #120]	@ (80121e8 <__pow5mult+0xb0>)
 8012170:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012174:	f001 fb54 	bl	8013820 <__assert_func>
 8012178:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801217c:	6004      	str	r4, [r0, #0]
 801217e:	60c4      	str	r4, [r0, #12]
 8012180:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012184:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012188:	b94c      	cbnz	r4, 801219e <__pow5mult+0x66>
 801218a:	f240 2171 	movw	r1, #625	@ 0x271
 801218e:	4638      	mov	r0, r7
 8012190:	f7ff ff12 	bl	8011fb8 <__i2b>
 8012194:	2300      	movs	r3, #0
 8012196:	f8c8 0008 	str.w	r0, [r8, #8]
 801219a:	4604      	mov	r4, r0
 801219c:	6003      	str	r3, [r0, #0]
 801219e:	f04f 0900 	mov.w	r9, #0
 80121a2:	07eb      	lsls	r3, r5, #31
 80121a4:	d50a      	bpl.n	80121bc <__pow5mult+0x84>
 80121a6:	4631      	mov	r1, r6
 80121a8:	4622      	mov	r2, r4
 80121aa:	4638      	mov	r0, r7
 80121ac:	f7ff ff1a 	bl	8011fe4 <__multiply>
 80121b0:	4631      	mov	r1, r6
 80121b2:	4680      	mov	r8, r0
 80121b4:	4638      	mov	r0, r7
 80121b6:	f7ff fe01 	bl	8011dbc <_Bfree>
 80121ba:	4646      	mov	r6, r8
 80121bc:	106d      	asrs	r5, r5, #1
 80121be:	d00b      	beq.n	80121d8 <__pow5mult+0xa0>
 80121c0:	6820      	ldr	r0, [r4, #0]
 80121c2:	b938      	cbnz	r0, 80121d4 <__pow5mult+0x9c>
 80121c4:	4622      	mov	r2, r4
 80121c6:	4621      	mov	r1, r4
 80121c8:	4638      	mov	r0, r7
 80121ca:	f7ff ff0b 	bl	8011fe4 <__multiply>
 80121ce:	6020      	str	r0, [r4, #0]
 80121d0:	f8c0 9000 	str.w	r9, [r0]
 80121d4:	4604      	mov	r4, r0
 80121d6:	e7e4      	b.n	80121a2 <__pow5mult+0x6a>
 80121d8:	4630      	mov	r0, r6
 80121da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121de:	bf00      	nop
 80121e0:	0801494c 	.word	0x0801494c
 80121e4:	08014872 	.word	0x08014872
 80121e8:	080148f2 	.word	0x080148f2

080121ec <__lshift>:
 80121ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121f0:	460c      	mov	r4, r1
 80121f2:	6849      	ldr	r1, [r1, #4]
 80121f4:	6923      	ldr	r3, [r4, #16]
 80121f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80121fa:	68a3      	ldr	r3, [r4, #8]
 80121fc:	4607      	mov	r7, r0
 80121fe:	4691      	mov	r9, r2
 8012200:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012204:	f108 0601 	add.w	r6, r8, #1
 8012208:	42b3      	cmp	r3, r6
 801220a:	db0b      	blt.n	8012224 <__lshift+0x38>
 801220c:	4638      	mov	r0, r7
 801220e:	f7ff fd95 	bl	8011d3c <_Balloc>
 8012212:	4605      	mov	r5, r0
 8012214:	b948      	cbnz	r0, 801222a <__lshift+0x3e>
 8012216:	4602      	mov	r2, r0
 8012218:	4b28      	ldr	r3, [pc, #160]	@ (80122bc <__lshift+0xd0>)
 801221a:	4829      	ldr	r0, [pc, #164]	@ (80122c0 <__lshift+0xd4>)
 801221c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012220:	f001 fafe 	bl	8013820 <__assert_func>
 8012224:	3101      	adds	r1, #1
 8012226:	005b      	lsls	r3, r3, #1
 8012228:	e7ee      	b.n	8012208 <__lshift+0x1c>
 801222a:	2300      	movs	r3, #0
 801222c:	f100 0114 	add.w	r1, r0, #20
 8012230:	f100 0210 	add.w	r2, r0, #16
 8012234:	4618      	mov	r0, r3
 8012236:	4553      	cmp	r3, sl
 8012238:	db33      	blt.n	80122a2 <__lshift+0xb6>
 801223a:	6920      	ldr	r0, [r4, #16]
 801223c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012240:	f104 0314 	add.w	r3, r4, #20
 8012244:	f019 091f 	ands.w	r9, r9, #31
 8012248:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801224c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012250:	d02b      	beq.n	80122aa <__lshift+0xbe>
 8012252:	f1c9 0e20 	rsb	lr, r9, #32
 8012256:	468a      	mov	sl, r1
 8012258:	2200      	movs	r2, #0
 801225a:	6818      	ldr	r0, [r3, #0]
 801225c:	fa00 f009 	lsl.w	r0, r0, r9
 8012260:	4310      	orrs	r0, r2
 8012262:	f84a 0b04 	str.w	r0, [sl], #4
 8012266:	f853 2b04 	ldr.w	r2, [r3], #4
 801226a:	459c      	cmp	ip, r3
 801226c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012270:	d8f3      	bhi.n	801225a <__lshift+0x6e>
 8012272:	ebac 0304 	sub.w	r3, ip, r4
 8012276:	3b15      	subs	r3, #21
 8012278:	f023 0303 	bic.w	r3, r3, #3
 801227c:	3304      	adds	r3, #4
 801227e:	f104 0015 	add.w	r0, r4, #21
 8012282:	4584      	cmp	ip, r0
 8012284:	bf38      	it	cc
 8012286:	2304      	movcc	r3, #4
 8012288:	50ca      	str	r2, [r1, r3]
 801228a:	b10a      	cbz	r2, 8012290 <__lshift+0xa4>
 801228c:	f108 0602 	add.w	r6, r8, #2
 8012290:	3e01      	subs	r6, #1
 8012292:	4638      	mov	r0, r7
 8012294:	612e      	str	r6, [r5, #16]
 8012296:	4621      	mov	r1, r4
 8012298:	f7ff fd90 	bl	8011dbc <_Bfree>
 801229c:	4628      	mov	r0, r5
 801229e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80122a6:	3301      	adds	r3, #1
 80122a8:	e7c5      	b.n	8012236 <__lshift+0x4a>
 80122aa:	3904      	subs	r1, #4
 80122ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80122b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80122b4:	459c      	cmp	ip, r3
 80122b6:	d8f9      	bhi.n	80122ac <__lshift+0xc0>
 80122b8:	e7ea      	b.n	8012290 <__lshift+0xa4>
 80122ba:	bf00      	nop
 80122bc:	080148e1 	.word	0x080148e1
 80122c0:	080148f2 	.word	0x080148f2

080122c4 <__mcmp>:
 80122c4:	690a      	ldr	r2, [r1, #16]
 80122c6:	4603      	mov	r3, r0
 80122c8:	6900      	ldr	r0, [r0, #16]
 80122ca:	1a80      	subs	r0, r0, r2
 80122cc:	b530      	push	{r4, r5, lr}
 80122ce:	d10e      	bne.n	80122ee <__mcmp+0x2a>
 80122d0:	3314      	adds	r3, #20
 80122d2:	3114      	adds	r1, #20
 80122d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80122d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80122dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80122e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80122e4:	4295      	cmp	r5, r2
 80122e6:	d003      	beq.n	80122f0 <__mcmp+0x2c>
 80122e8:	d205      	bcs.n	80122f6 <__mcmp+0x32>
 80122ea:	f04f 30ff 	mov.w	r0, #4294967295
 80122ee:	bd30      	pop	{r4, r5, pc}
 80122f0:	42a3      	cmp	r3, r4
 80122f2:	d3f3      	bcc.n	80122dc <__mcmp+0x18>
 80122f4:	e7fb      	b.n	80122ee <__mcmp+0x2a>
 80122f6:	2001      	movs	r0, #1
 80122f8:	e7f9      	b.n	80122ee <__mcmp+0x2a>
	...

080122fc <__mdiff>:
 80122fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012300:	4689      	mov	r9, r1
 8012302:	4606      	mov	r6, r0
 8012304:	4611      	mov	r1, r2
 8012306:	4648      	mov	r0, r9
 8012308:	4614      	mov	r4, r2
 801230a:	f7ff ffdb 	bl	80122c4 <__mcmp>
 801230e:	1e05      	subs	r5, r0, #0
 8012310:	d112      	bne.n	8012338 <__mdiff+0x3c>
 8012312:	4629      	mov	r1, r5
 8012314:	4630      	mov	r0, r6
 8012316:	f7ff fd11 	bl	8011d3c <_Balloc>
 801231a:	4602      	mov	r2, r0
 801231c:	b928      	cbnz	r0, 801232a <__mdiff+0x2e>
 801231e:	4b3f      	ldr	r3, [pc, #252]	@ (801241c <__mdiff+0x120>)
 8012320:	f240 2137 	movw	r1, #567	@ 0x237
 8012324:	483e      	ldr	r0, [pc, #248]	@ (8012420 <__mdiff+0x124>)
 8012326:	f001 fa7b 	bl	8013820 <__assert_func>
 801232a:	2301      	movs	r3, #1
 801232c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012330:	4610      	mov	r0, r2
 8012332:	b003      	add	sp, #12
 8012334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012338:	bfbc      	itt	lt
 801233a:	464b      	movlt	r3, r9
 801233c:	46a1      	movlt	r9, r4
 801233e:	4630      	mov	r0, r6
 8012340:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012344:	bfba      	itte	lt
 8012346:	461c      	movlt	r4, r3
 8012348:	2501      	movlt	r5, #1
 801234a:	2500      	movge	r5, #0
 801234c:	f7ff fcf6 	bl	8011d3c <_Balloc>
 8012350:	4602      	mov	r2, r0
 8012352:	b918      	cbnz	r0, 801235c <__mdiff+0x60>
 8012354:	4b31      	ldr	r3, [pc, #196]	@ (801241c <__mdiff+0x120>)
 8012356:	f240 2145 	movw	r1, #581	@ 0x245
 801235a:	e7e3      	b.n	8012324 <__mdiff+0x28>
 801235c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012360:	6926      	ldr	r6, [r4, #16]
 8012362:	60c5      	str	r5, [r0, #12]
 8012364:	f109 0310 	add.w	r3, r9, #16
 8012368:	f109 0514 	add.w	r5, r9, #20
 801236c:	f104 0e14 	add.w	lr, r4, #20
 8012370:	f100 0b14 	add.w	fp, r0, #20
 8012374:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012378:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801237c:	9301      	str	r3, [sp, #4]
 801237e:	46d9      	mov	r9, fp
 8012380:	f04f 0c00 	mov.w	ip, #0
 8012384:	9b01      	ldr	r3, [sp, #4]
 8012386:	f85e 0b04 	ldr.w	r0, [lr], #4
 801238a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801238e:	9301      	str	r3, [sp, #4]
 8012390:	fa1f f38a 	uxth.w	r3, sl
 8012394:	4619      	mov	r1, r3
 8012396:	b283      	uxth	r3, r0
 8012398:	1acb      	subs	r3, r1, r3
 801239a:	0c00      	lsrs	r0, r0, #16
 801239c:	4463      	add	r3, ip
 801239e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80123a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80123ac:	4576      	cmp	r6, lr
 80123ae:	f849 3b04 	str.w	r3, [r9], #4
 80123b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80123b6:	d8e5      	bhi.n	8012384 <__mdiff+0x88>
 80123b8:	1b33      	subs	r3, r6, r4
 80123ba:	3b15      	subs	r3, #21
 80123bc:	f023 0303 	bic.w	r3, r3, #3
 80123c0:	3415      	adds	r4, #21
 80123c2:	3304      	adds	r3, #4
 80123c4:	42a6      	cmp	r6, r4
 80123c6:	bf38      	it	cc
 80123c8:	2304      	movcc	r3, #4
 80123ca:	441d      	add	r5, r3
 80123cc:	445b      	add	r3, fp
 80123ce:	461e      	mov	r6, r3
 80123d0:	462c      	mov	r4, r5
 80123d2:	4544      	cmp	r4, r8
 80123d4:	d30e      	bcc.n	80123f4 <__mdiff+0xf8>
 80123d6:	f108 0103 	add.w	r1, r8, #3
 80123da:	1b49      	subs	r1, r1, r5
 80123dc:	f021 0103 	bic.w	r1, r1, #3
 80123e0:	3d03      	subs	r5, #3
 80123e2:	45a8      	cmp	r8, r5
 80123e4:	bf38      	it	cc
 80123e6:	2100      	movcc	r1, #0
 80123e8:	440b      	add	r3, r1
 80123ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80123ee:	b191      	cbz	r1, 8012416 <__mdiff+0x11a>
 80123f0:	6117      	str	r7, [r2, #16]
 80123f2:	e79d      	b.n	8012330 <__mdiff+0x34>
 80123f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80123f8:	46e6      	mov	lr, ip
 80123fa:	0c08      	lsrs	r0, r1, #16
 80123fc:	fa1c fc81 	uxtah	ip, ip, r1
 8012400:	4471      	add	r1, lr
 8012402:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012406:	b289      	uxth	r1, r1
 8012408:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801240c:	f846 1b04 	str.w	r1, [r6], #4
 8012410:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012414:	e7dd      	b.n	80123d2 <__mdiff+0xd6>
 8012416:	3f01      	subs	r7, #1
 8012418:	e7e7      	b.n	80123ea <__mdiff+0xee>
 801241a:	bf00      	nop
 801241c:	080148e1 	.word	0x080148e1
 8012420:	080148f2 	.word	0x080148f2

08012424 <__ulp>:
 8012424:	b082      	sub	sp, #8
 8012426:	ed8d 0b00 	vstr	d0, [sp]
 801242a:	9a01      	ldr	r2, [sp, #4]
 801242c:	4b0f      	ldr	r3, [pc, #60]	@ (801246c <__ulp+0x48>)
 801242e:	4013      	ands	r3, r2
 8012430:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012434:	2b00      	cmp	r3, #0
 8012436:	dc08      	bgt.n	801244a <__ulp+0x26>
 8012438:	425b      	negs	r3, r3
 801243a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801243e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012442:	da04      	bge.n	801244e <__ulp+0x2a>
 8012444:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012448:	4113      	asrs	r3, r2
 801244a:	2200      	movs	r2, #0
 801244c:	e008      	b.n	8012460 <__ulp+0x3c>
 801244e:	f1a2 0314 	sub.w	r3, r2, #20
 8012452:	2b1e      	cmp	r3, #30
 8012454:	bfda      	itte	le
 8012456:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801245a:	40da      	lsrle	r2, r3
 801245c:	2201      	movgt	r2, #1
 801245e:	2300      	movs	r3, #0
 8012460:	4619      	mov	r1, r3
 8012462:	4610      	mov	r0, r2
 8012464:	ec41 0b10 	vmov	d0, r0, r1
 8012468:	b002      	add	sp, #8
 801246a:	4770      	bx	lr
 801246c:	7ff00000 	.word	0x7ff00000

08012470 <__b2d>:
 8012470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012474:	6906      	ldr	r6, [r0, #16]
 8012476:	f100 0814 	add.w	r8, r0, #20
 801247a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801247e:	1f37      	subs	r7, r6, #4
 8012480:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012484:	4610      	mov	r0, r2
 8012486:	f7ff fd4b 	bl	8011f20 <__hi0bits>
 801248a:	f1c0 0320 	rsb	r3, r0, #32
 801248e:	280a      	cmp	r0, #10
 8012490:	600b      	str	r3, [r1, #0]
 8012492:	491b      	ldr	r1, [pc, #108]	@ (8012500 <__b2d+0x90>)
 8012494:	dc15      	bgt.n	80124c2 <__b2d+0x52>
 8012496:	f1c0 0c0b 	rsb	ip, r0, #11
 801249a:	fa22 f30c 	lsr.w	r3, r2, ip
 801249e:	45b8      	cmp	r8, r7
 80124a0:	ea43 0501 	orr.w	r5, r3, r1
 80124a4:	bf34      	ite	cc
 80124a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80124aa:	2300      	movcs	r3, #0
 80124ac:	3015      	adds	r0, #21
 80124ae:	fa02 f000 	lsl.w	r0, r2, r0
 80124b2:	fa23 f30c 	lsr.w	r3, r3, ip
 80124b6:	4303      	orrs	r3, r0
 80124b8:	461c      	mov	r4, r3
 80124ba:	ec45 4b10 	vmov	d0, r4, r5
 80124be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c2:	45b8      	cmp	r8, r7
 80124c4:	bf3a      	itte	cc
 80124c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80124ca:	f1a6 0708 	subcc.w	r7, r6, #8
 80124ce:	2300      	movcs	r3, #0
 80124d0:	380b      	subs	r0, #11
 80124d2:	d012      	beq.n	80124fa <__b2d+0x8a>
 80124d4:	f1c0 0120 	rsb	r1, r0, #32
 80124d8:	fa23 f401 	lsr.w	r4, r3, r1
 80124dc:	4082      	lsls	r2, r0
 80124de:	4322      	orrs	r2, r4
 80124e0:	4547      	cmp	r7, r8
 80124e2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80124e6:	bf8c      	ite	hi
 80124e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80124ec:	2200      	movls	r2, #0
 80124ee:	4083      	lsls	r3, r0
 80124f0:	40ca      	lsrs	r2, r1
 80124f2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80124f6:	4313      	orrs	r3, r2
 80124f8:	e7de      	b.n	80124b8 <__b2d+0x48>
 80124fa:	ea42 0501 	orr.w	r5, r2, r1
 80124fe:	e7db      	b.n	80124b8 <__b2d+0x48>
 8012500:	3ff00000 	.word	0x3ff00000

08012504 <__d2b>:
 8012504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012508:	460f      	mov	r7, r1
 801250a:	2101      	movs	r1, #1
 801250c:	ec59 8b10 	vmov	r8, r9, d0
 8012510:	4616      	mov	r6, r2
 8012512:	f7ff fc13 	bl	8011d3c <_Balloc>
 8012516:	4604      	mov	r4, r0
 8012518:	b930      	cbnz	r0, 8012528 <__d2b+0x24>
 801251a:	4602      	mov	r2, r0
 801251c:	4b23      	ldr	r3, [pc, #140]	@ (80125ac <__d2b+0xa8>)
 801251e:	4824      	ldr	r0, [pc, #144]	@ (80125b0 <__d2b+0xac>)
 8012520:	f240 310f 	movw	r1, #783	@ 0x30f
 8012524:	f001 f97c 	bl	8013820 <__assert_func>
 8012528:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801252c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012530:	b10d      	cbz	r5, 8012536 <__d2b+0x32>
 8012532:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012536:	9301      	str	r3, [sp, #4]
 8012538:	f1b8 0300 	subs.w	r3, r8, #0
 801253c:	d023      	beq.n	8012586 <__d2b+0x82>
 801253e:	4668      	mov	r0, sp
 8012540:	9300      	str	r3, [sp, #0]
 8012542:	f7ff fd0c 	bl	8011f5e <__lo0bits>
 8012546:	e9dd 1200 	ldrd	r1, r2, [sp]
 801254a:	b1d0      	cbz	r0, 8012582 <__d2b+0x7e>
 801254c:	f1c0 0320 	rsb	r3, r0, #32
 8012550:	fa02 f303 	lsl.w	r3, r2, r3
 8012554:	430b      	orrs	r3, r1
 8012556:	40c2      	lsrs	r2, r0
 8012558:	6163      	str	r3, [r4, #20]
 801255a:	9201      	str	r2, [sp, #4]
 801255c:	9b01      	ldr	r3, [sp, #4]
 801255e:	61a3      	str	r3, [r4, #24]
 8012560:	2b00      	cmp	r3, #0
 8012562:	bf0c      	ite	eq
 8012564:	2201      	moveq	r2, #1
 8012566:	2202      	movne	r2, #2
 8012568:	6122      	str	r2, [r4, #16]
 801256a:	b1a5      	cbz	r5, 8012596 <__d2b+0x92>
 801256c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012570:	4405      	add	r5, r0
 8012572:	603d      	str	r5, [r7, #0]
 8012574:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012578:	6030      	str	r0, [r6, #0]
 801257a:	4620      	mov	r0, r4
 801257c:	b003      	add	sp, #12
 801257e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012582:	6161      	str	r1, [r4, #20]
 8012584:	e7ea      	b.n	801255c <__d2b+0x58>
 8012586:	a801      	add	r0, sp, #4
 8012588:	f7ff fce9 	bl	8011f5e <__lo0bits>
 801258c:	9b01      	ldr	r3, [sp, #4]
 801258e:	6163      	str	r3, [r4, #20]
 8012590:	3020      	adds	r0, #32
 8012592:	2201      	movs	r2, #1
 8012594:	e7e8      	b.n	8012568 <__d2b+0x64>
 8012596:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801259a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801259e:	6038      	str	r0, [r7, #0]
 80125a0:	6918      	ldr	r0, [r3, #16]
 80125a2:	f7ff fcbd 	bl	8011f20 <__hi0bits>
 80125a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80125aa:	e7e5      	b.n	8012578 <__d2b+0x74>
 80125ac:	080148e1 	.word	0x080148e1
 80125b0:	080148f2 	.word	0x080148f2

080125b4 <__ratio>:
 80125b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b8:	b085      	sub	sp, #20
 80125ba:	e9cd 1000 	strd	r1, r0, [sp]
 80125be:	a902      	add	r1, sp, #8
 80125c0:	f7ff ff56 	bl	8012470 <__b2d>
 80125c4:	9800      	ldr	r0, [sp, #0]
 80125c6:	a903      	add	r1, sp, #12
 80125c8:	ec55 4b10 	vmov	r4, r5, d0
 80125cc:	f7ff ff50 	bl	8012470 <__b2d>
 80125d0:	9b01      	ldr	r3, [sp, #4]
 80125d2:	6919      	ldr	r1, [r3, #16]
 80125d4:	9b00      	ldr	r3, [sp, #0]
 80125d6:	691b      	ldr	r3, [r3, #16]
 80125d8:	1ac9      	subs	r1, r1, r3
 80125da:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80125de:	1a9b      	subs	r3, r3, r2
 80125e0:	ec5b ab10 	vmov	sl, fp, d0
 80125e4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	bfce      	itee	gt
 80125ec:	462a      	movgt	r2, r5
 80125ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80125f2:	465a      	movle	r2, fp
 80125f4:	462f      	mov	r7, r5
 80125f6:	46d9      	mov	r9, fp
 80125f8:	bfcc      	ite	gt
 80125fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80125fe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012602:	464b      	mov	r3, r9
 8012604:	4652      	mov	r2, sl
 8012606:	4620      	mov	r0, r4
 8012608:	4639      	mov	r1, r7
 801260a:	f7ee f93f 	bl	800088c <__aeabi_ddiv>
 801260e:	ec41 0b10 	vmov	d0, r0, r1
 8012612:	b005      	add	sp, #20
 8012614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012618 <__copybits>:
 8012618:	3901      	subs	r1, #1
 801261a:	b570      	push	{r4, r5, r6, lr}
 801261c:	1149      	asrs	r1, r1, #5
 801261e:	6914      	ldr	r4, [r2, #16]
 8012620:	3101      	adds	r1, #1
 8012622:	f102 0314 	add.w	r3, r2, #20
 8012626:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801262a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801262e:	1f05      	subs	r5, r0, #4
 8012630:	42a3      	cmp	r3, r4
 8012632:	d30c      	bcc.n	801264e <__copybits+0x36>
 8012634:	1aa3      	subs	r3, r4, r2
 8012636:	3b11      	subs	r3, #17
 8012638:	f023 0303 	bic.w	r3, r3, #3
 801263c:	3211      	adds	r2, #17
 801263e:	42a2      	cmp	r2, r4
 8012640:	bf88      	it	hi
 8012642:	2300      	movhi	r3, #0
 8012644:	4418      	add	r0, r3
 8012646:	2300      	movs	r3, #0
 8012648:	4288      	cmp	r0, r1
 801264a:	d305      	bcc.n	8012658 <__copybits+0x40>
 801264c:	bd70      	pop	{r4, r5, r6, pc}
 801264e:	f853 6b04 	ldr.w	r6, [r3], #4
 8012652:	f845 6f04 	str.w	r6, [r5, #4]!
 8012656:	e7eb      	b.n	8012630 <__copybits+0x18>
 8012658:	f840 3b04 	str.w	r3, [r0], #4
 801265c:	e7f4      	b.n	8012648 <__copybits+0x30>

0801265e <__any_on>:
 801265e:	f100 0214 	add.w	r2, r0, #20
 8012662:	6900      	ldr	r0, [r0, #16]
 8012664:	114b      	asrs	r3, r1, #5
 8012666:	4298      	cmp	r0, r3
 8012668:	b510      	push	{r4, lr}
 801266a:	db11      	blt.n	8012690 <__any_on+0x32>
 801266c:	dd0a      	ble.n	8012684 <__any_on+0x26>
 801266e:	f011 011f 	ands.w	r1, r1, #31
 8012672:	d007      	beq.n	8012684 <__any_on+0x26>
 8012674:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012678:	fa24 f001 	lsr.w	r0, r4, r1
 801267c:	fa00 f101 	lsl.w	r1, r0, r1
 8012680:	428c      	cmp	r4, r1
 8012682:	d10b      	bne.n	801269c <__any_on+0x3e>
 8012684:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012688:	4293      	cmp	r3, r2
 801268a:	d803      	bhi.n	8012694 <__any_on+0x36>
 801268c:	2000      	movs	r0, #0
 801268e:	bd10      	pop	{r4, pc}
 8012690:	4603      	mov	r3, r0
 8012692:	e7f7      	b.n	8012684 <__any_on+0x26>
 8012694:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012698:	2900      	cmp	r1, #0
 801269a:	d0f5      	beq.n	8012688 <__any_on+0x2a>
 801269c:	2001      	movs	r0, #1
 801269e:	e7f6      	b.n	801268e <__any_on+0x30>

080126a0 <sulp>:
 80126a0:	b570      	push	{r4, r5, r6, lr}
 80126a2:	4604      	mov	r4, r0
 80126a4:	460d      	mov	r5, r1
 80126a6:	ec45 4b10 	vmov	d0, r4, r5
 80126aa:	4616      	mov	r6, r2
 80126ac:	f7ff feba 	bl	8012424 <__ulp>
 80126b0:	ec51 0b10 	vmov	r0, r1, d0
 80126b4:	b17e      	cbz	r6, 80126d6 <sulp+0x36>
 80126b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80126ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80126be:	2b00      	cmp	r3, #0
 80126c0:	dd09      	ble.n	80126d6 <sulp+0x36>
 80126c2:	051b      	lsls	r3, r3, #20
 80126c4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80126c8:	2400      	movs	r4, #0
 80126ca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80126ce:	4622      	mov	r2, r4
 80126d0:	462b      	mov	r3, r5
 80126d2:	f7ed ffb1 	bl	8000638 <__aeabi_dmul>
 80126d6:	ec41 0b10 	vmov	d0, r0, r1
 80126da:	bd70      	pop	{r4, r5, r6, pc}
 80126dc:	0000      	movs	r0, r0
	...

080126e0 <_strtod_l>:
 80126e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e4:	b09f      	sub	sp, #124	@ 0x7c
 80126e6:	460c      	mov	r4, r1
 80126e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80126ea:	2200      	movs	r2, #0
 80126ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80126ee:	9005      	str	r0, [sp, #20]
 80126f0:	f04f 0a00 	mov.w	sl, #0
 80126f4:	f04f 0b00 	mov.w	fp, #0
 80126f8:	460a      	mov	r2, r1
 80126fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80126fc:	7811      	ldrb	r1, [r2, #0]
 80126fe:	292b      	cmp	r1, #43	@ 0x2b
 8012700:	d04a      	beq.n	8012798 <_strtod_l+0xb8>
 8012702:	d838      	bhi.n	8012776 <_strtod_l+0x96>
 8012704:	290d      	cmp	r1, #13
 8012706:	d832      	bhi.n	801276e <_strtod_l+0x8e>
 8012708:	2908      	cmp	r1, #8
 801270a:	d832      	bhi.n	8012772 <_strtod_l+0x92>
 801270c:	2900      	cmp	r1, #0
 801270e:	d03b      	beq.n	8012788 <_strtod_l+0xa8>
 8012710:	2200      	movs	r2, #0
 8012712:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012714:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8012716:	782a      	ldrb	r2, [r5, #0]
 8012718:	2a30      	cmp	r2, #48	@ 0x30
 801271a:	f040 80b3 	bne.w	8012884 <_strtod_l+0x1a4>
 801271e:	786a      	ldrb	r2, [r5, #1]
 8012720:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012724:	2a58      	cmp	r2, #88	@ 0x58
 8012726:	d16e      	bne.n	8012806 <_strtod_l+0x126>
 8012728:	9302      	str	r3, [sp, #8]
 801272a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801272c:	9301      	str	r3, [sp, #4]
 801272e:	ab1a      	add	r3, sp, #104	@ 0x68
 8012730:	9300      	str	r3, [sp, #0]
 8012732:	4a8e      	ldr	r2, [pc, #568]	@ (801296c <_strtod_l+0x28c>)
 8012734:	9805      	ldr	r0, [sp, #20]
 8012736:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012738:	a919      	add	r1, sp, #100	@ 0x64
 801273a:	f001 f90b 	bl	8013954 <__gethex>
 801273e:	f010 060f 	ands.w	r6, r0, #15
 8012742:	4604      	mov	r4, r0
 8012744:	d005      	beq.n	8012752 <_strtod_l+0x72>
 8012746:	2e06      	cmp	r6, #6
 8012748:	d128      	bne.n	801279c <_strtod_l+0xbc>
 801274a:	3501      	adds	r5, #1
 801274c:	2300      	movs	r3, #0
 801274e:	9519      	str	r5, [sp, #100]	@ 0x64
 8012750:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012752:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012754:	2b00      	cmp	r3, #0
 8012756:	f040 858e 	bne.w	8013276 <_strtod_l+0xb96>
 801275a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801275c:	b1cb      	cbz	r3, 8012792 <_strtod_l+0xb2>
 801275e:	4652      	mov	r2, sl
 8012760:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8012764:	ec43 2b10 	vmov	d0, r2, r3
 8012768:	b01f      	add	sp, #124	@ 0x7c
 801276a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801276e:	2920      	cmp	r1, #32
 8012770:	d1ce      	bne.n	8012710 <_strtod_l+0x30>
 8012772:	3201      	adds	r2, #1
 8012774:	e7c1      	b.n	80126fa <_strtod_l+0x1a>
 8012776:	292d      	cmp	r1, #45	@ 0x2d
 8012778:	d1ca      	bne.n	8012710 <_strtod_l+0x30>
 801277a:	2101      	movs	r1, #1
 801277c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801277e:	1c51      	adds	r1, r2, #1
 8012780:	9119      	str	r1, [sp, #100]	@ 0x64
 8012782:	7852      	ldrb	r2, [r2, #1]
 8012784:	2a00      	cmp	r2, #0
 8012786:	d1c5      	bne.n	8012714 <_strtod_l+0x34>
 8012788:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801278a:	9419      	str	r4, [sp, #100]	@ 0x64
 801278c:	2b00      	cmp	r3, #0
 801278e:	f040 8570 	bne.w	8013272 <_strtod_l+0xb92>
 8012792:	4652      	mov	r2, sl
 8012794:	465b      	mov	r3, fp
 8012796:	e7e5      	b.n	8012764 <_strtod_l+0x84>
 8012798:	2100      	movs	r1, #0
 801279a:	e7ef      	b.n	801277c <_strtod_l+0x9c>
 801279c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801279e:	b13a      	cbz	r2, 80127b0 <_strtod_l+0xd0>
 80127a0:	2135      	movs	r1, #53	@ 0x35
 80127a2:	a81c      	add	r0, sp, #112	@ 0x70
 80127a4:	f7ff ff38 	bl	8012618 <__copybits>
 80127a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80127aa:	9805      	ldr	r0, [sp, #20]
 80127ac:	f7ff fb06 	bl	8011dbc <_Bfree>
 80127b0:	3e01      	subs	r6, #1
 80127b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80127b4:	2e04      	cmp	r6, #4
 80127b6:	d806      	bhi.n	80127c6 <_strtod_l+0xe6>
 80127b8:	e8df f006 	tbb	[pc, r6]
 80127bc:	201d0314 	.word	0x201d0314
 80127c0:	14          	.byte	0x14
 80127c1:	00          	.byte	0x00
 80127c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80127c6:	05e1      	lsls	r1, r4, #23
 80127c8:	bf48      	it	mi
 80127ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80127ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80127d2:	0d1b      	lsrs	r3, r3, #20
 80127d4:	051b      	lsls	r3, r3, #20
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d1bb      	bne.n	8012752 <_strtod_l+0x72>
 80127da:	f7fe fbd5 	bl	8010f88 <__errno>
 80127de:	2322      	movs	r3, #34	@ 0x22
 80127e0:	6003      	str	r3, [r0, #0]
 80127e2:	e7b6      	b.n	8012752 <_strtod_l+0x72>
 80127e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80127e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80127ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80127f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80127f4:	e7e7      	b.n	80127c6 <_strtod_l+0xe6>
 80127f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8012974 <_strtod_l+0x294>
 80127fa:	e7e4      	b.n	80127c6 <_strtod_l+0xe6>
 80127fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012800:	f04f 3aff 	mov.w	sl, #4294967295
 8012804:	e7df      	b.n	80127c6 <_strtod_l+0xe6>
 8012806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012808:	1c5a      	adds	r2, r3, #1
 801280a:	9219      	str	r2, [sp, #100]	@ 0x64
 801280c:	785b      	ldrb	r3, [r3, #1]
 801280e:	2b30      	cmp	r3, #48	@ 0x30
 8012810:	d0f9      	beq.n	8012806 <_strtod_l+0x126>
 8012812:	2b00      	cmp	r3, #0
 8012814:	d09d      	beq.n	8012752 <_strtod_l+0x72>
 8012816:	2301      	movs	r3, #1
 8012818:	9309      	str	r3, [sp, #36]	@ 0x24
 801281a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801281c:	930c      	str	r3, [sp, #48]	@ 0x30
 801281e:	2300      	movs	r3, #0
 8012820:	9308      	str	r3, [sp, #32]
 8012822:	930a      	str	r3, [sp, #40]	@ 0x28
 8012824:	461f      	mov	r7, r3
 8012826:	220a      	movs	r2, #10
 8012828:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801282a:	7805      	ldrb	r5, [r0, #0]
 801282c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012830:	b2d9      	uxtb	r1, r3
 8012832:	2909      	cmp	r1, #9
 8012834:	d928      	bls.n	8012888 <_strtod_l+0x1a8>
 8012836:	494e      	ldr	r1, [pc, #312]	@ (8012970 <_strtod_l+0x290>)
 8012838:	2201      	movs	r2, #1
 801283a:	f000 ffd5 	bl	80137e8 <strncmp>
 801283e:	2800      	cmp	r0, #0
 8012840:	d032      	beq.n	80128a8 <_strtod_l+0x1c8>
 8012842:	2000      	movs	r0, #0
 8012844:	462a      	mov	r2, r5
 8012846:	4681      	mov	r9, r0
 8012848:	463d      	mov	r5, r7
 801284a:	4603      	mov	r3, r0
 801284c:	2a65      	cmp	r2, #101	@ 0x65
 801284e:	d001      	beq.n	8012854 <_strtod_l+0x174>
 8012850:	2a45      	cmp	r2, #69	@ 0x45
 8012852:	d114      	bne.n	801287e <_strtod_l+0x19e>
 8012854:	b91d      	cbnz	r5, 801285e <_strtod_l+0x17e>
 8012856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012858:	4302      	orrs	r2, r0
 801285a:	d095      	beq.n	8012788 <_strtod_l+0xa8>
 801285c:	2500      	movs	r5, #0
 801285e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012860:	1c62      	adds	r2, r4, #1
 8012862:	9219      	str	r2, [sp, #100]	@ 0x64
 8012864:	7862      	ldrb	r2, [r4, #1]
 8012866:	2a2b      	cmp	r2, #43	@ 0x2b
 8012868:	d077      	beq.n	801295a <_strtod_l+0x27a>
 801286a:	2a2d      	cmp	r2, #45	@ 0x2d
 801286c:	d07b      	beq.n	8012966 <_strtod_l+0x286>
 801286e:	f04f 0c00 	mov.w	ip, #0
 8012872:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012876:	2909      	cmp	r1, #9
 8012878:	f240 8082 	bls.w	8012980 <_strtod_l+0x2a0>
 801287c:	9419      	str	r4, [sp, #100]	@ 0x64
 801287e:	f04f 0800 	mov.w	r8, #0
 8012882:	e0a2      	b.n	80129ca <_strtod_l+0x2ea>
 8012884:	2300      	movs	r3, #0
 8012886:	e7c7      	b.n	8012818 <_strtod_l+0x138>
 8012888:	2f08      	cmp	r7, #8
 801288a:	bfd5      	itete	le
 801288c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801288e:	9908      	ldrgt	r1, [sp, #32]
 8012890:	fb02 3301 	mlale	r3, r2, r1, r3
 8012894:	fb02 3301 	mlagt	r3, r2, r1, r3
 8012898:	f100 0001 	add.w	r0, r0, #1
 801289c:	bfd4      	ite	le
 801289e:	930a      	strle	r3, [sp, #40]	@ 0x28
 80128a0:	9308      	strgt	r3, [sp, #32]
 80128a2:	3701      	adds	r7, #1
 80128a4:	9019      	str	r0, [sp, #100]	@ 0x64
 80128a6:	e7bf      	b.n	8012828 <_strtod_l+0x148>
 80128a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80128aa:	1c5a      	adds	r2, r3, #1
 80128ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80128ae:	785a      	ldrb	r2, [r3, #1]
 80128b0:	b37f      	cbz	r7, 8012912 <_strtod_l+0x232>
 80128b2:	4681      	mov	r9, r0
 80128b4:	463d      	mov	r5, r7
 80128b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80128ba:	2b09      	cmp	r3, #9
 80128bc:	d912      	bls.n	80128e4 <_strtod_l+0x204>
 80128be:	2301      	movs	r3, #1
 80128c0:	e7c4      	b.n	801284c <_strtod_l+0x16c>
 80128c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80128c4:	1c5a      	adds	r2, r3, #1
 80128c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80128c8:	785a      	ldrb	r2, [r3, #1]
 80128ca:	3001      	adds	r0, #1
 80128cc:	2a30      	cmp	r2, #48	@ 0x30
 80128ce:	d0f8      	beq.n	80128c2 <_strtod_l+0x1e2>
 80128d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80128d4:	2b08      	cmp	r3, #8
 80128d6:	f200 84d3 	bhi.w	8013280 <_strtod_l+0xba0>
 80128da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80128dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80128de:	4681      	mov	r9, r0
 80128e0:	2000      	movs	r0, #0
 80128e2:	4605      	mov	r5, r0
 80128e4:	3a30      	subs	r2, #48	@ 0x30
 80128e6:	f100 0301 	add.w	r3, r0, #1
 80128ea:	d02a      	beq.n	8012942 <_strtod_l+0x262>
 80128ec:	4499      	add	r9, r3
 80128ee:	eb00 0c05 	add.w	ip, r0, r5
 80128f2:	462b      	mov	r3, r5
 80128f4:	210a      	movs	r1, #10
 80128f6:	4563      	cmp	r3, ip
 80128f8:	d10d      	bne.n	8012916 <_strtod_l+0x236>
 80128fa:	1c69      	adds	r1, r5, #1
 80128fc:	4401      	add	r1, r0
 80128fe:	4428      	add	r0, r5
 8012900:	2808      	cmp	r0, #8
 8012902:	dc16      	bgt.n	8012932 <_strtod_l+0x252>
 8012904:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012906:	230a      	movs	r3, #10
 8012908:	fb03 2300 	mla	r3, r3, r0, r2
 801290c:	930a      	str	r3, [sp, #40]	@ 0x28
 801290e:	2300      	movs	r3, #0
 8012910:	e018      	b.n	8012944 <_strtod_l+0x264>
 8012912:	4638      	mov	r0, r7
 8012914:	e7da      	b.n	80128cc <_strtod_l+0x1ec>
 8012916:	2b08      	cmp	r3, #8
 8012918:	f103 0301 	add.w	r3, r3, #1
 801291c:	dc03      	bgt.n	8012926 <_strtod_l+0x246>
 801291e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012920:	434e      	muls	r6, r1
 8012922:	960a      	str	r6, [sp, #40]	@ 0x28
 8012924:	e7e7      	b.n	80128f6 <_strtod_l+0x216>
 8012926:	2b10      	cmp	r3, #16
 8012928:	bfde      	ittt	le
 801292a:	9e08      	ldrle	r6, [sp, #32]
 801292c:	434e      	mulle	r6, r1
 801292e:	9608      	strle	r6, [sp, #32]
 8012930:	e7e1      	b.n	80128f6 <_strtod_l+0x216>
 8012932:	280f      	cmp	r0, #15
 8012934:	dceb      	bgt.n	801290e <_strtod_l+0x22e>
 8012936:	9808      	ldr	r0, [sp, #32]
 8012938:	230a      	movs	r3, #10
 801293a:	fb03 2300 	mla	r3, r3, r0, r2
 801293e:	9308      	str	r3, [sp, #32]
 8012940:	e7e5      	b.n	801290e <_strtod_l+0x22e>
 8012942:	4629      	mov	r1, r5
 8012944:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012946:	1c50      	adds	r0, r2, #1
 8012948:	9019      	str	r0, [sp, #100]	@ 0x64
 801294a:	7852      	ldrb	r2, [r2, #1]
 801294c:	4618      	mov	r0, r3
 801294e:	460d      	mov	r5, r1
 8012950:	e7b1      	b.n	80128b6 <_strtod_l+0x1d6>
 8012952:	f04f 0900 	mov.w	r9, #0
 8012956:	2301      	movs	r3, #1
 8012958:	e77d      	b.n	8012856 <_strtod_l+0x176>
 801295a:	f04f 0c00 	mov.w	ip, #0
 801295e:	1ca2      	adds	r2, r4, #2
 8012960:	9219      	str	r2, [sp, #100]	@ 0x64
 8012962:	78a2      	ldrb	r2, [r4, #2]
 8012964:	e785      	b.n	8012872 <_strtod_l+0x192>
 8012966:	f04f 0c01 	mov.w	ip, #1
 801296a:	e7f8      	b.n	801295e <_strtod_l+0x27e>
 801296c:	08014a60 	.word	0x08014a60
 8012970:	08014a48 	.word	0x08014a48
 8012974:	7ff00000 	.word	0x7ff00000
 8012978:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801297a:	1c51      	adds	r1, r2, #1
 801297c:	9119      	str	r1, [sp, #100]	@ 0x64
 801297e:	7852      	ldrb	r2, [r2, #1]
 8012980:	2a30      	cmp	r2, #48	@ 0x30
 8012982:	d0f9      	beq.n	8012978 <_strtod_l+0x298>
 8012984:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012988:	2908      	cmp	r1, #8
 801298a:	f63f af78 	bhi.w	801287e <_strtod_l+0x19e>
 801298e:	3a30      	subs	r2, #48	@ 0x30
 8012990:	920e      	str	r2, [sp, #56]	@ 0x38
 8012992:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012994:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012996:	f04f 080a 	mov.w	r8, #10
 801299a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801299c:	1c56      	adds	r6, r2, #1
 801299e:	9619      	str	r6, [sp, #100]	@ 0x64
 80129a0:	7852      	ldrb	r2, [r2, #1]
 80129a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80129a6:	f1be 0f09 	cmp.w	lr, #9
 80129aa:	d939      	bls.n	8012a20 <_strtod_l+0x340>
 80129ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80129ae:	1a76      	subs	r6, r6, r1
 80129b0:	2e08      	cmp	r6, #8
 80129b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80129b6:	dc03      	bgt.n	80129c0 <_strtod_l+0x2e0>
 80129b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80129ba:	4588      	cmp	r8, r1
 80129bc:	bfa8      	it	ge
 80129be:	4688      	movge	r8, r1
 80129c0:	f1bc 0f00 	cmp.w	ip, #0
 80129c4:	d001      	beq.n	80129ca <_strtod_l+0x2ea>
 80129c6:	f1c8 0800 	rsb	r8, r8, #0
 80129ca:	2d00      	cmp	r5, #0
 80129cc:	d14e      	bne.n	8012a6c <_strtod_l+0x38c>
 80129ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80129d0:	4308      	orrs	r0, r1
 80129d2:	f47f aebe 	bne.w	8012752 <_strtod_l+0x72>
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	f47f aed6 	bne.w	8012788 <_strtod_l+0xa8>
 80129dc:	2a69      	cmp	r2, #105	@ 0x69
 80129de:	d028      	beq.n	8012a32 <_strtod_l+0x352>
 80129e0:	dc25      	bgt.n	8012a2e <_strtod_l+0x34e>
 80129e2:	2a49      	cmp	r2, #73	@ 0x49
 80129e4:	d025      	beq.n	8012a32 <_strtod_l+0x352>
 80129e6:	2a4e      	cmp	r2, #78	@ 0x4e
 80129e8:	f47f aece 	bne.w	8012788 <_strtod_l+0xa8>
 80129ec:	499b      	ldr	r1, [pc, #620]	@ (8012c5c <_strtod_l+0x57c>)
 80129ee:	a819      	add	r0, sp, #100	@ 0x64
 80129f0:	f001 f9d2 	bl	8013d98 <__match>
 80129f4:	2800      	cmp	r0, #0
 80129f6:	f43f aec7 	beq.w	8012788 <_strtod_l+0xa8>
 80129fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80129fc:	781b      	ldrb	r3, [r3, #0]
 80129fe:	2b28      	cmp	r3, #40	@ 0x28
 8012a00:	d12e      	bne.n	8012a60 <_strtod_l+0x380>
 8012a02:	4997      	ldr	r1, [pc, #604]	@ (8012c60 <_strtod_l+0x580>)
 8012a04:	aa1c      	add	r2, sp, #112	@ 0x70
 8012a06:	a819      	add	r0, sp, #100	@ 0x64
 8012a08:	f001 f9da 	bl	8013dc0 <__hexnan>
 8012a0c:	2805      	cmp	r0, #5
 8012a0e:	d127      	bne.n	8012a60 <_strtod_l+0x380>
 8012a10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012a12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8012a16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012a1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012a1e:	e698      	b.n	8012752 <_strtod_l+0x72>
 8012a20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012a22:	fb08 2101 	mla	r1, r8, r1, r2
 8012a26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8012a2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8012a2c:	e7b5      	b.n	801299a <_strtod_l+0x2ba>
 8012a2e:	2a6e      	cmp	r2, #110	@ 0x6e
 8012a30:	e7da      	b.n	80129e8 <_strtod_l+0x308>
 8012a32:	498c      	ldr	r1, [pc, #560]	@ (8012c64 <_strtod_l+0x584>)
 8012a34:	a819      	add	r0, sp, #100	@ 0x64
 8012a36:	f001 f9af 	bl	8013d98 <__match>
 8012a3a:	2800      	cmp	r0, #0
 8012a3c:	f43f aea4 	beq.w	8012788 <_strtod_l+0xa8>
 8012a40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012a42:	4989      	ldr	r1, [pc, #548]	@ (8012c68 <_strtod_l+0x588>)
 8012a44:	3b01      	subs	r3, #1
 8012a46:	a819      	add	r0, sp, #100	@ 0x64
 8012a48:	9319      	str	r3, [sp, #100]	@ 0x64
 8012a4a:	f001 f9a5 	bl	8013d98 <__match>
 8012a4e:	b910      	cbnz	r0, 8012a56 <_strtod_l+0x376>
 8012a50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012a52:	3301      	adds	r3, #1
 8012a54:	9319      	str	r3, [sp, #100]	@ 0x64
 8012a56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8012c78 <_strtod_l+0x598>
 8012a5a:	f04f 0a00 	mov.w	sl, #0
 8012a5e:	e678      	b.n	8012752 <_strtod_l+0x72>
 8012a60:	4882      	ldr	r0, [pc, #520]	@ (8012c6c <_strtod_l+0x58c>)
 8012a62:	f000 fed5 	bl	8013810 <nan>
 8012a66:	ec5b ab10 	vmov	sl, fp, d0
 8012a6a:	e672      	b.n	8012752 <_strtod_l+0x72>
 8012a6c:	eba8 0309 	sub.w	r3, r8, r9
 8012a70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a74:	2f00      	cmp	r7, #0
 8012a76:	bf08      	it	eq
 8012a78:	462f      	moveq	r7, r5
 8012a7a:	2d10      	cmp	r5, #16
 8012a7c:	462c      	mov	r4, r5
 8012a7e:	bfa8      	it	ge
 8012a80:	2410      	movge	r4, #16
 8012a82:	f7ed fd5f 	bl	8000544 <__aeabi_ui2d>
 8012a86:	2d09      	cmp	r5, #9
 8012a88:	4682      	mov	sl, r0
 8012a8a:	468b      	mov	fp, r1
 8012a8c:	dc13      	bgt.n	8012ab6 <_strtod_l+0x3d6>
 8012a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	f43f ae5e 	beq.w	8012752 <_strtod_l+0x72>
 8012a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a98:	dd78      	ble.n	8012b8c <_strtod_l+0x4ac>
 8012a9a:	2b16      	cmp	r3, #22
 8012a9c:	dc5f      	bgt.n	8012b5e <_strtod_l+0x47e>
 8012a9e:	4974      	ldr	r1, [pc, #464]	@ (8012c70 <_strtod_l+0x590>)
 8012aa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012aa8:	4652      	mov	r2, sl
 8012aaa:	465b      	mov	r3, fp
 8012aac:	f7ed fdc4 	bl	8000638 <__aeabi_dmul>
 8012ab0:	4682      	mov	sl, r0
 8012ab2:	468b      	mov	fp, r1
 8012ab4:	e64d      	b.n	8012752 <_strtod_l+0x72>
 8012ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8012c70 <_strtod_l+0x590>)
 8012ab8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012abc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012ac0:	f7ed fdba 	bl	8000638 <__aeabi_dmul>
 8012ac4:	4682      	mov	sl, r0
 8012ac6:	9808      	ldr	r0, [sp, #32]
 8012ac8:	468b      	mov	fp, r1
 8012aca:	f7ed fd3b 	bl	8000544 <__aeabi_ui2d>
 8012ace:	4602      	mov	r2, r0
 8012ad0:	460b      	mov	r3, r1
 8012ad2:	4650      	mov	r0, sl
 8012ad4:	4659      	mov	r1, fp
 8012ad6:	f7ed fbf9 	bl	80002cc <__adddf3>
 8012ada:	2d0f      	cmp	r5, #15
 8012adc:	4682      	mov	sl, r0
 8012ade:	468b      	mov	fp, r1
 8012ae0:	ddd5      	ble.n	8012a8e <_strtod_l+0x3ae>
 8012ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ae4:	1b2c      	subs	r4, r5, r4
 8012ae6:	441c      	add	r4, r3
 8012ae8:	2c00      	cmp	r4, #0
 8012aea:	f340 8096 	ble.w	8012c1a <_strtod_l+0x53a>
 8012aee:	f014 030f 	ands.w	r3, r4, #15
 8012af2:	d00a      	beq.n	8012b0a <_strtod_l+0x42a>
 8012af4:	495e      	ldr	r1, [pc, #376]	@ (8012c70 <_strtod_l+0x590>)
 8012af6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012afa:	4652      	mov	r2, sl
 8012afc:	465b      	mov	r3, fp
 8012afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b02:	f7ed fd99 	bl	8000638 <__aeabi_dmul>
 8012b06:	4682      	mov	sl, r0
 8012b08:	468b      	mov	fp, r1
 8012b0a:	f034 040f 	bics.w	r4, r4, #15
 8012b0e:	d073      	beq.n	8012bf8 <_strtod_l+0x518>
 8012b10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8012b14:	dd48      	ble.n	8012ba8 <_strtod_l+0x4c8>
 8012b16:	2400      	movs	r4, #0
 8012b18:	46a0      	mov	r8, r4
 8012b1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8012b1c:	46a1      	mov	r9, r4
 8012b1e:	9a05      	ldr	r2, [sp, #20]
 8012b20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8012c78 <_strtod_l+0x598>
 8012b24:	2322      	movs	r3, #34	@ 0x22
 8012b26:	6013      	str	r3, [r2, #0]
 8012b28:	f04f 0a00 	mov.w	sl, #0
 8012b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	f43f ae0f 	beq.w	8012752 <_strtod_l+0x72>
 8012b34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012b36:	9805      	ldr	r0, [sp, #20]
 8012b38:	f7ff f940 	bl	8011dbc <_Bfree>
 8012b3c:	9805      	ldr	r0, [sp, #20]
 8012b3e:	4649      	mov	r1, r9
 8012b40:	f7ff f93c 	bl	8011dbc <_Bfree>
 8012b44:	9805      	ldr	r0, [sp, #20]
 8012b46:	4641      	mov	r1, r8
 8012b48:	f7ff f938 	bl	8011dbc <_Bfree>
 8012b4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012b4e:	9805      	ldr	r0, [sp, #20]
 8012b50:	f7ff f934 	bl	8011dbc <_Bfree>
 8012b54:	9805      	ldr	r0, [sp, #20]
 8012b56:	4621      	mov	r1, r4
 8012b58:	f7ff f930 	bl	8011dbc <_Bfree>
 8012b5c:	e5f9      	b.n	8012752 <_strtod_l+0x72>
 8012b5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8012b64:	4293      	cmp	r3, r2
 8012b66:	dbbc      	blt.n	8012ae2 <_strtod_l+0x402>
 8012b68:	4c41      	ldr	r4, [pc, #260]	@ (8012c70 <_strtod_l+0x590>)
 8012b6a:	f1c5 050f 	rsb	r5, r5, #15
 8012b6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012b72:	4652      	mov	r2, sl
 8012b74:	465b      	mov	r3, fp
 8012b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b7a:	f7ed fd5d 	bl	8000638 <__aeabi_dmul>
 8012b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b80:	1b5d      	subs	r5, r3, r5
 8012b82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012b86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012b8a:	e78f      	b.n	8012aac <_strtod_l+0x3cc>
 8012b8c:	3316      	adds	r3, #22
 8012b8e:	dba8      	blt.n	8012ae2 <_strtod_l+0x402>
 8012b90:	4b37      	ldr	r3, [pc, #220]	@ (8012c70 <_strtod_l+0x590>)
 8012b92:	eba9 0808 	sub.w	r8, r9, r8
 8012b96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8012b9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012b9e:	4650      	mov	r0, sl
 8012ba0:	4659      	mov	r1, fp
 8012ba2:	f7ed fe73 	bl	800088c <__aeabi_ddiv>
 8012ba6:	e783      	b.n	8012ab0 <_strtod_l+0x3d0>
 8012ba8:	4b32      	ldr	r3, [pc, #200]	@ (8012c74 <_strtod_l+0x594>)
 8012baa:	9308      	str	r3, [sp, #32]
 8012bac:	2300      	movs	r3, #0
 8012bae:	1124      	asrs	r4, r4, #4
 8012bb0:	4650      	mov	r0, sl
 8012bb2:	4659      	mov	r1, fp
 8012bb4:	461e      	mov	r6, r3
 8012bb6:	2c01      	cmp	r4, #1
 8012bb8:	dc21      	bgt.n	8012bfe <_strtod_l+0x51e>
 8012bba:	b10b      	cbz	r3, 8012bc0 <_strtod_l+0x4e0>
 8012bbc:	4682      	mov	sl, r0
 8012bbe:	468b      	mov	fp, r1
 8012bc0:	492c      	ldr	r1, [pc, #176]	@ (8012c74 <_strtod_l+0x594>)
 8012bc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8012bc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012bca:	4652      	mov	r2, sl
 8012bcc:	465b      	mov	r3, fp
 8012bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bd2:	f7ed fd31 	bl	8000638 <__aeabi_dmul>
 8012bd6:	4b28      	ldr	r3, [pc, #160]	@ (8012c78 <_strtod_l+0x598>)
 8012bd8:	460a      	mov	r2, r1
 8012bda:	400b      	ands	r3, r1
 8012bdc:	4927      	ldr	r1, [pc, #156]	@ (8012c7c <_strtod_l+0x59c>)
 8012bde:	428b      	cmp	r3, r1
 8012be0:	4682      	mov	sl, r0
 8012be2:	d898      	bhi.n	8012b16 <_strtod_l+0x436>
 8012be4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012be8:	428b      	cmp	r3, r1
 8012bea:	bf86      	itte	hi
 8012bec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8012c80 <_strtod_l+0x5a0>
 8012bf0:	f04f 3aff 	movhi.w	sl, #4294967295
 8012bf4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	9308      	str	r3, [sp, #32]
 8012bfc:	e07a      	b.n	8012cf4 <_strtod_l+0x614>
 8012bfe:	07e2      	lsls	r2, r4, #31
 8012c00:	d505      	bpl.n	8012c0e <_strtod_l+0x52e>
 8012c02:	9b08      	ldr	r3, [sp, #32]
 8012c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c08:	f7ed fd16 	bl	8000638 <__aeabi_dmul>
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	9a08      	ldr	r2, [sp, #32]
 8012c10:	3208      	adds	r2, #8
 8012c12:	3601      	adds	r6, #1
 8012c14:	1064      	asrs	r4, r4, #1
 8012c16:	9208      	str	r2, [sp, #32]
 8012c18:	e7cd      	b.n	8012bb6 <_strtod_l+0x4d6>
 8012c1a:	d0ed      	beq.n	8012bf8 <_strtod_l+0x518>
 8012c1c:	4264      	negs	r4, r4
 8012c1e:	f014 020f 	ands.w	r2, r4, #15
 8012c22:	d00a      	beq.n	8012c3a <_strtod_l+0x55a>
 8012c24:	4b12      	ldr	r3, [pc, #72]	@ (8012c70 <_strtod_l+0x590>)
 8012c26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c2a:	4650      	mov	r0, sl
 8012c2c:	4659      	mov	r1, fp
 8012c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c32:	f7ed fe2b 	bl	800088c <__aeabi_ddiv>
 8012c36:	4682      	mov	sl, r0
 8012c38:	468b      	mov	fp, r1
 8012c3a:	1124      	asrs	r4, r4, #4
 8012c3c:	d0dc      	beq.n	8012bf8 <_strtod_l+0x518>
 8012c3e:	2c1f      	cmp	r4, #31
 8012c40:	dd20      	ble.n	8012c84 <_strtod_l+0x5a4>
 8012c42:	2400      	movs	r4, #0
 8012c44:	46a0      	mov	r8, r4
 8012c46:	940a      	str	r4, [sp, #40]	@ 0x28
 8012c48:	46a1      	mov	r9, r4
 8012c4a:	9a05      	ldr	r2, [sp, #20]
 8012c4c:	2322      	movs	r3, #34	@ 0x22
 8012c4e:	f04f 0a00 	mov.w	sl, #0
 8012c52:	f04f 0b00 	mov.w	fp, #0
 8012c56:	6013      	str	r3, [r2, #0]
 8012c58:	e768      	b.n	8012b2c <_strtod_l+0x44c>
 8012c5a:	bf00      	nop
 8012c5c:	08014839 	.word	0x08014839
 8012c60:	08014a4c 	.word	0x08014a4c
 8012c64:	08014831 	.word	0x08014831
 8012c68:	08014868 	.word	0x08014868
 8012c6c:	08014bf5 	.word	0x08014bf5
 8012c70:	08014980 	.word	0x08014980
 8012c74:	08014958 	.word	0x08014958
 8012c78:	7ff00000 	.word	0x7ff00000
 8012c7c:	7ca00000 	.word	0x7ca00000
 8012c80:	7fefffff 	.word	0x7fefffff
 8012c84:	f014 0310 	ands.w	r3, r4, #16
 8012c88:	bf18      	it	ne
 8012c8a:	236a      	movne	r3, #106	@ 0x6a
 8012c8c:	4ea9      	ldr	r6, [pc, #676]	@ (8012f34 <_strtod_l+0x854>)
 8012c8e:	9308      	str	r3, [sp, #32]
 8012c90:	4650      	mov	r0, sl
 8012c92:	4659      	mov	r1, fp
 8012c94:	2300      	movs	r3, #0
 8012c96:	07e2      	lsls	r2, r4, #31
 8012c98:	d504      	bpl.n	8012ca4 <_strtod_l+0x5c4>
 8012c9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012c9e:	f7ed fccb 	bl	8000638 <__aeabi_dmul>
 8012ca2:	2301      	movs	r3, #1
 8012ca4:	1064      	asrs	r4, r4, #1
 8012ca6:	f106 0608 	add.w	r6, r6, #8
 8012caa:	d1f4      	bne.n	8012c96 <_strtod_l+0x5b6>
 8012cac:	b10b      	cbz	r3, 8012cb2 <_strtod_l+0x5d2>
 8012cae:	4682      	mov	sl, r0
 8012cb0:	468b      	mov	fp, r1
 8012cb2:	9b08      	ldr	r3, [sp, #32]
 8012cb4:	b1b3      	cbz	r3, 8012ce4 <_strtod_l+0x604>
 8012cb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012cba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	4659      	mov	r1, fp
 8012cc2:	dd0f      	ble.n	8012ce4 <_strtod_l+0x604>
 8012cc4:	2b1f      	cmp	r3, #31
 8012cc6:	dd55      	ble.n	8012d74 <_strtod_l+0x694>
 8012cc8:	2b34      	cmp	r3, #52	@ 0x34
 8012cca:	bfde      	ittt	le
 8012ccc:	f04f 33ff 	movle.w	r3, #4294967295
 8012cd0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8012cd4:	4093      	lslle	r3, r2
 8012cd6:	f04f 0a00 	mov.w	sl, #0
 8012cda:	bfcc      	ite	gt
 8012cdc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012ce0:	ea03 0b01 	andle.w	fp, r3, r1
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	4650      	mov	r0, sl
 8012cea:	4659      	mov	r1, fp
 8012cec:	f7ed ff0c 	bl	8000b08 <__aeabi_dcmpeq>
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	d1a6      	bne.n	8012c42 <_strtod_l+0x562>
 8012cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012cf6:	9300      	str	r3, [sp, #0]
 8012cf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012cfa:	9805      	ldr	r0, [sp, #20]
 8012cfc:	462b      	mov	r3, r5
 8012cfe:	463a      	mov	r2, r7
 8012d00:	f7ff f8c4 	bl	8011e8c <__s2b>
 8012d04:	900a      	str	r0, [sp, #40]	@ 0x28
 8012d06:	2800      	cmp	r0, #0
 8012d08:	f43f af05 	beq.w	8012b16 <_strtod_l+0x436>
 8012d0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d0e:	2a00      	cmp	r2, #0
 8012d10:	eba9 0308 	sub.w	r3, r9, r8
 8012d14:	bfa8      	it	ge
 8012d16:	2300      	movge	r3, #0
 8012d18:	9312      	str	r3, [sp, #72]	@ 0x48
 8012d1a:	2400      	movs	r4, #0
 8012d1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012d20:	9316      	str	r3, [sp, #88]	@ 0x58
 8012d22:	46a0      	mov	r8, r4
 8012d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d26:	9805      	ldr	r0, [sp, #20]
 8012d28:	6859      	ldr	r1, [r3, #4]
 8012d2a:	f7ff f807 	bl	8011d3c <_Balloc>
 8012d2e:	4681      	mov	r9, r0
 8012d30:	2800      	cmp	r0, #0
 8012d32:	f43f aef4 	beq.w	8012b1e <_strtod_l+0x43e>
 8012d36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d38:	691a      	ldr	r2, [r3, #16]
 8012d3a:	3202      	adds	r2, #2
 8012d3c:	f103 010c 	add.w	r1, r3, #12
 8012d40:	0092      	lsls	r2, r2, #2
 8012d42:	300c      	adds	r0, #12
 8012d44:	f7fe f94d 	bl	8010fe2 <memcpy>
 8012d48:	ec4b ab10 	vmov	d0, sl, fp
 8012d4c:	9805      	ldr	r0, [sp, #20]
 8012d4e:	aa1c      	add	r2, sp, #112	@ 0x70
 8012d50:	a91b      	add	r1, sp, #108	@ 0x6c
 8012d52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8012d56:	f7ff fbd5 	bl	8012504 <__d2b>
 8012d5a:	901a      	str	r0, [sp, #104]	@ 0x68
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	f43f aede 	beq.w	8012b1e <_strtod_l+0x43e>
 8012d62:	9805      	ldr	r0, [sp, #20]
 8012d64:	2101      	movs	r1, #1
 8012d66:	f7ff f927 	bl	8011fb8 <__i2b>
 8012d6a:	4680      	mov	r8, r0
 8012d6c:	b948      	cbnz	r0, 8012d82 <_strtod_l+0x6a2>
 8012d6e:	f04f 0800 	mov.w	r8, #0
 8012d72:	e6d4      	b.n	8012b1e <_strtod_l+0x43e>
 8012d74:	f04f 32ff 	mov.w	r2, #4294967295
 8012d78:	fa02 f303 	lsl.w	r3, r2, r3
 8012d7c:	ea03 0a0a 	and.w	sl, r3, sl
 8012d80:	e7b0      	b.n	8012ce4 <_strtod_l+0x604>
 8012d82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012d84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012d86:	2d00      	cmp	r5, #0
 8012d88:	bfab      	itete	ge
 8012d8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012d8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012d8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012d90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8012d92:	bfac      	ite	ge
 8012d94:	18ef      	addge	r7, r5, r3
 8012d96:	1b5e      	sublt	r6, r3, r5
 8012d98:	9b08      	ldr	r3, [sp, #32]
 8012d9a:	1aed      	subs	r5, r5, r3
 8012d9c:	4415      	add	r5, r2
 8012d9e:	4b66      	ldr	r3, [pc, #408]	@ (8012f38 <_strtod_l+0x858>)
 8012da0:	3d01      	subs	r5, #1
 8012da2:	429d      	cmp	r5, r3
 8012da4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012da8:	da50      	bge.n	8012e4c <_strtod_l+0x76c>
 8012daa:	1b5b      	subs	r3, r3, r5
 8012dac:	2b1f      	cmp	r3, #31
 8012dae:	eba2 0203 	sub.w	r2, r2, r3
 8012db2:	f04f 0101 	mov.w	r1, #1
 8012db6:	dc3d      	bgt.n	8012e34 <_strtod_l+0x754>
 8012db8:	fa01 f303 	lsl.w	r3, r1, r3
 8012dbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8012dc2:	18bd      	adds	r5, r7, r2
 8012dc4:	9b08      	ldr	r3, [sp, #32]
 8012dc6:	42af      	cmp	r7, r5
 8012dc8:	4416      	add	r6, r2
 8012dca:	441e      	add	r6, r3
 8012dcc:	463b      	mov	r3, r7
 8012dce:	bfa8      	it	ge
 8012dd0:	462b      	movge	r3, r5
 8012dd2:	42b3      	cmp	r3, r6
 8012dd4:	bfa8      	it	ge
 8012dd6:	4633      	movge	r3, r6
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	bfc2      	ittt	gt
 8012ddc:	1aed      	subgt	r5, r5, r3
 8012dde:	1af6      	subgt	r6, r6, r3
 8012de0:	1aff      	subgt	r7, r7, r3
 8012de2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	dd16      	ble.n	8012e16 <_strtod_l+0x736>
 8012de8:	4641      	mov	r1, r8
 8012dea:	9805      	ldr	r0, [sp, #20]
 8012dec:	461a      	mov	r2, r3
 8012dee:	f7ff f9a3 	bl	8012138 <__pow5mult>
 8012df2:	4680      	mov	r8, r0
 8012df4:	2800      	cmp	r0, #0
 8012df6:	d0ba      	beq.n	8012d6e <_strtod_l+0x68e>
 8012df8:	4601      	mov	r1, r0
 8012dfa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012dfc:	9805      	ldr	r0, [sp, #20]
 8012dfe:	f7ff f8f1 	bl	8011fe4 <__multiply>
 8012e02:	900e      	str	r0, [sp, #56]	@ 0x38
 8012e04:	2800      	cmp	r0, #0
 8012e06:	f43f ae8a 	beq.w	8012b1e <_strtod_l+0x43e>
 8012e0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012e0c:	9805      	ldr	r0, [sp, #20]
 8012e0e:	f7fe ffd5 	bl	8011dbc <_Bfree>
 8012e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e14:	931a      	str	r3, [sp, #104]	@ 0x68
 8012e16:	2d00      	cmp	r5, #0
 8012e18:	dc1d      	bgt.n	8012e56 <_strtod_l+0x776>
 8012e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	dd23      	ble.n	8012e68 <_strtod_l+0x788>
 8012e20:	4649      	mov	r1, r9
 8012e22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8012e24:	9805      	ldr	r0, [sp, #20]
 8012e26:	f7ff f987 	bl	8012138 <__pow5mult>
 8012e2a:	4681      	mov	r9, r0
 8012e2c:	b9e0      	cbnz	r0, 8012e68 <_strtod_l+0x788>
 8012e2e:	f04f 0900 	mov.w	r9, #0
 8012e32:	e674      	b.n	8012b1e <_strtod_l+0x43e>
 8012e34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012e38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012e3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012e40:	35e2      	adds	r5, #226	@ 0xe2
 8012e42:	fa01 f305 	lsl.w	r3, r1, r5
 8012e46:	9310      	str	r3, [sp, #64]	@ 0x40
 8012e48:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012e4a:	e7ba      	b.n	8012dc2 <_strtod_l+0x6e2>
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012e50:	2301      	movs	r3, #1
 8012e52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012e54:	e7b5      	b.n	8012dc2 <_strtod_l+0x6e2>
 8012e56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012e58:	9805      	ldr	r0, [sp, #20]
 8012e5a:	462a      	mov	r2, r5
 8012e5c:	f7ff f9c6 	bl	80121ec <__lshift>
 8012e60:	901a      	str	r0, [sp, #104]	@ 0x68
 8012e62:	2800      	cmp	r0, #0
 8012e64:	d1d9      	bne.n	8012e1a <_strtod_l+0x73a>
 8012e66:	e65a      	b.n	8012b1e <_strtod_l+0x43e>
 8012e68:	2e00      	cmp	r6, #0
 8012e6a:	dd07      	ble.n	8012e7c <_strtod_l+0x79c>
 8012e6c:	4649      	mov	r1, r9
 8012e6e:	9805      	ldr	r0, [sp, #20]
 8012e70:	4632      	mov	r2, r6
 8012e72:	f7ff f9bb 	bl	80121ec <__lshift>
 8012e76:	4681      	mov	r9, r0
 8012e78:	2800      	cmp	r0, #0
 8012e7a:	d0d8      	beq.n	8012e2e <_strtod_l+0x74e>
 8012e7c:	2f00      	cmp	r7, #0
 8012e7e:	dd08      	ble.n	8012e92 <_strtod_l+0x7b2>
 8012e80:	4641      	mov	r1, r8
 8012e82:	9805      	ldr	r0, [sp, #20]
 8012e84:	463a      	mov	r2, r7
 8012e86:	f7ff f9b1 	bl	80121ec <__lshift>
 8012e8a:	4680      	mov	r8, r0
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	f43f ae46 	beq.w	8012b1e <_strtod_l+0x43e>
 8012e92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012e94:	9805      	ldr	r0, [sp, #20]
 8012e96:	464a      	mov	r2, r9
 8012e98:	f7ff fa30 	bl	80122fc <__mdiff>
 8012e9c:	4604      	mov	r4, r0
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	f43f ae3d 	beq.w	8012b1e <_strtod_l+0x43e>
 8012ea4:	68c3      	ldr	r3, [r0, #12]
 8012ea6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	60c3      	str	r3, [r0, #12]
 8012eac:	4641      	mov	r1, r8
 8012eae:	f7ff fa09 	bl	80122c4 <__mcmp>
 8012eb2:	2800      	cmp	r0, #0
 8012eb4:	da46      	bge.n	8012f44 <_strtod_l+0x864>
 8012eb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012eb8:	ea53 030a 	orrs.w	r3, r3, sl
 8012ebc:	d16c      	bne.n	8012f98 <_strtod_l+0x8b8>
 8012ebe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d168      	bne.n	8012f98 <_strtod_l+0x8b8>
 8012ec6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012eca:	0d1b      	lsrs	r3, r3, #20
 8012ecc:	051b      	lsls	r3, r3, #20
 8012ece:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012ed2:	d961      	bls.n	8012f98 <_strtod_l+0x8b8>
 8012ed4:	6963      	ldr	r3, [r4, #20]
 8012ed6:	b913      	cbnz	r3, 8012ede <_strtod_l+0x7fe>
 8012ed8:	6923      	ldr	r3, [r4, #16]
 8012eda:	2b01      	cmp	r3, #1
 8012edc:	dd5c      	ble.n	8012f98 <_strtod_l+0x8b8>
 8012ede:	4621      	mov	r1, r4
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	9805      	ldr	r0, [sp, #20]
 8012ee4:	f7ff f982 	bl	80121ec <__lshift>
 8012ee8:	4641      	mov	r1, r8
 8012eea:	4604      	mov	r4, r0
 8012eec:	f7ff f9ea 	bl	80122c4 <__mcmp>
 8012ef0:	2800      	cmp	r0, #0
 8012ef2:	dd51      	ble.n	8012f98 <_strtod_l+0x8b8>
 8012ef4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012ef8:	9a08      	ldr	r2, [sp, #32]
 8012efa:	0d1b      	lsrs	r3, r3, #20
 8012efc:	051b      	lsls	r3, r3, #20
 8012efe:	2a00      	cmp	r2, #0
 8012f00:	d06b      	beq.n	8012fda <_strtod_l+0x8fa>
 8012f02:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012f06:	d868      	bhi.n	8012fda <_strtod_l+0x8fa>
 8012f08:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012f0c:	f67f ae9d 	bls.w	8012c4a <_strtod_l+0x56a>
 8012f10:	4b0a      	ldr	r3, [pc, #40]	@ (8012f3c <_strtod_l+0x85c>)
 8012f12:	4650      	mov	r0, sl
 8012f14:	4659      	mov	r1, fp
 8012f16:	2200      	movs	r2, #0
 8012f18:	f7ed fb8e 	bl	8000638 <__aeabi_dmul>
 8012f1c:	4b08      	ldr	r3, [pc, #32]	@ (8012f40 <_strtod_l+0x860>)
 8012f1e:	400b      	ands	r3, r1
 8012f20:	4682      	mov	sl, r0
 8012f22:	468b      	mov	fp, r1
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	f47f ae05 	bne.w	8012b34 <_strtod_l+0x454>
 8012f2a:	9a05      	ldr	r2, [sp, #20]
 8012f2c:	2322      	movs	r3, #34	@ 0x22
 8012f2e:	6013      	str	r3, [r2, #0]
 8012f30:	e600      	b.n	8012b34 <_strtod_l+0x454>
 8012f32:	bf00      	nop
 8012f34:	08014a78 	.word	0x08014a78
 8012f38:	fffffc02 	.word	0xfffffc02
 8012f3c:	39500000 	.word	0x39500000
 8012f40:	7ff00000 	.word	0x7ff00000
 8012f44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012f48:	d165      	bne.n	8013016 <_strtod_l+0x936>
 8012f4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012f4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012f50:	b35a      	cbz	r2, 8012faa <_strtod_l+0x8ca>
 8012f52:	4a9f      	ldr	r2, [pc, #636]	@ (80131d0 <_strtod_l+0xaf0>)
 8012f54:	4293      	cmp	r3, r2
 8012f56:	d12b      	bne.n	8012fb0 <_strtod_l+0x8d0>
 8012f58:	9b08      	ldr	r3, [sp, #32]
 8012f5a:	4651      	mov	r1, sl
 8012f5c:	b303      	cbz	r3, 8012fa0 <_strtod_l+0x8c0>
 8012f5e:	4b9d      	ldr	r3, [pc, #628]	@ (80131d4 <_strtod_l+0xaf4>)
 8012f60:	465a      	mov	r2, fp
 8012f62:	4013      	ands	r3, r2
 8012f64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012f68:	f04f 32ff 	mov.w	r2, #4294967295
 8012f6c:	d81b      	bhi.n	8012fa6 <_strtod_l+0x8c6>
 8012f6e:	0d1b      	lsrs	r3, r3, #20
 8012f70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012f74:	fa02 f303 	lsl.w	r3, r2, r3
 8012f78:	4299      	cmp	r1, r3
 8012f7a:	d119      	bne.n	8012fb0 <_strtod_l+0x8d0>
 8012f7c:	4b96      	ldr	r3, [pc, #600]	@ (80131d8 <_strtod_l+0xaf8>)
 8012f7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d102      	bne.n	8012f8a <_strtod_l+0x8aa>
 8012f84:	3101      	adds	r1, #1
 8012f86:	f43f adca 	beq.w	8012b1e <_strtod_l+0x43e>
 8012f8a:	4b92      	ldr	r3, [pc, #584]	@ (80131d4 <_strtod_l+0xaf4>)
 8012f8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f8e:	401a      	ands	r2, r3
 8012f90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012f94:	f04f 0a00 	mov.w	sl, #0
 8012f98:	9b08      	ldr	r3, [sp, #32]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d1b8      	bne.n	8012f10 <_strtod_l+0x830>
 8012f9e:	e5c9      	b.n	8012b34 <_strtod_l+0x454>
 8012fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8012fa4:	e7e8      	b.n	8012f78 <_strtod_l+0x898>
 8012fa6:	4613      	mov	r3, r2
 8012fa8:	e7e6      	b.n	8012f78 <_strtod_l+0x898>
 8012faa:	ea53 030a 	orrs.w	r3, r3, sl
 8012fae:	d0a1      	beq.n	8012ef4 <_strtod_l+0x814>
 8012fb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012fb2:	b1db      	cbz	r3, 8012fec <_strtod_l+0x90c>
 8012fb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012fb6:	4213      	tst	r3, r2
 8012fb8:	d0ee      	beq.n	8012f98 <_strtod_l+0x8b8>
 8012fba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fbc:	9a08      	ldr	r2, [sp, #32]
 8012fbe:	4650      	mov	r0, sl
 8012fc0:	4659      	mov	r1, fp
 8012fc2:	b1bb      	cbz	r3, 8012ff4 <_strtod_l+0x914>
 8012fc4:	f7ff fb6c 	bl	80126a0 <sulp>
 8012fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012fcc:	ec53 2b10 	vmov	r2, r3, d0
 8012fd0:	f7ed f97c 	bl	80002cc <__adddf3>
 8012fd4:	4682      	mov	sl, r0
 8012fd6:	468b      	mov	fp, r1
 8012fd8:	e7de      	b.n	8012f98 <_strtod_l+0x8b8>
 8012fda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012fde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012fe2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012fe6:	f04f 3aff 	mov.w	sl, #4294967295
 8012fea:	e7d5      	b.n	8012f98 <_strtod_l+0x8b8>
 8012fec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012fee:	ea13 0f0a 	tst.w	r3, sl
 8012ff2:	e7e1      	b.n	8012fb8 <_strtod_l+0x8d8>
 8012ff4:	f7ff fb54 	bl	80126a0 <sulp>
 8012ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012ffc:	ec53 2b10 	vmov	r2, r3, d0
 8013000:	f7ed f962 	bl	80002c8 <__aeabi_dsub>
 8013004:	2200      	movs	r2, #0
 8013006:	2300      	movs	r3, #0
 8013008:	4682      	mov	sl, r0
 801300a:	468b      	mov	fp, r1
 801300c:	f7ed fd7c 	bl	8000b08 <__aeabi_dcmpeq>
 8013010:	2800      	cmp	r0, #0
 8013012:	d0c1      	beq.n	8012f98 <_strtod_l+0x8b8>
 8013014:	e619      	b.n	8012c4a <_strtod_l+0x56a>
 8013016:	4641      	mov	r1, r8
 8013018:	4620      	mov	r0, r4
 801301a:	f7ff facb 	bl	80125b4 <__ratio>
 801301e:	ec57 6b10 	vmov	r6, r7, d0
 8013022:	2200      	movs	r2, #0
 8013024:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013028:	4630      	mov	r0, r6
 801302a:	4639      	mov	r1, r7
 801302c:	f7ed fd80 	bl	8000b30 <__aeabi_dcmple>
 8013030:	2800      	cmp	r0, #0
 8013032:	d06f      	beq.n	8013114 <_strtod_l+0xa34>
 8013034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013036:	2b00      	cmp	r3, #0
 8013038:	d17a      	bne.n	8013130 <_strtod_l+0xa50>
 801303a:	f1ba 0f00 	cmp.w	sl, #0
 801303e:	d158      	bne.n	80130f2 <_strtod_l+0xa12>
 8013040:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013046:	2b00      	cmp	r3, #0
 8013048:	d15a      	bne.n	8013100 <_strtod_l+0xa20>
 801304a:	4b64      	ldr	r3, [pc, #400]	@ (80131dc <_strtod_l+0xafc>)
 801304c:	2200      	movs	r2, #0
 801304e:	4630      	mov	r0, r6
 8013050:	4639      	mov	r1, r7
 8013052:	f7ed fd63 	bl	8000b1c <__aeabi_dcmplt>
 8013056:	2800      	cmp	r0, #0
 8013058:	d159      	bne.n	801310e <_strtod_l+0xa2e>
 801305a:	4630      	mov	r0, r6
 801305c:	4639      	mov	r1, r7
 801305e:	4b60      	ldr	r3, [pc, #384]	@ (80131e0 <_strtod_l+0xb00>)
 8013060:	2200      	movs	r2, #0
 8013062:	f7ed fae9 	bl	8000638 <__aeabi_dmul>
 8013066:	4606      	mov	r6, r0
 8013068:	460f      	mov	r7, r1
 801306a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801306e:	9606      	str	r6, [sp, #24]
 8013070:	9307      	str	r3, [sp, #28]
 8013072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013076:	4d57      	ldr	r5, [pc, #348]	@ (80131d4 <_strtod_l+0xaf4>)
 8013078:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801307c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801307e:	401d      	ands	r5, r3
 8013080:	4b58      	ldr	r3, [pc, #352]	@ (80131e4 <_strtod_l+0xb04>)
 8013082:	429d      	cmp	r5, r3
 8013084:	f040 80b2 	bne.w	80131ec <_strtod_l+0xb0c>
 8013088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801308a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801308e:	ec4b ab10 	vmov	d0, sl, fp
 8013092:	f7ff f9c7 	bl	8012424 <__ulp>
 8013096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801309a:	ec51 0b10 	vmov	r0, r1, d0
 801309e:	f7ed facb 	bl	8000638 <__aeabi_dmul>
 80130a2:	4652      	mov	r2, sl
 80130a4:	465b      	mov	r3, fp
 80130a6:	f7ed f911 	bl	80002cc <__adddf3>
 80130aa:	460b      	mov	r3, r1
 80130ac:	4949      	ldr	r1, [pc, #292]	@ (80131d4 <_strtod_l+0xaf4>)
 80130ae:	4a4e      	ldr	r2, [pc, #312]	@ (80131e8 <_strtod_l+0xb08>)
 80130b0:	4019      	ands	r1, r3
 80130b2:	4291      	cmp	r1, r2
 80130b4:	4682      	mov	sl, r0
 80130b6:	d942      	bls.n	801313e <_strtod_l+0xa5e>
 80130b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80130ba:	4b47      	ldr	r3, [pc, #284]	@ (80131d8 <_strtod_l+0xaf8>)
 80130bc:	429a      	cmp	r2, r3
 80130be:	d103      	bne.n	80130c8 <_strtod_l+0x9e8>
 80130c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80130c2:	3301      	adds	r3, #1
 80130c4:	f43f ad2b 	beq.w	8012b1e <_strtod_l+0x43e>
 80130c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80131d8 <_strtod_l+0xaf8>
 80130cc:	f04f 3aff 	mov.w	sl, #4294967295
 80130d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80130d2:	9805      	ldr	r0, [sp, #20]
 80130d4:	f7fe fe72 	bl	8011dbc <_Bfree>
 80130d8:	9805      	ldr	r0, [sp, #20]
 80130da:	4649      	mov	r1, r9
 80130dc:	f7fe fe6e 	bl	8011dbc <_Bfree>
 80130e0:	9805      	ldr	r0, [sp, #20]
 80130e2:	4641      	mov	r1, r8
 80130e4:	f7fe fe6a 	bl	8011dbc <_Bfree>
 80130e8:	9805      	ldr	r0, [sp, #20]
 80130ea:	4621      	mov	r1, r4
 80130ec:	f7fe fe66 	bl	8011dbc <_Bfree>
 80130f0:	e618      	b.n	8012d24 <_strtod_l+0x644>
 80130f2:	f1ba 0f01 	cmp.w	sl, #1
 80130f6:	d103      	bne.n	8013100 <_strtod_l+0xa20>
 80130f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	f43f ada5 	beq.w	8012c4a <_strtod_l+0x56a>
 8013100:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80131b0 <_strtod_l+0xad0>
 8013104:	4f35      	ldr	r7, [pc, #212]	@ (80131dc <_strtod_l+0xafc>)
 8013106:	ed8d 7b06 	vstr	d7, [sp, #24]
 801310a:	2600      	movs	r6, #0
 801310c:	e7b1      	b.n	8013072 <_strtod_l+0x992>
 801310e:	4f34      	ldr	r7, [pc, #208]	@ (80131e0 <_strtod_l+0xb00>)
 8013110:	2600      	movs	r6, #0
 8013112:	e7aa      	b.n	801306a <_strtod_l+0x98a>
 8013114:	4b32      	ldr	r3, [pc, #200]	@ (80131e0 <_strtod_l+0xb00>)
 8013116:	4630      	mov	r0, r6
 8013118:	4639      	mov	r1, r7
 801311a:	2200      	movs	r2, #0
 801311c:	f7ed fa8c 	bl	8000638 <__aeabi_dmul>
 8013120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013122:	4606      	mov	r6, r0
 8013124:	460f      	mov	r7, r1
 8013126:	2b00      	cmp	r3, #0
 8013128:	d09f      	beq.n	801306a <_strtod_l+0x98a>
 801312a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801312e:	e7a0      	b.n	8013072 <_strtod_l+0x992>
 8013130:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80131b8 <_strtod_l+0xad8>
 8013134:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013138:	ec57 6b17 	vmov	r6, r7, d7
 801313c:	e799      	b.n	8013072 <_strtod_l+0x992>
 801313e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013142:	9b08      	ldr	r3, [sp, #32]
 8013144:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013148:	2b00      	cmp	r3, #0
 801314a:	d1c1      	bne.n	80130d0 <_strtod_l+0x9f0>
 801314c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013150:	0d1b      	lsrs	r3, r3, #20
 8013152:	051b      	lsls	r3, r3, #20
 8013154:	429d      	cmp	r5, r3
 8013156:	d1bb      	bne.n	80130d0 <_strtod_l+0x9f0>
 8013158:	4630      	mov	r0, r6
 801315a:	4639      	mov	r1, r7
 801315c:	f7ed fdcc 	bl	8000cf8 <__aeabi_d2lz>
 8013160:	f7ed fa3c 	bl	80005dc <__aeabi_l2d>
 8013164:	4602      	mov	r2, r0
 8013166:	460b      	mov	r3, r1
 8013168:	4630      	mov	r0, r6
 801316a:	4639      	mov	r1, r7
 801316c:	f7ed f8ac 	bl	80002c8 <__aeabi_dsub>
 8013170:	460b      	mov	r3, r1
 8013172:	4602      	mov	r2, r0
 8013174:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013178:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801317c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801317e:	ea46 060a 	orr.w	r6, r6, sl
 8013182:	431e      	orrs	r6, r3
 8013184:	d06f      	beq.n	8013266 <_strtod_l+0xb86>
 8013186:	a30e      	add	r3, pc, #56	@ (adr r3, 80131c0 <_strtod_l+0xae0>)
 8013188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318c:	f7ed fcc6 	bl	8000b1c <__aeabi_dcmplt>
 8013190:	2800      	cmp	r0, #0
 8013192:	f47f accf 	bne.w	8012b34 <_strtod_l+0x454>
 8013196:	a30c      	add	r3, pc, #48	@ (adr r3, 80131c8 <_strtod_l+0xae8>)
 8013198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80131a0:	f7ed fcda 	bl	8000b58 <__aeabi_dcmpgt>
 80131a4:	2800      	cmp	r0, #0
 80131a6:	d093      	beq.n	80130d0 <_strtod_l+0x9f0>
 80131a8:	e4c4      	b.n	8012b34 <_strtod_l+0x454>
 80131aa:	bf00      	nop
 80131ac:	f3af 8000 	nop.w
 80131b0:	00000000 	.word	0x00000000
 80131b4:	bff00000 	.word	0xbff00000
 80131b8:	00000000 	.word	0x00000000
 80131bc:	3ff00000 	.word	0x3ff00000
 80131c0:	94a03595 	.word	0x94a03595
 80131c4:	3fdfffff 	.word	0x3fdfffff
 80131c8:	35afe535 	.word	0x35afe535
 80131cc:	3fe00000 	.word	0x3fe00000
 80131d0:	000fffff 	.word	0x000fffff
 80131d4:	7ff00000 	.word	0x7ff00000
 80131d8:	7fefffff 	.word	0x7fefffff
 80131dc:	3ff00000 	.word	0x3ff00000
 80131e0:	3fe00000 	.word	0x3fe00000
 80131e4:	7fe00000 	.word	0x7fe00000
 80131e8:	7c9fffff 	.word	0x7c9fffff
 80131ec:	9b08      	ldr	r3, [sp, #32]
 80131ee:	b323      	cbz	r3, 801323a <_strtod_l+0xb5a>
 80131f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80131f4:	d821      	bhi.n	801323a <_strtod_l+0xb5a>
 80131f6:	a328      	add	r3, pc, #160	@ (adr r3, 8013298 <_strtod_l+0xbb8>)
 80131f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131fc:	4630      	mov	r0, r6
 80131fe:	4639      	mov	r1, r7
 8013200:	f7ed fc96 	bl	8000b30 <__aeabi_dcmple>
 8013204:	b1a0      	cbz	r0, 8013230 <_strtod_l+0xb50>
 8013206:	4639      	mov	r1, r7
 8013208:	4630      	mov	r0, r6
 801320a:	f7ed fced 	bl	8000be8 <__aeabi_d2uiz>
 801320e:	2801      	cmp	r0, #1
 8013210:	bf38      	it	cc
 8013212:	2001      	movcc	r0, #1
 8013214:	f7ed f996 	bl	8000544 <__aeabi_ui2d>
 8013218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801321a:	4606      	mov	r6, r0
 801321c:	460f      	mov	r7, r1
 801321e:	b9fb      	cbnz	r3, 8013260 <_strtod_l+0xb80>
 8013220:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013224:	9014      	str	r0, [sp, #80]	@ 0x50
 8013226:	9315      	str	r3, [sp, #84]	@ 0x54
 8013228:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801322c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013230:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013232:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013236:	1b5b      	subs	r3, r3, r5
 8013238:	9311      	str	r3, [sp, #68]	@ 0x44
 801323a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801323e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013242:	f7ff f8ef 	bl	8012424 <__ulp>
 8013246:	4650      	mov	r0, sl
 8013248:	ec53 2b10 	vmov	r2, r3, d0
 801324c:	4659      	mov	r1, fp
 801324e:	f7ed f9f3 	bl	8000638 <__aeabi_dmul>
 8013252:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013256:	f7ed f839 	bl	80002cc <__adddf3>
 801325a:	4682      	mov	sl, r0
 801325c:	468b      	mov	fp, r1
 801325e:	e770      	b.n	8013142 <_strtod_l+0xa62>
 8013260:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013264:	e7e0      	b.n	8013228 <_strtod_l+0xb48>
 8013266:	a30e      	add	r3, pc, #56	@ (adr r3, 80132a0 <_strtod_l+0xbc0>)
 8013268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326c:	f7ed fc56 	bl	8000b1c <__aeabi_dcmplt>
 8013270:	e798      	b.n	80131a4 <_strtod_l+0xac4>
 8013272:	2300      	movs	r3, #0
 8013274:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013276:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801327a:	6013      	str	r3, [r2, #0]
 801327c:	f7ff ba6d 	b.w	801275a <_strtod_l+0x7a>
 8013280:	2a65      	cmp	r2, #101	@ 0x65
 8013282:	f43f ab66 	beq.w	8012952 <_strtod_l+0x272>
 8013286:	2a45      	cmp	r2, #69	@ 0x45
 8013288:	f43f ab63 	beq.w	8012952 <_strtod_l+0x272>
 801328c:	2301      	movs	r3, #1
 801328e:	f7ff bb9e 	b.w	80129ce <_strtod_l+0x2ee>
 8013292:	bf00      	nop
 8013294:	f3af 8000 	nop.w
 8013298:	ffc00000 	.word	0xffc00000
 801329c:	41dfffff 	.word	0x41dfffff
 80132a0:	94a03595 	.word	0x94a03595
 80132a4:	3fcfffff 	.word	0x3fcfffff

080132a8 <_strtod_r>:
 80132a8:	4b01      	ldr	r3, [pc, #4]	@ (80132b0 <_strtod_r+0x8>)
 80132aa:	f7ff ba19 	b.w	80126e0 <_strtod_l>
 80132ae:	bf00      	nop
 80132b0:	20000178 	.word	0x20000178

080132b4 <_strtol_l.constprop.0>:
 80132b4:	2b24      	cmp	r3, #36	@ 0x24
 80132b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132ba:	4686      	mov	lr, r0
 80132bc:	4690      	mov	r8, r2
 80132be:	d801      	bhi.n	80132c4 <_strtol_l.constprop.0+0x10>
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d106      	bne.n	80132d2 <_strtol_l.constprop.0+0x1e>
 80132c4:	f7fd fe60 	bl	8010f88 <__errno>
 80132c8:	2316      	movs	r3, #22
 80132ca:	6003      	str	r3, [r0, #0]
 80132cc:	2000      	movs	r0, #0
 80132ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132d2:	4834      	ldr	r0, [pc, #208]	@ (80133a4 <_strtol_l.constprop.0+0xf0>)
 80132d4:	460d      	mov	r5, r1
 80132d6:	462a      	mov	r2, r5
 80132d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80132dc:	5d06      	ldrb	r6, [r0, r4]
 80132de:	f016 0608 	ands.w	r6, r6, #8
 80132e2:	d1f8      	bne.n	80132d6 <_strtol_l.constprop.0+0x22>
 80132e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80132e6:	d12d      	bne.n	8013344 <_strtol_l.constprop.0+0x90>
 80132e8:	782c      	ldrb	r4, [r5, #0]
 80132ea:	2601      	movs	r6, #1
 80132ec:	1c95      	adds	r5, r2, #2
 80132ee:	f033 0210 	bics.w	r2, r3, #16
 80132f2:	d109      	bne.n	8013308 <_strtol_l.constprop.0+0x54>
 80132f4:	2c30      	cmp	r4, #48	@ 0x30
 80132f6:	d12a      	bne.n	801334e <_strtol_l.constprop.0+0x9a>
 80132f8:	782a      	ldrb	r2, [r5, #0]
 80132fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80132fe:	2a58      	cmp	r2, #88	@ 0x58
 8013300:	d125      	bne.n	801334e <_strtol_l.constprop.0+0x9a>
 8013302:	786c      	ldrb	r4, [r5, #1]
 8013304:	2310      	movs	r3, #16
 8013306:	3502      	adds	r5, #2
 8013308:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801330c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013310:	2200      	movs	r2, #0
 8013312:	fbbc f9f3 	udiv	r9, ip, r3
 8013316:	4610      	mov	r0, r2
 8013318:	fb03 ca19 	mls	sl, r3, r9, ip
 801331c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013320:	2f09      	cmp	r7, #9
 8013322:	d81b      	bhi.n	801335c <_strtol_l.constprop.0+0xa8>
 8013324:	463c      	mov	r4, r7
 8013326:	42a3      	cmp	r3, r4
 8013328:	dd27      	ble.n	801337a <_strtol_l.constprop.0+0xc6>
 801332a:	1c57      	adds	r7, r2, #1
 801332c:	d007      	beq.n	801333e <_strtol_l.constprop.0+0x8a>
 801332e:	4581      	cmp	r9, r0
 8013330:	d320      	bcc.n	8013374 <_strtol_l.constprop.0+0xc0>
 8013332:	d101      	bne.n	8013338 <_strtol_l.constprop.0+0x84>
 8013334:	45a2      	cmp	sl, r4
 8013336:	db1d      	blt.n	8013374 <_strtol_l.constprop.0+0xc0>
 8013338:	fb00 4003 	mla	r0, r0, r3, r4
 801333c:	2201      	movs	r2, #1
 801333e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013342:	e7eb      	b.n	801331c <_strtol_l.constprop.0+0x68>
 8013344:	2c2b      	cmp	r4, #43	@ 0x2b
 8013346:	bf04      	itt	eq
 8013348:	782c      	ldrbeq	r4, [r5, #0]
 801334a:	1c95      	addeq	r5, r2, #2
 801334c:	e7cf      	b.n	80132ee <_strtol_l.constprop.0+0x3a>
 801334e:	2b00      	cmp	r3, #0
 8013350:	d1da      	bne.n	8013308 <_strtol_l.constprop.0+0x54>
 8013352:	2c30      	cmp	r4, #48	@ 0x30
 8013354:	bf0c      	ite	eq
 8013356:	2308      	moveq	r3, #8
 8013358:	230a      	movne	r3, #10
 801335a:	e7d5      	b.n	8013308 <_strtol_l.constprop.0+0x54>
 801335c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013360:	2f19      	cmp	r7, #25
 8013362:	d801      	bhi.n	8013368 <_strtol_l.constprop.0+0xb4>
 8013364:	3c37      	subs	r4, #55	@ 0x37
 8013366:	e7de      	b.n	8013326 <_strtol_l.constprop.0+0x72>
 8013368:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801336c:	2f19      	cmp	r7, #25
 801336e:	d804      	bhi.n	801337a <_strtol_l.constprop.0+0xc6>
 8013370:	3c57      	subs	r4, #87	@ 0x57
 8013372:	e7d8      	b.n	8013326 <_strtol_l.constprop.0+0x72>
 8013374:	f04f 32ff 	mov.w	r2, #4294967295
 8013378:	e7e1      	b.n	801333e <_strtol_l.constprop.0+0x8a>
 801337a:	1c53      	adds	r3, r2, #1
 801337c:	d108      	bne.n	8013390 <_strtol_l.constprop.0+0xdc>
 801337e:	2322      	movs	r3, #34	@ 0x22
 8013380:	f8ce 3000 	str.w	r3, [lr]
 8013384:	4660      	mov	r0, ip
 8013386:	f1b8 0f00 	cmp.w	r8, #0
 801338a:	d0a0      	beq.n	80132ce <_strtol_l.constprop.0+0x1a>
 801338c:	1e69      	subs	r1, r5, #1
 801338e:	e006      	b.n	801339e <_strtol_l.constprop.0+0xea>
 8013390:	b106      	cbz	r6, 8013394 <_strtol_l.constprop.0+0xe0>
 8013392:	4240      	negs	r0, r0
 8013394:	f1b8 0f00 	cmp.w	r8, #0
 8013398:	d099      	beq.n	80132ce <_strtol_l.constprop.0+0x1a>
 801339a:	2a00      	cmp	r2, #0
 801339c:	d1f6      	bne.n	801338c <_strtol_l.constprop.0+0xd8>
 801339e:	f8c8 1000 	str.w	r1, [r8]
 80133a2:	e794      	b.n	80132ce <_strtol_l.constprop.0+0x1a>
 80133a4:	08014aa1 	.word	0x08014aa1

080133a8 <_strtol_r>:
 80133a8:	f7ff bf84 	b.w	80132b4 <_strtol_l.constprop.0>

080133ac <__ssputs_r>:
 80133ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133b0:	688e      	ldr	r6, [r1, #8]
 80133b2:	461f      	mov	r7, r3
 80133b4:	42be      	cmp	r6, r7
 80133b6:	680b      	ldr	r3, [r1, #0]
 80133b8:	4682      	mov	sl, r0
 80133ba:	460c      	mov	r4, r1
 80133bc:	4690      	mov	r8, r2
 80133be:	d82d      	bhi.n	801341c <__ssputs_r+0x70>
 80133c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80133c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80133c8:	d026      	beq.n	8013418 <__ssputs_r+0x6c>
 80133ca:	6965      	ldr	r5, [r4, #20]
 80133cc:	6909      	ldr	r1, [r1, #16]
 80133ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80133d2:	eba3 0901 	sub.w	r9, r3, r1
 80133d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80133da:	1c7b      	adds	r3, r7, #1
 80133dc:	444b      	add	r3, r9
 80133de:	106d      	asrs	r5, r5, #1
 80133e0:	429d      	cmp	r5, r3
 80133e2:	bf38      	it	cc
 80133e4:	461d      	movcc	r5, r3
 80133e6:	0553      	lsls	r3, r2, #21
 80133e8:	d527      	bpl.n	801343a <__ssputs_r+0x8e>
 80133ea:	4629      	mov	r1, r5
 80133ec:	f7fc fcf6 	bl	800fddc <_malloc_r>
 80133f0:	4606      	mov	r6, r0
 80133f2:	b360      	cbz	r0, 801344e <__ssputs_r+0xa2>
 80133f4:	6921      	ldr	r1, [r4, #16]
 80133f6:	464a      	mov	r2, r9
 80133f8:	f7fd fdf3 	bl	8010fe2 <memcpy>
 80133fc:	89a3      	ldrh	r3, [r4, #12]
 80133fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013406:	81a3      	strh	r3, [r4, #12]
 8013408:	6126      	str	r6, [r4, #16]
 801340a:	6165      	str	r5, [r4, #20]
 801340c:	444e      	add	r6, r9
 801340e:	eba5 0509 	sub.w	r5, r5, r9
 8013412:	6026      	str	r6, [r4, #0]
 8013414:	60a5      	str	r5, [r4, #8]
 8013416:	463e      	mov	r6, r7
 8013418:	42be      	cmp	r6, r7
 801341a:	d900      	bls.n	801341e <__ssputs_r+0x72>
 801341c:	463e      	mov	r6, r7
 801341e:	6820      	ldr	r0, [r4, #0]
 8013420:	4632      	mov	r2, r6
 8013422:	4641      	mov	r1, r8
 8013424:	f000 f9c6 	bl	80137b4 <memmove>
 8013428:	68a3      	ldr	r3, [r4, #8]
 801342a:	1b9b      	subs	r3, r3, r6
 801342c:	60a3      	str	r3, [r4, #8]
 801342e:	6823      	ldr	r3, [r4, #0]
 8013430:	4433      	add	r3, r6
 8013432:	6023      	str	r3, [r4, #0]
 8013434:	2000      	movs	r0, #0
 8013436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801343a:	462a      	mov	r2, r5
 801343c:	f000 fd6d 	bl	8013f1a <_realloc_r>
 8013440:	4606      	mov	r6, r0
 8013442:	2800      	cmp	r0, #0
 8013444:	d1e0      	bne.n	8013408 <__ssputs_r+0x5c>
 8013446:	6921      	ldr	r1, [r4, #16]
 8013448:	4650      	mov	r0, sl
 801344a:	f7fe fc2d 	bl	8011ca8 <_free_r>
 801344e:	230c      	movs	r3, #12
 8013450:	f8ca 3000 	str.w	r3, [sl]
 8013454:	89a3      	ldrh	r3, [r4, #12]
 8013456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801345a:	81a3      	strh	r3, [r4, #12]
 801345c:	f04f 30ff 	mov.w	r0, #4294967295
 8013460:	e7e9      	b.n	8013436 <__ssputs_r+0x8a>
	...

08013464 <_svfiprintf_r>:
 8013464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013468:	4698      	mov	r8, r3
 801346a:	898b      	ldrh	r3, [r1, #12]
 801346c:	061b      	lsls	r3, r3, #24
 801346e:	b09d      	sub	sp, #116	@ 0x74
 8013470:	4607      	mov	r7, r0
 8013472:	460d      	mov	r5, r1
 8013474:	4614      	mov	r4, r2
 8013476:	d510      	bpl.n	801349a <_svfiprintf_r+0x36>
 8013478:	690b      	ldr	r3, [r1, #16]
 801347a:	b973      	cbnz	r3, 801349a <_svfiprintf_r+0x36>
 801347c:	2140      	movs	r1, #64	@ 0x40
 801347e:	f7fc fcad 	bl	800fddc <_malloc_r>
 8013482:	6028      	str	r0, [r5, #0]
 8013484:	6128      	str	r0, [r5, #16]
 8013486:	b930      	cbnz	r0, 8013496 <_svfiprintf_r+0x32>
 8013488:	230c      	movs	r3, #12
 801348a:	603b      	str	r3, [r7, #0]
 801348c:	f04f 30ff 	mov.w	r0, #4294967295
 8013490:	b01d      	add	sp, #116	@ 0x74
 8013492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013496:	2340      	movs	r3, #64	@ 0x40
 8013498:	616b      	str	r3, [r5, #20]
 801349a:	2300      	movs	r3, #0
 801349c:	9309      	str	r3, [sp, #36]	@ 0x24
 801349e:	2320      	movs	r3, #32
 80134a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80134a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80134a8:	2330      	movs	r3, #48	@ 0x30
 80134aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013648 <_svfiprintf_r+0x1e4>
 80134ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80134b2:	f04f 0901 	mov.w	r9, #1
 80134b6:	4623      	mov	r3, r4
 80134b8:	469a      	mov	sl, r3
 80134ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134be:	b10a      	cbz	r2, 80134c4 <_svfiprintf_r+0x60>
 80134c0:	2a25      	cmp	r2, #37	@ 0x25
 80134c2:	d1f9      	bne.n	80134b8 <_svfiprintf_r+0x54>
 80134c4:	ebba 0b04 	subs.w	fp, sl, r4
 80134c8:	d00b      	beq.n	80134e2 <_svfiprintf_r+0x7e>
 80134ca:	465b      	mov	r3, fp
 80134cc:	4622      	mov	r2, r4
 80134ce:	4629      	mov	r1, r5
 80134d0:	4638      	mov	r0, r7
 80134d2:	f7ff ff6b 	bl	80133ac <__ssputs_r>
 80134d6:	3001      	adds	r0, #1
 80134d8:	f000 80a7 	beq.w	801362a <_svfiprintf_r+0x1c6>
 80134dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80134de:	445a      	add	r2, fp
 80134e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80134e2:	f89a 3000 	ldrb.w	r3, [sl]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	f000 809f 	beq.w	801362a <_svfiprintf_r+0x1c6>
 80134ec:	2300      	movs	r3, #0
 80134ee:	f04f 32ff 	mov.w	r2, #4294967295
 80134f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134f6:	f10a 0a01 	add.w	sl, sl, #1
 80134fa:	9304      	str	r3, [sp, #16]
 80134fc:	9307      	str	r3, [sp, #28]
 80134fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013502:	931a      	str	r3, [sp, #104]	@ 0x68
 8013504:	4654      	mov	r4, sl
 8013506:	2205      	movs	r2, #5
 8013508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801350c:	484e      	ldr	r0, [pc, #312]	@ (8013648 <_svfiprintf_r+0x1e4>)
 801350e:	f7ec fe7f 	bl	8000210 <memchr>
 8013512:	9a04      	ldr	r2, [sp, #16]
 8013514:	b9d8      	cbnz	r0, 801354e <_svfiprintf_r+0xea>
 8013516:	06d0      	lsls	r0, r2, #27
 8013518:	bf44      	itt	mi
 801351a:	2320      	movmi	r3, #32
 801351c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013520:	0711      	lsls	r1, r2, #28
 8013522:	bf44      	itt	mi
 8013524:	232b      	movmi	r3, #43	@ 0x2b
 8013526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801352a:	f89a 3000 	ldrb.w	r3, [sl]
 801352e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013530:	d015      	beq.n	801355e <_svfiprintf_r+0xfa>
 8013532:	9a07      	ldr	r2, [sp, #28]
 8013534:	4654      	mov	r4, sl
 8013536:	2000      	movs	r0, #0
 8013538:	f04f 0c0a 	mov.w	ip, #10
 801353c:	4621      	mov	r1, r4
 801353e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013542:	3b30      	subs	r3, #48	@ 0x30
 8013544:	2b09      	cmp	r3, #9
 8013546:	d94b      	bls.n	80135e0 <_svfiprintf_r+0x17c>
 8013548:	b1b0      	cbz	r0, 8013578 <_svfiprintf_r+0x114>
 801354a:	9207      	str	r2, [sp, #28]
 801354c:	e014      	b.n	8013578 <_svfiprintf_r+0x114>
 801354e:	eba0 0308 	sub.w	r3, r0, r8
 8013552:	fa09 f303 	lsl.w	r3, r9, r3
 8013556:	4313      	orrs	r3, r2
 8013558:	9304      	str	r3, [sp, #16]
 801355a:	46a2      	mov	sl, r4
 801355c:	e7d2      	b.n	8013504 <_svfiprintf_r+0xa0>
 801355e:	9b03      	ldr	r3, [sp, #12]
 8013560:	1d19      	adds	r1, r3, #4
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	9103      	str	r1, [sp, #12]
 8013566:	2b00      	cmp	r3, #0
 8013568:	bfbb      	ittet	lt
 801356a:	425b      	neglt	r3, r3
 801356c:	f042 0202 	orrlt.w	r2, r2, #2
 8013570:	9307      	strge	r3, [sp, #28]
 8013572:	9307      	strlt	r3, [sp, #28]
 8013574:	bfb8      	it	lt
 8013576:	9204      	strlt	r2, [sp, #16]
 8013578:	7823      	ldrb	r3, [r4, #0]
 801357a:	2b2e      	cmp	r3, #46	@ 0x2e
 801357c:	d10a      	bne.n	8013594 <_svfiprintf_r+0x130>
 801357e:	7863      	ldrb	r3, [r4, #1]
 8013580:	2b2a      	cmp	r3, #42	@ 0x2a
 8013582:	d132      	bne.n	80135ea <_svfiprintf_r+0x186>
 8013584:	9b03      	ldr	r3, [sp, #12]
 8013586:	1d1a      	adds	r2, r3, #4
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	9203      	str	r2, [sp, #12]
 801358c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013590:	3402      	adds	r4, #2
 8013592:	9305      	str	r3, [sp, #20]
 8013594:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013658 <_svfiprintf_r+0x1f4>
 8013598:	7821      	ldrb	r1, [r4, #0]
 801359a:	2203      	movs	r2, #3
 801359c:	4650      	mov	r0, sl
 801359e:	f7ec fe37 	bl	8000210 <memchr>
 80135a2:	b138      	cbz	r0, 80135b4 <_svfiprintf_r+0x150>
 80135a4:	9b04      	ldr	r3, [sp, #16]
 80135a6:	eba0 000a 	sub.w	r0, r0, sl
 80135aa:	2240      	movs	r2, #64	@ 0x40
 80135ac:	4082      	lsls	r2, r0
 80135ae:	4313      	orrs	r3, r2
 80135b0:	3401      	adds	r4, #1
 80135b2:	9304      	str	r3, [sp, #16]
 80135b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135b8:	4824      	ldr	r0, [pc, #144]	@ (801364c <_svfiprintf_r+0x1e8>)
 80135ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80135be:	2206      	movs	r2, #6
 80135c0:	f7ec fe26 	bl	8000210 <memchr>
 80135c4:	2800      	cmp	r0, #0
 80135c6:	d036      	beq.n	8013636 <_svfiprintf_r+0x1d2>
 80135c8:	4b21      	ldr	r3, [pc, #132]	@ (8013650 <_svfiprintf_r+0x1ec>)
 80135ca:	bb1b      	cbnz	r3, 8013614 <_svfiprintf_r+0x1b0>
 80135cc:	9b03      	ldr	r3, [sp, #12]
 80135ce:	3307      	adds	r3, #7
 80135d0:	f023 0307 	bic.w	r3, r3, #7
 80135d4:	3308      	adds	r3, #8
 80135d6:	9303      	str	r3, [sp, #12]
 80135d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135da:	4433      	add	r3, r6
 80135dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80135de:	e76a      	b.n	80134b6 <_svfiprintf_r+0x52>
 80135e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80135e4:	460c      	mov	r4, r1
 80135e6:	2001      	movs	r0, #1
 80135e8:	e7a8      	b.n	801353c <_svfiprintf_r+0xd8>
 80135ea:	2300      	movs	r3, #0
 80135ec:	3401      	adds	r4, #1
 80135ee:	9305      	str	r3, [sp, #20]
 80135f0:	4619      	mov	r1, r3
 80135f2:	f04f 0c0a 	mov.w	ip, #10
 80135f6:	4620      	mov	r0, r4
 80135f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135fc:	3a30      	subs	r2, #48	@ 0x30
 80135fe:	2a09      	cmp	r2, #9
 8013600:	d903      	bls.n	801360a <_svfiprintf_r+0x1a6>
 8013602:	2b00      	cmp	r3, #0
 8013604:	d0c6      	beq.n	8013594 <_svfiprintf_r+0x130>
 8013606:	9105      	str	r1, [sp, #20]
 8013608:	e7c4      	b.n	8013594 <_svfiprintf_r+0x130>
 801360a:	fb0c 2101 	mla	r1, ip, r1, r2
 801360e:	4604      	mov	r4, r0
 8013610:	2301      	movs	r3, #1
 8013612:	e7f0      	b.n	80135f6 <_svfiprintf_r+0x192>
 8013614:	ab03      	add	r3, sp, #12
 8013616:	9300      	str	r3, [sp, #0]
 8013618:	462a      	mov	r2, r5
 801361a:	4b0e      	ldr	r3, [pc, #56]	@ (8013654 <_svfiprintf_r+0x1f0>)
 801361c:	a904      	add	r1, sp, #16
 801361e:	4638      	mov	r0, r7
 8013620:	f7fc fd08 	bl	8010034 <_printf_float>
 8013624:	1c42      	adds	r2, r0, #1
 8013626:	4606      	mov	r6, r0
 8013628:	d1d6      	bne.n	80135d8 <_svfiprintf_r+0x174>
 801362a:	89ab      	ldrh	r3, [r5, #12]
 801362c:	065b      	lsls	r3, r3, #25
 801362e:	f53f af2d 	bmi.w	801348c <_svfiprintf_r+0x28>
 8013632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013634:	e72c      	b.n	8013490 <_svfiprintf_r+0x2c>
 8013636:	ab03      	add	r3, sp, #12
 8013638:	9300      	str	r3, [sp, #0]
 801363a:	462a      	mov	r2, r5
 801363c:	4b05      	ldr	r3, [pc, #20]	@ (8013654 <_svfiprintf_r+0x1f0>)
 801363e:	a904      	add	r1, sp, #16
 8013640:	4638      	mov	r0, r7
 8013642:	f7fc ff8f 	bl	8010564 <_printf_i>
 8013646:	e7ed      	b.n	8013624 <_svfiprintf_r+0x1c0>
 8013648:	08014ba1 	.word	0x08014ba1
 801364c:	08014bab 	.word	0x08014bab
 8013650:	08010035 	.word	0x08010035
 8013654:	080133ad 	.word	0x080133ad
 8013658:	08014ba7 	.word	0x08014ba7

0801365c <__sflush_r>:
 801365c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013664:	0716      	lsls	r6, r2, #28
 8013666:	4605      	mov	r5, r0
 8013668:	460c      	mov	r4, r1
 801366a:	d454      	bmi.n	8013716 <__sflush_r+0xba>
 801366c:	684b      	ldr	r3, [r1, #4]
 801366e:	2b00      	cmp	r3, #0
 8013670:	dc02      	bgt.n	8013678 <__sflush_r+0x1c>
 8013672:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013674:	2b00      	cmp	r3, #0
 8013676:	dd48      	ble.n	801370a <__sflush_r+0xae>
 8013678:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801367a:	2e00      	cmp	r6, #0
 801367c:	d045      	beq.n	801370a <__sflush_r+0xae>
 801367e:	2300      	movs	r3, #0
 8013680:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013684:	682f      	ldr	r7, [r5, #0]
 8013686:	6a21      	ldr	r1, [r4, #32]
 8013688:	602b      	str	r3, [r5, #0]
 801368a:	d030      	beq.n	80136ee <__sflush_r+0x92>
 801368c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801368e:	89a3      	ldrh	r3, [r4, #12]
 8013690:	0759      	lsls	r1, r3, #29
 8013692:	d505      	bpl.n	80136a0 <__sflush_r+0x44>
 8013694:	6863      	ldr	r3, [r4, #4]
 8013696:	1ad2      	subs	r2, r2, r3
 8013698:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801369a:	b10b      	cbz	r3, 80136a0 <__sflush_r+0x44>
 801369c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801369e:	1ad2      	subs	r2, r2, r3
 80136a0:	2300      	movs	r3, #0
 80136a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80136a4:	6a21      	ldr	r1, [r4, #32]
 80136a6:	4628      	mov	r0, r5
 80136a8:	47b0      	blx	r6
 80136aa:	1c43      	adds	r3, r0, #1
 80136ac:	89a3      	ldrh	r3, [r4, #12]
 80136ae:	d106      	bne.n	80136be <__sflush_r+0x62>
 80136b0:	6829      	ldr	r1, [r5, #0]
 80136b2:	291d      	cmp	r1, #29
 80136b4:	d82b      	bhi.n	801370e <__sflush_r+0xb2>
 80136b6:	4a2a      	ldr	r2, [pc, #168]	@ (8013760 <__sflush_r+0x104>)
 80136b8:	410a      	asrs	r2, r1
 80136ba:	07d6      	lsls	r6, r2, #31
 80136bc:	d427      	bmi.n	801370e <__sflush_r+0xb2>
 80136be:	2200      	movs	r2, #0
 80136c0:	6062      	str	r2, [r4, #4]
 80136c2:	04d9      	lsls	r1, r3, #19
 80136c4:	6922      	ldr	r2, [r4, #16]
 80136c6:	6022      	str	r2, [r4, #0]
 80136c8:	d504      	bpl.n	80136d4 <__sflush_r+0x78>
 80136ca:	1c42      	adds	r2, r0, #1
 80136cc:	d101      	bne.n	80136d2 <__sflush_r+0x76>
 80136ce:	682b      	ldr	r3, [r5, #0]
 80136d0:	b903      	cbnz	r3, 80136d4 <__sflush_r+0x78>
 80136d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80136d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80136d6:	602f      	str	r7, [r5, #0]
 80136d8:	b1b9      	cbz	r1, 801370a <__sflush_r+0xae>
 80136da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80136de:	4299      	cmp	r1, r3
 80136e0:	d002      	beq.n	80136e8 <__sflush_r+0x8c>
 80136e2:	4628      	mov	r0, r5
 80136e4:	f7fe fae0 	bl	8011ca8 <_free_r>
 80136e8:	2300      	movs	r3, #0
 80136ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80136ec:	e00d      	b.n	801370a <__sflush_r+0xae>
 80136ee:	2301      	movs	r3, #1
 80136f0:	4628      	mov	r0, r5
 80136f2:	47b0      	blx	r6
 80136f4:	4602      	mov	r2, r0
 80136f6:	1c50      	adds	r0, r2, #1
 80136f8:	d1c9      	bne.n	801368e <__sflush_r+0x32>
 80136fa:	682b      	ldr	r3, [r5, #0]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d0c6      	beq.n	801368e <__sflush_r+0x32>
 8013700:	2b1d      	cmp	r3, #29
 8013702:	d001      	beq.n	8013708 <__sflush_r+0xac>
 8013704:	2b16      	cmp	r3, #22
 8013706:	d11e      	bne.n	8013746 <__sflush_r+0xea>
 8013708:	602f      	str	r7, [r5, #0]
 801370a:	2000      	movs	r0, #0
 801370c:	e022      	b.n	8013754 <__sflush_r+0xf8>
 801370e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013712:	b21b      	sxth	r3, r3
 8013714:	e01b      	b.n	801374e <__sflush_r+0xf2>
 8013716:	690f      	ldr	r7, [r1, #16]
 8013718:	2f00      	cmp	r7, #0
 801371a:	d0f6      	beq.n	801370a <__sflush_r+0xae>
 801371c:	0793      	lsls	r3, r2, #30
 801371e:	680e      	ldr	r6, [r1, #0]
 8013720:	bf08      	it	eq
 8013722:	694b      	ldreq	r3, [r1, #20]
 8013724:	600f      	str	r7, [r1, #0]
 8013726:	bf18      	it	ne
 8013728:	2300      	movne	r3, #0
 801372a:	eba6 0807 	sub.w	r8, r6, r7
 801372e:	608b      	str	r3, [r1, #8]
 8013730:	f1b8 0f00 	cmp.w	r8, #0
 8013734:	dde9      	ble.n	801370a <__sflush_r+0xae>
 8013736:	6a21      	ldr	r1, [r4, #32]
 8013738:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801373a:	4643      	mov	r3, r8
 801373c:	463a      	mov	r2, r7
 801373e:	4628      	mov	r0, r5
 8013740:	47b0      	blx	r6
 8013742:	2800      	cmp	r0, #0
 8013744:	dc08      	bgt.n	8013758 <__sflush_r+0xfc>
 8013746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801374a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801374e:	81a3      	strh	r3, [r4, #12]
 8013750:	f04f 30ff 	mov.w	r0, #4294967295
 8013754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013758:	4407      	add	r7, r0
 801375a:	eba8 0800 	sub.w	r8, r8, r0
 801375e:	e7e7      	b.n	8013730 <__sflush_r+0xd4>
 8013760:	dfbffffe 	.word	0xdfbffffe

08013764 <_fflush_r>:
 8013764:	b538      	push	{r3, r4, r5, lr}
 8013766:	690b      	ldr	r3, [r1, #16]
 8013768:	4605      	mov	r5, r0
 801376a:	460c      	mov	r4, r1
 801376c:	b913      	cbnz	r3, 8013774 <_fflush_r+0x10>
 801376e:	2500      	movs	r5, #0
 8013770:	4628      	mov	r0, r5
 8013772:	bd38      	pop	{r3, r4, r5, pc}
 8013774:	b118      	cbz	r0, 801377e <_fflush_r+0x1a>
 8013776:	6a03      	ldr	r3, [r0, #32]
 8013778:	b90b      	cbnz	r3, 801377e <_fflush_r+0x1a>
 801377a:	f7fd fab3 	bl	8010ce4 <__sinit>
 801377e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d0f3      	beq.n	801376e <_fflush_r+0xa>
 8013786:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013788:	07d0      	lsls	r0, r2, #31
 801378a:	d404      	bmi.n	8013796 <_fflush_r+0x32>
 801378c:	0599      	lsls	r1, r3, #22
 801378e:	d402      	bmi.n	8013796 <_fflush_r+0x32>
 8013790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013792:	f7fd fc24 	bl	8010fde <__retarget_lock_acquire_recursive>
 8013796:	4628      	mov	r0, r5
 8013798:	4621      	mov	r1, r4
 801379a:	f7ff ff5f 	bl	801365c <__sflush_r>
 801379e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80137a0:	07da      	lsls	r2, r3, #31
 80137a2:	4605      	mov	r5, r0
 80137a4:	d4e4      	bmi.n	8013770 <_fflush_r+0xc>
 80137a6:	89a3      	ldrh	r3, [r4, #12]
 80137a8:	059b      	lsls	r3, r3, #22
 80137aa:	d4e1      	bmi.n	8013770 <_fflush_r+0xc>
 80137ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80137ae:	f7fd fc17 	bl	8010fe0 <__retarget_lock_release_recursive>
 80137b2:	e7dd      	b.n	8013770 <_fflush_r+0xc>

080137b4 <memmove>:
 80137b4:	4288      	cmp	r0, r1
 80137b6:	b510      	push	{r4, lr}
 80137b8:	eb01 0402 	add.w	r4, r1, r2
 80137bc:	d902      	bls.n	80137c4 <memmove+0x10>
 80137be:	4284      	cmp	r4, r0
 80137c0:	4623      	mov	r3, r4
 80137c2:	d807      	bhi.n	80137d4 <memmove+0x20>
 80137c4:	1e43      	subs	r3, r0, #1
 80137c6:	42a1      	cmp	r1, r4
 80137c8:	d008      	beq.n	80137dc <memmove+0x28>
 80137ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80137d2:	e7f8      	b.n	80137c6 <memmove+0x12>
 80137d4:	4402      	add	r2, r0
 80137d6:	4601      	mov	r1, r0
 80137d8:	428a      	cmp	r2, r1
 80137da:	d100      	bne.n	80137de <memmove+0x2a>
 80137dc:	bd10      	pop	{r4, pc}
 80137de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80137e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80137e6:	e7f7      	b.n	80137d8 <memmove+0x24>

080137e8 <strncmp>:
 80137e8:	b510      	push	{r4, lr}
 80137ea:	b16a      	cbz	r2, 8013808 <strncmp+0x20>
 80137ec:	3901      	subs	r1, #1
 80137ee:	1884      	adds	r4, r0, r2
 80137f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d103      	bne.n	8013804 <strncmp+0x1c>
 80137fc:	42a0      	cmp	r0, r4
 80137fe:	d001      	beq.n	8013804 <strncmp+0x1c>
 8013800:	2a00      	cmp	r2, #0
 8013802:	d1f5      	bne.n	80137f0 <strncmp+0x8>
 8013804:	1ad0      	subs	r0, r2, r3
 8013806:	bd10      	pop	{r4, pc}
 8013808:	4610      	mov	r0, r2
 801380a:	e7fc      	b.n	8013806 <strncmp+0x1e>
 801380c:	0000      	movs	r0, r0
	...

08013810 <nan>:
 8013810:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013818 <nan+0x8>
 8013814:	4770      	bx	lr
 8013816:	bf00      	nop
 8013818:	00000000 	.word	0x00000000
 801381c:	7ff80000 	.word	0x7ff80000

08013820 <__assert_func>:
 8013820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013822:	4614      	mov	r4, r2
 8013824:	461a      	mov	r2, r3
 8013826:	4b09      	ldr	r3, [pc, #36]	@ (801384c <__assert_func+0x2c>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	4605      	mov	r5, r0
 801382c:	68d8      	ldr	r0, [r3, #12]
 801382e:	b954      	cbnz	r4, 8013846 <__assert_func+0x26>
 8013830:	4b07      	ldr	r3, [pc, #28]	@ (8013850 <__assert_func+0x30>)
 8013832:	461c      	mov	r4, r3
 8013834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013838:	9100      	str	r1, [sp, #0]
 801383a:	462b      	mov	r3, r5
 801383c:	4905      	ldr	r1, [pc, #20]	@ (8013854 <__assert_func+0x34>)
 801383e:	f000 fba7 	bl	8013f90 <fiprintf>
 8013842:	f000 fbb7 	bl	8013fb4 <abort>
 8013846:	4b04      	ldr	r3, [pc, #16]	@ (8013858 <__assert_func+0x38>)
 8013848:	e7f4      	b.n	8013834 <__assert_func+0x14>
 801384a:	bf00      	nop
 801384c:	20000128 	.word	0x20000128
 8013850:	08014bf5 	.word	0x08014bf5
 8013854:	08014bc7 	.word	0x08014bc7
 8013858:	08014bba 	.word	0x08014bba

0801385c <_calloc_r>:
 801385c:	b570      	push	{r4, r5, r6, lr}
 801385e:	fba1 5402 	umull	r5, r4, r1, r2
 8013862:	b93c      	cbnz	r4, 8013874 <_calloc_r+0x18>
 8013864:	4629      	mov	r1, r5
 8013866:	f7fc fab9 	bl	800fddc <_malloc_r>
 801386a:	4606      	mov	r6, r0
 801386c:	b928      	cbnz	r0, 801387a <_calloc_r+0x1e>
 801386e:	2600      	movs	r6, #0
 8013870:	4630      	mov	r0, r6
 8013872:	bd70      	pop	{r4, r5, r6, pc}
 8013874:	220c      	movs	r2, #12
 8013876:	6002      	str	r2, [r0, #0]
 8013878:	e7f9      	b.n	801386e <_calloc_r+0x12>
 801387a:	462a      	mov	r2, r5
 801387c:	4621      	mov	r1, r4
 801387e:	f7fd faca 	bl	8010e16 <memset>
 8013882:	e7f5      	b.n	8013870 <_calloc_r+0x14>

08013884 <rshift>:
 8013884:	6903      	ldr	r3, [r0, #16]
 8013886:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801388a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801388e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013892:	f100 0414 	add.w	r4, r0, #20
 8013896:	dd45      	ble.n	8013924 <rshift+0xa0>
 8013898:	f011 011f 	ands.w	r1, r1, #31
 801389c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80138a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80138a4:	d10c      	bne.n	80138c0 <rshift+0x3c>
 80138a6:	f100 0710 	add.w	r7, r0, #16
 80138aa:	4629      	mov	r1, r5
 80138ac:	42b1      	cmp	r1, r6
 80138ae:	d334      	bcc.n	801391a <rshift+0x96>
 80138b0:	1a9b      	subs	r3, r3, r2
 80138b2:	009b      	lsls	r3, r3, #2
 80138b4:	1eea      	subs	r2, r5, #3
 80138b6:	4296      	cmp	r6, r2
 80138b8:	bf38      	it	cc
 80138ba:	2300      	movcc	r3, #0
 80138bc:	4423      	add	r3, r4
 80138be:	e015      	b.n	80138ec <rshift+0x68>
 80138c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80138c4:	f1c1 0820 	rsb	r8, r1, #32
 80138c8:	40cf      	lsrs	r7, r1
 80138ca:	f105 0e04 	add.w	lr, r5, #4
 80138ce:	46a1      	mov	r9, r4
 80138d0:	4576      	cmp	r6, lr
 80138d2:	46f4      	mov	ip, lr
 80138d4:	d815      	bhi.n	8013902 <rshift+0x7e>
 80138d6:	1a9a      	subs	r2, r3, r2
 80138d8:	0092      	lsls	r2, r2, #2
 80138da:	3a04      	subs	r2, #4
 80138dc:	3501      	adds	r5, #1
 80138de:	42ae      	cmp	r6, r5
 80138e0:	bf38      	it	cc
 80138e2:	2200      	movcc	r2, #0
 80138e4:	18a3      	adds	r3, r4, r2
 80138e6:	50a7      	str	r7, [r4, r2]
 80138e8:	b107      	cbz	r7, 80138ec <rshift+0x68>
 80138ea:	3304      	adds	r3, #4
 80138ec:	1b1a      	subs	r2, r3, r4
 80138ee:	42a3      	cmp	r3, r4
 80138f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80138f4:	bf08      	it	eq
 80138f6:	2300      	moveq	r3, #0
 80138f8:	6102      	str	r2, [r0, #16]
 80138fa:	bf08      	it	eq
 80138fc:	6143      	streq	r3, [r0, #20]
 80138fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013902:	f8dc c000 	ldr.w	ip, [ip]
 8013906:	fa0c fc08 	lsl.w	ip, ip, r8
 801390a:	ea4c 0707 	orr.w	r7, ip, r7
 801390e:	f849 7b04 	str.w	r7, [r9], #4
 8013912:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013916:	40cf      	lsrs	r7, r1
 8013918:	e7da      	b.n	80138d0 <rshift+0x4c>
 801391a:	f851 cb04 	ldr.w	ip, [r1], #4
 801391e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013922:	e7c3      	b.n	80138ac <rshift+0x28>
 8013924:	4623      	mov	r3, r4
 8013926:	e7e1      	b.n	80138ec <rshift+0x68>

08013928 <__hexdig_fun>:
 8013928:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801392c:	2b09      	cmp	r3, #9
 801392e:	d802      	bhi.n	8013936 <__hexdig_fun+0xe>
 8013930:	3820      	subs	r0, #32
 8013932:	b2c0      	uxtb	r0, r0
 8013934:	4770      	bx	lr
 8013936:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801393a:	2b05      	cmp	r3, #5
 801393c:	d801      	bhi.n	8013942 <__hexdig_fun+0x1a>
 801393e:	3847      	subs	r0, #71	@ 0x47
 8013940:	e7f7      	b.n	8013932 <__hexdig_fun+0xa>
 8013942:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013946:	2b05      	cmp	r3, #5
 8013948:	d801      	bhi.n	801394e <__hexdig_fun+0x26>
 801394a:	3827      	subs	r0, #39	@ 0x27
 801394c:	e7f1      	b.n	8013932 <__hexdig_fun+0xa>
 801394e:	2000      	movs	r0, #0
 8013950:	4770      	bx	lr
	...

08013954 <__gethex>:
 8013954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013958:	b085      	sub	sp, #20
 801395a:	468a      	mov	sl, r1
 801395c:	9302      	str	r3, [sp, #8]
 801395e:	680b      	ldr	r3, [r1, #0]
 8013960:	9001      	str	r0, [sp, #4]
 8013962:	4690      	mov	r8, r2
 8013964:	1c9c      	adds	r4, r3, #2
 8013966:	46a1      	mov	r9, r4
 8013968:	f814 0b01 	ldrb.w	r0, [r4], #1
 801396c:	2830      	cmp	r0, #48	@ 0x30
 801396e:	d0fa      	beq.n	8013966 <__gethex+0x12>
 8013970:	eba9 0303 	sub.w	r3, r9, r3
 8013974:	f1a3 0b02 	sub.w	fp, r3, #2
 8013978:	f7ff ffd6 	bl	8013928 <__hexdig_fun>
 801397c:	4605      	mov	r5, r0
 801397e:	2800      	cmp	r0, #0
 8013980:	d168      	bne.n	8013a54 <__gethex+0x100>
 8013982:	49a0      	ldr	r1, [pc, #640]	@ (8013c04 <__gethex+0x2b0>)
 8013984:	2201      	movs	r2, #1
 8013986:	4648      	mov	r0, r9
 8013988:	f7ff ff2e 	bl	80137e8 <strncmp>
 801398c:	4607      	mov	r7, r0
 801398e:	2800      	cmp	r0, #0
 8013990:	d167      	bne.n	8013a62 <__gethex+0x10e>
 8013992:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013996:	4626      	mov	r6, r4
 8013998:	f7ff ffc6 	bl	8013928 <__hexdig_fun>
 801399c:	2800      	cmp	r0, #0
 801399e:	d062      	beq.n	8013a66 <__gethex+0x112>
 80139a0:	4623      	mov	r3, r4
 80139a2:	7818      	ldrb	r0, [r3, #0]
 80139a4:	2830      	cmp	r0, #48	@ 0x30
 80139a6:	4699      	mov	r9, r3
 80139a8:	f103 0301 	add.w	r3, r3, #1
 80139ac:	d0f9      	beq.n	80139a2 <__gethex+0x4e>
 80139ae:	f7ff ffbb 	bl	8013928 <__hexdig_fun>
 80139b2:	fab0 f580 	clz	r5, r0
 80139b6:	096d      	lsrs	r5, r5, #5
 80139b8:	f04f 0b01 	mov.w	fp, #1
 80139bc:	464a      	mov	r2, r9
 80139be:	4616      	mov	r6, r2
 80139c0:	3201      	adds	r2, #1
 80139c2:	7830      	ldrb	r0, [r6, #0]
 80139c4:	f7ff ffb0 	bl	8013928 <__hexdig_fun>
 80139c8:	2800      	cmp	r0, #0
 80139ca:	d1f8      	bne.n	80139be <__gethex+0x6a>
 80139cc:	498d      	ldr	r1, [pc, #564]	@ (8013c04 <__gethex+0x2b0>)
 80139ce:	2201      	movs	r2, #1
 80139d0:	4630      	mov	r0, r6
 80139d2:	f7ff ff09 	bl	80137e8 <strncmp>
 80139d6:	2800      	cmp	r0, #0
 80139d8:	d13f      	bne.n	8013a5a <__gethex+0x106>
 80139da:	b944      	cbnz	r4, 80139ee <__gethex+0x9a>
 80139dc:	1c74      	adds	r4, r6, #1
 80139de:	4622      	mov	r2, r4
 80139e0:	4616      	mov	r6, r2
 80139e2:	3201      	adds	r2, #1
 80139e4:	7830      	ldrb	r0, [r6, #0]
 80139e6:	f7ff ff9f 	bl	8013928 <__hexdig_fun>
 80139ea:	2800      	cmp	r0, #0
 80139ec:	d1f8      	bne.n	80139e0 <__gethex+0x8c>
 80139ee:	1ba4      	subs	r4, r4, r6
 80139f0:	00a7      	lsls	r7, r4, #2
 80139f2:	7833      	ldrb	r3, [r6, #0]
 80139f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80139f8:	2b50      	cmp	r3, #80	@ 0x50
 80139fa:	d13e      	bne.n	8013a7a <__gethex+0x126>
 80139fc:	7873      	ldrb	r3, [r6, #1]
 80139fe:	2b2b      	cmp	r3, #43	@ 0x2b
 8013a00:	d033      	beq.n	8013a6a <__gethex+0x116>
 8013a02:	2b2d      	cmp	r3, #45	@ 0x2d
 8013a04:	d034      	beq.n	8013a70 <__gethex+0x11c>
 8013a06:	1c71      	adds	r1, r6, #1
 8013a08:	2400      	movs	r4, #0
 8013a0a:	7808      	ldrb	r0, [r1, #0]
 8013a0c:	f7ff ff8c 	bl	8013928 <__hexdig_fun>
 8013a10:	1e43      	subs	r3, r0, #1
 8013a12:	b2db      	uxtb	r3, r3
 8013a14:	2b18      	cmp	r3, #24
 8013a16:	d830      	bhi.n	8013a7a <__gethex+0x126>
 8013a18:	f1a0 0210 	sub.w	r2, r0, #16
 8013a1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013a20:	f7ff ff82 	bl	8013928 <__hexdig_fun>
 8013a24:	f100 3cff 	add.w	ip, r0, #4294967295
 8013a28:	fa5f fc8c 	uxtb.w	ip, ip
 8013a2c:	f1bc 0f18 	cmp.w	ip, #24
 8013a30:	f04f 030a 	mov.w	r3, #10
 8013a34:	d91e      	bls.n	8013a74 <__gethex+0x120>
 8013a36:	b104      	cbz	r4, 8013a3a <__gethex+0xe6>
 8013a38:	4252      	negs	r2, r2
 8013a3a:	4417      	add	r7, r2
 8013a3c:	f8ca 1000 	str.w	r1, [sl]
 8013a40:	b1ed      	cbz	r5, 8013a7e <__gethex+0x12a>
 8013a42:	f1bb 0f00 	cmp.w	fp, #0
 8013a46:	bf0c      	ite	eq
 8013a48:	2506      	moveq	r5, #6
 8013a4a:	2500      	movne	r5, #0
 8013a4c:	4628      	mov	r0, r5
 8013a4e:	b005      	add	sp, #20
 8013a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a54:	2500      	movs	r5, #0
 8013a56:	462c      	mov	r4, r5
 8013a58:	e7b0      	b.n	80139bc <__gethex+0x68>
 8013a5a:	2c00      	cmp	r4, #0
 8013a5c:	d1c7      	bne.n	80139ee <__gethex+0x9a>
 8013a5e:	4627      	mov	r7, r4
 8013a60:	e7c7      	b.n	80139f2 <__gethex+0x9e>
 8013a62:	464e      	mov	r6, r9
 8013a64:	462f      	mov	r7, r5
 8013a66:	2501      	movs	r5, #1
 8013a68:	e7c3      	b.n	80139f2 <__gethex+0x9e>
 8013a6a:	2400      	movs	r4, #0
 8013a6c:	1cb1      	adds	r1, r6, #2
 8013a6e:	e7cc      	b.n	8013a0a <__gethex+0xb6>
 8013a70:	2401      	movs	r4, #1
 8013a72:	e7fb      	b.n	8013a6c <__gethex+0x118>
 8013a74:	fb03 0002 	mla	r0, r3, r2, r0
 8013a78:	e7ce      	b.n	8013a18 <__gethex+0xc4>
 8013a7a:	4631      	mov	r1, r6
 8013a7c:	e7de      	b.n	8013a3c <__gethex+0xe8>
 8013a7e:	eba6 0309 	sub.w	r3, r6, r9
 8013a82:	3b01      	subs	r3, #1
 8013a84:	4629      	mov	r1, r5
 8013a86:	2b07      	cmp	r3, #7
 8013a88:	dc0a      	bgt.n	8013aa0 <__gethex+0x14c>
 8013a8a:	9801      	ldr	r0, [sp, #4]
 8013a8c:	f7fe f956 	bl	8011d3c <_Balloc>
 8013a90:	4604      	mov	r4, r0
 8013a92:	b940      	cbnz	r0, 8013aa6 <__gethex+0x152>
 8013a94:	4b5c      	ldr	r3, [pc, #368]	@ (8013c08 <__gethex+0x2b4>)
 8013a96:	4602      	mov	r2, r0
 8013a98:	21e4      	movs	r1, #228	@ 0xe4
 8013a9a:	485c      	ldr	r0, [pc, #368]	@ (8013c0c <__gethex+0x2b8>)
 8013a9c:	f7ff fec0 	bl	8013820 <__assert_func>
 8013aa0:	3101      	adds	r1, #1
 8013aa2:	105b      	asrs	r3, r3, #1
 8013aa4:	e7ef      	b.n	8013a86 <__gethex+0x132>
 8013aa6:	f100 0a14 	add.w	sl, r0, #20
 8013aaa:	2300      	movs	r3, #0
 8013aac:	4655      	mov	r5, sl
 8013aae:	469b      	mov	fp, r3
 8013ab0:	45b1      	cmp	r9, r6
 8013ab2:	d337      	bcc.n	8013b24 <__gethex+0x1d0>
 8013ab4:	f845 bb04 	str.w	fp, [r5], #4
 8013ab8:	eba5 050a 	sub.w	r5, r5, sl
 8013abc:	10ad      	asrs	r5, r5, #2
 8013abe:	6125      	str	r5, [r4, #16]
 8013ac0:	4658      	mov	r0, fp
 8013ac2:	f7fe fa2d 	bl	8011f20 <__hi0bits>
 8013ac6:	016d      	lsls	r5, r5, #5
 8013ac8:	f8d8 6000 	ldr.w	r6, [r8]
 8013acc:	1a2d      	subs	r5, r5, r0
 8013ace:	42b5      	cmp	r5, r6
 8013ad0:	dd54      	ble.n	8013b7c <__gethex+0x228>
 8013ad2:	1bad      	subs	r5, r5, r6
 8013ad4:	4629      	mov	r1, r5
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	f7fe fdc1 	bl	801265e <__any_on>
 8013adc:	4681      	mov	r9, r0
 8013ade:	b178      	cbz	r0, 8013b00 <__gethex+0x1ac>
 8013ae0:	1e6b      	subs	r3, r5, #1
 8013ae2:	1159      	asrs	r1, r3, #5
 8013ae4:	f003 021f 	and.w	r2, r3, #31
 8013ae8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013aec:	f04f 0901 	mov.w	r9, #1
 8013af0:	fa09 f202 	lsl.w	r2, r9, r2
 8013af4:	420a      	tst	r2, r1
 8013af6:	d003      	beq.n	8013b00 <__gethex+0x1ac>
 8013af8:	454b      	cmp	r3, r9
 8013afa:	dc36      	bgt.n	8013b6a <__gethex+0x216>
 8013afc:	f04f 0902 	mov.w	r9, #2
 8013b00:	4629      	mov	r1, r5
 8013b02:	4620      	mov	r0, r4
 8013b04:	f7ff febe 	bl	8013884 <rshift>
 8013b08:	442f      	add	r7, r5
 8013b0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013b0e:	42bb      	cmp	r3, r7
 8013b10:	da42      	bge.n	8013b98 <__gethex+0x244>
 8013b12:	9801      	ldr	r0, [sp, #4]
 8013b14:	4621      	mov	r1, r4
 8013b16:	f7fe f951 	bl	8011dbc <_Bfree>
 8013b1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	6013      	str	r3, [r2, #0]
 8013b20:	25a3      	movs	r5, #163	@ 0xa3
 8013b22:	e793      	b.n	8013a4c <__gethex+0xf8>
 8013b24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013b28:	2a2e      	cmp	r2, #46	@ 0x2e
 8013b2a:	d012      	beq.n	8013b52 <__gethex+0x1fe>
 8013b2c:	2b20      	cmp	r3, #32
 8013b2e:	d104      	bne.n	8013b3a <__gethex+0x1e6>
 8013b30:	f845 bb04 	str.w	fp, [r5], #4
 8013b34:	f04f 0b00 	mov.w	fp, #0
 8013b38:	465b      	mov	r3, fp
 8013b3a:	7830      	ldrb	r0, [r6, #0]
 8013b3c:	9303      	str	r3, [sp, #12]
 8013b3e:	f7ff fef3 	bl	8013928 <__hexdig_fun>
 8013b42:	9b03      	ldr	r3, [sp, #12]
 8013b44:	f000 000f 	and.w	r0, r0, #15
 8013b48:	4098      	lsls	r0, r3
 8013b4a:	ea4b 0b00 	orr.w	fp, fp, r0
 8013b4e:	3304      	adds	r3, #4
 8013b50:	e7ae      	b.n	8013ab0 <__gethex+0x15c>
 8013b52:	45b1      	cmp	r9, r6
 8013b54:	d8ea      	bhi.n	8013b2c <__gethex+0x1d8>
 8013b56:	492b      	ldr	r1, [pc, #172]	@ (8013c04 <__gethex+0x2b0>)
 8013b58:	9303      	str	r3, [sp, #12]
 8013b5a:	2201      	movs	r2, #1
 8013b5c:	4630      	mov	r0, r6
 8013b5e:	f7ff fe43 	bl	80137e8 <strncmp>
 8013b62:	9b03      	ldr	r3, [sp, #12]
 8013b64:	2800      	cmp	r0, #0
 8013b66:	d1e1      	bne.n	8013b2c <__gethex+0x1d8>
 8013b68:	e7a2      	b.n	8013ab0 <__gethex+0x15c>
 8013b6a:	1ea9      	subs	r1, r5, #2
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	f7fe fd76 	bl	801265e <__any_on>
 8013b72:	2800      	cmp	r0, #0
 8013b74:	d0c2      	beq.n	8013afc <__gethex+0x1a8>
 8013b76:	f04f 0903 	mov.w	r9, #3
 8013b7a:	e7c1      	b.n	8013b00 <__gethex+0x1ac>
 8013b7c:	da09      	bge.n	8013b92 <__gethex+0x23e>
 8013b7e:	1b75      	subs	r5, r6, r5
 8013b80:	4621      	mov	r1, r4
 8013b82:	9801      	ldr	r0, [sp, #4]
 8013b84:	462a      	mov	r2, r5
 8013b86:	f7fe fb31 	bl	80121ec <__lshift>
 8013b8a:	1b7f      	subs	r7, r7, r5
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	f100 0a14 	add.w	sl, r0, #20
 8013b92:	f04f 0900 	mov.w	r9, #0
 8013b96:	e7b8      	b.n	8013b0a <__gethex+0x1b6>
 8013b98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013b9c:	42bd      	cmp	r5, r7
 8013b9e:	dd6f      	ble.n	8013c80 <__gethex+0x32c>
 8013ba0:	1bed      	subs	r5, r5, r7
 8013ba2:	42ae      	cmp	r6, r5
 8013ba4:	dc34      	bgt.n	8013c10 <__gethex+0x2bc>
 8013ba6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013baa:	2b02      	cmp	r3, #2
 8013bac:	d022      	beq.n	8013bf4 <__gethex+0x2a0>
 8013bae:	2b03      	cmp	r3, #3
 8013bb0:	d024      	beq.n	8013bfc <__gethex+0x2a8>
 8013bb2:	2b01      	cmp	r3, #1
 8013bb4:	d115      	bne.n	8013be2 <__gethex+0x28e>
 8013bb6:	42ae      	cmp	r6, r5
 8013bb8:	d113      	bne.n	8013be2 <__gethex+0x28e>
 8013bba:	2e01      	cmp	r6, #1
 8013bbc:	d10b      	bne.n	8013bd6 <__gethex+0x282>
 8013bbe:	9a02      	ldr	r2, [sp, #8]
 8013bc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013bc4:	6013      	str	r3, [r2, #0]
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	6123      	str	r3, [r4, #16]
 8013bca:	f8ca 3000 	str.w	r3, [sl]
 8013bce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013bd0:	2562      	movs	r5, #98	@ 0x62
 8013bd2:	601c      	str	r4, [r3, #0]
 8013bd4:	e73a      	b.n	8013a4c <__gethex+0xf8>
 8013bd6:	1e71      	subs	r1, r6, #1
 8013bd8:	4620      	mov	r0, r4
 8013bda:	f7fe fd40 	bl	801265e <__any_on>
 8013bde:	2800      	cmp	r0, #0
 8013be0:	d1ed      	bne.n	8013bbe <__gethex+0x26a>
 8013be2:	9801      	ldr	r0, [sp, #4]
 8013be4:	4621      	mov	r1, r4
 8013be6:	f7fe f8e9 	bl	8011dbc <_Bfree>
 8013bea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013bec:	2300      	movs	r3, #0
 8013bee:	6013      	str	r3, [r2, #0]
 8013bf0:	2550      	movs	r5, #80	@ 0x50
 8013bf2:	e72b      	b.n	8013a4c <__gethex+0xf8>
 8013bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d1f3      	bne.n	8013be2 <__gethex+0x28e>
 8013bfa:	e7e0      	b.n	8013bbe <__gethex+0x26a>
 8013bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d1dd      	bne.n	8013bbe <__gethex+0x26a>
 8013c02:	e7ee      	b.n	8013be2 <__gethex+0x28e>
 8013c04:	08014a48 	.word	0x08014a48
 8013c08:	080148e1 	.word	0x080148e1
 8013c0c:	08014bf6 	.word	0x08014bf6
 8013c10:	1e6f      	subs	r7, r5, #1
 8013c12:	f1b9 0f00 	cmp.w	r9, #0
 8013c16:	d130      	bne.n	8013c7a <__gethex+0x326>
 8013c18:	b127      	cbz	r7, 8013c24 <__gethex+0x2d0>
 8013c1a:	4639      	mov	r1, r7
 8013c1c:	4620      	mov	r0, r4
 8013c1e:	f7fe fd1e 	bl	801265e <__any_on>
 8013c22:	4681      	mov	r9, r0
 8013c24:	117a      	asrs	r2, r7, #5
 8013c26:	2301      	movs	r3, #1
 8013c28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013c2c:	f007 071f 	and.w	r7, r7, #31
 8013c30:	40bb      	lsls	r3, r7
 8013c32:	4213      	tst	r3, r2
 8013c34:	4629      	mov	r1, r5
 8013c36:	4620      	mov	r0, r4
 8013c38:	bf18      	it	ne
 8013c3a:	f049 0902 	orrne.w	r9, r9, #2
 8013c3e:	f7ff fe21 	bl	8013884 <rshift>
 8013c42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013c46:	1b76      	subs	r6, r6, r5
 8013c48:	2502      	movs	r5, #2
 8013c4a:	f1b9 0f00 	cmp.w	r9, #0
 8013c4e:	d047      	beq.n	8013ce0 <__gethex+0x38c>
 8013c50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013c54:	2b02      	cmp	r3, #2
 8013c56:	d015      	beq.n	8013c84 <__gethex+0x330>
 8013c58:	2b03      	cmp	r3, #3
 8013c5a:	d017      	beq.n	8013c8c <__gethex+0x338>
 8013c5c:	2b01      	cmp	r3, #1
 8013c5e:	d109      	bne.n	8013c74 <__gethex+0x320>
 8013c60:	f019 0f02 	tst.w	r9, #2
 8013c64:	d006      	beq.n	8013c74 <__gethex+0x320>
 8013c66:	f8da 3000 	ldr.w	r3, [sl]
 8013c6a:	ea49 0903 	orr.w	r9, r9, r3
 8013c6e:	f019 0f01 	tst.w	r9, #1
 8013c72:	d10e      	bne.n	8013c92 <__gethex+0x33e>
 8013c74:	f045 0510 	orr.w	r5, r5, #16
 8013c78:	e032      	b.n	8013ce0 <__gethex+0x38c>
 8013c7a:	f04f 0901 	mov.w	r9, #1
 8013c7e:	e7d1      	b.n	8013c24 <__gethex+0x2d0>
 8013c80:	2501      	movs	r5, #1
 8013c82:	e7e2      	b.n	8013c4a <__gethex+0x2f6>
 8013c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c86:	f1c3 0301 	rsb	r3, r3, #1
 8013c8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d0f0      	beq.n	8013c74 <__gethex+0x320>
 8013c92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013c96:	f104 0314 	add.w	r3, r4, #20
 8013c9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013c9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013ca2:	f04f 0c00 	mov.w	ip, #0
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cac:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013cb0:	d01b      	beq.n	8013cea <__gethex+0x396>
 8013cb2:	3201      	adds	r2, #1
 8013cb4:	6002      	str	r2, [r0, #0]
 8013cb6:	2d02      	cmp	r5, #2
 8013cb8:	f104 0314 	add.w	r3, r4, #20
 8013cbc:	d13c      	bne.n	8013d38 <__gethex+0x3e4>
 8013cbe:	f8d8 2000 	ldr.w	r2, [r8]
 8013cc2:	3a01      	subs	r2, #1
 8013cc4:	42b2      	cmp	r2, r6
 8013cc6:	d109      	bne.n	8013cdc <__gethex+0x388>
 8013cc8:	1171      	asrs	r1, r6, #5
 8013cca:	2201      	movs	r2, #1
 8013ccc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013cd0:	f006 061f 	and.w	r6, r6, #31
 8013cd4:	fa02 f606 	lsl.w	r6, r2, r6
 8013cd8:	421e      	tst	r6, r3
 8013cda:	d13a      	bne.n	8013d52 <__gethex+0x3fe>
 8013cdc:	f045 0520 	orr.w	r5, r5, #32
 8013ce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ce2:	601c      	str	r4, [r3, #0]
 8013ce4:	9b02      	ldr	r3, [sp, #8]
 8013ce6:	601f      	str	r7, [r3, #0]
 8013ce8:	e6b0      	b.n	8013a4c <__gethex+0xf8>
 8013cea:	4299      	cmp	r1, r3
 8013cec:	f843 cc04 	str.w	ip, [r3, #-4]
 8013cf0:	d8d9      	bhi.n	8013ca6 <__gethex+0x352>
 8013cf2:	68a3      	ldr	r3, [r4, #8]
 8013cf4:	459b      	cmp	fp, r3
 8013cf6:	db17      	blt.n	8013d28 <__gethex+0x3d4>
 8013cf8:	6861      	ldr	r1, [r4, #4]
 8013cfa:	9801      	ldr	r0, [sp, #4]
 8013cfc:	3101      	adds	r1, #1
 8013cfe:	f7fe f81d 	bl	8011d3c <_Balloc>
 8013d02:	4681      	mov	r9, r0
 8013d04:	b918      	cbnz	r0, 8013d0e <__gethex+0x3ba>
 8013d06:	4b1a      	ldr	r3, [pc, #104]	@ (8013d70 <__gethex+0x41c>)
 8013d08:	4602      	mov	r2, r0
 8013d0a:	2184      	movs	r1, #132	@ 0x84
 8013d0c:	e6c5      	b.n	8013a9a <__gethex+0x146>
 8013d0e:	6922      	ldr	r2, [r4, #16]
 8013d10:	3202      	adds	r2, #2
 8013d12:	f104 010c 	add.w	r1, r4, #12
 8013d16:	0092      	lsls	r2, r2, #2
 8013d18:	300c      	adds	r0, #12
 8013d1a:	f7fd f962 	bl	8010fe2 <memcpy>
 8013d1e:	4621      	mov	r1, r4
 8013d20:	9801      	ldr	r0, [sp, #4]
 8013d22:	f7fe f84b 	bl	8011dbc <_Bfree>
 8013d26:	464c      	mov	r4, r9
 8013d28:	6923      	ldr	r3, [r4, #16]
 8013d2a:	1c5a      	adds	r2, r3, #1
 8013d2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013d30:	6122      	str	r2, [r4, #16]
 8013d32:	2201      	movs	r2, #1
 8013d34:	615a      	str	r2, [r3, #20]
 8013d36:	e7be      	b.n	8013cb6 <__gethex+0x362>
 8013d38:	6922      	ldr	r2, [r4, #16]
 8013d3a:	455a      	cmp	r2, fp
 8013d3c:	dd0b      	ble.n	8013d56 <__gethex+0x402>
 8013d3e:	2101      	movs	r1, #1
 8013d40:	4620      	mov	r0, r4
 8013d42:	f7ff fd9f 	bl	8013884 <rshift>
 8013d46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d4a:	3701      	adds	r7, #1
 8013d4c:	42bb      	cmp	r3, r7
 8013d4e:	f6ff aee0 	blt.w	8013b12 <__gethex+0x1be>
 8013d52:	2501      	movs	r5, #1
 8013d54:	e7c2      	b.n	8013cdc <__gethex+0x388>
 8013d56:	f016 061f 	ands.w	r6, r6, #31
 8013d5a:	d0fa      	beq.n	8013d52 <__gethex+0x3fe>
 8013d5c:	4453      	add	r3, sl
 8013d5e:	f1c6 0620 	rsb	r6, r6, #32
 8013d62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013d66:	f7fe f8db 	bl	8011f20 <__hi0bits>
 8013d6a:	42b0      	cmp	r0, r6
 8013d6c:	dbe7      	blt.n	8013d3e <__gethex+0x3ea>
 8013d6e:	e7f0      	b.n	8013d52 <__gethex+0x3fe>
 8013d70:	080148e1 	.word	0x080148e1

08013d74 <L_shift>:
 8013d74:	f1c2 0208 	rsb	r2, r2, #8
 8013d78:	0092      	lsls	r2, r2, #2
 8013d7a:	b570      	push	{r4, r5, r6, lr}
 8013d7c:	f1c2 0620 	rsb	r6, r2, #32
 8013d80:	6843      	ldr	r3, [r0, #4]
 8013d82:	6804      	ldr	r4, [r0, #0]
 8013d84:	fa03 f506 	lsl.w	r5, r3, r6
 8013d88:	432c      	orrs	r4, r5
 8013d8a:	40d3      	lsrs	r3, r2
 8013d8c:	6004      	str	r4, [r0, #0]
 8013d8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013d92:	4288      	cmp	r0, r1
 8013d94:	d3f4      	bcc.n	8013d80 <L_shift+0xc>
 8013d96:	bd70      	pop	{r4, r5, r6, pc}

08013d98 <__match>:
 8013d98:	b530      	push	{r4, r5, lr}
 8013d9a:	6803      	ldr	r3, [r0, #0]
 8013d9c:	3301      	adds	r3, #1
 8013d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013da2:	b914      	cbnz	r4, 8013daa <__match+0x12>
 8013da4:	6003      	str	r3, [r0, #0]
 8013da6:	2001      	movs	r0, #1
 8013da8:	bd30      	pop	{r4, r5, pc}
 8013daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013dae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013db2:	2d19      	cmp	r5, #25
 8013db4:	bf98      	it	ls
 8013db6:	3220      	addls	r2, #32
 8013db8:	42a2      	cmp	r2, r4
 8013dba:	d0f0      	beq.n	8013d9e <__match+0x6>
 8013dbc:	2000      	movs	r0, #0
 8013dbe:	e7f3      	b.n	8013da8 <__match+0x10>

08013dc0 <__hexnan>:
 8013dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dc4:	680b      	ldr	r3, [r1, #0]
 8013dc6:	6801      	ldr	r1, [r0, #0]
 8013dc8:	115e      	asrs	r6, r3, #5
 8013dca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013dce:	f013 031f 	ands.w	r3, r3, #31
 8013dd2:	b087      	sub	sp, #28
 8013dd4:	bf18      	it	ne
 8013dd6:	3604      	addne	r6, #4
 8013dd8:	2500      	movs	r5, #0
 8013dda:	1f37      	subs	r7, r6, #4
 8013ddc:	4682      	mov	sl, r0
 8013dde:	4690      	mov	r8, r2
 8013de0:	9301      	str	r3, [sp, #4]
 8013de2:	f846 5c04 	str.w	r5, [r6, #-4]
 8013de6:	46b9      	mov	r9, r7
 8013de8:	463c      	mov	r4, r7
 8013dea:	9502      	str	r5, [sp, #8]
 8013dec:	46ab      	mov	fp, r5
 8013dee:	784a      	ldrb	r2, [r1, #1]
 8013df0:	1c4b      	adds	r3, r1, #1
 8013df2:	9303      	str	r3, [sp, #12]
 8013df4:	b342      	cbz	r2, 8013e48 <__hexnan+0x88>
 8013df6:	4610      	mov	r0, r2
 8013df8:	9105      	str	r1, [sp, #20]
 8013dfa:	9204      	str	r2, [sp, #16]
 8013dfc:	f7ff fd94 	bl	8013928 <__hexdig_fun>
 8013e00:	2800      	cmp	r0, #0
 8013e02:	d151      	bne.n	8013ea8 <__hexnan+0xe8>
 8013e04:	9a04      	ldr	r2, [sp, #16]
 8013e06:	9905      	ldr	r1, [sp, #20]
 8013e08:	2a20      	cmp	r2, #32
 8013e0a:	d818      	bhi.n	8013e3e <__hexnan+0x7e>
 8013e0c:	9b02      	ldr	r3, [sp, #8]
 8013e0e:	459b      	cmp	fp, r3
 8013e10:	dd13      	ble.n	8013e3a <__hexnan+0x7a>
 8013e12:	454c      	cmp	r4, r9
 8013e14:	d206      	bcs.n	8013e24 <__hexnan+0x64>
 8013e16:	2d07      	cmp	r5, #7
 8013e18:	dc04      	bgt.n	8013e24 <__hexnan+0x64>
 8013e1a:	462a      	mov	r2, r5
 8013e1c:	4649      	mov	r1, r9
 8013e1e:	4620      	mov	r0, r4
 8013e20:	f7ff ffa8 	bl	8013d74 <L_shift>
 8013e24:	4544      	cmp	r4, r8
 8013e26:	d952      	bls.n	8013ece <__hexnan+0x10e>
 8013e28:	2300      	movs	r3, #0
 8013e2a:	f1a4 0904 	sub.w	r9, r4, #4
 8013e2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013e32:	f8cd b008 	str.w	fp, [sp, #8]
 8013e36:	464c      	mov	r4, r9
 8013e38:	461d      	mov	r5, r3
 8013e3a:	9903      	ldr	r1, [sp, #12]
 8013e3c:	e7d7      	b.n	8013dee <__hexnan+0x2e>
 8013e3e:	2a29      	cmp	r2, #41	@ 0x29
 8013e40:	d157      	bne.n	8013ef2 <__hexnan+0x132>
 8013e42:	3102      	adds	r1, #2
 8013e44:	f8ca 1000 	str.w	r1, [sl]
 8013e48:	f1bb 0f00 	cmp.w	fp, #0
 8013e4c:	d051      	beq.n	8013ef2 <__hexnan+0x132>
 8013e4e:	454c      	cmp	r4, r9
 8013e50:	d206      	bcs.n	8013e60 <__hexnan+0xa0>
 8013e52:	2d07      	cmp	r5, #7
 8013e54:	dc04      	bgt.n	8013e60 <__hexnan+0xa0>
 8013e56:	462a      	mov	r2, r5
 8013e58:	4649      	mov	r1, r9
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	f7ff ff8a 	bl	8013d74 <L_shift>
 8013e60:	4544      	cmp	r4, r8
 8013e62:	d936      	bls.n	8013ed2 <__hexnan+0x112>
 8013e64:	f1a8 0204 	sub.w	r2, r8, #4
 8013e68:	4623      	mov	r3, r4
 8013e6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8013e6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013e72:	429f      	cmp	r7, r3
 8013e74:	d2f9      	bcs.n	8013e6a <__hexnan+0xaa>
 8013e76:	1b3b      	subs	r3, r7, r4
 8013e78:	f023 0303 	bic.w	r3, r3, #3
 8013e7c:	3304      	adds	r3, #4
 8013e7e:	3401      	adds	r4, #1
 8013e80:	3e03      	subs	r6, #3
 8013e82:	42b4      	cmp	r4, r6
 8013e84:	bf88      	it	hi
 8013e86:	2304      	movhi	r3, #4
 8013e88:	4443      	add	r3, r8
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	f843 2b04 	str.w	r2, [r3], #4
 8013e90:	429f      	cmp	r7, r3
 8013e92:	d2fb      	bcs.n	8013e8c <__hexnan+0xcc>
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	b91b      	cbnz	r3, 8013ea0 <__hexnan+0xe0>
 8013e98:	4547      	cmp	r7, r8
 8013e9a:	d128      	bne.n	8013eee <__hexnan+0x12e>
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	603b      	str	r3, [r7, #0]
 8013ea0:	2005      	movs	r0, #5
 8013ea2:	b007      	add	sp, #28
 8013ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ea8:	3501      	adds	r5, #1
 8013eaa:	2d08      	cmp	r5, #8
 8013eac:	f10b 0b01 	add.w	fp, fp, #1
 8013eb0:	dd06      	ble.n	8013ec0 <__hexnan+0x100>
 8013eb2:	4544      	cmp	r4, r8
 8013eb4:	d9c1      	bls.n	8013e3a <__hexnan+0x7a>
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8013ebc:	2501      	movs	r5, #1
 8013ebe:	3c04      	subs	r4, #4
 8013ec0:	6822      	ldr	r2, [r4, #0]
 8013ec2:	f000 000f 	and.w	r0, r0, #15
 8013ec6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013eca:	6020      	str	r0, [r4, #0]
 8013ecc:	e7b5      	b.n	8013e3a <__hexnan+0x7a>
 8013ece:	2508      	movs	r5, #8
 8013ed0:	e7b3      	b.n	8013e3a <__hexnan+0x7a>
 8013ed2:	9b01      	ldr	r3, [sp, #4]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d0dd      	beq.n	8013e94 <__hexnan+0xd4>
 8013ed8:	f1c3 0320 	rsb	r3, r3, #32
 8013edc:	f04f 32ff 	mov.w	r2, #4294967295
 8013ee0:	40da      	lsrs	r2, r3
 8013ee2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013ee6:	4013      	ands	r3, r2
 8013ee8:	f846 3c04 	str.w	r3, [r6, #-4]
 8013eec:	e7d2      	b.n	8013e94 <__hexnan+0xd4>
 8013eee:	3f04      	subs	r7, #4
 8013ef0:	e7d0      	b.n	8013e94 <__hexnan+0xd4>
 8013ef2:	2004      	movs	r0, #4
 8013ef4:	e7d5      	b.n	8013ea2 <__hexnan+0xe2>

08013ef6 <__ascii_mbtowc>:
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	b901      	cbnz	r1, 8013efc <__ascii_mbtowc+0x6>
 8013efa:	a901      	add	r1, sp, #4
 8013efc:	b142      	cbz	r2, 8013f10 <__ascii_mbtowc+0x1a>
 8013efe:	b14b      	cbz	r3, 8013f14 <__ascii_mbtowc+0x1e>
 8013f00:	7813      	ldrb	r3, [r2, #0]
 8013f02:	600b      	str	r3, [r1, #0]
 8013f04:	7812      	ldrb	r2, [r2, #0]
 8013f06:	1e10      	subs	r0, r2, #0
 8013f08:	bf18      	it	ne
 8013f0a:	2001      	movne	r0, #1
 8013f0c:	b002      	add	sp, #8
 8013f0e:	4770      	bx	lr
 8013f10:	4610      	mov	r0, r2
 8013f12:	e7fb      	b.n	8013f0c <__ascii_mbtowc+0x16>
 8013f14:	f06f 0001 	mvn.w	r0, #1
 8013f18:	e7f8      	b.n	8013f0c <__ascii_mbtowc+0x16>

08013f1a <_realloc_r>:
 8013f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f1e:	4680      	mov	r8, r0
 8013f20:	4615      	mov	r5, r2
 8013f22:	460c      	mov	r4, r1
 8013f24:	b921      	cbnz	r1, 8013f30 <_realloc_r+0x16>
 8013f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f2a:	4611      	mov	r1, r2
 8013f2c:	f7fb bf56 	b.w	800fddc <_malloc_r>
 8013f30:	b92a      	cbnz	r2, 8013f3e <_realloc_r+0x24>
 8013f32:	f7fd feb9 	bl	8011ca8 <_free_r>
 8013f36:	2400      	movs	r4, #0
 8013f38:	4620      	mov	r0, r4
 8013f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f3e:	f000 f840 	bl	8013fc2 <_malloc_usable_size_r>
 8013f42:	4285      	cmp	r5, r0
 8013f44:	4606      	mov	r6, r0
 8013f46:	d802      	bhi.n	8013f4e <_realloc_r+0x34>
 8013f48:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013f4c:	d8f4      	bhi.n	8013f38 <_realloc_r+0x1e>
 8013f4e:	4629      	mov	r1, r5
 8013f50:	4640      	mov	r0, r8
 8013f52:	f7fb ff43 	bl	800fddc <_malloc_r>
 8013f56:	4607      	mov	r7, r0
 8013f58:	2800      	cmp	r0, #0
 8013f5a:	d0ec      	beq.n	8013f36 <_realloc_r+0x1c>
 8013f5c:	42b5      	cmp	r5, r6
 8013f5e:	462a      	mov	r2, r5
 8013f60:	4621      	mov	r1, r4
 8013f62:	bf28      	it	cs
 8013f64:	4632      	movcs	r2, r6
 8013f66:	f7fd f83c 	bl	8010fe2 <memcpy>
 8013f6a:	4621      	mov	r1, r4
 8013f6c:	4640      	mov	r0, r8
 8013f6e:	f7fd fe9b 	bl	8011ca8 <_free_r>
 8013f72:	463c      	mov	r4, r7
 8013f74:	e7e0      	b.n	8013f38 <_realloc_r+0x1e>

08013f76 <__ascii_wctomb>:
 8013f76:	4603      	mov	r3, r0
 8013f78:	4608      	mov	r0, r1
 8013f7a:	b141      	cbz	r1, 8013f8e <__ascii_wctomb+0x18>
 8013f7c:	2aff      	cmp	r2, #255	@ 0xff
 8013f7e:	d904      	bls.n	8013f8a <__ascii_wctomb+0x14>
 8013f80:	228a      	movs	r2, #138	@ 0x8a
 8013f82:	601a      	str	r2, [r3, #0]
 8013f84:	f04f 30ff 	mov.w	r0, #4294967295
 8013f88:	4770      	bx	lr
 8013f8a:	700a      	strb	r2, [r1, #0]
 8013f8c:	2001      	movs	r0, #1
 8013f8e:	4770      	bx	lr

08013f90 <fiprintf>:
 8013f90:	b40e      	push	{r1, r2, r3}
 8013f92:	b503      	push	{r0, r1, lr}
 8013f94:	4601      	mov	r1, r0
 8013f96:	ab03      	add	r3, sp, #12
 8013f98:	4805      	ldr	r0, [pc, #20]	@ (8013fb0 <fiprintf+0x20>)
 8013f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f9e:	6800      	ldr	r0, [r0, #0]
 8013fa0:	9301      	str	r3, [sp, #4]
 8013fa2:	f000 f83f 	bl	8014024 <_vfiprintf_r>
 8013fa6:	b002      	add	sp, #8
 8013fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013fac:	b003      	add	sp, #12
 8013fae:	4770      	bx	lr
 8013fb0:	20000128 	.word	0x20000128

08013fb4 <abort>:
 8013fb4:	b508      	push	{r3, lr}
 8013fb6:	2006      	movs	r0, #6
 8013fb8:	f000 fa08 	bl	80143cc <raise>
 8013fbc:	2001      	movs	r0, #1
 8013fbe:	f7ed fd05 	bl	80019cc <_exit>

08013fc2 <_malloc_usable_size_r>:
 8013fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fc6:	1f18      	subs	r0, r3, #4
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	bfbc      	itt	lt
 8013fcc:	580b      	ldrlt	r3, [r1, r0]
 8013fce:	18c0      	addlt	r0, r0, r3
 8013fd0:	4770      	bx	lr

08013fd2 <__sfputc_r>:
 8013fd2:	6893      	ldr	r3, [r2, #8]
 8013fd4:	3b01      	subs	r3, #1
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	b410      	push	{r4}
 8013fda:	6093      	str	r3, [r2, #8]
 8013fdc:	da08      	bge.n	8013ff0 <__sfputc_r+0x1e>
 8013fde:	6994      	ldr	r4, [r2, #24]
 8013fe0:	42a3      	cmp	r3, r4
 8013fe2:	db01      	blt.n	8013fe8 <__sfputc_r+0x16>
 8013fe4:	290a      	cmp	r1, #10
 8013fe6:	d103      	bne.n	8013ff0 <__sfputc_r+0x1e>
 8013fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fec:	f000 b932 	b.w	8014254 <__swbuf_r>
 8013ff0:	6813      	ldr	r3, [r2, #0]
 8013ff2:	1c58      	adds	r0, r3, #1
 8013ff4:	6010      	str	r0, [r2, #0]
 8013ff6:	7019      	strb	r1, [r3, #0]
 8013ff8:	4608      	mov	r0, r1
 8013ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ffe:	4770      	bx	lr

08014000 <__sfputs_r>:
 8014000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014002:	4606      	mov	r6, r0
 8014004:	460f      	mov	r7, r1
 8014006:	4614      	mov	r4, r2
 8014008:	18d5      	adds	r5, r2, r3
 801400a:	42ac      	cmp	r4, r5
 801400c:	d101      	bne.n	8014012 <__sfputs_r+0x12>
 801400e:	2000      	movs	r0, #0
 8014010:	e007      	b.n	8014022 <__sfputs_r+0x22>
 8014012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014016:	463a      	mov	r2, r7
 8014018:	4630      	mov	r0, r6
 801401a:	f7ff ffda 	bl	8013fd2 <__sfputc_r>
 801401e:	1c43      	adds	r3, r0, #1
 8014020:	d1f3      	bne.n	801400a <__sfputs_r+0xa>
 8014022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014024 <_vfiprintf_r>:
 8014024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014028:	460d      	mov	r5, r1
 801402a:	b09d      	sub	sp, #116	@ 0x74
 801402c:	4614      	mov	r4, r2
 801402e:	4698      	mov	r8, r3
 8014030:	4606      	mov	r6, r0
 8014032:	b118      	cbz	r0, 801403c <_vfiprintf_r+0x18>
 8014034:	6a03      	ldr	r3, [r0, #32]
 8014036:	b90b      	cbnz	r3, 801403c <_vfiprintf_r+0x18>
 8014038:	f7fc fe54 	bl	8010ce4 <__sinit>
 801403c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801403e:	07d9      	lsls	r1, r3, #31
 8014040:	d405      	bmi.n	801404e <_vfiprintf_r+0x2a>
 8014042:	89ab      	ldrh	r3, [r5, #12]
 8014044:	059a      	lsls	r2, r3, #22
 8014046:	d402      	bmi.n	801404e <_vfiprintf_r+0x2a>
 8014048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801404a:	f7fc ffc8 	bl	8010fde <__retarget_lock_acquire_recursive>
 801404e:	89ab      	ldrh	r3, [r5, #12]
 8014050:	071b      	lsls	r3, r3, #28
 8014052:	d501      	bpl.n	8014058 <_vfiprintf_r+0x34>
 8014054:	692b      	ldr	r3, [r5, #16]
 8014056:	b99b      	cbnz	r3, 8014080 <_vfiprintf_r+0x5c>
 8014058:	4629      	mov	r1, r5
 801405a:	4630      	mov	r0, r6
 801405c:	f000 f938 	bl	80142d0 <__swsetup_r>
 8014060:	b170      	cbz	r0, 8014080 <_vfiprintf_r+0x5c>
 8014062:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014064:	07dc      	lsls	r4, r3, #31
 8014066:	d504      	bpl.n	8014072 <_vfiprintf_r+0x4e>
 8014068:	f04f 30ff 	mov.w	r0, #4294967295
 801406c:	b01d      	add	sp, #116	@ 0x74
 801406e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014072:	89ab      	ldrh	r3, [r5, #12]
 8014074:	0598      	lsls	r0, r3, #22
 8014076:	d4f7      	bmi.n	8014068 <_vfiprintf_r+0x44>
 8014078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801407a:	f7fc ffb1 	bl	8010fe0 <__retarget_lock_release_recursive>
 801407e:	e7f3      	b.n	8014068 <_vfiprintf_r+0x44>
 8014080:	2300      	movs	r3, #0
 8014082:	9309      	str	r3, [sp, #36]	@ 0x24
 8014084:	2320      	movs	r3, #32
 8014086:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801408a:	f8cd 800c 	str.w	r8, [sp, #12]
 801408e:	2330      	movs	r3, #48	@ 0x30
 8014090:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014240 <_vfiprintf_r+0x21c>
 8014094:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014098:	f04f 0901 	mov.w	r9, #1
 801409c:	4623      	mov	r3, r4
 801409e:	469a      	mov	sl, r3
 80140a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140a4:	b10a      	cbz	r2, 80140aa <_vfiprintf_r+0x86>
 80140a6:	2a25      	cmp	r2, #37	@ 0x25
 80140a8:	d1f9      	bne.n	801409e <_vfiprintf_r+0x7a>
 80140aa:	ebba 0b04 	subs.w	fp, sl, r4
 80140ae:	d00b      	beq.n	80140c8 <_vfiprintf_r+0xa4>
 80140b0:	465b      	mov	r3, fp
 80140b2:	4622      	mov	r2, r4
 80140b4:	4629      	mov	r1, r5
 80140b6:	4630      	mov	r0, r6
 80140b8:	f7ff ffa2 	bl	8014000 <__sfputs_r>
 80140bc:	3001      	adds	r0, #1
 80140be:	f000 80a7 	beq.w	8014210 <_vfiprintf_r+0x1ec>
 80140c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80140c4:	445a      	add	r2, fp
 80140c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80140c8:	f89a 3000 	ldrb.w	r3, [sl]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	f000 809f 	beq.w	8014210 <_vfiprintf_r+0x1ec>
 80140d2:	2300      	movs	r3, #0
 80140d4:	f04f 32ff 	mov.w	r2, #4294967295
 80140d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140dc:	f10a 0a01 	add.w	sl, sl, #1
 80140e0:	9304      	str	r3, [sp, #16]
 80140e2:	9307      	str	r3, [sp, #28]
 80140e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80140e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80140ea:	4654      	mov	r4, sl
 80140ec:	2205      	movs	r2, #5
 80140ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140f2:	4853      	ldr	r0, [pc, #332]	@ (8014240 <_vfiprintf_r+0x21c>)
 80140f4:	f7ec f88c 	bl	8000210 <memchr>
 80140f8:	9a04      	ldr	r2, [sp, #16]
 80140fa:	b9d8      	cbnz	r0, 8014134 <_vfiprintf_r+0x110>
 80140fc:	06d1      	lsls	r1, r2, #27
 80140fe:	bf44      	itt	mi
 8014100:	2320      	movmi	r3, #32
 8014102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014106:	0713      	lsls	r3, r2, #28
 8014108:	bf44      	itt	mi
 801410a:	232b      	movmi	r3, #43	@ 0x2b
 801410c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014110:	f89a 3000 	ldrb.w	r3, [sl]
 8014114:	2b2a      	cmp	r3, #42	@ 0x2a
 8014116:	d015      	beq.n	8014144 <_vfiprintf_r+0x120>
 8014118:	9a07      	ldr	r2, [sp, #28]
 801411a:	4654      	mov	r4, sl
 801411c:	2000      	movs	r0, #0
 801411e:	f04f 0c0a 	mov.w	ip, #10
 8014122:	4621      	mov	r1, r4
 8014124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014128:	3b30      	subs	r3, #48	@ 0x30
 801412a:	2b09      	cmp	r3, #9
 801412c:	d94b      	bls.n	80141c6 <_vfiprintf_r+0x1a2>
 801412e:	b1b0      	cbz	r0, 801415e <_vfiprintf_r+0x13a>
 8014130:	9207      	str	r2, [sp, #28]
 8014132:	e014      	b.n	801415e <_vfiprintf_r+0x13a>
 8014134:	eba0 0308 	sub.w	r3, r0, r8
 8014138:	fa09 f303 	lsl.w	r3, r9, r3
 801413c:	4313      	orrs	r3, r2
 801413e:	9304      	str	r3, [sp, #16]
 8014140:	46a2      	mov	sl, r4
 8014142:	e7d2      	b.n	80140ea <_vfiprintf_r+0xc6>
 8014144:	9b03      	ldr	r3, [sp, #12]
 8014146:	1d19      	adds	r1, r3, #4
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	9103      	str	r1, [sp, #12]
 801414c:	2b00      	cmp	r3, #0
 801414e:	bfbb      	ittet	lt
 8014150:	425b      	neglt	r3, r3
 8014152:	f042 0202 	orrlt.w	r2, r2, #2
 8014156:	9307      	strge	r3, [sp, #28]
 8014158:	9307      	strlt	r3, [sp, #28]
 801415a:	bfb8      	it	lt
 801415c:	9204      	strlt	r2, [sp, #16]
 801415e:	7823      	ldrb	r3, [r4, #0]
 8014160:	2b2e      	cmp	r3, #46	@ 0x2e
 8014162:	d10a      	bne.n	801417a <_vfiprintf_r+0x156>
 8014164:	7863      	ldrb	r3, [r4, #1]
 8014166:	2b2a      	cmp	r3, #42	@ 0x2a
 8014168:	d132      	bne.n	80141d0 <_vfiprintf_r+0x1ac>
 801416a:	9b03      	ldr	r3, [sp, #12]
 801416c:	1d1a      	adds	r2, r3, #4
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	9203      	str	r2, [sp, #12]
 8014172:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014176:	3402      	adds	r4, #2
 8014178:	9305      	str	r3, [sp, #20]
 801417a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014250 <_vfiprintf_r+0x22c>
 801417e:	7821      	ldrb	r1, [r4, #0]
 8014180:	2203      	movs	r2, #3
 8014182:	4650      	mov	r0, sl
 8014184:	f7ec f844 	bl	8000210 <memchr>
 8014188:	b138      	cbz	r0, 801419a <_vfiprintf_r+0x176>
 801418a:	9b04      	ldr	r3, [sp, #16]
 801418c:	eba0 000a 	sub.w	r0, r0, sl
 8014190:	2240      	movs	r2, #64	@ 0x40
 8014192:	4082      	lsls	r2, r0
 8014194:	4313      	orrs	r3, r2
 8014196:	3401      	adds	r4, #1
 8014198:	9304      	str	r3, [sp, #16]
 801419a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801419e:	4829      	ldr	r0, [pc, #164]	@ (8014244 <_vfiprintf_r+0x220>)
 80141a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80141a4:	2206      	movs	r2, #6
 80141a6:	f7ec f833 	bl	8000210 <memchr>
 80141aa:	2800      	cmp	r0, #0
 80141ac:	d03f      	beq.n	801422e <_vfiprintf_r+0x20a>
 80141ae:	4b26      	ldr	r3, [pc, #152]	@ (8014248 <_vfiprintf_r+0x224>)
 80141b0:	bb1b      	cbnz	r3, 80141fa <_vfiprintf_r+0x1d6>
 80141b2:	9b03      	ldr	r3, [sp, #12]
 80141b4:	3307      	adds	r3, #7
 80141b6:	f023 0307 	bic.w	r3, r3, #7
 80141ba:	3308      	adds	r3, #8
 80141bc:	9303      	str	r3, [sp, #12]
 80141be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141c0:	443b      	add	r3, r7
 80141c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80141c4:	e76a      	b.n	801409c <_vfiprintf_r+0x78>
 80141c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80141ca:	460c      	mov	r4, r1
 80141cc:	2001      	movs	r0, #1
 80141ce:	e7a8      	b.n	8014122 <_vfiprintf_r+0xfe>
 80141d0:	2300      	movs	r3, #0
 80141d2:	3401      	adds	r4, #1
 80141d4:	9305      	str	r3, [sp, #20]
 80141d6:	4619      	mov	r1, r3
 80141d8:	f04f 0c0a 	mov.w	ip, #10
 80141dc:	4620      	mov	r0, r4
 80141de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141e2:	3a30      	subs	r2, #48	@ 0x30
 80141e4:	2a09      	cmp	r2, #9
 80141e6:	d903      	bls.n	80141f0 <_vfiprintf_r+0x1cc>
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d0c6      	beq.n	801417a <_vfiprintf_r+0x156>
 80141ec:	9105      	str	r1, [sp, #20]
 80141ee:	e7c4      	b.n	801417a <_vfiprintf_r+0x156>
 80141f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80141f4:	4604      	mov	r4, r0
 80141f6:	2301      	movs	r3, #1
 80141f8:	e7f0      	b.n	80141dc <_vfiprintf_r+0x1b8>
 80141fa:	ab03      	add	r3, sp, #12
 80141fc:	9300      	str	r3, [sp, #0]
 80141fe:	462a      	mov	r2, r5
 8014200:	4b12      	ldr	r3, [pc, #72]	@ (801424c <_vfiprintf_r+0x228>)
 8014202:	a904      	add	r1, sp, #16
 8014204:	4630      	mov	r0, r6
 8014206:	f7fb ff15 	bl	8010034 <_printf_float>
 801420a:	4607      	mov	r7, r0
 801420c:	1c78      	adds	r0, r7, #1
 801420e:	d1d6      	bne.n	80141be <_vfiprintf_r+0x19a>
 8014210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014212:	07d9      	lsls	r1, r3, #31
 8014214:	d405      	bmi.n	8014222 <_vfiprintf_r+0x1fe>
 8014216:	89ab      	ldrh	r3, [r5, #12]
 8014218:	059a      	lsls	r2, r3, #22
 801421a:	d402      	bmi.n	8014222 <_vfiprintf_r+0x1fe>
 801421c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801421e:	f7fc fedf 	bl	8010fe0 <__retarget_lock_release_recursive>
 8014222:	89ab      	ldrh	r3, [r5, #12]
 8014224:	065b      	lsls	r3, r3, #25
 8014226:	f53f af1f 	bmi.w	8014068 <_vfiprintf_r+0x44>
 801422a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801422c:	e71e      	b.n	801406c <_vfiprintf_r+0x48>
 801422e:	ab03      	add	r3, sp, #12
 8014230:	9300      	str	r3, [sp, #0]
 8014232:	462a      	mov	r2, r5
 8014234:	4b05      	ldr	r3, [pc, #20]	@ (801424c <_vfiprintf_r+0x228>)
 8014236:	a904      	add	r1, sp, #16
 8014238:	4630      	mov	r0, r6
 801423a:	f7fc f993 	bl	8010564 <_printf_i>
 801423e:	e7e4      	b.n	801420a <_vfiprintf_r+0x1e6>
 8014240:	08014ba1 	.word	0x08014ba1
 8014244:	08014bab 	.word	0x08014bab
 8014248:	08010035 	.word	0x08010035
 801424c:	08014001 	.word	0x08014001
 8014250:	08014ba7 	.word	0x08014ba7

08014254 <__swbuf_r>:
 8014254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014256:	460e      	mov	r6, r1
 8014258:	4614      	mov	r4, r2
 801425a:	4605      	mov	r5, r0
 801425c:	b118      	cbz	r0, 8014266 <__swbuf_r+0x12>
 801425e:	6a03      	ldr	r3, [r0, #32]
 8014260:	b90b      	cbnz	r3, 8014266 <__swbuf_r+0x12>
 8014262:	f7fc fd3f 	bl	8010ce4 <__sinit>
 8014266:	69a3      	ldr	r3, [r4, #24]
 8014268:	60a3      	str	r3, [r4, #8]
 801426a:	89a3      	ldrh	r3, [r4, #12]
 801426c:	071a      	lsls	r2, r3, #28
 801426e:	d501      	bpl.n	8014274 <__swbuf_r+0x20>
 8014270:	6923      	ldr	r3, [r4, #16]
 8014272:	b943      	cbnz	r3, 8014286 <__swbuf_r+0x32>
 8014274:	4621      	mov	r1, r4
 8014276:	4628      	mov	r0, r5
 8014278:	f000 f82a 	bl	80142d0 <__swsetup_r>
 801427c:	b118      	cbz	r0, 8014286 <__swbuf_r+0x32>
 801427e:	f04f 37ff 	mov.w	r7, #4294967295
 8014282:	4638      	mov	r0, r7
 8014284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014286:	6823      	ldr	r3, [r4, #0]
 8014288:	6922      	ldr	r2, [r4, #16]
 801428a:	1a98      	subs	r0, r3, r2
 801428c:	6963      	ldr	r3, [r4, #20]
 801428e:	b2f6      	uxtb	r6, r6
 8014290:	4283      	cmp	r3, r0
 8014292:	4637      	mov	r7, r6
 8014294:	dc05      	bgt.n	80142a2 <__swbuf_r+0x4e>
 8014296:	4621      	mov	r1, r4
 8014298:	4628      	mov	r0, r5
 801429a:	f7ff fa63 	bl	8013764 <_fflush_r>
 801429e:	2800      	cmp	r0, #0
 80142a0:	d1ed      	bne.n	801427e <__swbuf_r+0x2a>
 80142a2:	68a3      	ldr	r3, [r4, #8]
 80142a4:	3b01      	subs	r3, #1
 80142a6:	60a3      	str	r3, [r4, #8]
 80142a8:	6823      	ldr	r3, [r4, #0]
 80142aa:	1c5a      	adds	r2, r3, #1
 80142ac:	6022      	str	r2, [r4, #0]
 80142ae:	701e      	strb	r6, [r3, #0]
 80142b0:	6962      	ldr	r2, [r4, #20]
 80142b2:	1c43      	adds	r3, r0, #1
 80142b4:	429a      	cmp	r2, r3
 80142b6:	d004      	beq.n	80142c2 <__swbuf_r+0x6e>
 80142b8:	89a3      	ldrh	r3, [r4, #12]
 80142ba:	07db      	lsls	r3, r3, #31
 80142bc:	d5e1      	bpl.n	8014282 <__swbuf_r+0x2e>
 80142be:	2e0a      	cmp	r6, #10
 80142c0:	d1df      	bne.n	8014282 <__swbuf_r+0x2e>
 80142c2:	4621      	mov	r1, r4
 80142c4:	4628      	mov	r0, r5
 80142c6:	f7ff fa4d 	bl	8013764 <_fflush_r>
 80142ca:	2800      	cmp	r0, #0
 80142cc:	d0d9      	beq.n	8014282 <__swbuf_r+0x2e>
 80142ce:	e7d6      	b.n	801427e <__swbuf_r+0x2a>

080142d0 <__swsetup_r>:
 80142d0:	b538      	push	{r3, r4, r5, lr}
 80142d2:	4b29      	ldr	r3, [pc, #164]	@ (8014378 <__swsetup_r+0xa8>)
 80142d4:	4605      	mov	r5, r0
 80142d6:	6818      	ldr	r0, [r3, #0]
 80142d8:	460c      	mov	r4, r1
 80142da:	b118      	cbz	r0, 80142e4 <__swsetup_r+0x14>
 80142dc:	6a03      	ldr	r3, [r0, #32]
 80142de:	b90b      	cbnz	r3, 80142e4 <__swsetup_r+0x14>
 80142e0:	f7fc fd00 	bl	8010ce4 <__sinit>
 80142e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142e8:	0719      	lsls	r1, r3, #28
 80142ea:	d422      	bmi.n	8014332 <__swsetup_r+0x62>
 80142ec:	06da      	lsls	r2, r3, #27
 80142ee:	d407      	bmi.n	8014300 <__swsetup_r+0x30>
 80142f0:	2209      	movs	r2, #9
 80142f2:	602a      	str	r2, [r5, #0]
 80142f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142f8:	81a3      	strh	r3, [r4, #12]
 80142fa:	f04f 30ff 	mov.w	r0, #4294967295
 80142fe:	e033      	b.n	8014368 <__swsetup_r+0x98>
 8014300:	0758      	lsls	r0, r3, #29
 8014302:	d512      	bpl.n	801432a <__swsetup_r+0x5a>
 8014304:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014306:	b141      	cbz	r1, 801431a <__swsetup_r+0x4a>
 8014308:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801430c:	4299      	cmp	r1, r3
 801430e:	d002      	beq.n	8014316 <__swsetup_r+0x46>
 8014310:	4628      	mov	r0, r5
 8014312:	f7fd fcc9 	bl	8011ca8 <_free_r>
 8014316:	2300      	movs	r3, #0
 8014318:	6363      	str	r3, [r4, #52]	@ 0x34
 801431a:	89a3      	ldrh	r3, [r4, #12]
 801431c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014320:	81a3      	strh	r3, [r4, #12]
 8014322:	2300      	movs	r3, #0
 8014324:	6063      	str	r3, [r4, #4]
 8014326:	6923      	ldr	r3, [r4, #16]
 8014328:	6023      	str	r3, [r4, #0]
 801432a:	89a3      	ldrh	r3, [r4, #12]
 801432c:	f043 0308 	orr.w	r3, r3, #8
 8014330:	81a3      	strh	r3, [r4, #12]
 8014332:	6923      	ldr	r3, [r4, #16]
 8014334:	b94b      	cbnz	r3, 801434a <__swsetup_r+0x7a>
 8014336:	89a3      	ldrh	r3, [r4, #12]
 8014338:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801433c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014340:	d003      	beq.n	801434a <__swsetup_r+0x7a>
 8014342:	4621      	mov	r1, r4
 8014344:	4628      	mov	r0, r5
 8014346:	f000 f883 	bl	8014450 <__smakebuf_r>
 801434a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801434e:	f013 0201 	ands.w	r2, r3, #1
 8014352:	d00a      	beq.n	801436a <__swsetup_r+0x9a>
 8014354:	2200      	movs	r2, #0
 8014356:	60a2      	str	r2, [r4, #8]
 8014358:	6962      	ldr	r2, [r4, #20]
 801435a:	4252      	negs	r2, r2
 801435c:	61a2      	str	r2, [r4, #24]
 801435e:	6922      	ldr	r2, [r4, #16]
 8014360:	b942      	cbnz	r2, 8014374 <__swsetup_r+0xa4>
 8014362:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014366:	d1c5      	bne.n	80142f4 <__swsetup_r+0x24>
 8014368:	bd38      	pop	{r3, r4, r5, pc}
 801436a:	0799      	lsls	r1, r3, #30
 801436c:	bf58      	it	pl
 801436e:	6962      	ldrpl	r2, [r4, #20]
 8014370:	60a2      	str	r2, [r4, #8]
 8014372:	e7f4      	b.n	801435e <__swsetup_r+0x8e>
 8014374:	2000      	movs	r0, #0
 8014376:	e7f7      	b.n	8014368 <__swsetup_r+0x98>
 8014378:	20000128 	.word	0x20000128

0801437c <_raise_r>:
 801437c:	291f      	cmp	r1, #31
 801437e:	b538      	push	{r3, r4, r5, lr}
 8014380:	4605      	mov	r5, r0
 8014382:	460c      	mov	r4, r1
 8014384:	d904      	bls.n	8014390 <_raise_r+0x14>
 8014386:	2316      	movs	r3, #22
 8014388:	6003      	str	r3, [r0, #0]
 801438a:	f04f 30ff 	mov.w	r0, #4294967295
 801438e:	bd38      	pop	{r3, r4, r5, pc}
 8014390:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014392:	b112      	cbz	r2, 801439a <_raise_r+0x1e>
 8014394:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014398:	b94b      	cbnz	r3, 80143ae <_raise_r+0x32>
 801439a:	4628      	mov	r0, r5
 801439c:	f000 f830 	bl	8014400 <_getpid_r>
 80143a0:	4622      	mov	r2, r4
 80143a2:	4601      	mov	r1, r0
 80143a4:	4628      	mov	r0, r5
 80143a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80143aa:	f000 b817 	b.w	80143dc <_kill_r>
 80143ae:	2b01      	cmp	r3, #1
 80143b0:	d00a      	beq.n	80143c8 <_raise_r+0x4c>
 80143b2:	1c59      	adds	r1, r3, #1
 80143b4:	d103      	bne.n	80143be <_raise_r+0x42>
 80143b6:	2316      	movs	r3, #22
 80143b8:	6003      	str	r3, [r0, #0]
 80143ba:	2001      	movs	r0, #1
 80143bc:	e7e7      	b.n	801438e <_raise_r+0x12>
 80143be:	2100      	movs	r1, #0
 80143c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80143c4:	4620      	mov	r0, r4
 80143c6:	4798      	blx	r3
 80143c8:	2000      	movs	r0, #0
 80143ca:	e7e0      	b.n	801438e <_raise_r+0x12>

080143cc <raise>:
 80143cc:	4b02      	ldr	r3, [pc, #8]	@ (80143d8 <raise+0xc>)
 80143ce:	4601      	mov	r1, r0
 80143d0:	6818      	ldr	r0, [r3, #0]
 80143d2:	f7ff bfd3 	b.w	801437c <_raise_r>
 80143d6:	bf00      	nop
 80143d8:	20000128 	.word	0x20000128

080143dc <_kill_r>:
 80143dc:	b538      	push	{r3, r4, r5, lr}
 80143de:	4d07      	ldr	r5, [pc, #28]	@ (80143fc <_kill_r+0x20>)
 80143e0:	2300      	movs	r3, #0
 80143e2:	4604      	mov	r4, r0
 80143e4:	4608      	mov	r0, r1
 80143e6:	4611      	mov	r1, r2
 80143e8:	602b      	str	r3, [r5, #0]
 80143ea:	f7ed fadf 	bl	80019ac <_kill>
 80143ee:	1c43      	adds	r3, r0, #1
 80143f0:	d102      	bne.n	80143f8 <_kill_r+0x1c>
 80143f2:	682b      	ldr	r3, [r5, #0]
 80143f4:	b103      	cbz	r3, 80143f8 <_kill_r+0x1c>
 80143f6:	6023      	str	r3, [r4, #0]
 80143f8:	bd38      	pop	{r3, r4, r5, pc}
 80143fa:	bf00      	nop
 80143fc:	20006610 	.word	0x20006610

08014400 <_getpid_r>:
 8014400:	f7ed bacc 	b.w	800199c <_getpid>

08014404 <__swhatbuf_r>:
 8014404:	b570      	push	{r4, r5, r6, lr}
 8014406:	460c      	mov	r4, r1
 8014408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801440c:	2900      	cmp	r1, #0
 801440e:	b096      	sub	sp, #88	@ 0x58
 8014410:	4615      	mov	r5, r2
 8014412:	461e      	mov	r6, r3
 8014414:	da0d      	bge.n	8014432 <__swhatbuf_r+0x2e>
 8014416:	89a3      	ldrh	r3, [r4, #12]
 8014418:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801441c:	f04f 0100 	mov.w	r1, #0
 8014420:	bf14      	ite	ne
 8014422:	2340      	movne	r3, #64	@ 0x40
 8014424:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014428:	2000      	movs	r0, #0
 801442a:	6031      	str	r1, [r6, #0]
 801442c:	602b      	str	r3, [r5, #0]
 801442e:	b016      	add	sp, #88	@ 0x58
 8014430:	bd70      	pop	{r4, r5, r6, pc}
 8014432:	466a      	mov	r2, sp
 8014434:	f000 f848 	bl	80144c8 <_fstat_r>
 8014438:	2800      	cmp	r0, #0
 801443a:	dbec      	blt.n	8014416 <__swhatbuf_r+0x12>
 801443c:	9901      	ldr	r1, [sp, #4]
 801443e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014442:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014446:	4259      	negs	r1, r3
 8014448:	4159      	adcs	r1, r3
 801444a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801444e:	e7eb      	b.n	8014428 <__swhatbuf_r+0x24>

08014450 <__smakebuf_r>:
 8014450:	898b      	ldrh	r3, [r1, #12]
 8014452:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014454:	079d      	lsls	r5, r3, #30
 8014456:	4606      	mov	r6, r0
 8014458:	460c      	mov	r4, r1
 801445a:	d507      	bpl.n	801446c <__smakebuf_r+0x1c>
 801445c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014460:	6023      	str	r3, [r4, #0]
 8014462:	6123      	str	r3, [r4, #16]
 8014464:	2301      	movs	r3, #1
 8014466:	6163      	str	r3, [r4, #20]
 8014468:	b003      	add	sp, #12
 801446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801446c:	ab01      	add	r3, sp, #4
 801446e:	466a      	mov	r2, sp
 8014470:	f7ff ffc8 	bl	8014404 <__swhatbuf_r>
 8014474:	9f00      	ldr	r7, [sp, #0]
 8014476:	4605      	mov	r5, r0
 8014478:	4639      	mov	r1, r7
 801447a:	4630      	mov	r0, r6
 801447c:	f7fb fcae 	bl	800fddc <_malloc_r>
 8014480:	b948      	cbnz	r0, 8014496 <__smakebuf_r+0x46>
 8014482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014486:	059a      	lsls	r2, r3, #22
 8014488:	d4ee      	bmi.n	8014468 <__smakebuf_r+0x18>
 801448a:	f023 0303 	bic.w	r3, r3, #3
 801448e:	f043 0302 	orr.w	r3, r3, #2
 8014492:	81a3      	strh	r3, [r4, #12]
 8014494:	e7e2      	b.n	801445c <__smakebuf_r+0xc>
 8014496:	89a3      	ldrh	r3, [r4, #12]
 8014498:	6020      	str	r0, [r4, #0]
 801449a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801449e:	81a3      	strh	r3, [r4, #12]
 80144a0:	9b01      	ldr	r3, [sp, #4]
 80144a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80144a6:	b15b      	cbz	r3, 80144c0 <__smakebuf_r+0x70>
 80144a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80144ac:	4630      	mov	r0, r6
 80144ae:	f000 f81d 	bl	80144ec <_isatty_r>
 80144b2:	b128      	cbz	r0, 80144c0 <__smakebuf_r+0x70>
 80144b4:	89a3      	ldrh	r3, [r4, #12]
 80144b6:	f023 0303 	bic.w	r3, r3, #3
 80144ba:	f043 0301 	orr.w	r3, r3, #1
 80144be:	81a3      	strh	r3, [r4, #12]
 80144c0:	89a3      	ldrh	r3, [r4, #12]
 80144c2:	431d      	orrs	r5, r3
 80144c4:	81a5      	strh	r5, [r4, #12]
 80144c6:	e7cf      	b.n	8014468 <__smakebuf_r+0x18>

080144c8 <_fstat_r>:
 80144c8:	b538      	push	{r3, r4, r5, lr}
 80144ca:	4d07      	ldr	r5, [pc, #28]	@ (80144e8 <_fstat_r+0x20>)
 80144cc:	2300      	movs	r3, #0
 80144ce:	4604      	mov	r4, r0
 80144d0:	4608      	mov	r0, r1
 80144d2:	4611      	mov	r1, r2
 80144d4:	602b      	str	r3, [r5, #0]
 80144d6:	f7ed fac9 	bl	8001a6c <_fstat>
 80144da:	1c43      	adds	r3, r0, #1
 80144dc:	d102      	bne.n	80144e4 <_fstat_r+0x1c>
 80144de:	682b      	ldr	r3, [r5, #0]
 80144e0:	b103      	cbz	r3, 80144e4 <_fstat_r+0x1c>
 80144e2:	6023      	str	r3, [r4, #0]
 80144e4:	bd38      	pop	{r3, r4, r5, pc}
 80144e6:	bf00      	nop
 80144e8:	20006610 	.word	0x20006610

080144ec <_isatty_r>:
 80144ec:	b538      	push	{r3, r4, r5, lr}
 80144ee:	4d06      	ldr	r5, [pc, #24]	@ (8014508 <_isatty_r+0x1c>)
 80144f0:	2300      	movs	r3, #0
 80144f2:	4604      	mov	r4, r0
 80144f4:	4608      	mov	r0, r1
 80144f6:	602b      	str	r3, [r5, #0]
 80144f8:	f7ed fac8 	bl	8001a8c <_isatty>
 80144fc:	1c43      	adds	r3, r0, #1
 80144fe:	d102      	bne.n	8014506 <_isatty_r+0x1a>
 8014500:	682b      	ldr	r3, [r5, #0]
 8014502:	b103      	cbz	r3, 8014506 <_isatty_r+0x1a>
 8014504:	6023      	str	r3, [r4, #0]
 8014506:	bd38      	pop	{r3, r4, r5, pc}
 8014508:	20006610 	.word	0x20006610

0801450c <_init>:
 801450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801450e:	bf00      	nop
 8014510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014512:	bc08      	pop	{r3}
 8014514:	469e      	mov	lr, r3
 8014516:	4770      	bx	lr

08014518 <_fini>:
 8014518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801451a:	bf00      	nop
 801451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801451e:	bc08      	pop	{r3}
 8014520:	469e      	mov	lr, r3
 8014522:	4770      	bx	lr
