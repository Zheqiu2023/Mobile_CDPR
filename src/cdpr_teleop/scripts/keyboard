#!/usr/bin/env python
# coding:utf-8

import rospy

from geometry_msgs.msg import Twist

import sys
import select
import termios
import tty

msg = """
Control Your CDPR!
---------------------------
Moving around:
   q    w    e
   a    s    d
   z    x    c

u/j : increase/decrease max speeds by 10%
i/k : increase/decrease only linear speed by 10%
o/l : increase/decrease only angular speed by 10%
space key, s : force stop
anything else : stop smoothly

CTRL-C to quit
"""

moveBindings = {
    'w': (1, 0),
    'e': (1, -1),
    'a': (0, 1),
    'd': (0, -1),
    'q': (1, 1),
    'x': (-1, 0),
    'c': (-1, 1),
    'z': (-1, -1),
}

speedBindings = {
    'u': (1.1, 1.1),
    'j': (.9, .9),
    'i': (1.1, 1),
    'k': (.9, 1),
    'o': (1, 1.1),
    'l': (1, .9),
}


def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key


def vels(speed, turn):
    return "currently:\tspeed %.3f \tturn %.3f " % (speed, turn)


def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min(input, output + slop)
    elif input < output:
        output = max(input, output - slop)
    else:
        output = input

    return output


def constrain(input, low, high):
    if input < low:
        input = low
    elif input > high:
        input = high
    else:
        input = input

    return input


if __name__ == "__main__":
    settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('cdpr_keyboard_teleop')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=5)

    speed = rospy.get_param("~speed", 0.2)
    turn = rospy.get_param("~turn", 1.0)
    speed_acc = rospy.get_param("~speed_acc", 0.02)
    turn_acc = rospy.get_param("~turn_acc", 0.1)
    max_speed = rospy.get_param("~max_speed", 10)
    max_turn = rospy.get_param("~max_turn", 10)

    x = 0
    th = 0
    status = 0
    count = 0
    acc = 0.1
    target_speed = 0
    target_turn = 0
    control_speed = 0
    control_turn = 0
    try:
        print(msg)
        print(vels(speed, turn))
        print("max:\tspeed %s \tturn %s " % (max_speed, max_turn))
        while not rospy.is_shutdown():
            key = getKey()
            if key in moveBindings.keys():
                x = moveBindings[key][0]
                th = moveBindings[key][1]
                count = 0
            elif key in speedBindings.keys():
                speed = speed * speedBindings[key][0]
                turn = turn * speedBindings[key][1]
                count = 0
                if speed > max_speed:
                    print(
                        "max linear velocity is %s, stop increasing linear velocity!" % (max_speed))
                    speed = max_speed
                if turn > max_turn:
                    print(
                        "max angular velocity is %s, stop increasing angular velocity!" % (max_turn))
                    turn = max_turn

                print(vels(speed, turn))
                if (status == 14):
                    print(msg)
                status = (status + 1) % 15
            elif key == ' ' or key == 's':
                x = 0
                th = 0
                control_speed = 0
                control_turn = 0
            else:
                count = count + 1
                if count > 4:
                    x = 0
                    th = 0
                if (key == '\x03'):
                    break

            # 限速
            target_speed = constrain(
                speed * x, -max_speed, max_speed)
            target_turn = constrain(
                turn * th, -max_turn, max_turn)

            # 速度平滑：当前速度小于目标速度时，当前速度递增，直至相等；当前速度大于目标速度时，当前速度递减，直至相等
            control_speed = makeSimpleProfile(
                control_speed, target_speed, speed_acc)
            control_turn = makeSimpleProfile(
                control_turn, target_turn, turn_acc)

            twist = Twist()
            twist.linear.x = control_speed
            twist.linear.y = 0
            twist.linear.z = 0
            twist.angular.x = 0
            twist.angular.y = 0
            twist.angular.z = control_turn
            pub.publish(twist)

    except Exception as e:
        print(e)

    finally:
        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        pub.publish(twist)

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
